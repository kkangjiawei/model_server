{"remainingRequest":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/src/utils/3Dmol-min.js","dependencies":[{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/src/utils/3Dmol-min.js","mtime":1677393080846},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/babel.config.js","mtime":1677293736750},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js","mtime":1677293886978},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":1677293894163}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9nZXQgPSByZXF1aXJlKCIvVXNlcnMvYTEvRGVza3RvcC9jb2RlL2dvbGFuZy9zcmMvdnVlLWVsZW1lbnQtYWRtaW4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXBsdWdpbi1iYWJlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXQuanMiKS5kZWZhdWx0Owp2YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgiL1VzZXJzL2ExL0Rlc2t0b3AvY29kZS9nb2xhbmcvc3JjL3Z1ZS1lbGVtZW50LWFkbWluL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1wbHVnaW4tYmFiZWwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiKS5kZWZhdWx0Owp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSByZXF1aXJlKCIvVXNlcnMvYTEvRGVza3RvcC9jb2RlL2dvbGFuZy9zcmMvdnVlLWVsZW1lbnQtYWRtaW4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXBsdWdpbi1iYWJlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIikuZGVmYXVsdDsKdmFyIF9pbmhlcml0cyA9IHJlcXVpcmUoIi9Vc2Vycy9hMS9EZXNrdG9wL2NvZGUvZ29sYW5nL3NyYy92dWUtZWxlbWVudC1hZG1pbi9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktcGx1Z2luLWJhYmVsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIikuZGVmYXVsdDsKdmFyIF9jcmVhdGVTdXBlciA9IHJlcXVpcmUoIi9Vc2Vycy9hMS9EZXNrdG9wL2NvZGUvZ29sYW5nL3NyYy92dWUtZWxlbWVudC1hZG1pbi9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktcGx1Z2luLWJhYmVsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZVN1cGVyLmpzIikuZGVmYXVsdDsKdmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyID0gcmVxdWlyZSgiL1VzZXJzL2ExL0Rlc2t0b3AvY29kZS9nb2xhbmcvc3JjL3Z1ZS1lbGVtZW50LWFkbWluL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1wbHVnaW4tYmFiZWwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyIpLmRlZmF1bHQ7CnZhciBfY2xhc3NDYWxsQ2hlY2sgPSByZXF1aXJlKCIvVXNlcnMvYTEvRGVza3RvcC9jb2RlL2dvbGFuZy9zcmMvdnVlLWVsZW1lbnQtYWRtaW4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXBsdWdpbi1iYWJlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIpLmRlZmF1bHQ7CnZhciBfY3JlYXRlQ2xhc3MgPSByZXF1aXJlKCIvVXNlcnMvYTEvRGVza3RvcC9jb2RlL2dvbGFuZy9zcmMvdnVlLWVsZW1lbnQtYWRtaW4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXBsdWdpbi1iYWJlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIpLmRlZmF1bHQ7CnZhciBfdHlwZW9mID0gcmVxdWlyZSgiL1VzZXJzL2ExL0Rlc2t0b3AvY29kZS9nb2xhbmcvc3JjL3Z1ZS1lbGVtZW50LWFkbWluL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1wbHVnaW4tYmFiZWwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIikuZGVmYXVsdDsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5pcy12aWV3LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ib2xkLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanMiKTsKLyohIEZvciBsaWNlbnNlIGluZm9ybWF0aW9uIHBsZWFzZSBzZWUgM0Rtb2wtbWluLmpzLkxJQ0VOU0UudHh0ICovCiFmdW5jdGlvbiAoZSwgdCkgewogICJvYmplY3QiID09ICh0eXBlb2YgZXhwb3J0cyA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoZXhwb3J0cykpICYmICJvYmplY3QiID09ICh0eXBlb2YgbW9kdWxlID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihtb2R1bGUpKSA/IG1vZHVsZS5leHBvcnRzID0gdCgpIDogImZ1bmN0aW9uIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoW10sIHQpIDogIm9iamVjdCIgPT0gKHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihleHBvcnRzKSkgPyBleHBvcnRzWyIzRG1vbCJdID0gdCgpIDogZVsiM0Rtb2wiXSA9IHQoKTsKfSh0aGlzLCBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gewogICAgICAgIDczOTY6IGZ1bmN0aW9uIF8oKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLlRleHRFbmNvZGVyICYmIGUuVGV4dERlY29kZXIpIHJldHVybiAhMTsKICAgICAgICAgICAgZnVuY3Rpb24gdCgpIHsKICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogInV0Zi04IjsKICAgICAgICAgICAgICBpZiAoInV0Zi04IiAhPT0gZSkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1RleHRFbmNvZGVyJzogVGhlIGVuY29kaW5nIGxhYmVsIHByb3ZpZGVkICgnIi5jb25jYXQoZSwgIicpIGlzIGludmFsaWQuIikpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHIoKSB7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICJ1dGYtOCI7CiAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsKICAgICAgICAgICAgICAgIGZhdGFsOiAhMQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgaWYgKCJ1dGYtOCIgIT09IGUpIHRocm93IG5ldyBSYW5nZUVycm9yKCJGYWlsZWQgdG8gY29uc3RydWN0ICdUZXh0RGVjb2Rlcic6IFRoZSBlbmNvZGluZyBsYWJlbCBwcm92aWRlZCAoJyIuY29uY2F0KGUsICInKSBpcyBpbnZhbGlkLiIpKTsKICAgICAgICAgICAgICBpZiAodC5mYXRhbCkgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gY29uc3RydWN0ICdUZXh0RGVjb2Rlcic6IHRoZSAnZmF0YWwnIG9wdGlvbiBpcyB1bnN1cHBvcnRlZC4iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsICJlbmNvZGluZyIsIHsKICAgICAgICAgICAgICB2YWx1ZTogInV0Zi04IgogICAgICAgICAgICB9KSwgdC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogewogICAgICAgICAgICAgICAgc3RyZWFtOiAhMQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgaWYgKHQuc3RyZWFtKSB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBlbmNvZGU6IHRoZSAnc3RyZWFtJyBvcHRpb24gaXMgdW5zdXBwb3J0ZWQuIik7CiAgICAgICAgICAgICAgdmFyIHIgPSAwOwogICAgICAgICAgICAgIHZhciBzID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgdmFyIGEgPSAwLAogICAgICAgICAgICAgICAgbiA9IE1hdGgubWF4KDMyLCBzICsgKHMgPj4gMSkgKyA3KSwKICAgICAgICAgICAgICAgIG8gPSBuZXcgVWludDhBcnJheShuID4+IDMgPDwgMyk7CiAgICAgICAgICAgICAgZm9yICg7IHIgPCBzOykgewogICAgICAgICAgICAgICAgdmFyIF90MiA9IGUuY2hhckNvZGVBdChyKyspOwogICAgICAgICAgICAgICAgaWYgKF90MiA+PSA1NTI5NiAmJiBfdDIgPD0gNTYzMTkpIHsKICAgICAgICAgICAgICAgICAgaWYgKHIgPCBzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9zID0gZS5jaGFyQ29kZUF0KHIpOwogICAgICAgICAgICAgICAgICAgIDU2MzIwID09ICg2NDUxMiAmIF9zKSAmJiAoKytyLCBfdDIgPSAoKDEwMjMgJiBfdDIpIDw8IDEwKSArICgxMDIzICYgX3MpICsgNjU1MzYpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfdDIgPj0gNTUyOTYgJiYgX3QyIDw9IDU2MzE5KSBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChhICsgNCA+IG8ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIG4gKz0gOCwgbiAqPSAxICsgciAvIGUubGVuZ3RoICogMiwgbiA9IG4gPj4gMyA8PCAzOwogICAgICAgICAgICAgICAgICB2YXIgX3QzID0gbmV3IFVpbnQ4QXJyYXkobik7CiAgICAgICAgICAgICAgICAgIF90My5zZXQobyksIG8gPSBfdDM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMCAhPSAoNDI5NDk2NzE2OCAmIF90MikpIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gKDQyOTQ5NjUyNDggJiBfdDIpKSBvW2ErK10gPSBfdDIgPj4gNiAmIDMxIHwgMTkyO2Vsc2UgaWYgKDAgPT0gKDQyOTQ5MDE3NjAgJiBfdDIpKSBvW2ErK10gPSBfdDIgPj4gMTIgJiAxNSB8IDIyNCwgb1thKytdID0gX3QyID4+IDYgJiA2MyB8IDEyODtlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCAhPSAoNDI5Mjg3MDE0NCAmIF90MikpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIG9bYSsrXSA9IF90MiA+PiAxOCAmIDcgfCAyNDAsIG9bYSsrXSA9IF90MiA+PiAxMiAmIDYzIHwgMTI4LCBvW2ErK10gPSBfdDIgPj4gNiAmIDYzIHwgMTI4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIG9bYSsrXSA9IDYzICYgX3QyIHwgMTI4OwogICAgICAgICAgICAgICAgfSBlbHNlIG9bYSsrXSA9IF90MjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIG8uc2xpY2UoMCwgYSk7CiAgICAgICAgICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSwgImVuY29kaW5nIiwgewogICAgICAgICAgICAgIHZhbHVlOiAidXRmLTgiCiAgICAgICAgICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsICJmYXRhbCIsIHsKICAgICAgICAgICAgICB2YWx1ZTogITEKICAgICAgICAgICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSwgImlnbm9yZUJPTSIsIHsKICAgICAgICAgICAgICB2YWx1ZTogITEKICAgICAgICAgICAgfSksIHIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsKICAgICAgICAgICAgICAgIHN0cmVhbTogITEKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGlmICh0LnN0cmVhbSkgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gZGVjb2RlOiB0aGUgJ3N0cmVhbScgb3B0aW9uIGlzIHVuc3VwcG9ydGVkLiIpOwogICAgICAgICAgICAgIHZhciByID0gbmV3IFVpbnQ4QXJyYXkoZSk7CiAgICAgICAgICAgICAgdmFyIHMgPSAwOwogICAgICAgICAgICAgIHZhciBhID0gci5sZW5ndGgsCiAgICAgICAgICAgICAgICBuID0gW107CiAgICAgICAgICAgICAgZm9yICg7IHMgPCBhOykgewogICAgICAgICAgICAgICAgdmFyIF9lMiA9IHJbcysrXTsKICAgICAgICAgICAgICAgIGlmICgwID09PSBfZTIpIGJyZWFrOwogICAgICAgICAgICAgICAgaWYgKDAgPT0gKDEyOCAmIF9lMikpIG4ucHVzaChfZTIpO2Vsc2UgaWYgKDE5MiA9PSAoMjI0ICYgX2UyKSkgewogICAgICAgICAgICAgICAgICB2YXIgX3Q0ID0gNjMgJiByW3MrK107CiAgICAgICAgICAgICAgICAgIG4ucHVzaCgoMzEgJiBfZTIpIDw8IDYgfCBfdDQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgyMjQgPT0gKDI0MCAmIF9lMikpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90NSA9IDYzICYgcltzKytdLAogICAgICAgICAgICAgICAgICAgIF9hID0gNjMgJiByW3MrK107CiAgICAgICAgICAgICAgICAgIG4ucHVzaCgoMzEgJiBfZTIpIDw8IDEyIHwgX3Q1IDw8IDYgfCBfYSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKDI0MCA9PSAoMjQ4ICYgX2UyKSkgewogICAgICAgICAgICAgICAgICB2YXIgX3Q2ID0gKDcgJiBfZTIpIDw8IDE4IHwgKDYzICYgcltzKytdKSA8PCAxMiB8ICg2MyAmIHJbcysrXSkgPDwgNiB8IDYzICYgcltzKytdOwogICAgICAgICAgICAgICAgICBfdDYgPiA2NTUzNSAmJiAoX3Q2IC09IDY1NTM2LCBuLnB1c2goX3Q2ID4+PiAxMCAmIDEwMjMgfCA1NTI5NiksIF90NiA9IDU2MzIwIHwgMTAyMyAmIF90NiksIG4ucHVzaChfdDYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuKTsKICAgICAgICAgICAgfSwgZS5UZXh0RW5jb2RlciA9IHQsIGUuVGV4dERlY29kZXIgPSByOwogICAgICAgICAgfSgidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogdGhpcyk7CiAgICAgICAgfSwKICAgICAgICA0NDA2OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIENBUDogZnVuY3Rpb24gQ0FQKCkgewogICAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHTERyYXc6IGZ1bmN0aW9uIEdMRHJhdygpIHsKICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgYSwKICAgICAgICAgICAgbiA9IHIoOTY1Mik7CiAgICAgICAgICAhZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZVtlLk5PTkUgPSAwXSA9ICJOT05FIiwgZVtlLkZMQVQgPSAxXSA9ICJGTEFUIiwgZVtlLlJPVU5EID0gMl0gPSAiUk9VTkQiOwogICAgICAgICAgfShzIHx8IChzID0ge30pKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZnVuY3Rpb24gdChlLCB0LCByKSB7CiAgICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgaCA9IE1hdGguc3FydChlICogZSArIHQgKiB0KTsKICAgICAgICAgICAgICBoIDwgMWUtNCA/IChhID0gMCwgbiA9IDEpIDogKGEgPSAtZSAvIGgsIG4gPSB0IC8gaCksIHQgPSAtYSAqIGUgKyBuICogdCwgKHMgPSBNYXRoLnNxcnQodCAqIHQgKyByICogcikpIDwgMWUtNCA/IChvID0gMCwgbCA9IDEpIDogKG8gPSByIC8gcywgbCA9IHQgLyBzKTsKICAgICAgICAgICAgICB2YXIgYyA9IG5ldyBGbG9hdDMyQXJyYXkoOSk7CiAgICAgICAgICAgICAgcmV0dXJuIGNbMF0gPSBuLCBjWzFdID0gYSwgY1syXSA9IDAsIGNbM10gPSAtYSAqIGwsIGNbNF0gPSBuICogbCwgY1s1XSA9IG8sIGNbNl0gPSBhICogbywgY1s3XSA9IC1uICogbywgY1s4XSA9IGwsIGM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHIgPSBuZXcgKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGZ1bmN0aW9uIEN5bFZlcnRleENhY2hlKCkgewogICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEN5bFZlcnRleENhY2hlKTsKICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUgPSB7fTsKICAgICAgICAgICAgICAgIHZhciBlLAogICAgICAgICAgICAgICAgICB0ID0gW10sCiAgICAgICAgICAgICAgICAgIHIgPSBNYXRoLnBvdygyLCA0KSwKICAgICAgICAgICAgICAgICAgcyA9IDIsCiAgICAgICAgICAgICAgICAgIGEgPSBNYXRoLnBvdygyLCBzKSwKICAgICAgICAgICAgICAgICAgbyA9IHIgLyBhOwogICAgICAgICAgICAgICAgZm9yICh0WzBdID0gbmV3IG4uVmVjdG9yMygtMSwgMCwgMCksIHRbb10gPSBuZXcgbi5WZWN0b3IzKDAsIDAsIDEpLCB0WzIgKiBvXSA9IG5ldyBuLlZlY3RvcjMoMSwgMCwgMCksIHRbMyAqIG9dID0gbmV3IG4uVmVjdG9yMygwLCAwLCAtMSksIHMgPSAzOyBzIDw9IDQ7IHMrKykgewogICAgICAgICAgICAgICAgICBmb3IgKGEgPSBNYXRoLnBvdygyLCBzIC0gMSksIG8gPSByIC8gYSwgZSA9IDA7IGUgPCBhIC0gMTsgZSsrKSB0W28gLyAyICsgZSAqIG9dID0gdFtlICogb10uY2xvbmUoKS5hZGQodFsoZSArIDEpICogb10pLm5vcm1hbGl6ZSgpOwogICAgICAgICAgICAgICAgICBlID0gYSAtIDEsIHRbbyAvIDIgKyBlICogb10gPSB0W2UgKiBvXS5jbG9uZSgpLmFkZCh0WzBdKS5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuYmFzaXNWZWN0b3JzID0gdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKEN5bFZlcnRleENhY2hlLCBbewogICAgICAgICAgICAgICAga2V5OiAiZ2V0VmVydGljZXNGb3JSYWRpdXMiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZlcnRpY2VzRm9yUmFkaXVzKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdGhpcy5jYWNoZSAmJiB2b2lkIDAgIT09IHRoaXMuY2FjaGVbZV0gJiYgdm9pZCAwICE9PSB0aGlzLmNhY2hlW2VdW3QgKyByXSkgcmV0dXJuIHRoaXMuY2FjaGVbZV1bdCArIHJdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBhLCBvID0gdGhpcy5iYXNpc1ZlY3RvcnMubGVuZ3RoLCBsID0gW10sIGggPSBbXSwgYyA9IDA7IGMgPCBvOyBjKyspIGwucHVzaCh0aGlzLmJhc2lzVmVjdG9yc1tjXS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGUpKSwgbC5wdXNoKHRoaXMuYmFzaXNWZWN0b3JzW2NdLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoZSkpLCBhID0gdGhpcy5iYXNpc1ZlY3RvcnNbY10uY2xvbmUoKS5ub3JtYWxpemUoKSwgaC5wdXNoKGEpLCBoLnB1c2goYSk7CiAgICAgICAgICAgICAgICAgIHZhciB1ID0gW10sCiAgICAgICAgICAgICAgICAgICAgZiA9IDEwLAogICAgICAgICAgICAgICAgICAgIHAgPSBvOwogICAgICAgICAgICAgICAgICB2YXIgZywKICAgICAgICAgICAgICAgICAgICB2LAogICAgICAgICAgICAgICAgICAgIF8gPSAyICogTWF0aC5QSSwKICAgICAgICAgICAgICAgICAgICB5ID0gTWF0aC5QSSwKICAgICAgICAgICAgICAgICAgICBiID0gITEsCiAgICAgICAgICAgICAgICAgICAgdyA9ICExOwogICAgICAgICAgICAgICAgICBmb3IgKHYgPSAwOyB2IDw9IGY7IHYrKykgewogICAgICAgICAgICAgICAgICAgIGIgPSAwID09PSB2IHx8IHYgPT09IGYsIHcgPSA1ID09PSB2OwogICAgICAgICAgICAgICAgICAgIHZhciB4ID0gW10sCiAgICAgICAgICAgICAgICAgICAgICBBID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8PSBwOyBnKyspIGlmICh3KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgQyA9IGcgPCBwID8gMiAqIGcgOiAwOwogICAgICAgICAgICAgICAgICAgICAgQS5wdXNoKEMgKyAxKSwgeC5wdXNoKEMpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgUyA9IGcgLyBwLAogICAgICAgICAgICAgICAgICAgICAgICBNID0gdiAvIGY7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoYiAmJiAwICE9PSBnKSBiICYmIHgucHVzaChsLmxlbmd0aCAtIDEpO2Vsc2UgaWYgKGcgPCBwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB6ID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgICAgICAgICB6LnggPSAtZSAqIE1hdGguY29zKDAgKyBTICogXykgKiBNYXRoLnNpbigwICsgTSAqIHkpLCB6LnkgPSAxID09IHQgPyAwIDogZSAqIE1hdGguY29zKDAgKyBNICogeSksIHoueiA9IGUgKiBNYXRoLnNpbigwICsgUyAqIF8pICogTWF0aC5zaW4oMCArIE0gKiB5KSwgTWF0aC5hYnMoei54KSA8IDFlLTUgJiYgKHoueCA9IDApLCBNYXRoLmFicyh6LnkpIDwgMWUtNSAmJiAoei55ID0gMCksIE1hdGguYWJzKHoueikgPCAxZS01ICYmICh6LnogPSAwKSwgdCA9PSBzLkZMQVQgPyAoYSA9IG5ldyBuLlZlY3RvcjMoMCwgTWF0aC5jb3MoMCArIE0gKiB5KSwgMCkpLm5vcm1hbGl6ZSgpIDogKGEgPSBuZXcgbi5WZWN0b3IzKHoueCwgei55LCB6LnopKS5ub3JtYWxpemUoKSwgbC5wdXNoKHopLCBoLnB1c2goYSksIHgucHVzaChsLmxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHgucHVzaChsLmxlbmd0aCAtIHApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB3ICYmIHUucHVzaChBKSwgdS5wdXNoKHgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHZhciBMID0gewogICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiBsLAogICAgICAgICAgICAgICAgICAgIG5vcm1hbHM6IGgsCiAgICAgICAgICAgICAgICAgICAgdmVydGljZXNSb3dzOiB1LAogICAgICAgICAgICAgICAgICAgIHc6IHAsCiAgICAgICAgICAgICAgICAgICAgaDogZgogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICByZXR1cm4gZSBpbiB0aGlzLmNhY2hlIHx8ICh0aGlzLmNhY2hlW2VdID0ge30pLCB0aGlzLmNhY2hlW2VdW3QgKyByXSA9IEwsIEw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfV0pOwogICAgICAgICAgICAgIHJldHVybiBDeWxWZXJ0ZXhDYWNoZTsKICAgICAgICAgICAgfSgpKSgpOwogICAgICAgICAgICBlLmRyYXdDeWxpbmRlciA9IGZ1bmN0aW9uIChlLCBzLCBhLCBuLCBvKSB7CiAgICAgICAgICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7CiAgICAgICAgICAgICAgdmFyIGggPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IDA7CiAgICAgICAgICAgICAgaWYgKHMgJiYgYSkgewogICAgICAgICAgICAgICAgdmFyIGMgPSBoIHx8IGw7CiAgICAgICAgICAgICAgICBvID0gbyB8fCB7CiAgICAgICAgICAgICAgICAgIHI6IDAsCiAgICAgICAgICAgICAgICAgIGc6IDAsCiAgICAgICAgICAgICAgICAgIGI6IDAKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgdSwKICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgeSA9IHQoYS54IC0gcy54LCBhLnkgLSBzLnksIGEueiAtIHMueiksCiAgICAgICAgICAgICAgICAgIGIgPSByLmdldFZlcnRpY2VzRm9yUmFkaXVzKG4sIGgsICJ0byIpLAogICAgICAgICAgICAgICAgICB3ID0gYi53LAogICAgICAgICAgICAgICAgICB4ID0gYi5oLAogICAgICAgICAgICAgICAgICBBID0gYyA/IHggKiB3ICsgMiA6IDIgKiB3LAogICAgICAgICAgICAgICAgICBDID0gZS51cGRhdGVHZW9Hcm91cChBKSwKICAgICAgICAgICAgICAgICAgUyA9IGIudmVydGljZXMsCiAgICAgICAgICAgICAgICAgIE0gPSBiLm5vcm1hbHMsCiAgICAgICAgICAgICAgICAgIHogPSBiLnZlcnRpY2VzUm93cywKICAgICAgICAgICAgICAgICAgTCA9IHpbeCAvIDJdLAogICAgICAgICAgICAgICAgICBFID0gelt4IC8gMiArIDFdLAogICAgICAgICAgICAgICAgICBUID0gQy52ZXJ0aWNlcywKICAgICAgICAgICAgICAgICAgayA9IEMudmVydGV4QXJyYXksCiAgICAgICAgICAgICAgICAgIEkgPSBDLm5vcm1hbEFycmF5LAogICAgICAgICAgICAgICAgICBPID0gQy5jb2xvckFycmF5LAogICAgICAgICAgICAgICAgICBEID0gQy5mYWNlQXJyYXk7CiAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgdzsgKytwKSB7CiAgICAgICAgICAgICAgICAgIHZhciBGID0gMiAqIHA7CiAgICAgICAgICAgICAgICAgIGcgPSB5WzBdICogU1tGXS54ICsgeVszXSAqIFNbRl0ueSArIHlbNl0gKiBTW0ZdLnosIHYgPSB5WzFdICogU1tGXS54ICsgeVs0XSAqIFNbRl0ueSArIHlbN10gKiBTW0ZdLnosIF8gPSB5WzVdICogU1tGXS55ICsgeVs4XSAqIFNbRl0ueiwgdSA9IDMgKiAoVCArIEYpLCBmID0gQy5mYWNlaWR4LCBrW3VdID0gZyArIHMueCwga1t1ICsgMV0gPSB2ICsgcy55LCBrW3UgKyAyXSA9IF8gKyBzLnosIGtbdSArIDNdID0gZyArIGEueCwga1t1ICsgNF0gPSB2ICsgYS55LCBrW3UgKyA1XSA9IF8gKyBhLnosIElbdV0gPSBnLCBJW3UgKyAzXSA9IGcsIElbdSArIDFdID0gdiwgSVt1ICsgNF0gPSB2LCBJW3UgKyAyXSA9IF8sIElbdSArIDVdID0gXywgT1t1XSA9IG8uciwgT1t1ICsgM10gPSBvLnIsIE9bdSArIDFdID0gby5nLCBPW3UgKyA0XSA9IG8uZywgT1t1ICsgMl0gPSBvLmIsIE9bdSArIDVdID0gby5iLCBEW2ZdID0gRVtwXSArIFQsIERbZiArIDFdID0gRVtwICsgMV0gKyBULCBEW2YgKyAyXSA9IExbcF0gKyBULCBEW2YgKyAzXSA9IExbcF0gKyBULCBEW2YgKyA0XSA9IEVbcCArIDFdICsgVCwgRFtmICsgNV0gPSBMW3AgKyAxXSArIFQsIEMuZmFjZWlkeCArPSA2OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGMpIHsKICAgICAgICAgICAgICAgICAgdmFyIFIsCiAgICAgICAgICAgICAgICAgICAgUCwKICAgICAgICAgICAgICAgICAgICBHLAogICAgICAgICAgICAgICAgICAgIEIsCiAgICAgICAgICAgICAgICAgICAgVSwKICAgICAgICAgICAgICAgICAgICBOLAogICAgICAgICAgICAgICAgICAgIFYsCiAgICAgICAgICAgICAgICAgICAgaiwKICAgICAgICAgICAgICAgICAgICBILAogICAgICAgICAgICAgICAgICAgIFcsCiAgICAgICAgICAgICAgICAgICAgcSwKICAgICAgICAgICAgICAgICAgICBZLAogICAgICAgICAgICAgICAgICAgIFosCiAgICAgICAgICAgICAgICAgICAgWCwKICAgICAgICAgICAgICAgICAgICBLLAogICAgICAgICAgICAgICAgICAgICQsCiAgICAgICAgICAgICAgICAgICAgUSwKICAgICAgICAgICAgICAgICAgICBKLAogICAgICAgICAgICAgICAgICAgIGVlLAogICAgICAgICAgICAgICAgICAgIHRlLAogICAgICAgICAgICAgICAgICAgIHJlLAogICAgICAgICAgICAgICAgICAgIGllLAogICAgICAgICAgICAgICAgICAgIHNlLAogICAgICAgICAgICAgICAgICAgIGFlLAogICAgICAgICAgICAgICAgICAgIG5lLAogICAgICAgICAgICAgICAgICAgIG9lLAogICAgICAgICAgICAgICAgICAgIGxlLAogICAgICAgICAgICAgICAgICAgIGhlLAogICAgICAgICAgICAgICAgICAgIGNlLAogICAgICAgICAgICAgICAgICAgIGRlLAogICAgICAgICAgICAgICAgICAgIHVlLAogICAgICAgICAgICAgICAgICAgIGZlLAogICAgICAgICAgICAgICAgICAgIHBlID0gbCA/IHggKyAxIDogeCAvIDIgKyAxOwogICAgICAgICAgICAgICAgICBmb3IgKHYgPSBoID8gMCA6IHggLyAyOyB2IDwgcGU7IHYrKykgaWYgKHYgIT09IHggLyAyKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdiA8PSB4IC8gMiA/IGEgOiBzLAogICAgICAgICAgICAgICAgICAgICAgZ2UgPSByLmdldFZlcnRpY2VzRm9yUmFkaXVzKG4sIGgsICJ0byIpLAogICAgICAgICAgICAgICAgICAgICAgdmUgPSByLmdldFZlcnRpY2VzRm9yUmFkaXVzKG4sIGwsICJmcm9tIik7CiAgICAgICAgICAgICAgICAgICAgZm9yIChtZSA9PT0gYSA/IChTID0gZ2UudmVydGljZXMsIE0gPSBnZS5ub3JtYWxzLCB6ID0gZ2UudmVydGljZXNSb3dzKSA6IG1lID09IHMgJiYgKFMgPSB2ZS52ZXJ0aWNlcywgTSA9IHZlLm5vcm1hbHMsIHogPSB2ZS52ZXJ0aWNlc1Jvd3MpLCBnID0gMDsgZyA8IHc7IGcrKykgZiA9IEMuZmFjZWlkeCwgY2UgPSAzICogKChSID0gelt2XVtnICsgMV0pICsgVCksIGRlID0gMyAqICgoUCA9IHpbdl1bZ10pICsgVCksIHVlID0gMyAqICgoRyA9IHpbdiArIDFdW2ddKSArIFQpLCBmZSA9IDMgKiAoKEIgPSB6W3YgKyAxXVtnICsgMV0pICsgVCksIFUgPSB5WzBdICogU1tSXS54ICsgeVszXSAqIFNbUl0ueSArIHlbNl0gKiBTW1JdLnosIE4gPSB5WzBdICogU1tQXS54ICsgeVszXSAqIFNbUF0ueSArIHlbNl0gKiBTW1BdLnosIFYgPSB5WzBdICogU1tHXS54ICsgeVszXSAqIFNbR10ueSArIHlbNl0gKiBTW0ddLnosIGogPSB5WzBdICogU1tCXS54ICsgeVszXSAqIFNbQl0ueSArIHlbNl0gKiBTW0JdLnosIEggPSB5WzFdICogU1tSXS54ICsgeVs0XSAqIFNbUl0ueSArIHlbN10gKiBTW1JdLnosIFcgPSB5WzFdICogU1tQXS54ICsgeVs0XSAqIFNbUF0ueSArIHlbN10gKiBTW1BdLnosIHEgPSB5WzFdICogU1tHXS54ICsgeVs0XSAqIFNbR10ueSArIHlbN10gKiBTW0ddLnosIFkgPSB5WzFdICogU1tCXS54ICsgeVs0XSAqIFNbQl0ueSArIHlbN10gKiBTW0JdLnosIFogPSB5WzVdICogU1tSXS55ICsgeVs4XSAqIFNbUl0ueiwgWCA9IHlbNV0gKiBTW1BdLnkgKyB5WzhdICogU1tQXS56LCBLID0geVs1XSAqIFNbR10ueSArIHlbOF0gKiBTW0ddLnosICQgPSB5WzVdICogU1tCXS55ICsgeVs4XSAqIFNbQl0ueiwga1tjZV0gPSBVICsgbWUueCwga1tkZV0gPSBOICsgbWUueCwga1t1ZV0gPSBWICsgbWUueCwga1tmZV0gPSBqICsgbWUueCwga1tjZSArIDFdID0gSCArIG1lLnksIGtbZGUgKyAxXSA9IFcgKyBtZS55LCBrW3VlICsgMV0gPSBxICsgbWUueSwga1tmZSArIDFdID0gWSArIG1lLnksIGtbY2UgKyAyXSA9IFogKyBtZS56LCBrW2RlICsgMl0gPSBYICsgbWUueiwga1t1ZSArIDJdID0gSyArIG1lLnosIGtbZmUgKyAyXSA9ICQgKyBtZS56LCBPW2NlXSA9IG8uciwgT1tkZV0gPSBvLnIsIE9bdWVdID0gby5yLCBPW2ZlXSA9IG8uciwgT1tjZSArIDFdID0gby5nLCBPW2RlICsgMV0gPSBvLmcsIE9bdWUgKyAxXSA9IG8uZywgT1tmZSArIDFdID0gby5nLCBPW2NlICsgMl0gPSBvLmIsIE9bZGUgKyAyXSA9IG8uYiwgT1t1ZSArIDJdID0gby5iLCBPW2ZlICsgMl0gPSBvLmIsIFEgPSB5WzBdICogTVtSXS54ICsgeVszXSAqIE1bUl0ueSArIHlbNl0gKiBNW1JdLnosIEogPSB5WzBdICogTVtQXS54ICsgeVszXSAqIE1bUF0ueSArIHlbNl0gKiBNW1BdLnosIGVlID0geVswXSAqIE1bR10ueCArIHlbM10gKiBNW0ddLnkgKyB5WzZdICogTVtHXS56LCB0ZSA9IHlbMF0gKiBNW0JdLnggKyB5WzNdICogTVtCXS55ICsgeVs2XSAqIE1bQl0ueiwgcmUgPSB5WzFdICogTVtSXS54ICsgeVs0XSAqIE1bUl0ueSArIHlbN10gKiBNW1JdLnosIGllID0geVsxXSAqIE1bUF0ueCArIHlbNF0gKiBNW1BdLnkgKyB5WzddICogTVtQXS56LCBzZSA9IHlbMV0gKiBNW0ddLnggKyB5WzRdICogTVtHXS55ICsgeVs3XSAqIE1bR10ueiwgYWUgPSB5WzFdICogTVtCXS54ICsgeVs0XSAqIE1bQl0ueSArIHlbN10gKiBNW0JdLnosIG5lID0geVs1XSAqIE1bUl0ueSArIHlbOF0gKiBNW1JdLnosIG9lID0geVs1XSAqIE1bUF0ueSArIHlbOF0gKiBNW1BdLnosIGxlID0geVs1XSAqIE1bR10ueSArIHlbOF0gKiBNW0ddLnosIGhlID0geVs1XSAqIE1bQl0ueSArIHlbOF0gKiBNW0JdLnosIDAgPT09IHYgPyAoSVtjZV0gPSBRLCBJW3VlXSA9IGVlLCBJW2ZlXSA9IHRlLCBJW2NlICsgMV0gPSByZSwgSVt1ZSArIDFdID0gc2UsIElbZmUgKyAxXSA9IGFlLCBJW2NlICsgMl0gPSBuZSwgSVt1ZSArIDJdID0gbGUsIElbZmUgKyAyXSA9IGhlLCBEW2ZdID0gUiArIFQsIERbZiArIDFdID0gRyArIFQsIERbZiArIDJdID0gQiArIFQsIEMuZmFjZWlkeCArPSAzKSA6IHYgPT09IHBlIC0gMSA/IChJW2NlXSA9IFEsIElbZGVdID0gSiwgSVt1ZV0gPSBlZSwgSVtjZSArIDFdID0gcmUsIElbZGUgKyAxXSA9IGllLCBJW3VlICsgMV0gPSBzZSwgSVtjZSArIDJdID0gbmUsIElbZGUgKyAyXSA9IG9lLCBJW3VlICsgMl0gPSBsZSwgRFtmXSA9IFIgKyBULCBEW2YgKyAxXSA9IFAgKyBULCBEW2YgKyAyXSA9IEcgKyBULCBDLmZhY2VpZHggKz0gMykgOiAoSVtjZV0gPSBRLCBJW2RlXSA9IEosIElbZmVdID0gdGUsIElbY2UgKyAxXSA9IHJlLCBJW2RlICsgMV0gPSBpZSwgSVtmZSArIDFdID0gYWUsIElbY2UgKyAyXSA9IG5lLCBJW2RlICsgMl0gPSBvZSwgSVtmZSArIDJdID0gaGUsIElbZGVdID0gSiwgSVt1ZV0gPSBlZSwgSVtmZV0gPSB0ZSwgSVtkZSArIDFdID0gaWUsIElbdWUgKyAxXSA9IHNlLCBJW2ZlICsgMV0gPSBhZSwgSVtkZSArIDJdID0gb2UsIElbdWUgKyAyXSA9IGxlLCBJW2ZlICsgMl0gPSBoZSwgRFtmXSA9IFIgKyBULCBEW2YgKyAxXSA9IFAgKyBULCBEW2YgKyAyXSA9IEIgKyBULCBEW2YgKyAzXSA9IFAgKyBULCBEW2YgKyA0XSA9IEcgKyBULCBEW2YgKyA1XSA9IEIgKyBULCBDLmZhY2VpZHggKz0gNik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEMudmVydGljZXMgKz0gQTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIGUuZHJhd0NvbmUgPSBmdW5jdGlvbiAoZSwgcywgYSwgbywgbCkgewogICAgICAgICAgICAgIGlmICghcyB8fCAhYSkgcmV0dXJuOwogICAgICAgICAgICAgIGwgPSBsIHx8IHsKICAgICAgICAgICAgICAgIHI6IDAsCiAgICAgICAgICAgICAgICBnOiAwLAogICAgICAgICAgICAgICAgYjogMAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgdmFyIGggPSBuZXcgbi5WZWN0b3IzKGEueCAtIHMueCwgYS55IC0gcy55LCBhLnogLSBzLnopOwogICAgICAgICAgICAgIHZhciBjID0gdChoLngsIGgueSwgaC56KTsKICAgICAgICAgICAgICBoID0gaC5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICB2YXIgdSwKICAgICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgICBwLAogICAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICAgIHYsCiAgICAgICAgICAgICAgICBfLAogICAgICAgICAgICAgICAgeSA9IHIuYmFzaXNWZWN0b3JzLmxlbmd0aCwKICAgICAgICAgICAgICAgIGIgPSByLmJhc2lzVmVjdG9ycywKICAgICAgICAgICAgICAgIHcgPSB5ICsgMiwKICAgICAgICAgICAgICAgIHggPSBlLnVwZGF0ZUdlb0dyb3VwKHcpLAogICAgICAgICAgICAgICAgQSA9IHgudmVydGljZXMsCiAgICAgICAgICAgICAgICBDID0geC52ZXJ0ZXhBcnJheSwKICAgICAgICAgICAgICAgIFMgPSB4Lm5vcm1hbEFycmF5LAogICAgICAgICAgICAgICAgTSA9IHguY29sb3JBcnJheSwKICAgICAgICAgICAgICAgIHogPSB4LmZhY2VBcnJheTsKICAgICAgICAgICAgICBmb3IgKENbdSA9IDMgKiBBXSA9IHMueCwgQ1t1ICsgMV0gPSBzLnksIENbdSArIDJdID0gcy56LCBTW3VdID0gLWgueCwgU1t1ICsgMV0gPSAtaC55LCBTW3UgKyAyXSA9IC1oLnosIE1bdV0gPSBsLnIsIE1bdSArIDFdID0gbC5nLCBNW3UgKyAyXSA9IGwuYiwgQ1t1ICsgM10gPSBhLngsIENbdSArIDRdID0gYS55LCBDW3UgKyA1XSA9IGEueiwgU1t1ICsgM10gPSBoLngsIFNbdSArIDRdID0gaC55LCBTW3UgKyA1XSA9IGgueiwgTVt1ICsgM10gPSBsLnIsIE1bdSArIDRdID0gbC5nLCBNW3UgKyA1XSA9IGwuYiwgdSArPSA2LCBwID0gMDsgcCA8IHk7ICsrcCkgewogICAgICAgICAgICAgICAgdmFyIEwgPSBiW3BdLmNsb25lKCk7CiAgICAgICAgICAgICAgICBMLm11bHRpcGx5U2NhbGFyKG8pLCBnID0gY1swXSAqIEwueCArIGNbM10gKiBMLnkgKyBjWzZdICogTC56LCB2ID0gY1sxXSAqIEwueCArIGNbNF0gKiBMLnkgKyBjWzddICogTC56LCBfID0gY1s1XSAqIEwueSArIGNbOF0gKiBMLnosIENbdV0gPSBnICsgcy54LCBDW3UgKyAxXSA9IHYgKyBzLnksIENbdSArIDJdID0gXyArIHMueiwgU1t1XSA9IGcsIFNbdSArIDFdID0gdiwgU1t1ICsgMl0gPSBfLCBNW3VdID0gbC5yLCBNW3UgKyAxXSA9IGwuZywgTVt1ICsgMl0gPSBsLmIsIHUgKz0gMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICh4LnZlcnRpY2VzICs9IHkgKyAyLCBmID0geC5mYWNlaWR4LCBwID0gMDsgcCA8IHk7IHArKykgewogICAgICAgICAgICAgICAgdmFyIEUgPSBBICsgMiArIHAsCiAgICAgICAgICAgICAgICAgIFQgPSBBICsgMiArIChwICsgMSkgJSB5OwogICAgICAgICAgICAgICAgeltmXSA9IEUsIHpbZiArIDFdID0gVCwgeltmICsgMl0gPSBBLCB6W2YgKz0gM10gPSBFLCB6W2YgKyAxXSA9IFQsIHpbZiArIDJdID0gQSArIDEsIGYgKz0gMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgeC5mYWNlaWR4ICs9IDYgKiB5OwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgYSA9IG5ldyAoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgZnVuY3Rpb24gU3BoZXJlVmVydGV4Q2FjaGUoKSB7CiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3BoZXJlVmVydGV4Q2FjaGUpOwogICAgICAgICAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKFNwaGVyZVZlcnRleENhY2hlLCBbewogICAgICAgICAgICAgICAga2V5OiAiZ2V0VmVydGljZXNGb3JSYWRpdXMiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZlcnRpY2VzRm9yUmFkaXVzKGUsIHQpIHsKICAgICAgICAgICAgICAgICAgdCA9IHQgfHwgMiwgdGhpcy5jYWNoZS5oYXModCkgfHwgdGhpcy5jYWNoZS5zZXQodCwgbmV3IE1hcCgpKTsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNhY2hlLmdldCh0KTsKICAgICAgICAgICAgICAgICAgaWYgKHIuaGFzKGUpKSByZXR1cm4gci5nZXQoZSk7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gewogICAgICAgICAgICAgICAgICAgICAgdmVydGljZXM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNSb3dzOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbHM6IFtdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhID0gMTYgKiB0LAogICAgICAgICAgICAgICAgICAgIG8gPSAxMCAqIHQ7CiAgICAgICAgICAgICAgICAgIGUgPCAxICYmIChhID0gMTAgKiB0LCBvID0gOCAqIHQpOwogICAgICAgICAgICAgICAgICB2YXIgbCwKICAgICAgICAgICAgICAgICAgICBoLAogICAgICAgICAgICAgICAgICAgIGMgPSAyICogTWF0aC5QSSwKICAgICAgICAgICAgICAgICAgICB1ID0gTWF0aC5QSTsKICAgICAgICAgICAgICAgICAgZm9yIChoID0gMDsgaCA8PSBvOyBoKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3Q3ID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8PSBhOyBsKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfcjIgPSBsIC8gYSwKICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGggLyBvLAogICAgICAgICAgICAgICAgICAgICAgICBnID0gLWUgKiBNYXRoLmNvcygwICsgX3IyICogYykgKiBNYXRoLnNpbigwICsgcCAqIHUpLAogICAgICAgICAgICAgICAgICAgICAgICB2ID0gZSAqIE1hdGguY29zKDAgKyBwICogdSksCiAgICAgICAgICAgICAgICAgICAgICAgIF8gPSBlICogTWF0aC5zaW4oMCArIF9yMiAqIGMpICogTWF0aC5zaW4oMCArIHAgKiB1KTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gbmV3IG4uVmVjdG9yMyhnLCB2LCBfKTsKICAgICAgICAgICAgICAgICAgICAgIGYubm9ybWFsaXplKCksIHMudmVydGljZXMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGcsCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHYsCiAgICAgICAgICAgICAgICAgICAgICAgIHo6IF8KICAgICAgICAgICAgICAgICAgICAgIH0pLCBzLm5vcm1hbHMucHVzaChmKSwgX3Q3LnB1c2gocy52ZXJ0aWNlcy5sZW5ndGggLSAxKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcy52ZXJ0aWNlc1Jvd3MucHVzaChfdDcpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiByLnNldChlLCBzKSwgczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9XSk7CiAgICAgICAgICAgICAgcmV0dXJuIFNwaGVyZVZlcnRleENhY2hlOwogICAgICAgICAgICB9KCkpKCk7CiAgICAgICAgICAgIGUuZHJhd1NwaGVyZSA9IGZ1bmN0aW9uIChlLCB0LCByLCBzLCBuKSB7CiAgICAgICAgICAgICAgdmFyIG8gPSBhLmdldFZlcnRpY2VzRm9yUmFkaXVzKHIsIG4pLAogICAgICAgICAgICAgICAgbCA9IG8udmVydGljZXMsCiAgICAgICAgICAgICAgICBoID0gby5ub3JtYWxzLAogICAgICAgICAgICAgICAgYyA9IGUudXBkYXRlR2VvR3JvdXAobC5sZW5ndGgpLAogICAgICAgICAgICAgICAgdSA9IGMudmVydGljZXMsCiAgICAgICAgICAgICAgICBmID0gYy52ZXJ0ZXhBcnJheSwKICAgICAgICAgICAgICAgIHAgPSBjLmNvbG9yQXJyYXksCiAgICAgICAgICAgICAgICBnID0gYy5mYWNlQXJyYXksCiAgICAgICAgICAgICAgICB2ID0gYy5saW5lQXJyYXksCiAgICAgICAgICAgICAgICBfID0gYy5ub3JtYWxBcnJheTsKICAgICAgICAgICAgICBmb3IgKHZhciBfZTMgPSAwLCBfcjMgPSBsLmxlbmd0aDsgX2UzIDwgX3IzOyArK19lMykgewogICAgICAgICAgICAgICAgdmFyIF9yNCA9IDMgKiAodSArIF9lMyksCiAgICAgICAgICAgICAgICAgIF9hMiA9IGxbX2UzXTsKICAgICAgICAgICAgICAgIGZbX3I0XSA9IF9hMi54ICsgdC54LCBmW19yNCArIDFdID0gX2EyLnkgKyB0LnksIGZbX3I0ICsgMl0gPSBfYTIueiArIHQueiwgcFtfcjRdID0gcy5yLCBwW19yNCArIDFdID0gcy5nLCBwW19yNCArIDJdID0gcy5iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjLnZlcnRpY2VzICs9IGwubGVuZ3RoOwogICAgICAgICAgICAgIHZhciB5ID0gby52ZXJ0aWNlc1Jvd3MsCiAgICAgICAgICAgICAgICBiID0geS5sZW5ndGggLSAxOwogICAgICAgICAgICAgIGZvciAodmFyIF9lNCA9IDA7IF9lNCA8IGI7IF9lNCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgX3Q4ID0geVtfZTRdLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfczIgPSAwOyBfczIgPCBfdDg7IF9zMisrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDkgPSBjLmZhY2VpZHgsCiAgICAgICAgICAgICAgICAgICAgX2EzID0gYy5saW5laWR4LAogICAgICAgICAgICAgICAgICAgIF9uID0geVtfZTRdW19zMiArIDFdICsgdSwKICAgICAgICAgICAgICAgICAgICBfbyA9IDMgKiBfbiwKICAgICAgICAgICAgICAgICAgICBfZiA9IHlbX2U0XVtfczJdICsgdSwKICAgICAgICAgICAgICAgICAgICBfcCA9IDMgKiBfZiwKICAgICAgICAgICAgICAgICAgICBfYiA9IHlbX2U0ICsgMV1bX3MyXSArIHUsCiAgICAgICAgICAgICAgICAgICAgdyA9IDMgKiBfYiwKICAgICAgICAgICAgICAgICAgICB4ID0geVtfZTQgKyAxXVtfczIgKyAxXSArIHUsCiAgICAgICAgICAgICAgICAgICAgQSA9IDMgKiB4LAogICAgICAgICAgICAgICAgICAgIEMgPSBoW19uIC0gdV0sCiAgICAgICAgICAgICAgICAgICAgUyA9IGhbX2YgLSB1XSwKICAgICAgICAgICAgICAgICAgICBNID0gaFtfYiAtIHVdLAogICAgICAgICAgICAgICAgICAgIHogPSBoW3ggLSB1XTsKICAgICAgICAgICAgICAgICAgTWF0aC5hYnMobFtfbiAtIHVdLnkpID09PSByID8gKF9bX29dID0gQy54LCBfW3ddID0gTS54LCBfW0FdID0gei54LCBfW19vICsgMV0gPSBDLnksIF9bdyArIDFdID0gTS55LCBfW0EgKyAxXSA9IHoueSwgX1tfbyArIDJdID0gQy56LCBfW3cgKyAyXSA9IE0ueiwgX1tBICsgMl0gPSB6LnosIGdbX3Q5XSA9IF9uLCBnW190OSArIDFdID0gX2IsIGdbX3Q5ICsgMl0gPSB4LCB2W19hM10gPSBfbiwgdltfYTMgKyAxXSA9IF9iLCB2W19hMyArIDJdID0gX24sIHZbX2EzICsgM10gPSB4LCB2W19hMyArIDRdID0gX2IsIHZbX2EzICsgNV0gPSB4LCBjLmZhY2VpZHggKz0gMywgYy5saW5laWR4ICs9IDYpIDogTWF0aC5hYnMobFtfYiAtIHVdLnkpID09PSByID8gKF9bX29dID0gQy54LCBfW19wXSA9IFMueCwgX1t3XSA9IE0ueCwgX1tfbyArIDFdID0gQy55LCBfW19wICsgMV0gPSBTLnksIF9bdyArIDFdID0gTS55LCBfW19vICsgMl0gPSBDLnosIF9bX3AgKyAyXSA9IFMueiwgX1t3ICsgMl0gPSBNLnosIGdbX3Q5XSA9IF9uLCBnW190OSArIDFdID0gX2YsIGdbX3Q5ICsgMl0gPSBfYiwgdltfYTNdID0gX24sIHZbX2EzICsgMV0gPSBfZiwgdltfYTMgKyAyXSA9IF9uLCB2W19hMyArIDNdID0gX2IsIHZbX2EzICsgNF0gPSBfZiwgdltfYTMgKyA1XSA9IF9iLCBjLmZhY2VpZHggKz0gMywgYy5saW5laWR4ICs9IDYpIDogKF9bX29dID0gQy54LCBfW19wXSA9IFMueCwgX1tBXSA9IHoueCwgX1tfbyArIDFdID0gQy55LCBfW19wICsgMV0gPSBTLnksIF9bQSArIDFdID0gei55LCBfW19vICsgMl0gPSBDLnosIF9bX3AgKyAyXSA9IFMueiwgX1tBICsgMl0gPSB6LnosIF9bX3BdID0gUy54LCBfW3ddID0gTS54LCBfW0FdID0gei54LCBfW19wICsgMV0gPSBTLnksIF9bdyArIDFdID0gTS55LCBfW0EgKyAxXSA9IHoueSwgX1tfcCArIDJdID0gUy56LCBfW3cgKyAyXSA9IE0ueiwgX1tBICsgMl0gPSB6LnosIGdbX3Q5XSA9IF9uLCBnW190OSArIDFdID0gX2YsIGdbX3Q5ICsgMl0gPSB4LCBnW190OSArIDNdID0gX2YsIGdbX3Q5ICsgNF0gPSBfYiwgZ1tfdDkgKyA1XSA9IHgsIHZbX2EzXSA9IF9uLCB2W19hMyArIDFdID0gX2YsIHZbX2EzICsgMl0gPSBfbiwgdltfYTMgKyAzXSA9IHgsIHZbX2EzICsgNF0gPSBfZiwgdltfYTMgKyA1XSA9IF9iLCB2W19hMyArIDZdID0gX2IsIHZbX2EzICsgN10gPSB4LCBjLmZhY2VpZHggKz0gNiwgYy5saW5laWR4ICs9IDgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgIH0oYSB8fCAoYSA9IHt9KSk7CiAgICAgICAgfSwKICAgICAgICAyMTE2OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIEdMTW9kZWw6IGZ1bmN0aW9uIEdMTW9kZWwoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9HTE1vZGVsOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig3NjkzKSwKICAgICAgICAgICAgYSA9IHIoMzM1MSksCiAgICAgICAgICAgIG4gPSByKDk2NTIpLAogICAgICAgICAgICBvID0gcigyNTUwKSwKICAgICAgICAgICAgbCA9IHIoNDQwNiksCiAgICAgICAgICAgIGggPSByKDYxNjMpLAogICAgICAgICAgICBjID0gcig5MDA1KSwKICAgICAgICAgICAgdSA9IHIoMTQ2MCksCiAgICAgICAgICAgIGYgPSByKDI2NDApOwogICAgICAgICAgcig3Mzk2KTsKICAgICAgICAgIGZ1bmN0aW9uIHAoZSkgewogICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogInV0ZjgiOwogICAgICAgICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKHQpLmRlY29kZShlKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBnID0gbmV3IFRleHRFbmNvZGVyKCk7CiAgICAgICAgICB2YXIgdiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBVaW50OEFycmF5KDQpOwogICAgICAgICAgICAgIHJldHVybiAhKChuZXcgVWludDMyQXJyYXkoZS5idWZmZXIpWzBdID0gMSkgJiBlWzBdKTsKICAgICAgICAgICAgfSgpLAogICAgICAgICAgICBfID0gewogICAgICAgICAgICAgIGludDg6IEludDhBcnJheSwKICAgICAgICAgICAgICB1aW50ODogVWludDhBcnJheSwKICAgICAgICAgICAgICBpbnQxNjogSW50MTZBcnJheSwKICAgICAgICAgICAgICB1aW50MTY6IFVpbnQxNkFycmF5LAogICAgICAgICAgICAgIGludDMyOiBJbnQzMkFycmF5LAogICAgICAgICAgICAgIHVpbnQzMjogVWludDMyQXJyYXksCiAgICAgICAgICAgICAgdWludDY0OiBCaWdVaW50NjRBcnJheSwKICAgICAgICAgICAgICBpbnQ2NDogQmlnSW50NjRBcnJheSwKICAgICAgICAgICAgICBmbG9hdDMyOiBGbG9hdDMyQXJyYXksCiAgICAgICAgICAgICAgZmxvYXQ2NDogRmxvYXQ2NEFycmF5CiAgICAgICAgICAgIH07CiAgICAgICAgICB2YXIgSU9CdWZmZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBJT0J1ZmZlcigpIHsKICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogODE5MjsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElPQnVmZmVyKTsKICAgICAgICAgICAgICB2YXIgciA9ICExOwogICAgICAgICAgICAgICJudW1iZXIiID09IHR5cGVvZiBlID8gZSA9IG5ldyBBcnJheUJ1ZmZlcihlKSA6IChyID0gITAsIHRoaXMubGFzdFdyaXR0ZW5CeXRlID0gZS5ieXRlTGVuZ3RoKTsKICAgICAgICAgICAgICB2YXIgcyA9IHQub2Zmc2V0ID8gdC5vZmZzZXQgPj4+IDAgOiAwLAogICAgICAgICAgICAgICAgYSA9IGUuYnl0ZUxlbmd0aCAtIHM7CiAgICAgICAgICAgICAgdmFyIG4gPSBzOwogICAgICAgICAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoZSkgfHwgZSBpbnN0YW5jZW9mIElPQnVmZmVyKSAmJiAoZS5ieXRlTGVuZ3RoICE9PSBlLmJ1ZmZlci5ieXRlTGVuZ3RoICYmIChuID0gZS5ieXRlT2Zmc2V0ICsgcyksIGUgPSBlLmJ1ZmZlciksIHRoaXMubGFzdFdyaXR0ZW5CeXRlID0gciA/IGEgOiAwLCB0aGlzLmJ1ZmZlciA9IGUsIHRoaXMubGVuZ3RoID0gYSwgdGhpcy5ieXRlTGVuZ3RoID0gYSwgdGhpcy5ieXRlT2Zmc2V0ID0gbiwgdGhpcy5vZmZzZXQgPSAwLCB0aGlzLmxpdHRsZUVuZGlhbiA9ICEwLCB0aGlzLl9kYXRhID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyLCBuLCBhKSwgdGhpcy5fbWFyayA9IDAsIHRoaXMuX21hcmtzID0gW107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKElPQnVmZmVyLCBbewogICAgICAgICAgICAgIGtleTogImF2YWlsYWJsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF2YWlsYWJsZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICsgZSA8PSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpc0xpdHRsZUVuZGlhbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl0dGxlRW5kaWFuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldExpdHRsZUVuZGlhbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExpdHRsZUVuZGlhbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpdHRsZUVuZGlhbiA9ICEwLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlzQmlnRW5kaWFuIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNCaWdFbmRpYW4oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMubGl0dGxlRW5kaWFuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEJpZ0VuZGlhbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJpZ0VuZGlhbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpdHRsZUVuZGlhbiA9ICExLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNraXAiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBza2lwKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKz0gZSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJiYWNrIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmFjaygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0IC09IGUsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2VlayIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWsoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID0gZSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJtYXJrIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFyaygpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXJrID0gdGhpcy5vZmZzZXQsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCA9IHRoaXMuX21hcmssIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicHVzaE1hcmsiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoTWFyaygpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXJrcy5wdXNoKHRoaXMub2Zmc2V0KSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwb3BNYXJrIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcG9wTWFyaygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fbWFya3MucG9wKCk7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgRXJyb3IoIk1hcmsgc3RhY2sgZW1wdHkiKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlZWsoZSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmV3aW5kIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmV3aW5kKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID0gMCwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJlbnN1cmVBdmFpbGFibGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbnN1cmVBdmFpbGFibGUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5hdmFpbGFibGUoZSkpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90MTAgPSAyICogKHRoaXMub2Zmc2V0ICsgZSksCiAgICAgICAgICAgICAgICAgICAgX3I1ID0gbmV3IFVpbnQ4QXJyYXkoX3QxMCk7CiAgICAgICAgICAgICAgICAgIF9yNS5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpKSwgdGhpcy5idWZmZXIgPSBfcjUuYnVmZmVyLCB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCA9IF90MTAsIHRoaXMuX2RhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVhZEJvb2xlYW4iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQm9vbGVhbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAwICE9PSB0aGlzLnJlYWRVaW50OCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRJbnQ4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEludDgoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5nZXRJbnQ4KHRoaXMub2Zmc2V0KyspOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRVaW50OCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRVaW50OCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldFVpbnQ4KHRoaXMub2Zmc2V0KyspOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRCeXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJ5dGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkVWludDgoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZWFkQnl0ZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQnl0ZXMoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRBcnJheShlLCAidWludDgiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZWFkQXJyYXkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQXJyYXkoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBfW3RdLkJZVEVTX1BFUl9FTEVNRU5UICogZSwKICAgICAgICAgICAgICAgICAgcyA9IHRoaXMuYnl0ZU9mZnNldCArIHRoaXMub2Zmc2V0LAogICAgICAgICAgICAgICAgICBhID0gdGhpcy5idWZmZXIuc2xpY2UocywgcyArIHIpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuID09PSB2ICYmICJ1aW50OCIgIT09IHQgJiYgImludDgiICE9PSB0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTUgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlci5zbGljZShzLCBzICsgcikpOwogICAgICAgICAgICAgICAgICBfZTUucmV2ZXJzZSgpOwogICAgICAgICAgICAgICAgICB2YXIgX2E0ID0gbmV3IF9bdF0oX2U1LmJ1ZmZlcik7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArPSByLCBfYTQucmV2ZXJzZSgpLCBfYTQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBfW3RdKGEpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICs9IHIsIG47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVhZEludDE2IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEludDE2KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9kYXRhLmdldEludDE2KHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKz0gMiwgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZWFkVWludDE2IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZFVpbnQxNigpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fZGF0YS5nZXRVaW50MTYodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArPSAyLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRJbnQzMiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRJbnQzMigpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fZGF0YS5nZXRJbnQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICs9IDQsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVhZFVpbnQzMiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRVaW50MzIoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX2RhdGEuZ2V0VWludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKz0gNCwgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZWFkRmxvYXQzMiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRGbG9hdDMyKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9kYXRhLmdldEZsb2F0MzIodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArPSA0LCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRGbG9hdDY0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEZsb2F0NjQoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX2RhdGEuZ2V0RmxvYXQ2NCh0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICs9IDgsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVhZEJpZ0ludDY0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJpZ0ludDY0KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9kYXRhLmdldEJpZ0ludDY0KHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKz0gOCwgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZWFkQmlnVWludDY0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJpZ1VpbnQ2NCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5fZGF0YS5nZXRCaWdVaW50NjQodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArPSA4LCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRDaGFyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZENoYXIoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnJlYWRJbnQ4KCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRDaGFycyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRDaGFycygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgICAgdmFyIHQgPSAiIjsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9yNiA9IDA7IF9yNiA8IGU7IF9yNisrKSB0ICs9IHRoaXMucmVhZENoYXIoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlYWRVdGY4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZFV0ZjgoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTsKICAgICAgICAgICAgICAgIHJldHVybiBwKHRoaXMucmVhZEJ5dGVzKGUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkZWNvZGVUZXh0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVjb2RlVGV4dCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICJ1dGYtOCI7CiAgICAgICAgICAgICAgICByZXR1cm4gcCh0aGlzLnJlYWRCeXRlcyhlKSwgdCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAid3JpdGVCb29sZWFuIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVCb29sZWFuKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRlVWludDgoZSA/IDI1NSA6IDApLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIndyaXRlSW50OCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlSW50OChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVBdmFpbGFibGUoMSksIHRoaXMuX2RhdGEuc2V0SW50OCh0aGlzLm9mZnNldCsrLCBlKSwgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAid3JpdGVVaW50OCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlVWludDgoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDEpLCB0aGlzLl9kYXRhLnNldFVpbnQ4KHRoaXMub2Zmc2V0KyssIGUpLCB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZUJ5dGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUJ5dGUoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVVaW50OChlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZUJ5dGVzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVCeXRlcyhlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZShlLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDExID0gMDsgX3QxMSA8IGUubGVuZ3RoOyBfdDExKyspIHRoaXMuX2RhdGEuc2V0VWludDgodGhpcy5vZmZzZXQrKywgZVtfdDExXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAid3JpdGVJbnQxNiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlSW50MTYoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpLCB0aGlzLl9kYXRhLnNldEludDE2KHRoaXMub2Zmc2V0LCBlLCB0aGlzLmxpdHRsZUVuZGlhbiksIHRoaXMub2Zmc2V0ICs9IDIsIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIndyaXRlVWludDE2IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVVaW50MTYoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpLCB0aGlzLl9kYXRhLnNldFVpbnQxNih0aGlzLm9mZnNldCwgZSwgdGhpcy5saXR0bGVFbmRpYW4pLCB0aGlzLm9mZnNldCArPSAyLCB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZUludDMyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVJbnQzMihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVBdmFpbGFibGUoNCksIHRoaXMuX2RhdGEuc2V0SW50MzIodGhpcy5vZmZzZXQsIGUsIHRoaXMubGl0dGxlRW5kaWFuKSwgdGhpcy5vZmZzZXQgKz0gNCwgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAid3JpdGVVaW50MzIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVVpbnQzMihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVBdmFpbGFibGUoNCksIHRoaXMuX2RhdGEuc2V0VWludDMyKHRoaXMub2Zmc2V0LCBlLCB0aGlzLmxpdHRsZUVuZGlhbiksIHRoaXMub2Zmc2V0ICs9IDQsIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIndyaXRlRmxvYXQzMiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlRmxvYXQzMihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVBdmFpbGFibGUoNCksIHRoaXMuX2RhdGEuc2V0RmxvYXQzMih0aGlzLm9mZnNldCwgZSwgdGhpcy5saXR0bGVFbmRpYW4pLCB0aGlzLm9mZnNldCArPSA0LCB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZUZsb2F0NjQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUZsb2F0NjQoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDgpLCB0aGlzLl9kYXRhLnNldEZsb2F0NjQodGhpcy5vZmZzZXQsIGUsIHRoaXMubGl0dGxlRW5kaWFuKSwgdGhpcy5vZmZzZXQgKz0gOCwgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAid3JpdGVCaWdJbnQ2NCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlQmlnSW50NjQoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDgpLCB0aGlzLl9kYXRhLnNldEJpZ0ludDY0KHRoaXMub2Zmc2V0LCBlLCB0aGlzLmxpdHRsZUVuZGlhbiksIHRoaXMub2Zmc2V0ICs9IDgsIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIndyaXRlQmlnVWludDY0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVCaWdVaW50NjQoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDgpLCB0aGlzLl9kYXRhLnNldEJpZ1VpbnQ2NCh0aGlzLm9mZnNldCwgZSwgdGhpcy5saXR0bGVFbmRpYW4pLCB0aGlzLm9mZnNldCArPSA4LCB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZUNoYXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUNoYXIoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVVaW50OChlLmNoYXJDb2RlQXQoMCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIndyaXRlQ2hhcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUNoYXJzKGUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIF90MTIgPSAwOyBfdDEyIDwgZS5sZW5ndGg7IF90MTIrKykgdGhpcy53cml0ZVVpbnQ4KGUuY2hhckNvZGVBdChfdDEyKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ3cml0ZVV0ZjgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVV0ZjgoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVCeXRlcyhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZy5lbmNvZGUoZSk7CiAgICAgICAgICAgICAgICB9KGUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ0b0FycmF5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG9BcnJheSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB0aGlzLmxhc3RXcml0dGVuQnl0ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA+IHRoaXMubGFzdFdyaXR0ZW5CeXRlICYmICh0aGlzLmxhc3RXcml0dGVuQnl0ZSA9IHRoaXMub2Zmc2V0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIElPQnVmZmVyOwogICAgICAgICAgfSgpOwogICAgICAgICAgZnVuY3Rpb24geShlLCB0KSB7CiAgICAgICAgICAgIGlmIChlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJOb3QgYSB2YWxpZCBOZXRDREYgdjMueCBmaWxlOiAiLmNvbmNhdCh0KSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBiKGUpIHsKICAgICAgICAgICAgZS5vZmZzZXQgJSA0ICE9IDAgJiYgZS5za2lwKDQgLSBlLm9mZnNldCAlIDQpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdyhlKSB7CiAgICAgICAgICAgIHZhciB0ID0gZS5yZWFkVWludDMyKCksCiAgICAgICAgICAgICAgciA9IGUucmVhZENoYXJzKHQpOwogICAgICAgICAgICByZXR1cm4gYihlKSwgcjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciB4ID0gMSwKICAgICAgICAgICAgQSA9IDIsCiAgICAgICAgICAgIEMgPSAzLAogICAgICAgICAgICBTID0gNCwKICAgICAgICAgICAgTSA9IDUsCiAgICAgICAgICAgIHogPSA2OwogICAgICAgICAgZnVuY3Rpb24gTChlKSB7CiAgICAgICAgICAgIHN3aXRjaCAoTnVtYmVyKGUpKSB7CiAgICAgICAgICAgICAgY2FzZSB4OgogICAgICAgICAgICAgICAgcmV0dXJuICJieXRlIjsKICAgICAgICAgICAgICBjYXNlIEE6CiAgICAgICAgICAgICAgICByZXR1cm4gImNoYXIiOwogICAgICAgICAgICAgIGNhc2UgQzoKICAgICAgICAgICAgICAgIHJldHVybiAic2hvcnQiOwogICAgICAgICAgICAgIGNhc2UgUzoKICAgICAgICAgICAgICAgIHJldHVybiAiaW50IjsKICAgICAgICAgICAgICBjYXNlIE06CiAgICAgICAgICAgICAgICByZXR1cm4gImZsb2F0IjsKICAgICAgICAgICAgICBjYXNlIHo6CiAgICAgICAgICAgICAgICByZXR1cm4gImRvdWJsZSI7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHJldHVybiAidW5kZWZpbmVkIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRShlKSB7CiAgICAgICAgICAgIHN3aXRjaCAoTnVtYmVyKGUpKSB7CiAgICAgICAgICAgICAgY2FzZSB4OgogICAgICAgICAgICAgIGNhc2UgQToKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgIGNhc2UgQzoKICAgICAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgICAgIGNhc2UgUzoKICAgICAgICAgICAgICBjYXNlIE06CiAgICAgICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICAgICAgICBjYXNlIHo6CiAgICAgICAgICAgICAgICByZXR1cm4gODsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBUKGUpIHsKICAgICAgICAgICAgc3dpdGNoIChTdHJpbmcoZSkpIHsKICAgICAgICAgICAgICBjYXNlICJieXRlIjoKICAgICAgICAgICAgICAgIHJldHVybiB4OwogICAgICAgICAgICAgIGNhc2UgImNoYXIiOgogICAgICAgICAgICAgICAgcmV0dXJuIEE7CiAgICAgICAgICAgICAgY2FzZSAic2hvcnQiOgogICAgICAgICAgICAgICAgcmV0dXJuIEM7CiAgICAgICAgICAgICAgY2FzZSAiaW50IjoKICAgICAgICAgICAgICAgIHJldHVybiBTOwogICAgICAgICAgICAgIGNhc2UgImZsb2F0IjoKICAgICAgICAgICAgICAgIHJldHVybiBNOwogICAgICAgICAgICAgIGNhc2UgImRvdWJsZSI6CiAgICAgICAgICAgICAgICByZXR1cm4gejsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBrKGUsIHQpIHsKICAgICAgICAgICAgaWYgKDEgIT09IGUpIHsKICAgICAgICAgICAgICB2YXIgX3I3ID0gbmV3IEFycmF5KGUpOwogICAgICAgICAgICAgIGZvciAodmFyIF9zMyA9IDA7IF9zMyA8IGU7IF9zMysrKSBfcjdbX3MzXSA9IHQoKTsKICAgICAgICAgICAgICByZXR1cm4gX3I3OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBJKGUsIHQsIHIpIHsKICAgICAgICAgICAgc3dpdGNoICh0KSB7CiAgICAgICAgICAgICAgY2FzZSB4OgogICAgICAgICAgICAgICAgcmV0dXJuIGUucmVhZEJ5dGVzKHIpOwogICAgICAgICAgICAgIGNhc2UgQToKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5jaGFyQ29kZUF0KGUubGVuZ3RoIC0gMSkpIHJldHVybiBlLnN1YnN0cmluZygwLCBlLmxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgICAgIH0oZS5yZWFkQ2hhcnMocikpOwogICAgICAgICAgICAgIGNhc2UgQzoKICAgICAgICAgICAgICAgIHJldHVybiBrKHIsIGUucmVhZEludDE2LmJpbmQoZSkpOwogICAgICAgICAgICAgIGNhc2UgUzoKICAgICAgICAgICAgICAgIHJldHVybiBrKHIsIGUucmVhZEludDMyLmJpbmQoZSkpOwogICAgICAgICAgICAgIGNhc2UgTToKICAgICAgICAgICAgICAgIHJldHVybiBrKHIsIGUucmVhZEZsb2F0MzIuYmluZChlKSk7CiAgICAgICAgICAgICAgY2FzZSB6OgogICAgICAgICAgICAgICAgcmV0dXJuIGsociwgZS5yZWFkRmxvYXQ2NC5iaW5kKGUpKTsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgeSghMCwgIm5vbiB2YWxpZCB0eXBlICIuY29uY2F0KHQpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTyhlLCB0KSB7CiAgICAgICAgICAgIHZhciByID0gewogICAgICAgICAgICAgIHJlY29yZERpbWVuc2lvbjogewogICAgICAgICAgICAgICAgbGVuZ3RoOiBlLnJlYWRVaW50MzIoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgci52ZXJzaW9uID0gdDsKICAgICAgICAgICAgdmFyIHMgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHZhciB0LCByOwogICAgICAgICAgICAgIHZhciBzID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgaWYgKDAgPT09IHMpIHJldHVybiB5KDAgIT09IGUucmVhZFVpbnQzMigpLCAid3JvbmcgZW1wdHkgdGFnIGZvciBsaXN0IG9mIGRpbWVuc2lvbnMiKSwgW107CiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgeSgxMCAhPT0gcywgIndyb25nIHRhZyBmb3IgbGlzdCBvZiBkaW1lbnNpb25zIik7CiAgICAgICAgICAgICAgICB2YXIgX24yID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgICAgICBhID0gbmV3IEFycmF5KF9uMik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfczQgPSAwOyBfczQgPCBfbjI7IF9zNCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfbjMgPSB3KGUpOwogICAgICAgICAgICAgICAgICB2YXIgX28yID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgICAgICAgIDAgPT09IF9vMiAmJiAodCA9IF9zNCwgciA9IF9uMyksIGFbX3M0XSA9IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiBfbjMsCiAgICAgICAgICAgICAgICAgICAgc2l6ZTogX28yCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiBhLAogICAgICAgICAgICAgICAgcmVjb3JkSWQ6IHQsCiAgICAgICAgICAgICAgICByZWNvcmROYW1lOiByCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfShlKTsKICAgICAgICAgICAgci5yZWNvcmREaW1lbnNpb24uaWQgPSBzLnJlY29yZElkLCByLnJlY29yZERpbWVuc2lvbi5uYW1lID0gcy5yZWNvcmROYW1lLCByLmRpbWVuc2lvbnMgPSBzLmRpbWVuc2lvbnMsIHIuZ2xvYmFsQXR0cmlidXRlcyA9IEQoZSk7CiAgICAgICAgICAgIHZhciBhID0gZnVuY3Rpb24gKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgcyA9IGUucmVhZFVpbnQzMigpOwogICAgICAgICAgICAgIHZhciBhLAogICAgICAgICAgICAgICAgbiA9IDA7CiAgICAgICAgICAgICAgaWYgKDAgPT09IHMpIHJldHVybiB5KDAgIT09IGUucmVhZFVpbnQzMigpLCAid3JvbmcgZW1wdHkgdGFnIGZvciBsaXN0IG9mIHZhcmlhYmxlcyIpLCBbXTsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB5KDExICE9PSBzLCAid3JvbmcgdGFnIGZvciBsaXN0IG9mIHZhcmlhYmxlcyIpOwogICAgICAgICAgICAgICAgdmFyIF9vMyA9IGUucmVhZFVpbnQzMigpOwogICAgICAgICAgICAgICAgYSA9IG5ldyBBcnJheShfbzMpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3M1ID0gMDsgX3M1IDwgX28zOyBfczUrKykgewogICAgICAgICAgICAgICAgICB2YXIgX280ID0gdyhlKTsKICAgICAgICAgICAgICAgICAgdmFyIF9sID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgICAgICAgIHZhciBfaCA9IG5ldyBBcnJheShfbCk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90MTMgPSAwOyBfdDEzIDwgX2w7IF90MTMrKykgX2hbX3QxM10gPSBlLnJlYWRVaW50MzIoKTsKICAgICAgICAgICAgICAgICAgdmFyIF9jID0gRChlKSwKICAgICAgICAgICAgICAgICAgICBfdSA9IGUucmVhZFVpbnQzMigpOwogICAgICAgICAgICAgICAgICB5KF91IDwgMSAmJiBfdSA+IDYsICJub24gdmFsaWQgdHlwZSAiLmNvbmNhdChfdSkpOwogICAgICAgICAgICAgICAgICB2YXIgX2YyID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgICAgICAgIHZhciBfcDIgPSBlLnJlYWRVaW50MzIoKTsKICAgICAgICAgICAgICAgICAgMiA9PT0gciAmJiAoeShfcDIgPiAwLCAib2Zmc2V0cyBsYXJnZXIgdGhhbiA0R0Igbm90IHN1cHBvcnRlZCIpLCBfcDIgPSBlLnJlYWRVaW50MzIoKSk7CiAgICAgICAgICAgICAgICAgIHZhciBfZyA9ICExOwogICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQgJiYgX2hbMF0gPT09IHQgJiYgKG4gKz0gX2YyLCBfZyA9ICEwKSwgYVtfczVdID0gewogICAgICAgICAgICAgICAgICAgIG5hbWU6IF9vNCwKICAgICAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiBfaCwKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBfYywKICAgICAgICAgICAgICAgICAgICB0eXBlOiBMKF91KSwKICAgICAgICAgICAgICAgICAgICBzaXplOiBfZjIsCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBfcDIsCiAgICAgICAgICAgICAgICAgICAgcmVjb3JkOiBfZwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgdmFyaWFibGVzOiBhLAogICAgICAgICAgICAgICAgcmVjb3JkU3RlcDogbgogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0oZSwgcy5yZWNvcmRJZCwgdCk7CiAgICAgICAgICAgIHJldHVybiByLnZhcmlhYmxlcyA9IGEudmFyaWFibGVzLCByLnJlY29yZERpbWVuc2lvbi5yZWNvcmRTdGVwID0gYS5yZWNvcmRTdGVwLCByOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gZS5yZWFkVWludDMyKCk7CiAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICBpZiAoMCA9PT0gdCkgcmV0dXJuIHkoMCAhPT0gZS5yZWFkVWludDMyKCksICJ3cm9uZyBlbXB0eSB0YWcgZm9yIGxpc3Qgb2YgYXR0cmlidXRlcyIpLCBbXTsKICAgICAgICAgICAgewogICAgICAgICAgICAgIHkoMTIgIT09IHQsICJ3cm9uZyB0YWcgZm9yIGxpc3Qgb2YgYXR0cmlidXRlcyIpOwogICAgICAgICAgICAgIHZhciBfczYgPSBlLnJlYWRVaW50MzIoKTsKICAgICAgICAgICAgICByID0gbmV3IEFycmF5KF9zNik7CiAgICAgICAgICAgICAgZm9yICh2YXIgX3QxNCA9IDA7IF90MTQgPCBfczY7IF90MTQrKykgewogICAgICAgICAgICAgICAgdmFyIF9zNyA9IHcoZSksCiAgICAgICAgICAgICAgICAgIF9hNSA9IGUucmVhZFVpbnQzMigpOwogICAgICAgICAgICAgICAgeShfYTUgPCAxIHx8IF9hNSA+IDYsICJub24gdmFsaWQgdHlwZSAiLmNvbmNhdChfYTUpKTsKICAgICAgICAgICAgICAgIHZhciBfbjQgPSBlLnJlYWRVaW50MzIoKSwKICAgICAgICAgICAgICAgICAgX281ID0gSShlLCBfYTUsIF9uNCk7CiAgICAgICAgICAgICAgICBiKGUpLCByW190MTRdID0gewogICAgICAgICAgICAgICAgICBuYW1lOiBfczcsCiAgICAgICAgICAgICAgICAgIHR5cGU6IEwoX2E1KSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF9vNQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBGKCkgewogICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICBlLnB1c2goIkRJTUVOU0lPTlMiKTsKICAgICAgICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZGltZW5zaW9ucyksCiAgICAgICAgICAgICAgX3N0ZXA7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgIHZhciBfdDE1ID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICBlLnB1c2goIiAgIi5jb25jYXQoX3QxNS5uYW1lLnBhZEVuZCgzMCksICIgPSBzaXplOiAiKS5jb25jYXQoX3QxNS5zaXplKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZS5wdXNoKCIiKSwgZS5wdXNoKCJHTE9CQUwgQVRUUklCVVRFUyIpOwogICAgICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZ2xvYmFsQXR0cmlidXRlcyksCiAgICAgICAgICAgICAgX3N0ZXAyOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICB2YXIgX3QxNiA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgICAgICAgIGUucHVzaCgiICAiLmNvbmNhdChfdDE2Lm5hbWUucGFkRW5kKDMwKSwgIiA9ICIpLmNvbmNhdChfdDE2LnZhbHVlKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy52YXJpYWJsZXMpKTsKICAgICAgICAgICAgZS5wdXNoKCIiKSwgZS5wdXNoKCJWQVJJQUJMRVM6Iik7CiAgICAgICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodCksCiAgICAgICAgICAgICAgX3N0ZXAzOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICB2YXIgX3I4ID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgICAgICAgX3I4LnZhbHVlID0gdGhpcy5nZXREYXRhVmFyaWFibGUoX3I4KTsKICAgICAgICAgICAgICAgIHZhciBfdDE3ID0gSlNPTi5zdHJpbmdpZnkoX3I4LnZhbHVlKTsKICAgICAgICAgICAgICAgIF90MTcubGVuZ3RoID4gNTAgJiYgKF90MTcgPSBfdDE3LnN1YnN0cmluZygwLCA1MCkpLCBpc05hTihfcjgudmFsdWUubGVuZ3RoKSB8fCAoX3QxNyArPSAiIChsZW5ndGg6ICIuY29uY2F0KF9yOC52YWx1ZS5sZW5ndGgsICIpIikpLCBlLnB1c2goIiAgIi5jb25jYXQoX3I4Lm5hbWUucGFkRW5kKDMwKSwgIiA9ICIpLmNvbmNhdChfdDE3KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZS5qb2luKCJcbiIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIE5ldENERlJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIE5ldENERlJlYWRlcihlKSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5ldENERlJlYWRlcik7CiAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgSU9CdWZmZXIoZSk7CiAgICAgICAgICAgICAgdC5zZXRCaWdFbmRpYW4oKSwgeSgiQ0RGIiAhPT0gdC5yZWFkQ2hhcnMoMyksICJzaG91bGQgc3RhcnQgd2l0aCBDREYiKTsKICAgICAgICAgICAgICB2YXIgciA9IHQucmVhZEJ5dGUoKTsKICAgICAgICAgICAgICB5KHIgPiAyLCAidW5rbm93biB2ZXJzaW9uIiksIHRoaXMuaGVhZGVyID0gTyh0LCByKSwgdGhpcy5idWZmZXIgPSB0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhOZXRDREZSZWFkZXIsIFt7CiAgICAgICAgICAgICAga2V5OiAidmVyc2lvbiIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMSA9PT0gdGhpcy5oZWFkZXIudmVyc2lvbiA/ICJjbGFzc2ljIGZvcm1hdCIgOiAiNjQtYml0IG9mZnNldCBmb3JtYXQiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlY29yZERpbWVuc2lvbiIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXIucmVjb3JkRGltZW5zaW9uOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImRpbWVuc2lvbnMiLAogICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyLmRpbWVuc2lvbnM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2xvYmFsQXR0cmlidXRlcyIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXIuZ2xvYmFsQXR0cmlidXRlczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRBdHRyaWJ1dGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdsb2JhbEF0dHJpYnV0ZXMuZmluZChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdC5uYW1lID09PSBlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA/IHQudmFsdWUgOiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldERhdGFWYXJpYWJsZUFzU3RyaW5nIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YVZhcmlhYmxlQXNTdHJpbmcoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdldERhdGFWYXJpYWJsZShlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0ID8gdC5qb2luKCIiKSA6IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidmFyaWFibGVzIiwKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhlYWRlci52YXJpYWJsZXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidG9TdHJpbmciLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICAgICAgICAgIHJldHVybiBGLmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0RGF0YVZhcmlhYmxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YVZhcmlhYmxlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0OwogICAgICAgICAgICAgICAgcmV0dXJuIHQgPSAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHRoaXMuaGVhZGVyLnZhcmlhYmxlcy5maW5kKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm5hbWUgPT09IGU7CiAgICAgICAgICAgICAgICB9KSA6IGUsIHkodm9pZCAwID09PSB0LCAidmFyaWFibGUgbm90IGZvdW5kOiAiLmNvbmNhdChlKSksIHRoaXMuYnVmZmVyLnNlZWsodC5vZmZzZXQpLCB0LnJlY29yZCA/IGZ1bmN0aW9uIChlLCB0LCByKSB7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gVCh0LnR5cGUpLAogICAgICAgICAgICAgICAgICAgIGEgPSB0LnNpemUgPyB0LnNpemUgLyBFKHMpIDogMTsKICAgICAgICAgICAgICAgICAgdmFyIG4gPSByLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBvID0gbmV3IEFycmF5KG4pOwogICAgICAgICAgICAgICAgICB2YXIgbCA9IHIucmVjb3JkU3RlcDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3QxOCA9IDA7IF90MTggPCBuOyBfdDE4KyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3I5ID0gZS5vZmZzZXQ7CiAgICAgICAgICAgICAgICAgICAgb1tfdDE4XSA9IEkoZSwgcywgYSksIGUuc2VlayhfcjkgKyBsKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByZXR1cm4gbzsKICAgICAgICAgICAgICAgIH0odGhpcy5idWZmZXIsIHQsIHRoaXMuaGVhZGVyLnJlY29yZERpbWVuc2lvbikgOiBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IFQodC50eXBlKTsKICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0LnNpemUgLyBFKHIpLAogICAgICAgICAgICAgICAgICAgIGEgPSBuZXcgQXJyYXkocyk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90MTkgPSAwOyBfdDE5IDwgczsgX3QxOSsrKSBhW190MTldID0gSShlLCByLCAxKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgICAgICB9KHRoaXMuYnVmZmVyLCB0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkYXRhVmFyaWFibGVFeGlzdHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkYXRhVmFyaWFibGVFeGlzdHMoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5oZWFkZXIudmFyaWFibGVzLmZpbmQoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubmFtZSA9PT0gZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImF0dHJpYnV0ZUV4aXN0cyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dHJpYnV0ZUV4aXN0cyhlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmdsb2JhbEF0dHJpYnV0ZXMuZmluZChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdC5uYW1lID09PSBlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBOZXRDREZSZWFkZXI7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgUiA9IHIoNzg4NSksCiAgICAgICAgICAgIFAgPSByKDM5MjApOwogICAgICAgICAgdmFyIF9HTE1vZGVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX0dMTW9kZWwoZSwgdCkgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfR0xNb2RlbCk7CiAgICAgICAgICAgICAgdGhpcy5hdG9tcyA9IFtdLCB0aGlzLmZyYW1lcyA9IFtdLCB0aGlzLmJveCA9IG51bGwsIHRoaXMuYXRvbWRmcyA9IG51bGwsIHRoaXMuaWQgPSAwLCB0aGlzLmhpZGRlbiA9ICExLCB0aGlzLm1vbE9iaiA9IG51bGwsIHRoaXMucmVuZGVyZWRNb2xPYmogPSBudWxsLCB0aGlzLmxhc3RDb2xvcnMgPSBudWxsLCB0aGlzLm1vZGVsRGF0YSA9IHt9LCB0aGlzLm1vZGVsRGF0YXMgPSBudWxsLCB0aGlzLmlkTWF0cml4ID0gbmV3IG4uTWF0cml4NCgpLCB0aGlzLmRvbnREdXBsaWNhdGVBdG9tcyA9ICEwLCB0aGlzLmRlZmF1bHRDb2xvciA9IG8uZWxlbWVudENvbG9ycy5kZWZhdWx0Q29sb3IsIHRoaXMuZGVmYXVsdFN0aWNrUmFkaXVzID0gLjI1LCB0aGlzLm9wdGlvbnMgPSB0IHx8IHt9LCB0aGlzLkVsZW1lbnRDb2xvcnMgPSB0aGlzLm9wdGlvbnMuZGVmYXVsdGNvbG9ycyA/IHRoaXMub3B0aW9ucy5kZWZhdWx0Y29sb3JzIDogby5lbGVtZW50Q29sb3JzLmRlZmF1bHRDb2xvcnMsIHRoaXMuZGVmYXVsdFNwaGVyZVJhZGl1cyA9IHRoaXMub3B0aW9ucy5kZWZhdWx0U3BoZXJlUmFkaXVzID8gdGhpcy5vcHRpb25zLmRlZmF1bHRTcGhlcmVSYWRpdXMgOiAxLjUsIHRoaXMuZGVmYXVsdENhcnRvb25RdWFsaXR5ID0gdGhpcy5vcHRpb25zLmNhcnRvb25RdWFsaXR5ID8gdGhpcy5vcHRpb25zLmNhcnRvb25RdWFsaXR5IDogMTAsIHRoaXMuaWQgPSBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfR0xNb2RlbCwgW3sKICAgICAgICAgICAgICBrZXk6ICJnZXRSYWRpdXNGcm9tU3R5bGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYWRpdXNGcm9tU3R5bGUoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmRlZmF1bHRTcGhlcmVSYWRpdXM7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0LnJhZGl1cykgciA9IHQucmFkaXVzO2Vsc2UgaWYgKF9HTE1vZGVsLnZkd1JhZGlpW2UuZWxlbV0pIHIgPSBfR0xNb2RlbC52ZHdSYWRpaVtlLmVsZW1dO2Vsc2UgaWYgKGUuZWxlbS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDIwID0gZS5lbGVtOwogICAgICAgICAgICAgICAgICBfdDIwID0gX3QyMFswXS50b1VwcGVyQ2FzZSgpICsgX3QyMFsxXS50b0xvd2VyQ2FzZSgpLCBfR0xNb2RlbC52ZHdSYWRpaVtfdDIwXSAmJiAociA9IF9HTE1vZGVsLnZkd1JhZGlpW190MjBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQuc2NhbGUgJiYgKHIgKj0gdC5zY2FsZSksIHI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0F0b21Dcm9zcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBdG9tQ3Jvc3MoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKGUuc3R5bGUuY3Jvc3MpIHsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLnN0eWxlLmNyb3NzOwogICAgICAgICAgICAgICAgICBpZiAoIXIuaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSByLmxpbmV3aWR0aCB8fCBfR0xNb2RlbC5kZWZhdWx0bGluZVdpZHRoOwogICAgICAgICAgICAgICAgICAgIHRbYV0gfHwgKHRbYV0gPSBuZXcgcy5HZW9tZXRyeSgpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRbYV0udXBkYXRlR2VvR3JvdXAoNiksCiAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5nZXRSYWRpdXNGcm9tU3R5bGUoZSwgciksCiAgICAgICAgICAgICAgICAgICAgICBoID0gW1tsLCAwLCAwXSwgWy1sLCAwLCAwXSwgWzAsIGwsIDBdLCBbMCwgLWwsIDBdLCBbMCwgMCwgbF0sIFswLCAwLCAtbF1dLAogICAgICAgICAgICAgICAgICAgICAgdSA9IGUuY2xpY2thYmxlIHx8IGUuaG92ZXJhYmxlOwogICAgICAgICAgICAgICAgICAgIHUgJiYgdm9pZCAwID09PSBlLmludGVyc2VjdGlvblNoYXBlICYmIChlLmludGVyc2VjdGlvblNoYXBlID0gewogICAgICAgICAgICAgICAgICAgICAgc3BoZXJlOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIGN5bGluZGVyOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IFtdCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZiA9ICgwLCBjLmdldENvbG9yRnJvbVN0eWxlKShlLCByKSwgcCA9IG8udmVydGV4QXJyYXksIGcgPSBvLmNvbG9yQXJyYXksIHYgPSAwOyB2IDwgNjsgdisrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgXyA9IDMgKiBvLnZlcnRpY2VzOwogICAgICAgICAgICAgICAgICAgICAgaWYgKG8udmVydGljZXMrKywgcFtfXSA9IGUueCArIGhbdl1bMF0sIHBbXyArIDFdID0gZS55ICsgaFt2XVsxXSwgcFtfICsgMl0gPSBlLnogKyBoW3ZdWzJdLCBnW19dID0gZi5yLCBnW18gKyAxXSA9IGYuZywgZ1tfICsgMl0gPSBmLmIsIHUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBuZXcgbi5WZWN0b3IzKGhbdl1bMF0sIGhbdl1bMV0sIGhbdl1bMl0pOwogICAgICAgICAgICAgICAgICAgICAgICB5Lm11bHRpcGx5U2NhbGFyKC4xKSwgeS5zZXQoeS54ICsgZS54LCB5LnkgKyBlLnksIHkueiArIGUueiksIGUuaW50ZXJzZWN0aW9uU2hhcGUubGluZS5wdXNoKHkpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldEdvb2RDcm9zcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdvb2RDcm9zcyhlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gbnVsbCwgbyA9IC0xLCBsID0gMCwgaCA9IGUuYm9uZHMubGVuZ3RoOyBsIDwgaDsgbCsrKSBpZiAoZS5ib25kc1tsXSAhPSB0LmluZGV4KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDIxID0gZS5ib25kc1tsXSwKICAgICAgICAgICAgICAgICAgICBfaDIgPSB0aGlzLmF0b21zW190MjFdLAogICAgICAgICAgICAgICAgICAgIF91MiA9IG5ldyBuLlZlY3RvcjMoX2gyLngsIF9oMi55LCBfaDIueikuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgX3UyLnN1YihyKTsKICAgICAgICAgICAgICAgICAgdmFyIF9mMyA9IF91Mi5jbG9uZSgpOwogICAgICAgICAgICAgICAgICBfZjMuY3Jvc3Mocyk7CiAgICAgICAgICAgICAgICAgIHZhciBjID0gX2YzLmxlbmd0aFNxKCk7CiAgICAgICAgICAgICAgICAgIGlmIChjID4gbyAmJiAoYSA9IF9mMywgKG8gPSBjKSA+IC4xKSkgcmV0dXJuIGE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRTaWRlQm9uZFYiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaWRlQm9uZFYoZSwgdCwgcikgewogICAgICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgICAgIGggPSBuZXcgbi5WZWN0b3IzKGUueCwgZS55LCBlLnopLAogICAgICAgICAgICAgICAgICBjID0gbmV3IG4uVmVjdG9yMyh0LngsIHQueSwgdC56KS5jbG9uZSgpLAogICAgICAgICAgICAgICAgICB1ID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmIChjLnN1YihoKSwgMSA9PT0gZS5ib25kcy5sZW5ndGgpIDEgPT09IHQuYm9uZHMubGVuZ3RoID8gKHUgPSBjLmNsb25lKCksIE1hdGguYWJzKHUueCkgPiAxZS00ID8gdS55ICs9IDEgOiB1LnggKz0gMSkgOiAocyA9IChyICsgMSkgJSB0LmJvbmRzLmxlbmd0aCwgYSA9IHQuYm9uZHNbc10sIG8gPSB0aGlzLmF0b21zW2FdLCAobCA9IG5ldyBuLlZlY3RvcjMoby54LCBvLnksIG8ueikuY2xvbmUoKSkuc3ViKGgpLCAodSA9IGwuY2xvbmUoKSkuY3Jvc3MoYykpO2Vsc2UgaWYgKCh1ID0gdGhpcy5nZXRHb29kQ3Jvc3MoZSwgdCwgaCwgYykpLmxlbmd0aFNxKCkgPCAuMDEpIHsKICAgICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmdldEdvb2RDcm9zcyh0LCBlLCBoLCBjKTsKICAgICAgICAgICAgICAgICAgbnVsbCAhPSBmICYmICh1ID0gZik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdS5sZW5ndGhTcSgpIDwgLjAxICYmICh1ID0gYy5jbG9uZSgpLCBNYXRoLmFicyh1LngpID4gMWUtNCA/IHUueSArPSAxIDogdS54ICs9IDEpLCB1LmNyb3NzKGMpLCB1Lm5vcm1hbGl6ZSgpLCB1OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZExpbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaW5lKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgICAgIGVbcl0gPSBzLngsIGVbciArIDFdID0gcy55LCBlW3IgKyAyXSA9IHMueiwgdFtyXSA9IG4uciwgdFtyICsgMV0gPSBuLmcsIHRbciArIDJdID0gbi5iLCBlW3IgKyAzXSA9IGEueCwgZVtyICsgNF0gPSBhLnksIGVbciArIDVdID0gYS56LCB0W3IgKyAzXSA9IG4uciwgdFtyICsgNF0gPSBuLmcsIHRbciArIDVdID0gbi5iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImRyYXdCb25kTGluZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Qm9uZExpbmVzKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGlmIChlLnN0eWxlLmxpbmUpIHsKICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLnN0eWxlLmxpbmU7CiAgICAgICAgICAgICAgICAgIGlmICghYS5oaWRkZW4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbCwKICAgICAgICAgICAgICAgICAgICAgIGgsCiAgICAgICAgICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgICAgIHAgPSBhLmxpbmV3aWR0aCB8fCBfR0xNb2RlbC5kZWZhdWx0bGluZVdpZHRoOwogICAgICAgICAgICAgICAgICAgIHJbcF0gfHwgKHJbcF0gPSBuZXcgcy5HZW9tZXRyeSgpKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gcltwXS51cGRhdGVHZW9Hcm91cCg2ICogZS5ib25kcy5sZW5ndGgpLCB2ID0gZy52ZXJ0ZXhBcnJheSwgXyA9IGcuY29sb3JBcnJheSwgeSA9IDA7IHkgPCBlLmJvbmRzLmxlbmd0aDsgeSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHRbZS5ib25kc1t5XV07CiAgICAgICAgICAgICAgICAgICAgICBpZiAoYi5zdHlsZS5saW5lICYmICEoZS5pbmRleCA+PSBiLmluZGV4KSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IG5ldyBuLlZlY3RvcjMoZS54LCBlLnksIGUueiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IG5ldyBuLlZlY3RvcjMoYi54LCBiLnksIGIueiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgQSA9IHcuY2xvbmUoKS5hZGQoeCkubXVsdGlwbHlTY2FsYXIoLjUpLAogICAgICAgICAgICAgICAgICAgICAgICAgIEMgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICBTID0gZS5jbGlja2FibGUgfHwgZS5ob3ZlcmFibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgTSA9IGIuY2xpY2thYmxlIHx8IGIuaG92ZXJhYmxlOwogICAgICAgICAgICAgICAgICAgICAgICAoUyB8fCBNKSAmJiAoUyAmJiAodm9pZCAwID09PSBlLmludGVyc2VjdGlvblNoYXBlICYmIChlLmludGVyc2VjdGlvblNoYXBlID0gewogICAgICAgICAgICAgICAgICAgICAgICAgIHNwaGVyZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3lsaW5kZXI6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlOiBbXQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgZS5pbnRlcnNlY3Rpb25TaGFwZS5saW5lLnB1c2godyksIGUuaW50ZXJzZWN0aW9uU2hhcGUubGluZS5wdXNoKEEpKSwgTSAmJiAodm9pZCAwID09PSBiLmludGVyc2VjdGlvblNoYXBlICYmIChiLmludGVyc2VjdGlvblNoYXBlID0gewogICAgICAgICAgICAgICAgICAgICAgICAgIHNwaGVyZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3lsaW5kZXI6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlOiBbXQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgYi5pbnRlcnNlY3Rpb25TaGFwZS5saW5lLnB1c2goQSksIGIuaW50ZXJzZWN0aW9uU2hhcGUubGluZS5wdXNoKHgpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB6ID0gKDAsIGMuZ2V0Q29sb3JGcm9tU3R5bGUpKGUsIGUuc3R5bGUubGluZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgTCA9ICgwLCBjLmdldENvbG9yRnJvbVN0eWxlKShiLCBiLnN0eWxlLmxpbmUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5ib25kU3R5bGVzICYmIGUuYm9uZFN0eWxlc1t5XSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBFID0gZS5ib25kU3R5bGVzW3ldOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghRS5pc3dpcmUpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIEUuc2luZ2xlQm9uZCAmJiAoQyA9ICEwKSwgdm9pZCAwICE9PSBFLmNvbG9yMSAmJiAoeiA9IG8uQ0MuY29sb3IoRS5jb2xvcjEpKSwgdm9pZCAwICE9PSBFLmNvbG9yMiAmJiAoTCA9IG8uQ0MuY29sb3IoRS5jb2xvcjIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgVCwKICAgICAgICAgICAgICAgICAgICAgICAgICBrLAogICAgICAgICAgICAgICAgICAgICAgICAgIEkgPSAzICogZy52ZXJ0aWNlczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuYm9uZE9yZGVyW3ldID4gMSAmJiBlLmJvbmRPcmRlclt5XSA8IDQgJiYgIUMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTyA9IHRoaXMuZ2V0U2lkZUJvbmRWKGUsIGIsIHkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRCA9IHguY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBELnN1Yih3KSwgMiA9PSBlLmJvbmRPcmRlclt5XSA/IChPLm11bHRpcGx5U2NhbGFyKC4xKSwgKGwgPSB3LmNsb25lKCkpLmFkZChPKSwgKGggPSB3LmNsb25lKCkpLnN1YihPKSwgKHUgPSBsLmNsb25lKCkpLmFkZChEKSwgKGYgPSBoLmNsb25lKCkpLmFkZChEKSwgeiA9PSBMID8gKGcudmVydGljZXMgKz0gNCwgdGhpcy5hZGRMaW5lKHYsIF8sIEksIGwsIHUsIHopLCB0aGlzLmFkZExpbmUodiwgXywgSSArIDYsIGgsIGYsIHopKSA6IChnLnZlcnRpY2VzICs9IDgsIEQubXVsdGlwbHlTY2FsYXIoLjUpLCAoVCA9IGwuY2xvbmUoKSkuYWRkKEQpLCAoayA9IGguY2xvbmUoKSkuYWRkKEQpLCB0aGlzLmFkZExpbmUodiwgXywgSSwgbCwgVCwgeiksIHRoaXMuYWRkTGluZSh2LCBfLCBJICsgNiwgVCwgdSwgTCksIHRoaXMuYWRkTGluZSh2LCBfLCBJICsgMTIsIGgsIGssIHopLCB0aGlzLmFkZExpbmUodiwgXywgSSArIDE4LCBrLCBmLCBMKSkpIDogMyA9PSBlLmJvbmRPcmRlclt5XSAmJiAoTy5tdWx0aXBseVNjYWxhciguMSksIChsID0gdy5jbG9uZSgpKS5hZGQoTyksIChoID0gdy5jbG9uZSgpKS5zdWIoTyksICh1ID0gbC5jbG9uZSgpKS5hZGQoRCksIChmID0gaC5jbG9uZSgpKS5hZGQoRCksIHogPT0gTCA/IChnLnZlcnRpY2VzICs9IDYsIHRoaXMuYWRkTGluZSh2LCBfLCBJLCB3LCB4LCB6KSwgdGhpcy5hZGRMaW5lKHYsIF8sIEkgKyA2LCBsLCB1LCB6KSwgdGhpcy5hZGRMaW5lKHYsIF8sIEkgKyAxMiwgaCwgZiwgeikpIDogKGcudmVydGljZXMgKz0gMTIsIEQubXVsdGlwbHlTY2FsYXIoLjUpLCAoVCA9IGwuY2xvbmUoKSkuYWRkKEQpLCAoayA9IGguY2xvbmUoKSkuYWRkKEQpLCB0aGlzLmFkZExpbmUodiwgXywgSSwgdywgQSwgeiksIHRoaXMuYWRkTGluZSh2LCBfLCBJICsgNiwgQSwgeCwgTCksIHRoaXMuYWRkTGluZSh2LCBfLCBJICsgMTIsIGwsIFQsIHopLCB0aGlzLmFkZExpbmUodiwgXywgSSArIDE4LCBULCB1LCBMKSwgdGhpcy5hZGRMaW5lKHYsIF8sIEkgKyAyNCwgaCwgaywgeiksIHRoaXMuYWRkTGluZSh2LCBfLCBJICsgMzAsIGssIGYsIEwpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB6ID09IEwgPyAoZy52ZXJ0aWNlcyArPSAyLCB0aGlzLmFkZExpbmUodiwgXywgSSwgdywgeCwgeikpIDogKGcudmVydGljZXMgKz0gNCwgdGhpcy5hZGRMaW5lKHYsIF8sIEksIHcsIEEsIHopLCB0aGlzLmFkZExpbmUodiwgXywgSSArIDYsIEEsIHgsIEwpKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkcmF3QXRvbVNwaGVyZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBdG9tU3BoZXJlKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmIChlLnN0eWxlLnNwaGVyZSkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IGUuc3R5bGUuc3BoZXJlOwogICAgICAgICAgICAgICAgICBpZiAoIXIuaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAoMCwgYy5nZXRDb2xvckZyb21TdHlsZSkoZSwgciksCiAgICAgICAgICAgICAgICAgICAgICBvID0gdGhpcy5nZXRSYWRpdXNGcm9tU3R5bGUoZSwgcik7CiAgICAgICAgICAgICAgICAgICAgaWYgKCghMCA9PT0gZS5jbGlja2FibGUgfHwgZS5ob3ZlcmFibGUpICYmIHZvaWQgMCAhPT0gZS5pbnRlcnNlY3Rpb25TaGFwZSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBuZXcgbi5WZWN0b3IzKGUueCwgZS55LCBlLnopOwogICAgICAgICAgICAgICAgICAgICAgZS5pbnRlcnNlY3Rpb25TaGFwZS5zcGhlcmUucHVzaChuZXcgYS5TcGhlcmUoaCwgbykpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsLkdMRHJhdy5kcmF3U3BoZXJlKHQsIGUsIG8sIHMpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0F0b21DbGlja1NwaGVyZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBdG9tQ2xpY2tTcGhlcmUoZSkgewogICAgICAgICAgICAgICAgaWYgKGUuc3R5bGUuY2xpY2tzcGhlcmUpIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLnN0eWxlLmNsaWNrc3BoZXJlOwogICAgICAgICAgICAgICAgICBpZiAoIXQuaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldFJhZGl1c0Zyb21TdHlsZShlLCB0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoKCEwID09PSBlLmNsaWNrYWJsZSB8fCBlLmhvdmVyYWJsZSkgJiYgdm9pZCAwICE9PSBlLmludGVyc2VjdGlvblNoYXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyBuLlZlY3RvcjMoZS54LCBlLnksIGUueik7CiAgICAgICAgICAgICAgICAgICAgICBlLmludGVyc2VjdGlvblNoYXBlLnNwaGVyZS5wdXNoKG5ldyBhLlNwaGVyZShzLCByKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0F0b21JbnN0YW5jZWQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3QXRvbUluc3RhbmNlZChlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAoZS5zdHlsZS5zcGhlcmUpIHsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLnN0eWxlLnNwaGVyZTsKICAgICAgICAgICAgICAgICAgaWYgKCFyLmhpZGRlbikgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5nZXRSYWRpdXNGcm9tU3R5bGUoZSwgciksCiAgICAgICAgICAgICAgICAgICAgICBvID0gKDAsIGMuZ2V0Q29sb3JGcm9tU3R5bGUpKGUsIHIpLAogICAgICAgICAgICAgICAgICAgICAgbCA9IHQudXBkYXRlR2VvR3JvdXAoMSksCiAgICAgICAgICAgICAgICAgICAgICBoID0gbC52ZXJ0aWNlcywKICAgICAgICAgICAgICAgICAgICAgIHUgPSAzICogaCwKICAgICAgICAgICAgICAgICAgICAgIGYgPSBsLnZlcnRleEFycmF5LAogICAgICAgICAgICAgICAgICAgICAgcCA9IGwuY29sb3JBcnJheSwKICAgICAgICAgICAgICAgICAgICAgIGcgPSBsLnJhZGl1c0FycmF5OwogICAgICAgICAgICAgICAgICAgIGlmIChmW3VdID0gZS54LCBmW3UgKyAxXSA9IGUueSwgZlt1ICsgMl0gPSBlLnosIHBbdV0gPSBvLnIsIHBbdSArIDFdID0gby5nLCBwW3UgKyAyXSA9IG8uYiwgZ1toXSA9IHMsICghMCA9PT0gZS5jbGlja2FibGUgfHwgZS5ob3ZlcmFibGUpICYmIHZvaWQgMCAhPT0gZS5pbnRlcnNlY3Rpb25TaGFwZSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBuZXcgbi5WZWN0b3IzKGUueCwgZS55LCBlLnopOwogICAgICAgICAgICAgICAgICAgICAgZS5pbnRlcnNlY3Rpb25TaGFwZS5zcGhlcmUucHVzaChuZXcgYS5TcGhlcmUodiwgcykpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsLnZlcnRpY2VzICs9IDE7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkcmF3U3BoZXJlSW1wb3N0ZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3U3BoZXJlSW1wb3N0ZXIoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgdmFyIGEsCiAgICAgICAgICAgICAgICAgIG4gPSBlLnVwZGF0ZUdlb0dyb3VwKDQpLAogICAgICAgICAgICAgICAgICBvID0gbi52ZXJ0aWNlcywKICAgICAgICAgICAgICAgICAgbCA9IDMgKiBvLAogICAgICAgICAgICAgICAgICBoID0gbi52ZXJ0ZXhBcnJheSwKICAgICAgICAgICAgICAgICAgYyA9IG4uY29sb3JBcnJheTsKICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCA0OyBhKyspIGhbbCArIDMgKiBhXSA9IHQueCwgaFtsICsgMyAqIGEgKyAxXSA9IHQueSwgaFtsICsgMyAqIGEgKyAyXSA9IHQuejsKICAgICAgICAgICAgICAgIHZhciB1ID0gbi5ub3JtYWxBcnJheTsKICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCA0OyBhKyspIGNbbCArIDMgKiBhXSA9IHMuciwgY1tsICsgMyAqIGEgKyAxXSA9IHMuZywgY1tsICsgMyAqIGEgKyAyXSA9IHMuYjsKICAgICAgICAgICAgICAgIHVbbCArIDBdID0gLXIsIHVbbCArIDFdID0gciwgdVtsICsgMl0gPSAwLCB1W2wgKyAzXSA9IC1yLCB1W2wgKyA0XSA9IC1yLCB1W2wgKyA1XSA9IDAsIHVbbCArIDZdID0gciwgdVtsICsgN10gPSAtciwgdVtsICsgOF0gPSAwLCB1W2wgKyA5XSA9IHIsIHVbbCArIDEwXSA9IHIsIHVbbCArIDExXSA9IDAsIG4udmVydGljZXMgKz0gNDsKICAgICAgICAgICAgICAgIHZhciBmID0gbi5mYWNlQXJyYXksCiAgICAgICAgICAgICAgICAgIHAgPSBuLmZhY2VpZHg7CiAgICAgICAgICAgICAgICBmW3AgKyAwXSA9IG8sIGZbcCArIDFdID0gbyArIDEsIGZbcCArIDJdID0gbyArIDIsIGZbcCArIDNdID0gbyArIDIsIGZbcCArIDRdID0gbyArIDMsIGZbcCArIDVdID0gbywgbi5mYWNlaWR4ICs9IDY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0F0b21JbXBvc3RlciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBdG9tSW1wb3N0ZXIoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKGUuc3R5bGUuc3BoZXJlKSB7CiAgICAgICAgICAgICAgICAgIHZhciByID0gZS5zdHlsZS5zcGhlcmU7CiAgICAgICAgICAgICAgICAgIGlmICghci5oaWRkZW4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMuZ2V0UmFkaXVzRnJvbVN0eWxlKGUsIHIpLAogICAgICAgICAgICAgICAgICAgICAgbyA9ICgwLCBjLmdldENvbG9yRnJvbVN0eWxlKShlLCByKTsKICAgICAgICAgICAgICAgICAgICBpZiAoKCEwID09PSBlLmNsaWNrYWJsZSB8fCBlLmhvdmVyYWJsZSkgJiYgdm9pZCAwICE9PSBlLmludGVyc2VjdGlvblNoYXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IG5ldyBuLlZlY3RvcjMoZS54LCBlLnksIGUueik7CiAgICAgICAgICAgICAgICAgICAgICBlLmludGVyc2VjdGlvblNoYXBlLnNwaGVyZS5wdXNoKG5ldyBhLlNwaGVyZShsLCBzKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1NwaGVyZUltcG9zdGVyKHQsIGUsIHMsIG8pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0JvbmRTdGlja3MiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Qm9uZFN0aWNrcyhlLCB0LCByKSB7CiAgICAgICAgICAgICAgICBpZiAoZS5zdHlsZS5zdGljaykgewogICAgICAgICAgICAgICAgICB2YXIgcyA9IGUuc3R5bGUuc3RpY2s7CiAgICAgICAgICAgICAgICAgIGlmICghcy5oaWRkZW4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaCwKICAgICAgICAgICAgICAgICAgICAgIHUsCiAgICAgICAgICAgICAgICAgICAgICBmLAogICAgICAgICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgICAgICAgIGcsCiAgICAgICAgICAgICAgICAgICAgICB2LAogICAgICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgICAgIHksCiAgICAgICAgICAgICAgICAgICAgICBiLAogICAgICAgICAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICAgICAgICAgIHgsCiAgICAgICAgICAgICAgICAgICAgICBBLAogICAgICAgICAgICAgICAgICAgICAgQywKICAgICAgICAgICAgICAgICAgICAgIFMsCiAgICAgICAgICAgICAgICAgICAgICBNID0gcy5yYWRpdXMgfHwgdGhpcy5kZWZhdWx0U3RpY2tSYWRpdXMsCiAgICAgICAgICAgICAgICAgICAgICB6ID0gTSwKICAgICAgICAgICAgICAgICAgICAgIEwgPSBzLnNpbmdsZUJvbmRzIHx8ICExLAogICAgICAgICAgICAgICAgICAgICAgRSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICBUID0gMCwKICAgICAgICAgICAgICAgICAgICAgIGsgPSAoMCwgYy5nZXRDb2xvckZyb21TdHlsZSkoZSwgcyk7CiAgICAgICAgICAgICAgICAgICAgIWUuY2FwRHJhd24gJiYgZS5ib25kcy5sZW5ndGggPCA0ICYmIChFID0gMik7CiAgICAgICAgICAgICAgICAgICAgdmFyIEkgPSBsLkdMRHJhdy5kcmF3Q3lsaW5kZXI7CiAgICAgICAgICAgICAgICAgICAgZm9yIChyLmltcG9zdGVyICYmIChJID0gX0dMTW9kZWwuZHJhd1N0aWNrSW1wb3N0ZXIpLCBmID0gMDsgZiA8IGUuYm9uZHMubGVuZ3RoOyBmKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBPID0gdFtlLmJvbmRzW2ZdXTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChBID0gQyA9IFMgPSBudWxsLCBlLmluZGV4IDwgTy5pbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgRCA9IE8uc3R5bGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghRC5zdGljayB8fCBELnN0aWNrLmhpZGRlbikgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBGID0gKDAsIGMuZ2V0Q29sb3JGcm9tU3R5bGUpKE8sIEQuc3RpY2spOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoeiA9IE0sIHAgPSBMLCBlLmJvbmRTdHlsZXMgJiYgZS5ib25kU3R5bGVzW2ZdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChnID0gZS5ib25kU3R5bGVzW2ZdKS5pc3dpcmUpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGcucmFkaXVzICYmICh6ID0gZy5yYWRpdXMpLCBnLnNpbmdsZUJvbmQgJiYgKHAgPSAhMCksIHZvaWQgMCAhPT0gZy5jb2xvcjEgJiYgKGsgPSBvLkNDLmNvbG9yKGcuY29sb3IxKSksIHZvaWQgMCAhPT0gZy5jb2xvcjIgJiYgKEYgPSBvLkNDLmNvbG9yKGcuY29sb3IyKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFIgPSBuZXcgbi5WZWN0b3IzKGUueCwgZS55LCBlLnopLAogICAgICAgICAgICAgICAgICAgICAgICAgIFAgPSBuZXcgbi5WZWN0b3IzKE8ueCwgTy55LCBPLnopOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5ib25kT3JkZXJbZl0gPD0gMSB8fCBwIHx8IGUuYm9uZE9yZGVyW2ZdID4gMykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmJvbmRPcmRlcltmXSA8IDEgJiYgKHogKj0gZS5ib25kT3JkZXJbZl0pLCAhTy5jYXBEcmF3biAmJiBPLmJvbmRzLmxlbmd0aCA8IDQgJiYgKFQgPSAyKSwgayAhPSBGID8gKEkociwgUiwgQSA9IG5ldyBuLlZlY3RvcjMoKS5hZGRWZWN0b3JzKFIsIFApLm11bHRpcGx5U2NhbGFyKC41KSwgeiwgaywgRSwgMCksIEkociwgQSwgUCwgeiwgRiwgMCwgVCkpIDogSShyLCBSLCBQLCB6LCBrLCBFLCBUKSwgaCA9IGUuY2xpY2thYmxlIHx8IGUuaG92ZXJhYmxlLCB1ID0gTy5jbGlja2FibGUgfHwgTy5ob3ZlcmFibGUsIGggfHwgdSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEEgfHwgKEEgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhSLCBQKS5tdWx0aXBseVNjYWxhciguNSkpLCBoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBHID0gbmV3IGEuQ3lsaW5kZXIoUiwgQSwgeiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQiA9IG5ldyBhLlNwaGVyZShSLCB6KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKEcpLCBlLmludGVyc2VjdGlvblNoYXBlLnNwaGVyZS5wdXNoKEIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFUgPSBuZXcgYS5DeWxpbmRlcihQLCBBLCB6KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOID0gbmV3IGEuU3BoZXJlKFAsIHopOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPLmludGVyc2VjdGlvblNoYXBlLmN5bGluZGVyLnB1c2goVSksIE8uaW50ZXJzZWN0aW9uU2hhcGUuc3BoZXJlLnB1c2goTik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuYm9uZE9yZGVyW2ZdID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBWID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgIHogIT0gTSAmJiAoViA9IDIsIGogPSAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgSCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYID0gUC5jbG9uZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgSyA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgWC5zdWIoUiksIEsgPSB0aGlzLmdldFNpZGVCb25kVihlLCBPLCBmKSwgMiA9PSBlLmJvbmRPcmRlcltmXSA/IChIID0geiAvIDIuNSwgSy5tdWx0aXBseVNjYWxhcigxLjUgKiBIKSwgKFcgPSBSLmNsb25lKCkpLmFkZChLKSwgKHEgPSBSLmNsb25lKCkpLnN1YihLKSwgKFkgPSBXLmNsb25lKCkpLmFkZChYKSwgKFogPSBxLmNsb25lKCkpLmFkZChYKSwgayAhPSBGID8gKEEgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhXLCBZKS5tdWx0aXBseVNjYWxhciguNSksIEMgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhxLCBaKS5tdWx0aXBseVNjYWxhciguNSksIEkociwgVywgQSwgSCwgaywgViwgMCksIEkociwgQSwgWSwgSCwgRiwgMCwgaiksIEkociwgcSwgQywgSCwgaywgViwgMCksIEkociwgQywgWiwgSCwgRiwgMCwgaikpIDogKEkociwgVywgWSwgSCwgaywgViwgaiksIEkociwgcSwgWiwgSCwgaywgViwgaikpLCBoID0gZS5jbGlja2FibGUgfHwgZS5ob3ZlcmFibGUsIHUgPSBPLmNsaWNrYWJsZSB8fCBPLmhvdmVyYWJsZSwgKGggfHwgdSkgJiYgKEEgfHwgKEEgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhXLCBZKS5tdWx0aXBseVNjYWxhciguNSkpLCBDIHx8IChDID0gbmV3IG4uVmVjdG9yMygpLmFkZFZlY3RvcnMocSwgWikubXVsdGlwbHlTY2FsYXIoLjUpKSwgaCAmJiAodiA9IG5ldyBhLkN5bGluZGVyKFcsIEEsIEgpLCBfID0gbmV3IGEuQ3lsaW5kZXIocSwgQywgSCksIGUuaW50ZXJzZWN0aW9uU2hhcGUuY3lsaW5kZXIucHVzaCh2KSwgZS5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKF8pKSwgdSAmJiAoYiA9IG5ldyBhLkN5bGluZGVyKFksIEEsIEgpLCB3ID0gbmV3IGEuQ3lsaW5kZXIoWiwgQywgSCksIE8uaW50ZXJzZWN0aW9uU2hhcGUuY3lsaW5kZXIucHVzaChiKSwgTy5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKHcpKSkpIDogMyA9PSBlLmJvbmRPcmRlcltmXSAmJiAoSCA9IHogLyA0LCBLLmNyb3NzKFgpLCBLLm5vcm1hbGl6ZSgpLCBLLm11bHRpcGx5U2NhbGFyKDMgKiBIKSwgKFcgPSBSLmNsb25lKCkpLmFkZChLKSwgKHEgPSBSLmNsb25lKCkpLnN1YihLKSwgKFkgPSBXLmNsb25lKCkpLmFkZChYKSwgKFogPSBxLmNsb25lKCkpLmFkZChYKSwgayAhPSBGID8gKEEgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhXLCBZKS5tdWx0aXBseVNjYWxhciguNSksIEMgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhxLCBaKS5tdWx0aXBseVNjYWxhciguNSksIFMgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhSLCBQKS5tdWx0aXBseVNjYWxhciguNSksIEkociwgVywgQSwgSCwgaywgViwgMCksIEkociwgQSwgWSwgSCwgRiwgMCwgaiksIEkociwgUiwgUywgSCwgaywgRSwgMCksIEkociwgUywgUCwgSCwgRiwgMCwgVCksIEkociwgcSwgQywgSCwgaywgViwgMCksIEkociwgQywgWiwgSCwgRiwgMCwgaikpIDogKEkociwgVywgWSwgSCwgaywgViwgaiksIEkociwgUiwgUCwgSCwgaywgRSwgVCksIEkociwgcSwgWiwgSCwgaywgViwgaikpLCBoID0gZS5jbGlja2FibGUgfHwgZS5ob3ZlcmFibGUsIHUgPSBPLmNsaWNrYWJsZSB8fCBPLmhvdmVyYWJsZSwgKGggfHwgdSkgJiYgKEEgfHwgKEEgPSBuZXcgbi5WZWN0b3IzKCkuYWRkVmVjdG9ycyhXLCBZKS5tdWx0aXBseVNjYWxhciguNSkpLCBDIHx8IChDID0gbmV3IG4uVmVjdG9yMygpLmFkZFZlY3RvcnMocSwgWikubXVsdGlwbHlTY2FsYXIoLjUpKSwgUyB8fCAoUyA9IG5ldyBuLlZlY3RvcjMoKS5hZGRWZWN0b3JzKFIsIFApLm11bHRpcGx5U2NhbGFyKC41KSksIGggJiYgKHYgPSBuZXcgYS5DeWxpbmRlcihXLmNsb25lKCksIEEuY2xvbmUoKSwgSCksIF8gPSBuZXcgYS5DeWxpbmRlcihxLmNsb25lKCksIEMuY2xvbmUoKSwgSCksIHkgPSBuZXcgYS5DeWxpbmRlcihSLmNsb25lKCksIFMuY2xvbmUoKSwgSCksIGUuaW50ZXJzZWN0aW9uU2hhcGUuY3lsaW5kZXIucHVzaCh2KSwgZS5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKF8pLCBlLmludGVyc2VjdGlvblNoYXBlLmN5bGluZGVyLnB1c2goeSkpLCB1ICYmIChiID0gbmV3IGEuQ3lsaW5kZXIoWS5jbG9uZSgpLCBBLmNsb25lKCksIEgpLCB3ID0gbmV3IGEuQ3lsaW5kZXIoWi5jbG9uZSgpLCBDLmNsb25lKCksIEgpLCB4ID0gbmV3IGEuQ3lsaW5kZXIoUC5jbG9uZSgpLCBTLmNsb25lKCksIEgpLCBPLmludGVyc2VjdGlvblNoYXBlLmN5bGluZGVyLnB1c2goYiksIE8uaW50ZXJzZWN0aW9uU2hhcGUuY3lsaW5kZXIucHVzaCh3KSwgTy5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKHgpKSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciAkID0gITEsCiAgICAgICAgICAgICAgICAgICAgICBRID0gMCwKICAgICAgICAgICAgICAgICAgICAgIEogPSAhMTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGYgPSAwOyBmIDwgZS5ib25kcy5sZW5ndGg7IGYrKykgcCA9IEwsIGUuYm9uZFN0eWxlcyAmJiBlLmJvbmRTdHlsZXNbZl0gJiYgKChnID0gZS5ib25kU3R5bGVzW2ZdKS5zaW5nbGVCb25kICYmIChwID0gITApLCBnLnJhZGl1cyAmJiBnLnJhZGl1cyAhPSBNICYmIChKID0gITApKSwgKHAgfHwgMSA9PSBlLmJvbmRPcmRlcltmXSkgJiYgUSsrOwogICAgICAgICAgICAgICAgICAgIEogPyBRID4gMCAmJiAoJCA9ICEwKSA6IDAgPT0gUSAmJiAoZS5ib25kcy5sZW5ndGggPiAwIHx8IHMuc2hvd05vbkJvbmRlZCkgJiYgKCQgPSAhMCksICQgJiYgKHogPSBNLCByLmltcG9zdGVyID8gdGhpcy5kcmF3U3BoZXJlSW1wb3N0ZXIoci5zcGhlcmVHZW9tZXRyeSwgZSwgeiwgaykgOiBsLkdMRHJhdy5kcmF3U3BoZXJlKHIsIGUsIHosIGspKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNyZWF0ZU1vbE9iaiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1vbE9iaihlLCB0KSB7CiAgICAgICAgICAgICAgICB0ID0gdCB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgICBjLAogICAgICAgICAgICAgICAgICB1ID0gbmV3IHMuT2JqZWN0M0QoKSwKICAgICAgICAgICAgICAgICAgZiA9IFtdLAogICAgICAgICAgICAgICAgICBwID0ge30sCiAgICAgICAgICAgICAgICAgIGcgPSB7fSwKICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuZHJhd0F0b21TcGhlcmUsCiAgICAgICAgICAgICAgICAgIF8gPSBudWxsLAogICAgICAgICAgICAgICAgICB5ID0gbnVsbDsKICAgICAgICAgICAgICAgIHQuc3VwcG9ydHNJbXBvc3RlcnMgPyAodiA9IHRoaXMuZHJhd0F0b21JbXBvc3RlciwgKF8gPSBuZXcgcy5HZW9tZXRyeSghMCkpLmltcG9zdGVyID0gITAsICh5ID0gbmV3IHMuR2VvbWV0cnkoITAsICEwKSkuaW1wb3N0ZXIgPSAhMCwgeS5zcGhlcmVHZW9tZXRyeSA9IG5ldyBzLkdlb21ldHJ5KCEwKSwgeS5zcGhlcmVHZW9tZXRyeS5pbXBvc3RlciA9ICEwLCB5LmRyYXduQ2FwcyA9IHt9KSA6IHQuc3VwcG9ydHNBSUEgPyAodiA9IHRoaXMuZHJhd0F0b21JbnN0YW5jZWQsIChfID0gbmV3IHMuR2VvbWV0cnkoITEsICEwLCAhMCkpLmluc3RhbmNlZCA9ICEwLCB5ID0gbmV3IHMuR2VvbWV0cnkoITApKSA6IChfID0gbmV3IHMuR2VvbWV0cnkoITApLCB5ID0gbmV3IHMuR2VvbWV0cnkoITApKTsKICAgICAgICAgICAgICAgIHZhciBiLAogICAgICAgICAgICAgICAgICB3ID0ge30sCiAgICAgICAgICAgICAgICAgIHggPSBbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldOwogICAgICAgICAgICAgICAgZm9yIChyID0gMCwgbiA9IGUubGVuZ3RoOyByIDwgbjsgcisrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBBID0gZVtyXTsKICAgICAgICAgICAgICAgICAgaWYgKEEgJiYgQS5zdHlsZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiAoQS5jbGlja2FibGUgfHwgQS5ob3ZlcmFibGUpICYmIHZvaWQgMCA9PT0gQS5pbnRlcnNlY3Rpb25TaGFwZSAmJiAoQS5pbnRlcnNlY3Rpb25TaGFwZSA9IHsKICAgICAgICAgICAgICAgICAgICAgIHNwaGVyZTogW10sCiAgICAgICAgICAgICAgICAgICAgICBjeWxpbmRlcjogW10sCiAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlOiBbXQogICAgICAgICAgICAgICAgICAgIH0pLCBjID0gewogICAgICAgICAgICAgICAgICAgICAgbGluZTogdm9pZCAwLAogICAgICAgICAgICAgICAgICAgICAgY3Jvc3M6IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgIHN0aWNrOiB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICBzcGhlcmU6IHZvaWQgMAogICAgICAgICAgICAgICAgICAgIH0pIEEuc3R5bGVbYV0gPyBBLnN0eWxlW2FdLm9wYWNpdHkgPyBjW2FdID0gcGFyc2VGbG9hdChBLnN0eWxlW2FdLm9wYWNpdHkpIDogY1thXSA9IDEgOiBjW2FdID0gdm9pZCAwLCB3W2FdID8gbnVsbCAhPSBjW2FdICYmIHdbYV0gIT0gY1thXSAmJiAoY29uc29sZS5sb2coIldhcm5pbmc6ICIgKyBhICsgIiBvcGFjaXR5IGlzIGFtYmlndW91cyIpLCB3W2FdID0gMSkgOiB3W2FdID0gY1thXTsKICAgICAgICAgICAgICAgICAgICB2LmNhbGwodGhpcywgQSwgXyksIHRoaXMuZHJhd0F0b21DbGlja1NwaGVyZShBKSwgdGhpcy5kcmF3QXRvbUNyb3NzKEEsIGcpLCB0aGlzLmRyYXdCb25kTGluZXMoQSwgZSwgcCksIHRoaXMuZHJhd0JvbmRTdGlja3MoQSwgZSwgeSksIHZvaWQgMCA9PT0gQS5zdHlsZS5jYXJ0b29uIHx8IEEuc3R5bGUuY2FydG9vbi5oaWRkZW4gfHwgKCJzcGVjdHJ1bSIgIT09IEEuc3R5bGUuY2FydG9vbi5jb2xvciB8fCAibnVtYmVyIiAhPSB0eXBlb2YgQS5yZXNpIHx8IEEuaGV0ZmxhZyB8fCAoQS5yZXNpIDwgeFswXSAmJiAoeFswXSA9IEEucmVzaSksIEEucmVzaSA+IHhbMV0gJiYgKHhbMV0gPSBBLnJlc2kpKSwgZi5wdXNoKEEpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGYubGVuZ3RoID4gMCAmJiAoMCwgaC5kcmF3Q2FydG9vbikodSwgZiwgeCwgdGhpcy5kZWZhdWx0Q2FydG9vblF1YWxpdHkpLCBfICYmIF8udmVydGljZXMgPiAwKSB7CiAgICAgICAgICAgICAgICAgIF8uaW5pdFR5cGVkQXJyYXlzKCk7CiAgICAgICAgICAgICAgICAgIHZhciBDID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICBTID0gbnVsbDsKICAgICAgICAgICAgICAgICAgXy5pbXBvc3RlciA/IEMgPSBuZXcgcy5TcGhlcmVJbXBvc3Rlck1hdGVyaWFsKHsKICAgICAgICAgICAgICAgICAgICBhbWJpZW50OiAwLAogICAgICAgICAgICAgICAgICAgIHZlcnRleENvbG9yczogITAsCiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGl2aXR5OiAwCiAgICAgICAgICAgICAgICAgIH0pIDogXy5pbnN0YW5jZWQgPyAoUyA9IG5ldyBzLkdlb21ldHJ5KCEwKSwgbC5HTERyYXcuZHJhd1NwaGVyZShTLCB7CiAgICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgfSwgMSwgbmV3IG8uQ29sb3IoLjUsIC41LCAuNSkpLCBTLmluaXRUeXBlZEFycmF5cygpLCBDID0gbmV3IHMuSW5zdGFuY2VkTWF0ZXJpYWwoewogICAgICAgICAgICAgICAgICAgIHNwaGVyZU1hdGVyaWFsOiBuZXcgcy5NZXNoTGFtYmVydE1hdGVyaWFsKHsKICAgICAgICAgICAgICAgICAgICAgIGFtYmllbnQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhDb2xvcnM6ICEwLAogICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGl2aXR5OiAwCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgc3BoZXJlOiBTCiAgICAgICAgICAgICAgICAgIH0pKSA6IEMgPSBuZXcgcy5NZXNoTGFtYmVydE1hdGVyaWFsKHsKICAgICAgICAgICAgICAgICAgICBhbWJpZW50OiAwLAogICAgICAgICAgICAgICAgICAgIHZlcnRleENvbG9yczogITAsCiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGl2aXR5OiAwCiAgICAgICAgICAgICAgICAgIH0pLCB3LnNwaGVyZSA8IDEgJiYgdy5zcGhlcmUgPj0gMCAmJiAoQy50cmFuc3BhcmVudCA9ICEwLCBDLm9wYWNpdHkgPSB3LnNwaGVyZSksIFMgPSBuZXcgcy5NZXNoKF8sIEMpLCB1LmFkZChTKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh5LnZlcnRpY2VzID4gMCkgewogICAgICAgICAgICAgICAgICB2YXIgTSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgeiA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgTCA9IHkuc3BoZXJlR2VvbWV0cnk7CiAgICAgICAgICAgICAgICAgIEwgJiYgdm9pZCAwICE9PSBMLnZlcnRpY2VzICYmIDAgIT0gTC52ZXJ0aWNlcyB8fCAoTCA9IG51bGwpLCB5LmluaXRUeXBlZEFycmF5cygpLCBMICYmIEwuaW5pdFR5cGVkQXJyYXlzKCk7CiAgICAgICAgICAgICAgICAgIHZhciBFID0gewogICAgICAgICAgICAgICAgICAgIGFtYmllbnQ6IDAsCiAgICAgICAgICAgICAgICAgICAgdmVydGV4Q29sb3JzOiAhMCwKICAgICAgICAgICAgICAgICAgICByZWZsZWN0aXZpdHk6IDAKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgeS5pbXBvc3RlciA/IChNID0gbmV3IHMuU3RpY2tJbXBvc3Rlck1hdGVyaWFsKEUpLCB6ID0gbmV3IHMuU3BoZXJlSW1wb3N0ZXJNYXRlcmlhbChFKSkgOiAoTSA9IG5ldyBzLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoRSksIHogPSBuZXcgcy5NZXNoTGFtYmVydE1hdGVyaWFsKEUpLCBNLndpcmVmcmFtZSAmJiAoeS5zZXRVcFdpcmVmcmFtZSgpLCBMICYmIEwuc2V0VXBXaXJlZnJhbWUoKSkpLCB3LnN0aWNrIDwgMSAmJiB3LnN0aWNrID49IDAgJiYgKE0udHJhbnNwYXJlbnQgPSAhMCwgTS5vcGFjaXR5ID0gdy5zdGljaywgei50cmFuc3BhcmVudCA9ICEwLCB6Lm9wYWNpdHkgPSB3LnN0aWNrKTsKICAgICAgICAgICAgICAgICAgdmFyIFQgPSBuZXcgcy5NZXNoKHksIE0pOwogICAgICAgICAgICAgICAgICBpZiAodS5hZGQoVCksIEwpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgayA9IG5ldyBzLk1lc2goTCwgeik7CiAgICAgICAgICAgICAgICAgICAgdS5hZGQoayk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAociBpbiBwKSBpZiAocC5oYXNPd25Qcm9wZXJ0eShyKSkgewogICAgICAgICAgICAgICAgICBiID0gcjsKICAgICAgICAgICAgICAgICAgdmFyIEkgPSBuZXcgcy5MaW5lQmFzaWNNYXRlcmlhbCh7CiAgICAgICAgICAgICAgICAgICAgbGluZXdpZHRoOiBiLAogICAgICAgICAgICAgICAgICAgIHZlcnRleENvbG9yczogITAKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHcubGluZSA8IDEgJiYgdy5saW5lID49IDAgJiYgKEkudHJhbnNwYXJlbnQgPSAhMCwgSS5vcGFjaXR5ID0gdy5saW5lKSwgcFtyXS5pbml0VHlwZWRBcnJheXMoKTsKICAgICAgICAgICAgICAgICAgdmFyIE8gPSBuZXcgcy5MaW5lKHBbcl0sIEksIHMuTGluZVN0eWxlLkxpbmVQaWVjZXMpOwogICAgICAgICAgICAgICAgICB1LmFkZChPKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAociBpbiBnKSBpZiAoZy5oYXNPd25Qcm9wZXJ0eShyKSkgewogICAgICAgICAgICAgICAgICBiID0gcjsKICAgICAgICAgICAgICAgICAgdmFyIEQgPSBuZXcgcy5MaW5lQmFzaWNNYXRlcmlhbCh7CiAgICAgICAgICAgICAgICAgICAgbGluZXdpZHRoOiBiLAogICAgICAgICAgICAgICAgICAgIHZlcnRleENvbG9yczogITAKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHcuY3Jvc3MgPCAxICYmIHcuY3Jvc3MgPj0gMCAmJiAoRC50cmFuc3BhcmVudCA9ICEwLCBELm9wYWNpdHkgPSB3LmNyb3NzKSwgZ1tyXS5pbml0VHlwZWRBcnJheXMoKTsKICAgICAgICAgICAgICAgICAgdmFyIEYgPSBuZXcgcy5MaW5lKGdbcl0sIEQsIHMuTGluZVN0eWxlLkxpbmVQaWVjZXMpOwogICAgICAgICAgICAgICAgICB1LmFkZChGKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbnREdXBsaWNhdGVBdG9tcyAmJiB0aGlzLm1vZGVsRGF0YS5zeW1tZXRyaWVzICYmIHRoaXMubW9kZWxEYXRhLnN5bW1ldHJpZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICB2YXIgUiwKICAgICAgICAgICAgICAgICAgICBQID0gbmV3IHMuT2JqZWN0M0QoKTsKICAgICAgICAgICAgICAgICAgZm9yIChSID0gMDsgUiA8IHRoaXMubW9kZWxEYXRhLnN5bW1ldHJpZXMubGVuZ3RoOyBSKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgRyA9IG5ldyBzLk9iamVjdDNEKCk7CiAgICAgICAgICAgICAgICAgICAgKEcgPSB1LmNsb25lKCkpLm1hdHJpeC5jb3B5KHRoaXMubW9kZWxEYXRhLnN5bW1ldHJpZXNbUl0pLCBHLm1hdHJpeEF1dG9VcGRhdGUgPSAhMSwgUC5hZGQoRyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRJbnRlcm5hbFN0YXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW50ZXJuYWxTdGF0ZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIGF0b21zOiB0aGlzLmF0b21zLAogICAgICAgICAgICAgICAgICBmcmFtZXM6IHRoaXMuZnJhbWVzCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEludGVybmFsU3RhdGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJbnRlcm5hbFN0YXRlKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuYXRvbXMgPSBlLmF0b21zLCB0aGlzLmZyYW1lcyA9IGUuZnJhbWVzLCB0aGlzLm1vbE9iaiA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0Q3J5c3REYXRhIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3J5c3REYXRhKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZWxEYXRhLmNyeXN0KSB7CiAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tb2RlbERhdGEuY3J5c3QubWF0cml4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9lNiA9IHRoaXMubW9kZWxEYXRhLmNyeXN0OwogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWxEYXRhLmNyeXN0Lm1hdHJpeCA9ICgwLCBuLmNvbnZlcnNpb25NYXRyaXgzKShfZTYuYSwgX2U2LmIsIF9lNi5jLCBfZTYuYWxwaGEsIF9lNi5iZXRhLCBfZTYuZ2FtbWEpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsRGF0YS5jcnlzdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENyeXN0RGF0YSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENyeXN0RGF0YShlLCB0LCByLCBzLCBhLCBvKSB7CiAgICAgICAgICAgICAgICBlID0gZSB8fCAxLCB0ID0gdCB8fCAxLCByID0gciB8fCAxLCBzID0gcyB8fCA5MCwgYSA9IGEgfHwgOTAsIG8gPSBvIHx8IDkwOwogICAgICAgICAgICAgICAgdmFyIGwgPSAoMCwgbi5jb252ZXJzaW9uTWF0cml4MykoZSwgdCwgciwgcywgYSwgbyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsRGF0YS5jcnlzdCA9IHsKICAgICAgICAgICAgICAgICAgYTogZSwKICAgICAgICAgICAgICAgICAgYjogdCwKICAgICAgICAgICAgICAgICAgYzogciwKICAgICAgICAgICAgICAgICAgYWxwaGE6IHMsCiAgICAgICAgICAgICAgICAgIGJldGE6IGEsCiAgICAgICAgICAgICAgICAgIGdhbW1hOiBvLAogICAgICAgICAgICAgICAgICBtYXRyaXg6IGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q3J5c3RNYXRyaXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDcnlzdE1hdHJpeChlKSB7CiAgICAgICAgICAgICAgICBlID0gZSB8fCBuZXcgbi5NYXRyaXgzKDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEpLCB0aGlzLm1vZGVsRGF0YS5jcnlzdCA9IHsKICAgICAgICAgICAgICAgICAgbWF0cml4OiBlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldFN5bW1ldHJpZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTeW1tZXRyaWVzKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdGhpcy5tb2RlbERhdGEuc3ltbWV0cmllcyAmJiAodGhpcy5tb2RlbERhdGEuc3ltbWV0cmllcyA9IFt0aGlzLmlkTWF0cml4XSksIHRoaXMubW9kZWxEYXRhLnN5bW1ldHJpZXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0U3ltbWV0cmllcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN5bW1ldHJpZXMoZSkgewogICAgICAgICAgICAgICAgdGhpcy5tb2RlbERhdGEuc3ltbWV0cmllcyA9IHZvaWQgMCA9PT0gZSA/IFt0aGlzLmlkTWF0cml4XSA6IGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0SUQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJRCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlkOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE51bUZyYW1lcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE51bUZyYW1lcygpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHRoaXMuZnJhbWVzLm51bUZyYW1lcyA/IHRoaXMuZnJhbWVzLm51bUZyYW1lcyA6IHRoaXMuZnJhbWVzLmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGp1c3RDb29yZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkanVzdENvb3JkKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICAgIHZhciBhID0gdCAtIGU7CiAgICAgICAgICAgICAgICByZXR1cm4gYSA8IC1yID8gdCArIHMgOiBhID4gciA/IHQgLSBzIDogdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGp1c3RDb29yZGluYXRlc1RvQm94IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRqdXN0Q29vcmRpbmF0ZXNUb0JveCgpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmJveCAmJiB0aGlzLmF0b21kZnMpIGZvciAodmFyIGUgPSB0aGlzLmJveFswXSwgdCA9IHRoaXMuYm94WzFdLCByID0gdGhpcy5ib3hbMl0sIHMgPSAuOSAqIGUsIGEgPSAuOSAqIHQsIG4gPSAuOSAqIHIsIG8gPSAwOyBvIDwgdGhpcy5hdG9tZGZzLmxlbmd0aDsgbysrKSBmb3IgKHZhciBsID0gdGhpcy5hdG9tZGZzW29dLCBoID0gMTsgaCA8IGwubGVuZ3RoOyBoKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmF0b21zW2xbaF1bMF1dLAogICAgICAgICAgICAgICAgICAgIHUgPSB0aGlzLmF0b21zW2xbaF1bMV1dOwogICAgICAgICAgICAgICAgICBjLnggPSB0aGlzLmFkanVzdENvb3JkKHUueCwgYy54LCBzLCBlKSwgYy55ID0gdGhpcy5hZGp1c3RDb29yZCh1LnksIGMueSwgYSwgdCksIGMueiA9IHRoaXMuYWRqdXN0Q29vcmQodS56LCBjLnosIG4sIHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEZyYW1lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RnJhbWUoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldE51bUZyYW1lcygpOwogICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBuKSB7CiAgICAgICAgICAgICAgICAgIGlmICgwID09IHIgJiYgYSgpLCAoZSA8IDAgfHwgZSA+PSByKSAmJiAoZSA9IHIgLSAxKSwgbnVsbCAhPSBzLmZyYW1lcy51cmwpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHMuZnJhbWVzLnVybDsKICAgICAgICAgICAgICAgICAgICAoMCwgYy5nZXRiaW4pKG8gKyAiL3RyYWovZnJhbWUvIiArIGUgKyAiLyIgKyBzLmZyYW1lcy5wYXRoLCB2b2lkIDAsICJQT1NUIiwgdm9pZCAwKS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gbmV3IEZsb2F0MzJBcnJheShlLCA0NCksIHIgPSAwLCBuID0gMDsgbiA8IHMuYXRvbXMubGVuZ3RoOyBuKyspIHMuYXRvbXNbbl0ueCA9IHRbcisrXSwgcy5hdG9tc1tuXS55ID0gdFtyKytdLCBzLmF0b21zW25dLnogPSB0W3IrK107CiAgICAgICAgICAgICAgICAgICAgICBzLmJveCAmJiBzLmF0b21kZnMgJiYgcy5hZGp1c3RDb29yZGluYXRlc1RvQm94KCksIGEoKTsKICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChuKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHMuYXRvbXMgPSBzLmZyYW1lc1tlXSwgYSgpOwogICAgICAgICAgICAgICAgICBzLm1vbE9iaiA9IG51bGwsIHMubW9kZWxEYXRhcyAmJiBlIDwgcy5tb2RlbERhdGFzLmxlbmd0aCAmJiAocy5tb2RlbERhdGEgPSBzLm1vZGVsRGF0YXNbZV0sIHMudW5pdENlbGxPYmplY3RzICYmIHQgJiYgKHQucmVtb3ZlVW5pdENlbGwocyksIHQuYWRkVW5pdENlbGwocykpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEZyYW1lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRnJhbWUoZSkgewogICAgICAgICAgICAgICAgdGhpcy5mcmFtZXMucHVzaChlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ2aWJyYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmlicmF0ZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDsKICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxOwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICExOwogICAgICAgICAgICAgICAgdmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB2YXIgbyA9IDAsCiAgICAgICAgICAgICAgICAgIGwgPSBlOwogICAgICAgICAgICAgICAgciAmJiAobyA9IC1lLCBsID0gZSksIHZvaWQgMCAhPT0gdGhpcy5mcmFtZXMgJiYgdm9pZCAwICE9PSB0aGlzLmZyYW1lcy5vcmlnSW5kZXggPyB0aGlzLnNldEZyYW1lKHRoaXMuZnJhbWVzLm9yaWdJbmRleCkgOiB0aGlzLnNldEZyYW1lKDApLCBvIDwgbCAmJiAodGhpcy5mcmFtZXMgPSBbXSksIHIgJiYgKHRoaXMuZnJhbWVzLm9yaWdJbmRleCA9IGUpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IG87IGggPCBsOyBoKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHUgPSBbXSwKICAgICAgICAgICAgICAgICAgICBmID0gdGhpcy5mcmFtZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgICBpZiAoMCAhPSBoIHx8IGEpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHRoaXMuYXRvbXMubGVuZ3RoOyBwKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gKDAsIGMuZ2V0QXRvbVByb3BlcnR5KSh0aGlzLmF0b21zW3BdLCAiZHgiKSwKICAgICAgICAgICAgICAgICAgICAgICAgdiA9ICgwLCBjLmdldEF0b21Qcm9wZXJ0eSkodGhpcy5hdG9tc1twXSwgImR5IiksCiAgICAgICAgICAgICAgICAgICAgICAgIF8gPSAoMCwgYy5nZXRBdG9tUHJvcGVydHkpKHRoaXMuYXRvbXNbcF0sICJkeiIpLAogICAgICAgICAgICAgICAgICAgICAgICB5ID0gbmV3IG4uVmVjdG9yMyhnLCB2LCBfKSwKICAgICAgICAgICAgICAgICAgICAgICAgYiA9IG5ldyBuLlZlY3RvcjModGhpcy5hdG9tc1twXS54LCB0aGlzLmF0b21zW3BdLnksIHRoaXMuYXRvbXNbcF0ueiksCiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBoICogdCAvIGU7CiAgICAgICAgICAgICAgICAgICAgICB5Lm11bHRpcGx5U2NhbGFyKHcpLCBiLmFkZCh5KTsKICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0ge307CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBBIGluIHRoaXMuYXRvbXNbcF0pIHhbQV0gPSB0aGlzLmF0b21zW3BdW0FdOwogICAgICAgICAgICAgICAgICAgICAgaWYgKHgueCA9IGIueCwgeC55ID0gYi55LCB4LnogPSBiLnosIHUucHVzaCh4KSwgcyAmJiBhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBDID0gKDAsIGMuZXh0ZW5kKSh7fSwgYSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgUyA9IG5ldyBuLlZlY3RvcjMoZywgdiwgXyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTLm11bHRpcGx5U2NhbGFyKHQpLCBTLmFkZChiKSwgQy5zdGFydCA9IGIsIEMuZW5kID0gUywgQy5mcmFtZSA9IGYsICFDLmNvbG9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE0gPSB4LnN0eWxlLnNwaGVyZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBNIHx8IChNID0geC5zdHlsZS5zdGljayksIE0gfHwgKE0gPSB4LnN0eWxlLmxpbmUpLCBDLmNvbG9yID0gKDAsIGMuZ2V0Q29sb3JGcm9tU3R5bGUpKHgsIE0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHMuYWRkQXJyb3coQyk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzLnB1c2godSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmZyYW1lcy5wdXNoKHRoaXMuYXRvbXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEF0b21EZWZhdWx0cyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF0b21EZWZhdWx0cyhlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDIyID0gMDsgX3QyMiA8IGUubGVuZ3RoOyBfdDIyKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yMTAgPSBlW190MjJdOwogICAgICAgICAgICAgICAgICBfcjEwICYmIChfcjEwLnN0eWxlID0gX3IxMC5zdHlsZSB8fCAoMCwgYy5kZWVwQ29weSkoX0dMTW9kZWwuZGVmYXVsdEF0b21TdHlsZSksIF9yMTAuY29sb3IgPSBfcjEwLmNvbG9yIHx8IHRoaXMuRWxlbWVudENvbG9yc1tfcjEwLmVsZW1dIHx8IHRoaXMuZGVmYXVsdENvbG9yLCBfcjEwLm1vZGVsID0gdGhpcy5pZCwgKF9yMTAuY2xpY2thYmxlIHx8IF9yMTAuaG92ZXJhYmxlKSAmJiAoX3IxMC5pbnRlcnNlY3Rpb25TaGFwZSA9IHsKICAgICAgICAgICAgICAgICAgICBzcGhlcmU6IFtdLAogICAgICAgICAgICAgICAgICAgIGN5bGluZGVyOiBbXSwKICAgICAgICAgICAgICAgICAgICBsaW5lOiBbXSwKICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZTogW10KICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZE1vbERhdGEiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb2xEYXRhKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgICAgICAgICAgIHZhciBzID0gX0dMTW9kZWwucGFyc2VNb2xEYXRhKGUsIHQsIHIpOwogICAgICAgICAgICAgICAgdGhpcy5kb250RHVwbGljYXRlQXRvbXMgPSAhci5kdXBsaWNhdGVBc3NlbWJseUF0b21zOwogICAgICAgICAgICAgICAgdmFyIGEgPSBzLm1vZGVsRGF0YTsKICAgICAgICAgICAgICAgIGlmIChhICYmIChBcnJheS5pc0FycmF5KGEpID8gKHRoaXMubW9kZWxEYXRhID0gYVswXSwgci5mcmFtZXMgJiYgKHRoaXMubW9kZWxEYXRhcyA9IGEpKSA6IHRoaXMubW9kZWxEYXRhID0gYSksIHMuYm94ID8gdGhpcy5ib3ggPSBzLmJveCA6IHRoaXMuYm94ID0gbnVsbCwgMCA9PSB0aGlzLmZyYW1lcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U3ID0gMDsgX2U3IDwgcy5sZW5ndGg7IF9lNysrKSAwICE9IHNbX2U3XS5sZW5ndGggJiYgdGhpcy5mcmFtZXMucHVzaChzW19lN10pOwogICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc1swXSAmJiAodGhpcy5hdG9tcyA9IHRoaXMuZnJhbWVzWzBdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5mcmFtZXMpIGZvciAodmFyIF9lOCA9IDA7IF9lOCA8IHMubGVuZ3RoOyBfZTgrKykgdGhpcy5mcmFtZXMucHVzaChzW19lOF0pO2Vsc2UgZm9yICh2YXIgbiA9IDA7IG4gPCBzLmxlbmd0aDsgbisrKSB0aGlzLmFkZEF0b21zKHNbbl0pOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U5ID0gMDsgX2U5IDwgdGhpcy5mcmFtZXMubGVuZ3RoOyBfZTkrKykgdGhpcy5zZXRBdG9tRGVmYXVsdHModGhpcy5mcmFtZXNbX2U5XSk7CiAgICAgICAgICAgICAgICByLnZpYnJhdGUgJiYgci52aWJyYXRlLmZyYW1lcyAmJiByLnZpYnJhdGUuYW1wbGl0dWRlICYmIHRoaXMudmlicmF0ZShyLnZpYnJhdGUuZnJhbWVzLCByLnZpYnJhdGUuYW1wbGl0dWRlKSwgci5zdHlsZSAmJiB0aGlzLnNldFN0eWxlKHt9LCByLnN0eWxlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXREb250RHVwbGljYXRlQXRvbXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREb250RHVwbGljYXRlQXRvbXMoZSkgewogICAgICAgICAgICAgICAgdGhpcy5kb250RHVwbGljYXRlQXRvbXMgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldE1vZGVsRGF0YSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldE1vZGVsRGF0YShlKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsRGF0YSA9IGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicHJvcGVydHlNYXRjaGVzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvcGVydHlNYXRjaGVzKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmIChlID09IHQpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCAmJiAibnVtYmVyIiA9PSB0eXBlb2YgZSkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IHQubWF0Y2goLygtP1xkKylccyotXHMqKC0/XGQrKS8pOwogICAgICAgICAgICAgICAgICBpZiAocikgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gcGFyc2VJbnQoclsxXSksCiAgICAgICAgICAgICAgICAgICAgICBhID0gcGFyc2VJbnQoclsyXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgZSA+PSBzICYmIGUgPD0gYSkgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYXRvbUlzU2VsZWN0ZWQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdG9tSXNTZWxlY3RlZChlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0KSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICB2YXIgciA9ICEhdC5pbnZlcnQsCiAgICAgICAgICAgICAgICAgIHMgPSAhMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGEgaW4gdCkgaWYgKCJhbmQiID09IGEgfHwgIm9yIiA9PSBhIHx8ICJub3QiID09IGEpIHsKICAgICAgICAgICAgICAgICAgaWYgKCJub3QiID09IGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdG9tSXNTZWxlY3RlZChlLCB0W2FdKSkgewogICAgICAgICAgICAgICAgICAgICAgcyA9ICExOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZvaWQgMCA9PT0gdFthXS5fX2NhY2hlZF9yZXN1bHRzICYmICh0ID0gX0dMTW9kZWwuZGVlcENvcHlBbmRDYWNoZSh0LCB0aGlzKSksICEocyA9IHRbYV0uX19jYWNoZWRfcmVzdWx0cy5oYXMoZS5pbmRleCkpKSBicmVhazsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoInByZWRpY2F0ZSIgPT09IGEpIHsKICAgICAgICAgICAgICAgICAgaWYgKCF0LnByZWRpY2F0ZShlKSkgewogICAgICAgICAgICAgICAgICAgIHMgPSAhMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgicHJvcGVydGllcyIgPT0gYSAmJiBlW2FdKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gaW4gdC5wcm9wZXJ0aWVzKSBpZiAoIW4uc3RhcnRzV2l0aCgiX19jYWNoZSIpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZS5wcm9wZXJ0aWVzW25dKSB7CiAgICAgICAgICAgICAgICAgICAgICBzID0gITE7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGUucHJvcGVydGllc1tuXSAhPSB0LnByb3BlcnRpZXNbbl0pIHsKICAgICAgICAgICAgICAgICAgICAgIHMgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lmhhc093blByb3BlcnR5KGEpICYmICJwcm9wcyIgIT0gYSAmJiAiaW52ZXJ0IiAhPSBhICYmICJtb2RlbCIgIT0gYSAmJiAiYnlyZXMiICE9IGEgJiYgImV4cGFuZCIgIT0gYSAmJiAid2l0aGluIiAhPSBhICYmICJhbmQiICE9IGEgJiYgIm9yIiAhPSBhICYmICJub3QiICE9IGEgJiYgIWEuc3RhcnRzV2l0aCgiX19jYWNoZSIpKSB7CiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbYV0pIHsKICAgICAgICAgICAgICAgICAgICBzID0gITE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdmFyIG8gPSAhMTsKICAgICAgICAgICAgICAgICAgaWYgKCJib25kcyIgPT09IGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodFthXSAhPSBlLmJvbmRzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgcyA9ICExOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodFthXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRbYV0sCiAgICAgICAgICAgICAgICAgICAgICBoID0gZVthXTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEwID0gMDsgX2UxMCA8IGwubGVuZ3RoOyBfZTEwKyspIGlmICh0aGlzLnByb3BlcnR5TWF0Y2hlcyhoLCBsW19lMTBdKSkgewogICAgICAgICAgICAgICAgICAgICAgbyA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghbykgewogICAgICAgICAgICAgICAgICAgICAgcyA9ICExOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBfcjExID0gdFthXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJvcGVydHlNYXRjaGVzKGVbYV0sIF9yMTEpKSB7CiAgICAgICAgICAgICAgICAgICAgICBzID0gITE7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByID8gIXMgOiBzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImV4cGFuZEF0b21MaXN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhwYW5kQXRvbUxpc3QoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKHQgPD0gMCkgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gKDAsIGMuZ2V0RXh0ZW50KShlLCB2b2lkIDApLCBzID0gW1tdLCBbXSwgW11dLCBhID0gMDsgYSA8IDM7IGErKykgc1swXVthXSA9IHJbMF1bYV0gLSB0LCBzWzFdW2FdID0gclsxXVthXSArIHQsIHNbMl1bYV0gPSByWzJdW2FdOwogICAgICAgICAgICAgICAgdmFyIG4gPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTEgPSAwOyBfZTExIDwgdGhpcy5hdG9tcy5sZW5ndGg7IF9lMTErKykgewogICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMuYXRvbXNbX2UxMV0ueCwKICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5hdG9tc1tfZTExXS55LAogICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmF0b21zW19lMTFdLno7CiAgICAgICAgICAgICAgICAgIG8gPj0gc1swXVswXSAmJiBvIDw9IHNbMV1bMF0gJiYgbCA+PSBzWzBdWzFdICYmIGwgPD0gc1sxXVsxXSAmJiBoID49IHNbMF1bMl0gJiYgaCA8PSBzWzFdWzJdICYmIChvID49IHJbMF1bMF0gJiYgbyA8PSByWzFdWzBdICYmIGwgPj0gclswXVsxXSAmJiBsIDw9IHJbMV1bMV0gJiYgaCA+PSByWzBdWzJdICYmIGggPD0gclsxXVsyXSB8fCBuLnB1c2godGhpcy5hdG9tc1tfZTExXSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2VsZWN0ZWRBdG9tcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdGVkQXRvbXMoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBbXTsKICAgICAgICAgICAgICAgIGUgPSBfR0xNb2RlbC5kZWVwQ29weUFuZENhY2hlKGUgfHwge30sIHRoaXMpLCB0IHx8ICh0ID0gdGhpcy5hdG9tcyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gdC5sZW5ndGgsIGEgPSAwOyBhIDwgczsgYSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBuID0gdFthXTsKICAgICAgICAgICAgICAgICAgbiAmJiB0aGlzLmF0b21Jc1NlbGVjdGVkKG4sIGUpICYmIHIucHVzaChuKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChlLmhhc093blByb3BlcnR5KCJleHBhbmQiKSkgewogICAgICAgICAgICAgICAgICB2YXIgX3QyMyA9IF9HTE1vZGVsLmdldEZsb2F0KGUuZXhwYW5kKTsKICAgICAgICAgICAgICAgICAgdmFyIF9zOCA9IHRoaXMuZXhwYW5kQXRvbUxpc3QociwgX3QyMyksCiAgICAgICAgICAgICAgICAgICAgX2E2ID0gci5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIHZhciBfbjUgPSBfdDIzICogX3QyMzsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UxMiA9IDA7IF9lMTIgPCBfczgubGVuZ3RoOyBfZTEyKyspIGZvciAodmFyIF90MjQgPSAwOyBfdDI0IDwgX2E2OyBfdDI0KyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IF9HTE1vZGVsLnNxdWFyZWREaXN0YW5jZShfczhbX2UxMl0sIHJbX3QyNF0pOwogICAgICAgICAgICAgICAgICAgIG8gPCBfbjUgJiYgbyA+IDAgJiYgci5wdXNoKF9zOFtfZTEyXSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChlLmhhc093blByb3BlcnR5KCJ3aXRoaW4iKSAmJiBlLndpdGhpbi5oYXNPd25Qcm9wZXJ0eSgic2VsIikgJiYgZS53aXRoaW4uaGFzT3duUHJvcGVydHkoImRpc3RhbmNlIikpIHsKICAgICAgICAgICAgICAgICAgdmFyIGwgPSB0aGlzLnNlbGVjdGVkQXRvbXMoZS53aXRoaW4uc2VsLCB0aGlzLmF0b21zKSwKICAgICAgICAgICAgICAgICAgICBoID0ge307CiAgICAgICAgICAgICAgICAgIHZhciBfdDI1ID0gX0dMTW9kZWwuZ2V0RmxvYXQoZS53aXRoaW4uZGlzdGFuY2UpLAogICAgICAgICAgICAgICAgICAgIF9zOSA9IF90MjUgKiBfdDI1OwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEzID0gMDsgX2UxMyA8IGwubGVuZ3RoOyBfZTEzKyspIGZvciAodmFyIF90MjYgPSAwOyBfdDI2IDwgci5sZW5ndGg7IF90MjYrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBfYTcgPSBfR0xNb2RlbC5zcXVhcmVkRGlzdGFuY2UobFtfZTEzXSwgcltfdDI2XSk7CiAgICAgICAgICAgICAgICAgICAgX2E3IDwgX3M5ICYmIF9hNyA+IDAgJiYgKGhbX3QyNl0gPSAxKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB2YXIgYyA9IFtdOwogICAgICAgICAgICAgICAgICBpZiAoZS53aXRoaW4uaW52ZXJ0KSBmb3IgKHZhciBfZTE0ID0gMDsgX2UxNCA8IHIubGVuZ3RoOyBfZTE0KyspIGhbX2UxNF0gfHwgYy5wdXNoKHJbX2UxNF0pO2Vsc2UgZm9yICh2YXIgX2UxNSBpbiBoKSBjLnB1c2gocltfZTE1XSk7CiAgICAgICAgICAgICAgICAgIHIgPSBjOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGUuaGFzT3duUHJvcGVydHkoImJ5cmVzIikpIHsKICAgICAgICAgICAgICAgICAgdmFyIHUgPSB7fSwKICAgICAgICAgICAgICAgICAgICBmID0gW10sCiAgICAgICAgICAgICAgICAgICAgcCA9IFtdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTE2ID0gMDsgX2UxNiA8IHIubGVuZ3RoOyBfZTE2KyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3QyNyA9IHJbX2UxNl07CiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBfdDI3LmNoYWluLAogICAgICAgICAgICAgICAgICAgICAgdiA9IF90MjcucmVzaTsKICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB1W2ddICYmICh1W2ddID0ge30pLCBfdDI3Lmhhc093blByb3BlcnR5KCJyZXNpIikgJiYgdm9pZCAwID09PSB1W2ddW3ZdKSBmb3IgKHVbZ11bdl0gPSAhMCwgcC5wdXNoKF90MjcpOyBwLmxlbmd0aCA+IDA7KSBpZiAoX3QyNyA9IHAucG9wKCksIGcgPSBfdDI3LmNoYWluLCB2ID0gX3QyNy5yZXNpLCB2b2lkIDAgPT09IGZbX3QyNy5pbmRleF0pIHsKICAgICAgICAgICAgICAgICAgICAgIGZbX3QyNy5pbmRleF0gPSAhMDsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF8gPSAwOyBfIDwgX3QyNy5ib25kcy5sZW5ndGg7IF8rKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMuYXRvbXNbX3QyNy5ib25kc1tfXV07CiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZlt5LmluZGV4XSAmJiB5Lmhhc093blByb3BlcnR5KCJyZXNpIikgJiYgeS5jaGFpbiA9PSBnICYmIHkucmVzaSA9PSB2ICYmIChwLnB1c2goeSksIHIucHVzaCh5KSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRBdG9tcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEF0b21zKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9sT2JqID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgICByID0gdGhpcy5hdG9tcy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgIHMgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCBlLmxlbmd0aDsgdCsrKSB2b2lkIDAgPT09IGVbdF0uaW5kZXggJiYgKGVbdF0uaW5kZXggPSB0KSwgdm9pZCAwID09PSBlW3RdLnNlcmlhbCAmJiAoZVt0XS5zZXJpYWwgPSB0KSwgc1tlW3RdLmluZGV4XSA9IHIgKyB0OwogICAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHsKICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlW3RdLAogICAgICAgICAgICAgICAgICAgIG4gPSBzW2EuaW5kZXhdLAogICAgICAgICAgICAgICAgICAgIG8gPSAoMCwgYy5leHRlbmQpKHt9LCBhKTsKICAgICAgICAgICAgICAgICAgby5pbmRleCA9IG4sIG8uYm9uZHMgPSBbXSwgby5ib25kT3JkZXIgPSBbXSwgby5tb2RlbCA9IHRoaXMuaWQsIG8uc3R5bGUgPSBvLnN0eWxlIHx8ICgwLCBjLmRlZXBDb3B5KShfR0xNb2RlbC5kZWZhdWx0QXRvbVN0eWxlKSwgdm9pZCAwID09PSBvLmNvbG9yICYmIChvLmNvbG9yID0gdGhpcy5FbGVtZW50Q29sb3JzW28uZWxlbV0gfHwgdGhpcy5kZWZhdWx0Q29sb3IpOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gYS5ib25kcyA/IGEuYm9uZHMubGVuZ3RoIDogMCwgaCA9IDA7IGggPCBsOyBoKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHNbYS5ib25kc1toXV07CiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSB1ICYmIChvLmJvbmRzLnB1c2godSksIG8uYm9uZE9yZGVyLnB1c2goYS5ib25kT3JkZXIgPyBhLmJvbmRPcmRlcltoXSA6IDEpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB0aGlzLmF0b21zLnB1c2gobyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYXNzaWduQm9uZHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NpZ25Cb25kcygpIHsKICAgICAgICAgICAgICAgICgwLCBQLmFzc2lnbkJvbmRzKSh0aGlzLmF0b21zKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW1vdmVBdG9tcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUF0b21zKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9sT2JqID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgICByID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQrKykgcltlW3RdLmluZGV4XSA9ICEwOwogICAgICAgICAgICAgICAgdmFyIHMgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCB0aGlzLmF0b21zLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5hdG9tc1t0XTsKICAgICAgICAgICAgICAgICAgclthLmluZGV4XSB8fCBzLnB1c2goYSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLmF0b21zID0gW10sIHRoaXMuYWRkQXRvbXMocyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0U3R5bGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdHlsZShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHQgJiYgdm9pZCAwID09PSByICYmICh0ID0gZSwgZSA9IHt9KSwgInN0cmluZyIgPT0gdHlwZW9mIHQgJiYgKHQgPSAoMCwgYy5zcGVjU3RyaW5nVG9PYmplY3QpKHQpKTsKICAgICAgICAgICAgICAgIHZhciBzID0gITEsCiAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLAogICAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24gbihfbjYpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGEuc2VsZWN0ZWRBdG9tcyhlLCBfbjYpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTcgPSAwOyBfZTE3IDwgX242Lmxlbmd0aDsgX2UxNysrKSBfbjZbX2UxN10gJiYgKF9uNltfZTE3XS5jYXBEcmF3biA9ICExKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTE4ID0gMDsgX2UxOCA8IG8ubGVuZ3RoOyBfZTE4KyspIHsKICAgICAgICAgICAgICAgICAgICAgIHMgPSAhMCwgKG9bX2UxOF0uY2xpY2thYmxlIHx8IG9bX2UxOF0uaG92ZXJhYmxlKSAmJiAob1tfZTE4XS5pbnRlcnNlY3Rpb25TaGFwZSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3BoZXJlOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgY3lsaW5kZXI6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGU6IFtdCiAgICAgICAgICAgICAgICAgICAgICB9KSwgciB8fCAob1tfZTE4XS5zdHlsZSA9IHt9KTsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9yMTIgaW4gdCkgdC5oYXNPd25Qcm9wZXJ0eShfcjEyKSAmJiAob1tfZTE4XS5zdHlsZVtfcjEyXSA9IG9bX2UxOF0uc3R5bGVbX3IxMl0gfHwge30sIE9iamVjdC5hc3NpZ24ob1tfZTE4XS5zdHlsZVtfcjEyXSwgdFtfcjEyXSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG4odGhpcy5hdG9tcyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IHRoaXMuZnJhbWVzLmxlbmd0aDsgbysrKSB0aGlzLmZyYW1lc1tvXSAhPT0gdGhpcy5hdG9tcyAmJiBuKHRoaXMuZnJhbWVzW29dKTsKICAgICAgICAgICAgICAgIHMgJiYgKHRoaXMubW9sT2JqID0gbnVsbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q2xpY2thYmxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2xpY2thYmxlKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGlmICh0ID0gISF0LCBudWxsICE9PSAociA9ICgwLCBjLm1ha2VGdW5jdGlvbikocikpKSB7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5zZWxlY3RlZEF0b21zKGUsIHRoaXMuYXRvbXMpLAogICAgICAgICAgICAgICAgICAgIGEgPSBzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UxOSA9IDA7IF9lMTkgPCBhOyBfZTE5KyspIHNbX2UxOV0uaW50ZXJzZWN0aW9uU2hhcGUgPSB7CiAgICAgICAgICAgICAgICAgICAgc3BoZXJlOiBbXSwKICAgICAgICAgICAgICAgICAgICBjeWxpbmRlcjogW10sCiAgICAgICAgICAgICAgICAgICAgbGluZTogW10sCiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGU6IFtdCiAgICAgICAgICAgICAgICAgIH0sIHNbX2UxOV0uY2xpY2thYmxlID0gdCwgciAmJiAoc1tfZTE5XS5jYWxsYmFjayA9IHIpOwogICAgICAgICAgICAgICAgICBhID4gMCAmJiAodGhpcy5tb2xPYmogPSBudWxsKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLmxvZygiQ2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRIb3ZlcmFibGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIb3ZlcmFibGUoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgaWYgKHQgPSAhIXQsIHIgPSAoMCwgYy5tYWtlRnVuY3Rpb24pKHIpLCBzID0gKDAsIGMubWFrZUZ1bmN0aW9uKShzKSwgbnVsbCAhPT0gcikgewogICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gcykgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5zZWxlY3RlZEF0b21zKGUsIHRoaXMuYXRvbXMpLAogICAgICAgICAgICAgICAgICAgICAgbiA9IGEubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjAgPSAwOyBfZTIwIDwgbjsgX2UyMCsrKSBhW19lMjBdLmludGVyc2VjdGlvblNoYXBlID0gewogICAgICAgICAgICAgICAgICAgICAgc3BoZXJlOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIGN5bGluZGVyOiBbXSwKICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IFtdLAogICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGU6IFtdCiAgICAgICAgICAgICAgICAgICAgfSwgYVtfZTIwXS5ob3ZlcmFibGUgPSB0LCByICYmIChhW19lMjBdLmhvdmVyX2NhbGxiYWNrID0gciksIHMgJiYgKGFbX2UyMF0udW5ob3Zlcl9jYWxsYmFjayA9IHMpOwogICAgICAgICAgICAgICAgICAgIG4gPiAwICYmICh0aGlzLm1vbE9iaiA9IG51bGwpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coIlVuaG92ZXJfY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLmxvZygiSG92ZXJfY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJlbmFibGVDb250ZXh0TWVudSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUNvbnRleHRNZW51KGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgICAgdCA9ICEhdDsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5zZWxlY3RlZEF0b21zKGUsIHRoaXMuYXRvbXMpLAogICAgICAgICAgICAgICAgICBhID0gcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IgKHIgPSAwOyByIDwgYTsgcisrKSBzW3JdLmludGVyc2VjdGlvblNoYXBlID0gewogICAgICAgICAgICAgICAgICBzcGhlcmU6IFtdLAogICAgICAgICAgICAgICAgICBjeWxpbmRlcjogW10sCiAgICAgICAgICAgICAgICAgIGxpbmU6IFtdLAogICAgICAgICAgICAgICAgICB0cmlhbmdsZTogW10KICAgICAgICAgICAgICAgIH0sIHNbcl0uY29udGV4dE1lbnVFbmFibGVkID0gdDsKICAgICAgICAgICAgICAgIGEgPiAwICYmICh0aGlzLm1vbE9iaiA9IG51bGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENvbG9yQnlFbGVtZW50IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29sb3JCeUVsZW1lbnQoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHRoaXMubW9sT2JqIHx8ICFfR0xNb2RlbC5zYW1lT2JqKHQsIHRoaXMubGFzdENvbG9ycykpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0Q29sb3JzID0gdDsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnNlbGVjdGVkQXRvbXMoZSwgcik7CiAgICAgICAgICAgICAgICAgIHIubGVuZ3RoID4gMCAmJiAodGhpcy5tb2xPYmogPSBudWxsKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCByLmxlbmd0aDsgcysrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSByW3NdOwogICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gdFthLmVsZW1dICYmIChhLmNvbG9yID0gdFthLmVsZW1dKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENvbG9yQnlQcm9wZXJ0eSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbG9yQnlQcm9wZXJ0eShlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICB2YXIgYSwKICAgICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgICAgbyA9IHRoaXMuc2VsZWN0ZWRBdG9tcyhlLCBvKTsKICAgICAgICAgICAgICAgIGZvciAodGhpcy5sYXN0Q29sb3JzID0gbnVsbCwgby5sZW5ndGggPiAwICYmICh0aGlzLm1vbE9iaiA9IG51bGwpLCAic3RyaW5nIiA9PSB0eXBlb2YgciAmJiB2b2lkIDAgIT09IHUuR3JhZGllbnQuYnVpbHRpbkdyYWRpZW50c1tyXSAmJiAociA9IG5ldyB1LkdyYWRpZW50LmJ1aWx0aW5HcmFkaWVudHNbcl0oKSksIHMgfHwgKHMgPSByLnJhbmdlKCkpLCBzIHx8IChzID0gKDAsIGMuZ2V0UHJvcGVydHlSYW5nZSkobywgdCkpLCBhID0gMDsgYSA8IG8ubGVuZ3RoOyBhKyspIHsKICAgICAgICAgICAgICAgICAgbiA9IG9bYV0sIG51bGwgIT0gKDAsIGMuZ2V0QXRvbVByb3BlcnR5KShuLCB0KSAmJiAobi5jb2xvciA9IHIudmFsdWVUb0hleChwYXJzZUZsb2F0KG4ucHJvcGVydGllc1t0XSksIHMpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRDb2xvckJ5RnVuY3Rpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb2xvckJ5RnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnNlbGVjdGVkQXRvbXMoZSwgcik7CiAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgdCkgewogICAgICAgICAgICAgICAgICB0aGlzLmxhc3RDb2xvcnMgPSBudWxsLCByLmxlbmd0aCA+IDAgJiYgKHRoaXMubW9sT2JqID0gbnVsbCk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjEgPSAwOyBfZTIxIDwgci5sZW5ndGg7IF9lMjErKykgewogICAgICAgICAgICAgICAgICAgIHZhciBfczEwID0gcltfZTIxXTsKICAgICAgICAgICAgICAgICAgICBfczEwLmNvbG9yID0gdChfczEwKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInRvQ0RPYmplY3QiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NET2JqZWN0KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICExOwogICAgICAgICAgICAgICAgdmFyIHQgPSB7CiAgICAgICAgICAgICAgICAgIGE6IFtdLAogICAgICAgICAgICAgICAgICBiOiBbXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGUgJiYgKHQucyA9IFtdKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9zMTEgPSAwOyBfczExIDwgdGhpcy5hdG9tcy5sZW5ndGg7IF9zMTErKykgewogICAgICAgICAgICAgICAgICB2YXIgX2E4ID0ge30sCiAgICAgICAgICAgICAgICAgICAgX243ID0gdGhpcy5hdG9tc1tfczExXTsKICAgICAgICAgICAgICAgICAgaWYgKF9hOC54ID0gX243LngsIF9hOC55ID0gX243LnksIF9hOC56ID0gX243LnosICJDIiAhPSBfbjcuZWxlbSAmJiAoX2E4LmwgPSBfbjcuZWxlbSksIGUpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHQucy5sZW5ndGggJiYgSlNPTi5zdHJpbmdpZnkoX243LnN0eWxlKSAhPT0gSlNPTi5zdHJpbmdpZnkodC5zW3JdKTspIHIrKzsKICAgICAgICAgICAgICAgICAgICByID09PSB0LnMubGVuZ3RoICYmIHQucy5wdXNoKF9uNy5zdHlsZSksIDAgIT09IHIgJiYgKF9hOC5zID0gcik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdC5hLnB1c2goX2E4KTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UyMiA9IDA7IF9lMjIgPCBfbjcuYm9uZHMubGVuZ3RoOyBfZTIyKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3IxMyA9IF9zMTEsCiAgICAgICAgICAgICAgICAgICAgICBfYTkgPSBfbjcuYm9uZHNbX2UyMl07CiAgICAgICAgICAgICAgICAgICAgaWYgKF9yMTMgPj0gX2E5KSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgX282ID0gewogICAgICAgICAgICAgICAgICAgICAgICBiOiBfcjEzLAogICAgICAgICAgICAgICAgICAgICAgICBlOiBfYTkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBfbDIgPSBfbjcuYm9uZE9yZGVyW19lMjJdOwogICAgICAgICAgICAgICAgICAgIDEgIT0gX2wyICYmIChfbzYubyA9IF9sMiksIHQuYi5wdXNoKF9vNik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdsb2JqIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2xvYmooZSwgdCkgewogICAgICAgICAgICAgICAgKG51bGwgPT09IHRoaXMubW9sT2JqIHx8IHQucmVnZW4pICYmICh0aGlzLm1vbE9iaiA9IHRoaXMuY3JlYXRlTW9sT2JqKHRoaXMuYXRvbXMsIHQpLCB0aGlzLnJlbmRlcmVkTW9sT2JqICYmIChlLnJlbW92ZSh0aGlzLnJlbmRlcmVkTW9sT2JqKSwgdGhpcy5yZW5kZXJlZE1vbE9iaiA9IG51bGwpLCB0aGlzLnJlbmRlcmVkTW9sT2JqID0gdGhpcy5tb2xPYmouY2xvbmUoKSwgdGhpcy5oaWRkZW4gJiYgKHRoaXMucmVuZGVyZWRNb2xPYmouc2V0VmlzaWJsZSghMSksIHRoaXMubW9sT2JqLnNldFZpc2libGUoITEpKSwgZS5hZGQodGhpcy5yZW5kZXJlZE1vbE9iaikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImV4cG9ydFZSTUwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHBvcnRWUk1MKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTW9sT2JqKHRoaXMuYXRvbXMsIHsKICAgICAgICAgICAgICAgICAgc3VwcG9ydHNJbXBvc3RlcnM6ICExLAogICAgICAgICAgICAgICAgICBzdXBwb3J0c0FJQTogITEKICAgICAgICAgICAgICAgIH0pLnZybWwoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW1vdmVnbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZWdsKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRNb2xPYmogJiYgKHZvaWQgMCAhPT0gdGhpcy5yZW5kZXJlZE1vbE9iai5nZW9tZXRyeSAmJiB0aGlzLnJlbmRlcmVkTW9sT2JqLmdlb21ldHJ5LmRpc3Bvc2UoKSwgdm9pZCAwICE9PSB0aGlzLnJlbmRlcmVkTW9sT2JqLm1hdGVyaWFsICYmIHRoaXMucmVuZGVyZWRNb2xPYmoubWF0ZXJpYWwuZGlzcG9zZSgpLCBlLnJlbW92ZSh0aGlzLnJlbmRlcmVkTW9sT2JqKSwgdGhpcy5yZW5kZXJlZE1vbE9iaiA9IG51bGwpLCB0aGlzLm1vbE9iaiA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaGlkZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbiA9ICEwLCB0aGlzLnJlbmRlcmVkTW9sT2JqICYmIHRoaXMucmVuZGVyZWRNb2xPYmouc2V0VmlzaWJsZSghMSksIHRoaXMubW9sT2JqICYmIHRoaXMubW9sT2JqLnNldFZpc2libGUoITEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNob3ciLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkgewogICAgICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSAhMSwgdGhpcy5yZW5kZXJlZE1vbE9iaiAmJiB0aGlzLnJlbmRlcmVkTW9sT2JqLnNldFZpc2libGUoITApLCB0aGlzLm1vbE9iaiAmJiB0aGlzLm1vbE9iai5zZXRWaXNpYmxlKCEwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRQcm9wZXJ0eUxhYmVscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFByb3BlcnR5TGFiZWxzKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLnNlbGVjdGVkQXRvbXModCwgYSksIG4gPSAoMCwgYy5kZWVwQ29weSkocyksIG8gPSAwOyBvIDwgYS5sZW5ndGg7IG8rKykgewogICAgICAgICAgICAgICAgICB2YXIgbCA9IGFbb10sCiAgICAgICAgICAgICAgICAgICAgaCA9IG51bGw7CiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gbFtlXSA/IGggPSBTdHJpbmcobFtlXSkgOiB2b2lkIDAgIT09IGwucHJvcGVydGllc1tlXSAmJiAoaCA9IFN0cmluZyhsLnByb3BlcnRpZXNbZV0pKSwgbnVsbCAhPSBoICYmIChuLnBvc2l0aW9uID0gbCwgci5hZGRMYWJlbChoLCBuKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkUmVzTGFiZWxzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzTGFiZWxzKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAhMTsKICAgICAgICAgICAgICAgIHZhciBhID0gW10sCiAgICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbiBvKHMsIF9vNykgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGwgPSBzLnNlbGVjdGVkQXRvbXMoZSwgbCksIGggPSB7fSwgdSA9IDA7IHUgPCBsLmxlbmd0aDsgdSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGxbdV0sCiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBmLmNoYWluLAogICAgICAgICAgICAgICAgICAgICAgICBnID0gZi5yZXNuICsgIiIgKyBmLnJlc2k7CiAgICAgICAgICAgICAgICAgICAgICBoW3BdIHx8IChoW3BdID0ge30pLCBoW3BdW2ddIHx8IChoW3BdW2ddID0gW10pLCBoW3BdW2ddLnB1c2goZik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciB2ID0gKDAsIGMuZGVlcENvcHkpKHIpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjMgaW4gaCkgaWYgKGguaGFzT3duUHJvcGVydHkoX2UyMykpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfID0gaFtfZTIzXTsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjQgaW4gXykgaWYgKF8uaGFzT3duUHJvcGVydHkoX2UyNCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yMTQgPSBfW19lMjRdLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9zMTIgPSBuZXcgbi5WZWN0b3IzKDAsIDAsIDApOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTI1ID0gMDsgX2UyNSA8IF9yMTQubGVuZ3RoOyBfZTI1KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3QyOCA9IF9yMTRbX2UyNV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3MxMi54ICs9IF90MjgueCwgX3MxMi55ICs9IF90MjgueSwgX3MxMi56ICs9IF90MjguejsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfczEyLmRpdmlkZVNjYWxhcihfcjE0Lmxlbmd0aCksIHYucG9zaXRpb24gPSBfczEyLCB2LmZyYW1lID0gX283OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2wzID0gdC5hZGRMYWJlbChfZTI0LCB2LCB2b2lkIDAsICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKF9sMyk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKHMpIHsKICAgICAgICAgICAgICAgICAgdmFyIGwgPSB0aGlzLmdldE51bUZyYW1lcygpOwogICAgICAgICAgICAgICAgICB2YXIgX2UyNiA9IHRoaXMuYXRvbXM7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjcgPSAwOyBfZTI3IDwgbDsgX2UyNysrKSB0aGlzLmZyYW1lc1tfZTI3XSAmJiAodGhpcy5hdG9tcyA9IHRoaXMuZnJhbWVzW19lMjddLCBvKHRoaXMsIF9lMjcpKTsKICAgICAgICAgICAgICAgICAgdGhpcy5hdG9tcyA9IF9lMjY7CiAgICAgICAgICAgICAgICB9IGVsc2Ugbyh0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldHVwREZTIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBERlMoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmF0b21kZnMgPSBbXTsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcywKICAgICAgICAgICAgICAgICAgdCA9IG5ldyBJbnQ4QXJyYXkodGhpcy5hdG9tcy5sZW5ndGgpOwogICAgICAgICAgICAgICAgdC5maWxsKDApOwogICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IGZ1bmN0aW9uIHIocywgYSwgbikgewogICAgICAgICAgICAgICAgICAgIG4ucHVzaChbcywgYV0pOwogICAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5hdG9tc1tzXTsKICAgICAgICAgICAgICAgICAgICB0W3NdID0gMTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IG8uYm9uZHMubGVuZ3RoOyBsKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gby5ib25kc1tsXTsKICAgICAgICAgICAgICAgICAgICAgIGUuYXRvbXNbaF0gJiYgIXRbaF0gJiYgcihoLCBzLCBuKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHMgPSAwOyBzIDwgdGhpcy5hdG9tcy5sZW5ndGg7IHMrKykgewogICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdG9tc1tzXSAmJiAhdFtzXSkgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gW107CiAgICAgICAgICAgICAgICAgICAgcihzLCAtMSwgYSksIHRoaXMuYXRvbWRmcy5wdXNoKGEpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q29vcmRpbmF0ZXNGcm9tVVJMIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29vcmRpbmF0ZXNGcm9tVVJMKGUsIHQpIHsKICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzID0gW107CiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3ggJiYgdGhpcy5zZXR1cERGUygpLCBlLnN0YXJ0c1dpdGgoImh0dHAiKSB8fCAoZSA9ICJodHRwOi8vIiArIGUpLCAoMCwgYy5nZXQpKGUgKyAiL3RyYWovbnVtZnJhbWVzLyIgKyB0LCBmdW5jdGlvbiAocykgewogICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KHMpKSkgcmV0dXJuIHIuZnJhbWVzLnB1c2goci5hdG9tcyksIHIuZnJhbWVzLm51bUZyYW1lcyA9IHMsIHIuZnJhbWVzLnVybCA9IGUsIHIuZnJhbWVzLnBhdGggPSB0LCByLnNldEZyYW1lKDApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q29vcmRpbmF0ZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb29yZGluYXRlcyhlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAoIWUpIHJldHVybiBbXTsKICAgICAgICAgICAgICAgIGlmICgvXC5neiQvLnRlc3QodCA9IHQgfHwgIiIpKSB7CiAgICAgICAgICAgICAgICAgIHQgPSB0LnJlcGxhY2UoL1wuZ3okLywgIiIpOwogICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGUgPSAoMCwgUi5pbmZsYXRlKShlLCB7CiAgICAgICAgICAgICAgICAgICAgICB0bzogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoewogICAgICAgICAgICAgICAgICBtZGNyZDogIiIsCiAgICAgICAgICAgICAgICAgIGlucGNyZDogIiIsCiAgICAgICAgICAgICAgICAgIHBkYjogIiIsCiAgICAgICAgICAgICAgICAgIG5ldGNkZjogIiIsCiAgICAgICAgICAgICAgICAgIGFycmF5OiAiIgogICAgICAgICAgICAgICAgfS5oYXNPd25Qcm9wZXJ0eSh0KSkgewogICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lcyA9IFtdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gdGhpcy5hdG9tcy5sZW5ndGgsIHMgPSBfR0xNb2RlbC5wYXJzZUNyZChlLCB0KSwgYSA9IDA7IGEgPCBzLmxlbmd0aDspIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gW10sIG8gPSAwOyBvIDwgcjsgbysrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCBpbiB0aGlzLmF0b21zW29dKSBsW2hdID0gdGhpcy5hdG9tc1tvXVtoXTsKICAgICAgICAgICAgICAgICAgICAgIG5bb10gPSBsLCBuW29dLnggPSBzW2ErK10sIG5bb10ueSA9IHNbYSsrXSwgbltvXS56ID0gc1thKytdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lcy5wdXNoKG4pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF0b21zID0gdGhpcy5mcmFtZXNbMF0sIHRoaXMuZnJhbWVzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEF0b21TcGVjcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEF0b21TcGVjcyhlKSB7fQogICAgICAgICAgICB9XSwgW3sKICAgICAgICAgICAgICBrZXk6ICJzYW1lT2JqIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2FtZU9iaihlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiB0ID8gSlNPTi5zdHJpbmdpZnkoZSkgPT0gSlNPTi5zdHJpbmdpZnkodCkgOiBlID09IHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd1N0aWNrSW1wb3N0ZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3U3RpY2tJbXBvc3RlcihlLCB0LCByLCBzLCBhKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuLCBvID0gZS51cGRhdGVHZW9Hcm91cCg0KSwgbCA9IG8udmVydGljZXMsIGggPSAzICogbCwgYyA9IG8udmVydGV4QXJyYXksIHUgPSBvLmNvbG9yQXJyYXksIGYgPSBvLnJhZGl1c0FycmF5LCBwID0gby5ub3JtYWxBcnJheSwgZyA9IGEuciwgdiA9IGEuZywgXyA9IGEuYiwgeSA9IGgsIGIgPSAwOyBiIDwgNDsgYisrKSBjW3ldID0gdC54LCBwW3ldID0gci54LCB1W3ldID0gZywgY1srK3ldID0gdC55LCBwW3ldID0gci55LCB1W3ldID0gdiwgY1srK3ldID0gdC56LCBwW3ldID0gci56LCB1W3ldID0gYiA8IDIgPyBfIDogKG4gPSB2b2lkIDAsIDAgPT0gKG4gPSAtXykgJiYgKG4gPSAtMWUtNCksIG4pLCB5Kys7CiAgICAgICAgICAgICAgICBvLnZlcnRpY2VzICs9IDQsIGZbbF0gPSAtcywgZltsICsgMV0gPSBzLCBmW2wgKyAyXSA9IC1zLCBmW2wgKyAzXSA9IHM7CiAgICAgICAgICAgICAgICB2YXIgdyA9IG8uZmFjZUFycmF5LAogICAgICAgICAgICAgICAgICB4ID0gby5mYWNlaWR4OwogICAgICAgICAgICAgICAgd1t4ICsgMF0gPSBsLCB3W3ggKyAxXSA9IGwgKyAxLCB3W3ggKyAyXSA9IGwgKyAyLCB3W3ggKyAzXSA9IGwgKyAyLCB3W3ggKyA0XSA9IGwgKyAzLCB3W3ggKyA1XSA9IGwsIG8uZmFjZWlkeCArPSA2OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImRlZXBDb3B5QW5kQ2FjaGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWVwQ29weUFuZENhY2hlKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmICgib2JqZWN0IiAhPSBfdHlwZW9mKGUpIHx8IG51bGwgPT0gZSkgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICBpZiAoZS5fX2NhY2hlX2NyZWF0ZWQpIHJldHVybiBlOwogICAgICAgICAgICAgICAgdmFyIHIgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9zMTMgaW4gZSkgewogICAgICAgICAgICAgICAgICB2YXIgX2ExMCA9IGVbX3MxM107CiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9hMTApKSB7CiAgICAgICAgICAgICAgICAgICAgcltfczEzXSA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMjggPSAwOyBfZTI4IDwgX2ExMC5sZW5ndGg7IF9lMjgrKykgcltfczEzXS5wdXNoKF9HTE1vZGVsLmRlZXBDb3B5QW5kQ2FjaGUoX2ExMFtfZTI4XSwgdCkpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgcltfczEzXSA9ICJvYmplY3QiID09IF90eXBlb2YoX2ExMCkgJiYgInByb3BlcnRpZXMiICE9IF9zMTMgJiYgIm1vZGVsIiAhPSBfczEzID8gX0dMTW9kZWwuZGVlcENvcHlBbmRDYWNoZShfYTEwLCB0KSA6IF9hMTA7CiAgICAgICAgICAgICAgICAgIGlmICgiYW5kIiA9PSBfczEzIHx8ICJvciIgPT0gX3MxMykgewogICAgICAgICAgICAgICAgICAgIHZhciBfZTI5ID0gW107CiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyW19zMTNdKSwKICAgICAgICAgICAgICAgICAgICAgIF9zdGVwNDsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hMTIgPSBfc3RlcDQudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcjE3ID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHQuc2VsZWN0ZWRBdG9tcyhfYTEyKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0ZXA5OwogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2UzMSA9IF9zdGVwOS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yMTcuYWRkKF9lMzEuaW5kZXgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yOS5lKGVycik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yOS5mKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX2UyOS5wdXNoKF9yMTcpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoImFuZCIgPT0gX3MxMykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF90MjkgPSBmdW5jdGlvbiBfdDI5KGUsIHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBuZXcgU2V0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0ZXA1OwogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3MxNCA9IF9zdGVwNS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFzKF9zMTQpICYmIHIuYWRkKF9zMTQpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgdmFyIF9hMTEgPSBuZXcgU2V0KF9lMjlbMF0pOwogICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfZTI5LnNwbGljZSgxKSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9zdGVwNjsKICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yMTUgPSBfc3RlcDYudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2ExMSA9IF90MjkoX2ExMSwgX3IxNSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjYuZigpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgcltfczEzXS5fX2NhY2hlZF9yZXN1bHRzID0gX2ExMTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCJvciIgPT0gX3MxMykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF90MzAgPSBuZXcgU2V0KCk7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKF9lMjkpLAogICAgICAgICAgICAgICAgICAgICAgICBfc3RlcDc7CiAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjcucygpOyAhKF9zdGVwNyA9IF9pdGVyYXRvcjcubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcjE2ID0gX3N0ZXA3LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3I4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3IxNiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RlcDg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOC5zKCk7ICEoX3N0ZXA4ID0gX2l0ZXJhdG9yOC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZTMwID0gX3N0ZXA4LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdDMwLmFkZChfZTMwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjguZShlcnIpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I4LmYoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjcuZigpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgcltfczEzXS5fX2NhY2hlZF9yZXN1bHRzID0gX3QzMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByLl9fY2FjaGVfY3JlYXRlZCA9ICEwLCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNxdWFyZWREaXN0YW5jZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IHQueCAtIGUueCwKICAgICAgICAgICAgICAgICAgcyA9IHQueSAtIGUueSwKICAgICAgICAgICAgICAgICAgYSA9IHQueiAtIGUuejsKICAgICAgICAgICAgICAgIHJldHVybiByICogciArIHMgKiBzICsgYSAqIGE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0RmxvYXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGbG9hdChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIm51bWJlciIgPT0gdHlwZW9mIGUgPyBlIDogcGFyc2VGbG9hdChlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwYXJzZUNyZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ3JkKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gW10sCiAgICAgICAgICAgICAgICAgIHMgPSAwOwogICAgICAgICAgICAgICAgaWYgKCJwZGIiID09IHQpIGZvciAodmFyIGEgPSBlLmluZGV4T2YoIlxuQVRPTSIpOyAtMSAhPSBhOykgewogICAgICAgICAgICAgICAgICBmb3IgKDsgIlxuQVRPTSIgPT0gZS5zbGljZShhLCBhICsgNSkgfHwgIlxuSEVUQVRNIiA9PSBlLnNsaWNlKGEsIGEgKyA3KTspIHJbcysrXSA9IHBhcnNlRmxvYXQoZS5zbGljZShhICsgMzEsIGEgKyAzOSkpLCByW3MrK10gPSBwYXJzZUZsb2F0KGUuc2xpY2UoYSArIDM5LCBhICsgNDcpKSwgcltzKytdID0gcGFyc2VGbG9hdChlLnNsaWNlKGEgKyA0NywgYSArIDU1KSksIGEgPSBlLmluZGV4T2YoIlxuIiwgYSArIDU0KSwgIlxuVEVSIiA9PSBlLnNsaWNlKGEsIGEgKyA0KSAmJiAoYSA9IGUuaW5kZXhPZigiXG4iLCBhICsgNSkpOwogICAgICAgICAgICAgICAgICBhID0gZS5pbmRleE9mKCJcbkFUT00iLCBhKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIm5ldGNkZiIgPT0gdCkgewogICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBOZXRDREZSZWFkZXIoZSk7CiAgICAgICAgICAgICAgICAgIHIgPSBbXS5jb25jYXQuYXBwbHkoW10sIG4uZ2V0RGF0YVZhcmlhYmxlKCJjb29yZGluYXRlcyIpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGlmICgiYXJyYXkiID09IHQgfHwgQXJyYXkuaXNBcnJheShlKSkgcmV0dXJuIGUuZmxhdCgyKTsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBfczE1ID0gZS5pbmRleE9mKCJcbiIpOwogICAgICAgICAgICAgICAgICAgICJpbnBjcmQiID09IHQgJiYgKF9zMTUgPSBlLmluZGV4T2YoIlxuIiwgX3MxNSArIDEpKSwgciA9IChlID0gZS5zbGljZShfczE1ICsgMSkpLm1hdGNoKC9cUysvZykubWFwKHBhcnNlRmxvYXQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwYXJzZU1vbERhdGEiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU1vbERhdGEoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICIiOwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGlmICghZSkgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgaWYgKC9cLmd6JC8udGVzdCh0KSkgewogICAgICAgICAgICAgICAgICB0ID0gdC5yZXBsYWNlKC9cLmd6JC8sICIiKTsKICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBlID0gKDAsIFIuaW5mbGF0ZSkoZSwgewogICAgICAgICAgICAgICAgICAgICAgdG86ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZi5QYXJzZXJzW3RdICYmICh0ID0gdC5zcGxpdCgiLiIpLnBvcCgpLCB2b2lkIDAgPT09IGYuUGFyc2Vyc1t0XSAmJiAoY29uc29sZS5sb2coIlVua25vd24gZm9ybWF0OiAiICsgdCksIHQgPSBlIGluc3RhbmNlb2YgVWludDhBcnJheSA/ICJtbXRmIiA6IGUubWF0Y2goL15APFRSSVBPUz5NT0xFQ1VMRS9nbSkgPyAibW9sMiIgOiBlLm1hdGNoKC9eZGF0YV8vZ20pICYmIGUubWF0Y2goL15sb29wXy9nbSkgPyAiY2lmIiA6IGUubWF0Y2goL15IRVRBVE0vZ20pIHx8IGUubWF0Y2goL15BVE9NL2dtKSA/ICJwZGIiIDogZS5tYXRjaCgvSVRFTTogVElNRVNURVAvZ20pID8gImxhbW1wc3RyaiIgOiBlLm1hdGNoKC9eLipcbi4qXG4uXHMqKFxkKylccysoXGQrKS9nbSkgPyAic2RmIiA6IGUubWF0Y2goL14lVkVSU0lPTlxzK1ZFUlNJT05fU1RBTVAvZ20pID8gInBybXRvcCIgOiAieHl6IiwgY29uc29sZS5sb2coIkJlc3QgZ3Vlc3M6ICIgKyB0KSkpLCAoMCwgZi5QYXJzZXJzW3RdKShlLCByKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9HTE1vZGVsOwogICAgICAgICAgfSgpOwogICAgICAgICAgX0dMTW9kZWwuZGVmYXVsdEF0b21TdHlsZSA9IHsKICAgICAgICAgICAgbGluZToge30KICAgICAgICAgIH0sIF9HTE1vZGVsLmRlZmF1bHRsaW5lV2lkdGggPSAxLCBfR0xNb2RlbC52ZHdSYWRpaSA9IHsKICAgICAgICAgICAgSDogMS4yLAogICAgICAgICAgICBIZTogMS40LAogICAgICAgICAgICBMaTogMS44MiwKICAgICAgICAgICAgQmU6IDEuNTMsCiAgICAgICAgICAgIEI6IDEuOTIsCiAgICAgICAgICAgIEM6IDEuNywKICAgICAgICAgICAgTjogMS41NSwKICAgICAgICAgICAgTzogMS41MiwKICAgICAgICAgICAgRjogMS40NywKICAgICAgICAgICAgTmU6IDEuNTQsCiAgICAgICAgICAgIE5hOiAyLjI3LAogICAgICAgICAgICBNZzogMS43MywKICAgICAgICAgICAgQWw6IDEuODQsCiAgICAgICAgICAgIFNpOiAyLjEsCiAgICAgICAgICAgIFA6IDEuOCwKICAgICAgICAgICAgUzogMS44LAogICAgICAgICAgICBDbDogMS43NSwKICAgICAgICAgICAgQXI6IDEuODgsCiAgICAgICAgICAgIEs6IDIuNzUsCiAgICAgICAgICAgIENhOiAyLjMxLAogICAgICAgICAgICBOaTogMS42MywKICAgICAgICAgICAgQ3U6IDEuNCwKICAgICAgICAgICAgWm46IDEuMzksCiAgICAgICAgICAgIEdhOiAxLjg3LAogICAgICAgICAgICBHZTogMi4xMSwKICAgICAgICAgICAgQXM6IDEuODUsCiAgICAgICAgICAgIFNlOiAxLjksCiAgICAgICAgICAgIEJyOiAxLjg1LAogICAgICAgICAgICBLcjogMi4wMiwKICAgICAgICAgICAgUmI6IDMuMDMsCiAgICAgICAgICAgIFNyOiAyLjQ5LAogICAgICAgICAgICBQZDogMS42MywKICAgICAgICAgICAgQWc6IDEuNzIsCiAgICAgICAgICAgIENkOiAxLjU4LAogICAgICAgICAgICBJbjogMS45MywKICAgICAgICAgICAgU246IDIuMTcsCiAgICAgICAgICAgIFNiOiAyLjA2LAogICAgICAgICAgICBUZTogMi4wNiwKICAgICAgICAgICAgSTogMS45OCwKICAgICAgICAgICAgWGU6IDIuMTYsCiAgICAgICAgICAgIENzOiAzLjQzLAogICAgICAgICAgICBCYTogMi42OCwKICAgICAgICAgICAgUHQ6IDEuNzUsCiAgICAgICAgICAgIEF1OiAxLjY2LAogICAgICAgICAgICBIZzogMS41NSwKICAgICAgICAgICAgVGw6IDEuOTYsCiAgICAgICAgICAgIFBiOiAyLjAyLAogICAgICAgICAgICBCaTogMi4wNywKICAgICAgICAgICAgUG86IDEuOTcsCiAgICAgICAgICAgIEF0OiAyLjAyLAogICAgICAgICAgICBSbjogMi4yLAogICAgICAgICAgICBGcjogMy40OCwKICAgICAgICAgICAgUmE6IDIuODMsCiAgICAgICAgICAgIFU6IDEuODYKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICA4NzgzOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIEdMU2hhcGU6IGZ1bmN0aW9uIEdMU2hhcGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9HTFNoYXBlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzcGxpdE1lc2g6IGZ1bmN0aW9uIHNwbGl0TWVzaCgpIHsKICAgICAgICAgICAgICByZXR1cm4gcDsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcyA9IHIoNzY5MyksCiAgICAgICAgICAgIGEgPSByKDMzNTEpLAogICAgICAgICAgICBuID0gcig5NjUyKSwKICAgICAgICAgICAgbyA9IHIoMjU1MCksCiAgICAgICAgICAgIGwgPSByKDkxOTIpLAogICAgICAgICAgICBoID0gcig3MzIzKSwKICAgICAgICAgICAgYyA9IHIoNDQwNiksCiAgICAgICAgICAgIHUgPSByKDYxNjMpLAogICAgICAgICAgICBmID0gcig5MDA1KTsKICAgICAgICAgIHZhciBfR0xTaGFwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9HTFNoYXBlKGUpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0dMU2hhcGUpOwogICAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gITEsIHRoaXMud2lyZWZyYW1lID0gITEsIHRoaXMub3BhY2l0eSA9IDEsIHRoaXMubGluZXdpZHRoID0gMSwgdGhpcy5jbGlja2FibGUgPSAhMSwgdGhpcy5ob3ZlcmFibGUgPSAhMSwgdGhpcy5zaWRlID0gcy5Eb3VibGVTaWRlLCB0aGlzLnN0eWxlc3BlYyA9IGUgfHwge30sIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgYS5TcGhlcmUoKSwgdGhpcy5pbnRlcnNlY3Rpb25TaGFwZSA9IHsKICAgICAgICAgICAgICAgIHNwaGVyZTogW10sCiAgICAgICAgICAgICAgICBjeWxpbmRlcjogW10sCiAgICAgICAgICAgICAgICBsaW5lOiBbXSwKICAgICAgICAgICAgICAgIHRyaWFuZ2xlOiBbXQogICAgICAgICAgICAgIH0sIF9HTFNoYXBlLnVwZGF0ZUZyb21TdHlsZSh0aGlzLCB0aGlzLnN0eWxlc3BlYyksIHRoaXMuY29tcG9uZW50cyA9IFtdLCB0aGlzLnNoYXBlT2JqID0gbnVsbCwgdGhpcy5yZW5kZXJlZFNoYXBlT2JqID0gbnVsbCwgdGhpcy5nZW8gPSBuZXcgcy5HZW9tZXRyeSghMCksIHRoaXMubGluZWdlbyA9IG5ldyBzLkdlb21ldHJ5KCEwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0dMU2hhcGUsIFt7CiAgICAgICAgICAgICAga2V5OiAidXBkYXRlU3R5bGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTdHlsZShlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB0IGluIGUpIHRoaXMuc3R5bGVzcGVjW3RdID0gZVt0XTsKICAgICAgICAgICAgICAgIGlmIChfR0xTaGFwZS51cGRhdGVGcm9tU3R5bGUodGhpcywgdGhpcy5zdHlsZXNwZWMpLCBlLnZvbGRhdGEgJiYgZS52b2xzY2hlbWUpIHsKICAgICAgICAgICAgICAgICAgKDAsIGYuYWRqdXN0Vm9sdW1lU3R5bGUpKGUpOwogICAgICAgICAgICAgICAgICB2YXIgX3QzMSA9IGUudm9sc2NoZW1lLAogICAgICAgICAgICAgICAgICAgIF9yMTggPSBlLnZvbGRhdGEsCiAgICAgICAgICAgICAgICAgICAgX3MxNiA9IG8uQ0MsCiAgICAgICAgICAgICAgICAgICAgX2ExMyA9IF90MzEucmFuZ2UoKSB8fCBbLTEsIDFdOwogICAgICAgICAgICAgICAgICB0aGlzLmdlby5zZXRDb2xvcnMoZnVuY3Rpb24gKGUsIG4sIG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IF9yMTguZ2V0VmFsKGUsIG4sIG8pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfczE2LmNvbG9yKF90MzEudmFsdWVUb0hleChsLCBfYTEzKSk7CiAgICAgICAgICAgICAgICAgIH0pLCBkZWxldGUgdGhpcy5jb2xvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRDdXN0b20iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDdXN0b20oZSkgewogICAgICAgICAgICAgICAgZS52ZXJ0ZXhBcnIgPSBlLnZlcnRleEFyciB8fCBbXSwgZS5mYWNlQXJyID0gZS5mYWNlQXJyIHx8IFtdLCBlLm5vcm1hbEFyciA9IGUubm9ybWFsQXJyIHx8IFtdLCBfR0xTaGFwZS5kcmF3Q3VzdG9tKHRoaXMsIHRoaXMuZ2VvLCBlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRTcGhlcmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTcGhlcmUoZSkgewogICAgICAgICAgICAgICAgZS5jZW50ZXIgfHwgKGUuY2VudGVyID0gbmV3IG4uVmVjdG9yMygwLCAwLCAwKSksIGUucmFkaXVzID0gZS5yYWRpdXMgPyAoMCwgbi5jbGFtcCkoZS5yYWRpdXMsIDAsIDEgLyAwKSA6IDEuNSwgZS5jb2xvciA9IG8uQ0MuY29sb3IoZS5jb2xvciksIHRoaXMuaW50ZXJzZWN0aW9uU2hhcGUuc3BoZXJlLnB1c2gobmV3IGEuU3BoZXJlKGUuY2VudGVyLCBlLnJhZGl1cykpLCBjLkdMRHJhdy5kcmF3U3BoZXJlKHRoaXMuZ2VvLCBlLmNlbnRlciwgZS5yYWRpdXMsIGUuY29sb3IsIGUucXVhbGl0eSksIHRoaXMuY29tcG9uZW50cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgY2VudHJvaWQ6IG5ldyBuLlZlY3RvcjMoZS5jZW50ZXIueCwgZS5jZW50ZXIueSwgZS5jZW50ZXIueikKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdlby51cGRhdGVHZW9Hcm91cCgwKTsKICAgICAgICAgICAgICAgIF9HTFNoYXBlLnVwZGF0ZUJvdW5kaW5nRnJvbVBvaW50cyh0aGlzLmJvdW5kaW5nU3BoZXJlLCB0aGlzLmNvbXBvbmVudHMsIHQudmVydGV4QXJyYXksIHQudmVydGljZXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEJveCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEJveChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCwKICAgICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgICAgYSA9IGUuZGltZW5zaW9ucyB8fCB7CiAgICAgICAgICAgICAgICAgICAgdzogMSwKICAgICAgICAgICAgICAgICAgICBoOiAxLAogICAgICAgICAgICAgICAgICAgIGQ6IDEKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHQgPSAibnVtYmVyIiA9PSB0eXBlb2YgYS53ID8gewogICAgICAgICAgICAgICAgICB4OiBhLncsCiAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgIH0gOiBhLncsIHIgPSAibnVtYmVyIiA9PSB0eXBlb2YgYS5oID8gewogICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICB5OiBhLmgsCiAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgIH0gOiBhLmgsIHMgPSAibnVtYmVyIiA9PSB0eXBlb2YgYS5kID8gewogICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICB6OiBhLmQKICAgICAgICAgICAgICAgIH0gOiBhLmQ7CiAgICAgICAgICAgICAgICB2YXIgbyA9IGUuY29ybmVyOwogICAgICAgICAgICAgICAgbnVsbCA9PSBvICYmIChvID0gdm9pZCAwICE9PSBlLmNlbnRlciA/IHsKICAgICAgICAgICAgICAgICAgeDogZS5jZW50ZXIueCAtIC41ICogKHQueCArIHIueCArIHMueCksCiAgICAgICAgICAgICAgICAgIHk6IGUuY2VudGVyLnkgLSAuNSAqICh0LnkgKyByLnkgKyBzLnkpLAogICAgICAgICAgICAgICAgICB6OiBlLmNlbnRlci56IC0gLjUgKiAodC56ICsgci56ICsgcy56KQogICAgICAgICAgICAgICAgfSA6IHsKICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgbCA9IFt7CiAgICAgICAgICAgICAgICAgICAgeDogby54LAogICAgICAgICAgICAgICAgICAgIHk6IG8ueSwKICAgICAgICAgICAgICAgICAgICB6OiBvLnoKICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHg6IG8ueCArIHQueCwKICAgICAgICAgICAgICAgICAgICB5OiBvLnkgKyB0LnksCiAgICAgICAgICAgICAgICAgICAgejogby56ICsgdC56CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB4OiBvLnggKyByLngsCiAgICAgICAgICAgICAgICAgICAgeTogby55ICsgci55LAogICAgICAgICAgICAgICAgICAgIHo6IG8ueiArIHIuegogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgeDogby54ICsgdC54ICsgci54LAogICAgICAgICAgICAgICAgICAgIHk6IG8ueSArIHQueSArIHIueSwKICAgICAgICAgICAgICAgICAgICB6OiBvLnogKyB0LnogKyByLnoKICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHg6IG8ueCArIHMueCwKICAgICAgICAgICAgICAgICAgICB5OiBvLnkgKyBzLnksCiAgICAgICAgICAgICAgICAgICAgejogby56ICsgcy56CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB4OiBvLnggKyB0LnggKyBzLngsCiAgICAgICAgICAgICAgICAgICAgeTogby55ICsgdC55ICsgcy55LAogICAgICAgICAgICAgICAgICAgIHo6IG8ueiArIHQueiArIHMuegogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgeDogby54ICsgci54ICsgcy54LAogICAgICAgICAgICAgICAgICAgIHk6IG8ueSArIHIueSArIHMueSwKICAgICAgICAgICAgICAgICAgICB6OiBvLnogKyByLnogKyBzLnoKICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHg6IG8ueCArIHQueCArIHIueCArIHMueCwKICAgICAgICAgICAgICAgICAgICB5OiBvLnkgKyB0LnkgKyByLnkgKyBzLnksCiAgICAgICAgICAgICAgICAgICAgejogby56ICsgdC56ICsgci56ICsgcy56CiAgICAgICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgICAgICBoID0gW10sCiAgICAgICAgICAgICAgICAgIGMgPSBbXTsKICAgICAgICAgICAgICAgIGguc3BsaWNlKGgubGVuZ3RoLCAwLCBsWzBdLCBsWzFdLCBsWzJdLCBsWzNdKSwgYy5zcGxpY2UoYy5sZW5ndGgsIDAsIDAsIDIsIDEsIDEsIDIsIDMpOwogICAgICAgICAgICAgICAgdmFyIHUgPSA0OwogICAgICAgICAgICAgICAgaC5zcGxpY2UoaC5sZW5ndGgsIDAsIGxbMl0sIGxbM10sIGxbNl0sIGxbN10pLCBjLnNwbGljZShjLmxlbmd0aCwgMCwgdSArIDAsIHUgKyAyLCB1ICsgMSwgdSArIDEsIHUgKyAyLCB1ICsgMyksIHUgKz0gNCwgaC5zcGxpY2UoaC5sZW5ndGgsIDAsIGxbNF0sIGxbNV0sIGxbMF0sIGxbMV0pLCBjLnNwbGljZShjLmxlbmd0aCwgMCwgdSArIDAsIHUgKyAyLCB1ICsgMSwgdSArIDEsIHUgKyAyLCB1ICsgMyksIHUgKz0gNCwgaC5zcGxpY2UoaC5sZW5ndGgsIDAsIGxbNl0sIGxbN10sIGxbNF0sIGxbNV0pLCBjLnNwbGljZShjLmxlbmd0aCwgMCwgdSArIDAsIHUgKyAyLCB1ICsgMSwgdSArIDEsIHUgKyAyLCB1ICsgMyksIHUgKz0gNCwgaC5zcGxpY2UoaC5sZW5ndGgsIDAsIGxbM10sIGxbMV0sIGxbN10sIGxbNV0pLCBjLnNwbGljZShjLmxlbmd0aCwgMCwgdSArIDAsIHUgKyAyLCB1ICsgMSwgdSArIDEsIHUgKyAyLCB1ICsgMyksIHUgKz0gNCwgaC5zcGxpY2UoaC5sZW5ndGgsIDAsIGxbMl0sIGxbNl0sIGxbMF0sIGxbNF0pLCBjLnNwbGljZShjLmxlbmd0aCwgMCwgdSArIDAsIHUgKyAyLCB1ICsgMSwgdSArIDEsIHUgKyAyLCB1ICsgMyksIHUgKz0gNDsKICAgICAgICAgICAgICAgIHZhciBwID0gKDAsIGYuZXh0ZW5kKSh7fSwgZSk7CiAgICAgICAgICAgICAgICBwLnZlcnRleEFyciA9IGgsIHAuZmFjZUFyciA9IGMsIHAubm9ybWFsQXJyID0gW10sIF9HTFNoYXBlLmRyYXdDdXN0b20odGhpcywgdGhpcy5nZW8sIHApOwogICAgICAgICAgICAgICAgdmFyIGcgPSBuZXcgbi5WZWN0b3IzKCk7CiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaCh7CiAgICAgICAgICAgICAgICAgIGNlbnRyb2lkOiBnLmFkZFZlY3RvcnMobFswXSwgbFs3XSkubXVsdGlwbHlTY2FsYXIoLjUpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciB2ID0gdGhpcy5nZW8udXBkYXRlR2VvR3JvdXAoMCk7CiAgICAgICAgICAgICAgICBfR0xTaGFwZS51cGRhdGVCb3VuZGluZ0Zyb21Qb2ludHModGhpcy5ib3VuZGluZ1NwaGVyZSwgdGhpcy5jb21wb25lbnRzLCB2LnZlcnRleEFycmF5LCB2LnZlcnRpY2VzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRDeWxpbmRlciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEN5bGluZGVyKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0LCByOwogICAgICAgICAgICAgICAgdCA9IGUuc3RhcnQgPyBuZXcgbi5WZWN0b3IzKGUuc3RhcnQueCB8fCAwLCBlLnN0YXJ0LnkgfHwgMCwgZS5zdGFydC56IHx8IDApIDogbmV3IG4uVmVjdG9yMygwLCAwLCAwKSwgZS5lbmQgPyB2b2lkIDAgPT09IChyID0gbmV3IG4uVmVjdG9yMyhlLmVuZC54LCBlLmVuZC55IHx8IDAsIGUuZW5kLnogfHwgMCkpLnggJiYgKHIueCA9IDMpIDogciA9IG5ldyBuLlZlY3RvcjMoMCwgMCwgMCk7CiAgICAgICAgICAgICAgICB2YXIgcyA9IGUucmFkaXVzIHx8IC4xLAogICAgICAgICAgICAgICAgICBsID0gby5DQy5jb2xvcihlLmNvbG9yKTsKICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uU2hhcGUuY3lsaW5kZXIucHVzaChuZXcgYS5DeWxpbmRlcih0LCByLCBzKSksIGMuR0xEcmF3LmRyYXdDeWxpbmRlcih0aGlzLmdlbywgdCwgciwgcywgbCwgZS5mcm9tQ2FwLCBlLnRvQ2FwKTsKICAgICAgICAgICAgICAgIHZhciBoID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLnB1c2goewogICAgICAgICAgICAgICAgICBjZW50cm9pZDogaC5hZGRWZWN0b3JzKHQsIHIpLm11bHRpcGx5U2NhbGFyKC41KQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgdSA9IHRoaXMuZ2VvLnVwZGF0ZUdlb0dyb3VwKDApOwogICAgICAgICAgICAgICAgX0dMU2hhcGUudXBkYXRlQm91bmRpbmdGcm9tUG9pbnRzKHRoaXMuYm91bmRpbmdTcGhlcmUsIHRoaXMuY29tcG9uZW50cywgdS52ZXJ0ZXhBcnJheSwgdS52ZXJ0aWNlcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkRGFzaGVkQ3lsaW5kZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGREYXNoZWRDeWxpbmRlcihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCwgcjsKICAgICAgICAgICAgICAgIGUuZGFzaExlbmd0aCA9IGUuZGFzaExlbmd0aCB8fCAuMjUsIGUuZ2FwTGVuZ3RoID0gZS5nYXBMZW5ndGggfHwgLjI1LCB0ID0gZS5zdGFydCA/IG5ldyBuLlZlY3RvcjMoZS5zdGFydC54IHx8IDAsIGUuc3RhcnQueSB8fCAwLCBlLnN0YXJ0LnogfHwgMCkgOiBuZXcgbi5WZWN0b3IzKDAsIDAsIDApLCBlLmVuZCA/IHZvaWQgMCA9PT0gKHIgPSBuZXcgbi5WZWN0b3IzKGUuZW5kLngsIGUuZW5kLnkgfHwgMCwgZS5lbmQueiB8fCAwKSkueCAmJiAoci54ID0gMykgOiByID0gbmV3IG4uVmVjdG9yMygzLCAwLCAwKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSBlLnJhZGl1cyB8fCAuMSwgbCA9IG8uQ0MuY29sb3IoZS5jb2xvciksIGggPSBNYXRoLnNxcnQoTWF0aC5wb3codC54IC0gci54LCAyKSArIE1hdGgucG93KHQueSAtIHIueSwgMikgKyBNYXRoLnBvdyh0LnogLSByLnosIDIpKSwgdSA9IGggLyAoZS5nYXBMZW5ndGggKyBlLmRhc2hMZW5ndGgpLCBmID0gbmV3IG4uVmVjdG9yMyhlLnN0YXJ0LnggfHwgMCwgZS5zdGFydC55IHx8IDAsIGUuc3RhcnQueiB8fCAwKSwgcCA9IG5ldyBuLlZlY3RvcjMoZS5lbmQueCwgZS5lbmQueSB8fCAwLCBlLmVuZC56IHx8IDApLCBnID0gbmV3IG4uVmVjdG9yMygoci54IC0gdC54KSAvIChoIC8gZS5nYXBMZW5ndGgpLCAoci55IC0gdC55KSAvIChoIC8gZS5nYXBMZW5ndGgpLCAoci56IC0gdC56KSAvIChoIC8gZS5nYXBMZW5ndGgpKSwgdiA9IG5ldyBuLlZlY3RvcjMoKHIueCAtIHQueCkgLyAoaCAvIGUuZGFzaExlbmd0aCksIChyLnkgLSB0LnkpIC8gKGggLyBlLmRhc2hMZW5ndGgpLCAoci56IC0gdC56KSAvIChoIC8gZS5kYXNoTGVuZ3RoKSksIF8gPSAwOyBfIDwgdTsgXysrKSBwID0gbmV3IG4uVmVjdG9yMyhmLnggKyB2LngsIGYueSArIHYueSwgZi56ICsgdi56KSwgdGhpcy5pbnRlcnNlY3Rpb25TaGFwZS5jeWxpbmRlci5wdXNoKG5ldyBhLkN5bGluZGVyKGYsIHAsIHMpKSwgYy5HTERyYXcuZHJhd0N5bGluZGVyKHRoaXMuZ2VvLCBmLCBwLCBzLCBsLCBlLmZyb21DYXAsIGUudG9DYXApLCBmID0gbmV3IG4uVmVjdG9yMyhwLnggKyBnLngsIHAueSArIGcueSwgcC56ICsgZy56KTsKICAgICAgICAgICAgICAgIHZhciB5ID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLnB1c2goewogICAgICAgICAgICAgICAgICBjZW50cm9pZDogeS5hZGRWZWN0b3JzKHQsIHIpLm11bHRpcGx5U2NhbGFyKC41KQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgYiA9IHRoaXMuZ2VvLnVwZGF0ZUdlb0dyb3VwKDApOwogICAgICAgICAgICAgICAgX0dMU2hhcGUudXBkYXRlQm91bmRpbmdGcm9tUG9pbnRzKHRoaXMuYm91bmRpbmdTcGhlcmUsIHRoaXMuY29tcG9uZW50cywgYi52ZXJ0ZXhBcnJheSwgYi52ZXJ0aWNlcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkQ3VydmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDdXJ2ZShlKSB7CiAgICAgICAgICAgICAgICBlLnBvaW50cyA9IGUucG9pbnRzIHx8IFtdLCBlLnNtb290aCA9IGUuc21vb3RoIHx8IDEwLCB2b2lkIDAgPT09IGUuZnJvbUNhcCAmJiAoZS5mcm9tQ2FwID0gMiksIHZvaWQgMCA9PT0gZS50b0NhcCAmJiAoZS50b0NhcCA9IDIpOwogICAgICAgICAgICAgICAgdmFyIHQgPSAoMCwgdS5zdWJkaXZpZGVfc3BsaW5lKShlLnBvaW50cywgZS5zbW9vdGgpOwogICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoIDwgMykgY29uc29sZS5sb2coIlRvbyBmZXcgcG9pbnRzIGluIGFkZEN1cnZlIik7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciByID0gZS5yYWRpdXMgfHwgLjEsCiAgICAgICAgICAgICAgICAgICAgcyA9IG8uQ0MuY29sb3IoZS5jb2xvciksCiAgICAgICAgICAgICAgICAgICAgYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgbiA9IHQubGVuZ3RoIC0gMSwKICAgICAgICAgICAgICAgICAgICBsID0gdFswXS5kaXN0YW5jZVRvKHRbMV0pLAogICAgICAgICAgICAgICAgICAgIGggPSBNYXRoLmNlaWwoMiAqIHIgLyBsKTsKICAgICAgICAgICAgICAgICAgaWYgKGUudG9BcnJvdykgewogICAgICAgICAgICAgICAgICAgIHZhciBfZTMyID0gewogICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRbbiAtPSBoXSwKICAgICAgICAgICAgICAgICAgICAgIGVuZDogdFt0Lmxlbmd0aCAtIDFdLAogICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiByLAogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHMsCiAgICAgICAgICAgICAgICAgICAgICBtaWQ6IDFlLTQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQXJyb3coX2UzMik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGUuZnJvbUFycm93KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9lMzMgPSB7CiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdFthICs9IGhdLAogICAgICAgICAgICAgICAgICAgICAgZW5kOiB0WzBdLAogICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiByLAogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHMsCiAgICAgICAgICAgICAgICAgICAgICBtaWQ6IDFlLTQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQXJyb3coX2UzMyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IE1hdGguY2VpbCh0Lmxlbmd0aCAvIDIpLCBmID0gewogICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiByLAogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHMsCiAgICAgICAgICAgICAgICAgICAgICBmcm9tQ2FwOiAyLAogICAgICAgICAgICAgICAgICAgICAgdG9DYXA6IDIKICAgICAgICAgICAgICAgICAgICB9LCBwID0gYTsgcCA8IG47IHArKykgZi5zdGFydCA9IHRbcF0sIGYuZW5kID0gdFtwICsgMV0sIGYuZnJvbUNhcCA9IDIsIGYudG9DYXAgPSAyLCBwIDwgYyA/IChmLmZyb21DYXAgPSAyLCBmLnRvQ2FwID0gMCkgOiBwID4gYyA/IChmLmZyb21DYXAgPSAwLCBmLnRvQ2FwID0gMikgOiAoZi5mcm9tQ2FwID0gMiwgZi50b0NhcCA9IDIpLCB0aGlzLmFkZEN5bGluZGVyKGYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZExpbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaW5lKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0LCByOwogICAgICAgICAgICAgICAgdCA9IGUuc3RhcnQgPyBuZXcgbi5WZWN0b3IzKGUuc3RhcnQueCB8fCAwLCBlLnN0YXJ0LnkgfHwgMCwgZS5zdGFydC56IHx8IDApIDogbmV3IG4uVmVjdG9yMygwLCAwLCAwKSwgZS5lbmQgPyB2b2lkIDAgPT09IChyID0gbmV3IG4uVmVjdG9yMyhlLmVuZC54LCBlLmVuZC55IHx8IDAsIGUuZW5kLnogfHwgMCkpLnggJiYgKHIueCA9IDMpIDogciA9IG5ldyBuLlZlY3RvcjMoMywgMCwgMCk7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMuZ2VvLnVwZGF0ZUdlb0dyb3VwKDIpLAogICAgICAgICAgICAgICAgICBhID0gcy52ZXJ0aWNlcywKICAgICAgICAgICAgICAgICAgbyA9IDMgKiBhLAogICAgICAgICAgICAgICAgICBsID0gcy52ZXJ0ZXhBcnJheTsKICAgICAgICAgICAgICAgIGxbb10gPSB0LngsIGxbbyArIDFdID0gdC55LCBsW28gKyAyXSA9IHQueiwgbFtvICsgM10gPSByLngsIGxbbyArIDRdID0gci55LCBsW28gKyA1XSA9IHIueiwgcy52ZXJ0aWNlcyArPSAyOwogICAgICAgICAgICAgICAgdmFyIGggPSBzLmxpbmVBcnJheSwKICAgICAgICAgICAgICAgICAgYyA9IHMubGluZWlkeDsKICAgICAgICAgICAgICAgIGhbY10gPSBhLCBoW2MgKyAxXSA9IGEgKyAxLCBzLmxpbmVpZHggKz0gMjsKICAgICAgICAgICAgICAgIHZhciB1ID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLnB1c2goewogICAgICAgICAgICAgICAgICBjZW50cm9pZDogdS5hZGRWZWN0b3JzKHQsIHIpLm11bHRpcGx5U2NhbGFyKC41KQogICAgICAgICAgICAgICAgfSksIHMgPSB0aGlzLmdlby51cGRhdGVHZW9Hcm91cCgwKSwgX0dMU2hhcGUudXBkYXRlQm91bmRpbmdGcm9tUG9pbnRzKHRoaXMuYm91bmRpbmdTcGhlcmUsIHRoaXMuY29tcG9uZW50cywgcy52ZXJ0ZXhBcnJheSwgcy52ZXJ0aWNlcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkQXJyb3ciLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRBcnJvdyhlKSB7CiAgICAgICAgICAgICAgICBpZiAoZS5zdGFydCA/IGUuc3RhcnQgPSBuZXcgbi5WZWN0b3IzKGUuc3RhcnQueCB8fCAwLCBlLnN0YXJ0LnkgfHwgMCwgZS5zdGFydC56IHx8IDApIDogZS5zdGFydCA9IG5ldyBuLlZlY3RvcjMoMCwgMCwgMCksIGUuZGlyIGluc3RhbmNlb2Ygbi5WZWN0b3IzICYmICJudW1iZXIiID09IHR5cGVvZiBlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICB2YXIgdCA9IGUuZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoZS5sZW5ndGgpLmFkZChlLnN0YXJ0KTsKICAgICAgICAgICAgICAgICAgZS5lbmQgPSB0OwogICAgICAgICAgICAgICAgfSBlbHNlIGUuZW5kID8gKGUuZW5kID0gbmV3IG4uVmVjdG9yMyhlLmVuZC54LCBlLmVuZC55IHx8IDAsIGUuZW5kLnogfHwgMCksIHZvaWQgMCA9PT0gZS5lbmQueCAmJiAoZS5lbmQueCA9IDMpKSA6IGUuZW5kID0gbmV3IG4uVmVjdG9yMygzLCAwLCAwKTsKICAgICAgICAgICAgICAgIGUucmFkaXVzID0gZS5yYWRpdXMgfHwgLjEsIGUucmFkaXVzUmF0aW8gPSBlLnJhZGl1c1JhdGlvIHx8IDEuNjE4MDM0LCBlLm1pZCA9IDAgPCBlLm1pZCAmJiBlLm1pZCA8IDEgPyBlLm1pZCA6IC42MTgwMzQsIF9HTFNoYXBlLmRyYXdBcnJvdyh0aGlzLCB0aGlzLmdlbywgZSk7CiAgICAgICAgICAgICAgICB2YXIgciA9IG5ldyBuLlZlY3RvcjMoKTsKICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgY2VudHJvaWQ6IHIuYWRkVmVjdG9ycyhlLnN0YXJ0LCBlLmVuZCkubXVsdGlwbHlTY2FsYXIoLjUpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5nZW8udXBkYXRlR2VvR3JvdXAoMCk7CiAgICAgICAgICAgICAgICBfR0xTaGFwZS51cGRhdGVCb3VuZGluZ0Zyb21Qb2ludHModGhpcy5ib3VuZGluZ1NwaGVyZSwgdGhpcy5jb21wb25lbnRzLCBzLnZlcnRleEFycmF5LCBzLnZlcnRpY2VzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRJc29zdXJmYWNlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSXNvc3VyZmFjZShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgbyA9IHZvaWQgMCAhPT0gdC5pc292YWwgJiYgIm51bWJlciIgPT0gdHlwZW9mIHQuaXNvdmFsID8gdC5pc292YWwgOiAwLAogICAgICAgICAgICAgICAgICBoID0gISF0LnZveGVsLAogICAgICAgICAgICAgICAgICBjID0gdm9pZCAwID09PSB0LnNtb290aG5lc3MgPyAxIDogdC5zbW9vdGhuZXNzLAogICAgICAgICAgICAgICAgICB1ID0gZS5zaXplLngsCiAgICAgICAgICAgICAgICAgIGYgPSBlLnNpemUueSwKICAgICAgICAgICAgICAgICAgcCA9IGUuc2l6ZS56LAogICAgICAgICAgICAgICAgICBnID0gbmV3IEludDE2QXJyYXkodSAqIGYgKiBwKSwKICAgICAgICAgICAgICAgICAgdiA9IGUuZGF0YTsKICAgICAgICAgICAgICAgIGZvciAocyA9IDAsIGEgPSBnLmxlbmd0aDsgcyA8IGE7ICsrcykgZ1tzXSA9IC0xOwogICAgICAgICAgICAgICAgdmFyIF8gPSBuZXcgVWludDhBcnJheSh1ICogZiAqIHApOwogICAgICAgICAgICAgICAgZm9yIChzID0gMCwgYSA9IHYubGVuZ3RoOyBzIDwgYTsgKytzKSB7CiAgICAgICAgICAgICAgICAgIChvID49IDAgPyB2W3NdIC0gbyA6IG8gLSB2W3NdKSA+IDAgJiYgKF9bc10gfD0gX0dMU2hhcGUuSVNET05FKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB5ID0gW10sCiAgICAgICAgICAgICAgICAgIGIgPSBbXTsKICAgICAgICAgICAgICAgIGwuTWFyY2hpbmdDdWJlLm1hcmNoKF8sIHksIGIsIHsKICAgICAgICAgICAgICAgICAgZnVsbHRhYmxlOiAhMCwKICAgICAgICAgICAgICAgICAgdm94ZWw6IGgsCiAgICAgICAgICAgICAgICAgIHVuaXRDdWJlOiBlLnVuaXQsCiAgICAgICAgICAgICAgICAgIG9yaWdpbjogZS5vcmlnaW4sCiAgICAgICAgICAgICAgICAgIG1hdHJpeDogZS5tYXRyaXgsCiAgICAgICAgICAgICAgICAgIG5YOiB1LAogICAgICAgICAgICAgICAgICBuWTogZiwKICAgICAgICAgICAgICAgICAgblo6IHAKICAgICAgICAgICAgICAgIH0pLCAhaCAmJiBjID4gMCAmJiBsLk1hcmNoaW5nQ3ViZS5sYXBsYWNpYW5TbW9vdGgoYywgeSwgYik7CiAgICAgICAgICAgICAgICB2YXIgdyA9IFtdLAogICAgICAgICAgICAgICAgICB4ID0gW10sCiAgICAgICAgICAgICAgICAgIEEgPSBbXTsKICAgICAgICAgICAgICAgIGlmICh0LnNlbGVjdGVkUmVnaW9uICYmIHZvaWQgMCA9PT0gdC5jb29yZHMgJiYgKHQuY29vcmRzID0gdC5zZWxlY3RlZFJlZ2lvbiksIHZvaWQgMCAhPT0gdC5jb29yZHMpIHsKICAgICAgICAgICAgICAgICAgdmFyIEMgPSB0LmNvb3Jkc1swXS54LAogICAgICAgICAgICAgICAgICAgIFMgPSB0LmNvb3Jkc1swXS55LAogICAgICAgICAgICAgICAgICAgIE0gPSB0LmNvb3Jkc1swXS56LAogICAgICAgICAgICAgICAgICAgIHogPSB0LmNvb3Jkc1swXS54LAogICAgICAgICAgICAgICAgICAgIEwgPSB0LmNvb3Jkc1swXS55LAogICAgICAgICAgICAgICAgICAgIEUgPSB0LmNvb3Jkc1swXS56OwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTM0ID0gMDsgX2UzNCA8IHQuY29vcmRzLmxlbmd0aDsgX2UzNCsrKSB0LmNvb3Jkc1tfZTM0XS54ID4gQyA/IEMgPSB0LmNvb3Jkc1tfZTM0XS54IDogdC5jb29yZHNbX2UzNF0ueCA8IHogJiYgKHogPSB0LmNvb3Jkc1tfZTM0XS54KSwgdC5jb29yZHNbX2UzNF0ueSA+IFMgPyBTID0gdC5jb29yZHNbX2UzNF0ueSA6IHQuY29vcmRzW19lMzRdLnkgPCBMICYmIChMID0gdC5jb29yZHNbX2UzNF0ueSksIHQuY29vcmRzW19lMzRdLnogPiBNID8gTSA9IHQuY29vcmRzW19lMzRdLnogOiB0LmNvb3Jkc1tfZTM0XS56IDwgRSAmJiAoRSA9IHQuY29vcmRzW19lMzRdLnopOwogICAgICAgICAgICAgICAgICB2YXIgVCA9IDI7CiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gdC5yYWRpdXMgJiYgKFQgPSB0LnJhZGl1cyksIHZvaWQgMCAhPT0gdC5zZWxlY3RlZE9mZnNldCAmJiAoVCA9IHQuc2VsZWN0ZWRPZmZzZXQpLCB2b2lkIDAgIT09IHQuc2VsZGlzdCAmJiAoVCA9IHQuc2VsZGlzdCksIHogLT0gVCwgQyArPSBULCBMIC09IFQsIFMgKz0gVCwgRSAtPSBULCBNICs9IFQ7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMzUgPSAwOyBfZTM1IDwgeS5sZW5ndGg7IF9lMzUrKykgeVtfZTM1XS54ID4geiAmJiB5W19lMzVdLnggPCBDICYmIHlbX2UzNV0ueSA+IEwgJiYgeVtfZTM1XS55IDwgUyAmJiB5W19lMzVdLnogPiBFICYmIHlbX2UzNV0ueiA8IE0gJiYgX0dMU2hhcGUuaW5TZWxlY3RlZFJlZ2lvbih5W19lMzVdLCB0LmNvb3JkcywgVCkgPyAody5wdXNoKHgubGVuZ3RoKSwgeC5wdXNoKHlbX2UzNV0pKSA6IHcucHVzaCgtMSk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMzYgPSAwOyBfZTM2ICsgMiA8IGIubGVuZ3RoOyBfZTM2ICs9IDMpIC0xICE9PSB3W2JbX2UzNl1dICYmIC0xICE9PSB3W2JbX2UzNiArIDFdXSAmJiAtMSAhPT0gd1tiW19lMzYgKyAyXV0gJiYgKEEucHVzaChiW19lMzZdIC0gKGJbX2UzNl0gLSB3W2JbX2UzNl1dKSksIEEucHVzaChiW19lMzYgKyAxXSAtIChiW19lMzYgKyAxXSAtIHdbYltfZTM2ICsgMV1dKSksIEEucHVzaChiW19lMzYgKyAyXSAtIChiW19lMzYgKyAyXSAtIHdbYltfZTM2ICsgMl1dKSkpOwogICAgICAgICAgICAgICAgICB5ID0geCwgYiA9IEE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfR0xTaGFwZS5kcmF3Q3VzdG9tKHRoaXMsIHRoaXMuZ2VvLCB7CiAgICAgICAgICAgICAgICAgIHZlcnRleEFycjogeSwKICAgICAgICAgICAgICAgICAgZmFjZUFycjogYiwKICAgICAgICAgICAgICAgICAgbm9ybWFsQXJyOiBbXSwKICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0LmNsaWNrYWJsZSwKICAgICAgICAgICAgICAgICAgaG92ZXJhYmxlOiB0LmhvdmVyYWJsZQogICAgICAgICAgICAgICAgfSksIHRoaXMudXBkYXRlU3R5bGUodCk7CiAgICAgICAgICAgICAgICB2YXIgayA9IG5ldyBuLlZlY3RvcjMoZS5vcmlnaW4ueCwgZS5vcmlnaW4ueSwgZS5vcmlnaW4ueiksCiAgICAgICAgICAgICAgICAgIEkgPSBuZXcgbi5WZWN0b3IzKGUuc2l6ZS54ICogZS51bml0LngsIGUuc2l6ZS55ICogZS51bml0LnksIGUuc2l6ZS56ICogZS51bml0LnopLAogICAgICAgICAgICAgICAgICBPID0gbmV3IG4uVmVjdG9yMygwLCAwLCAwKSwKICAgICAgICAgICAgICAgICAgRCA9IGsuY2xvbmUoKSwKICAgICAgICAgICAgICAgICAgRiA9IGsuY2xvbmUoKS5hZGQoSSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTM3ID0gMDsgX2UzNyA8IHkubGVuZ3RoOyBfZTM3KyspIE8uYWRkKHlbX2UzN10pLCBELm1heCh5W19lMzddKSwgRi5taW4oeVtfZTM3XSk7CiAgICAgICAgICAgICAgICBPLmRpdmlkZVNjYWxhcih5Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICB2YXIgUiA9IE8uZGlzdGFuY2VUbyhGKSwKICAgICAgICAgICAgICAgICAgUCA9IE8uZGlzdGFuY2VUbyhEKTsKICAgICAgICAgICAgICAgIHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyID0gTywgdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLm1heChSLCBQKSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgciAmJiByKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkVm9sdW1ldHJpY0RhdGEiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRWb2x1bWV0cmljRGF0YShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICBlID0gbmV3IGguVm9sdW1lRGF0YShlLCB0KSwgdGhpcy5hZGRJc29zdXJmYWNlKGUsIHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImZpbmFsaXplIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluYWxpemUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX0dMU2hhcGUuZmluYWxpemVHZW8odGhpcy5nZW8pLCB0aGlzLmdlby5pbml0VHlwZWRBcnJheXMoKSwgdGhpcy5nZW87CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2xvYmoiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnbG9iaihlKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlZFNoYXBlT2JqICYmIChlLnJlbW92ZSh0aGlzLnJlbmRlcmVkU2hhcGVPYmopLCB0aGlzLnJlbmRlcmVkU2hhcGVPYmogPSBudWxsKSwgIXRoaXMuaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgIF9HTFNoYXBlLmZpbmFsaXplR2VvKHRoaXMuZ2VvKSwgdGhpcy5nZW8uaW5pdFR5cGVkQXJyYXlzKCksIHRoaXMud2lyZWZyYW1lICYmIHRoaXMuZ2VvLnNldFVwV2lyZWZyYW1lKCksIHZvaWQgMCAhPT0gdGhpcy5jb2xvciAmJiBfR0xTaGFwZS51cGRhdGVDb2xvcih0aGlzLmdlbywgdGhpcy5jb2xvciksIHRoaXMuc2hhcGVPYmogPSBuZXcgcy5PYmplY3QzRCgpOwogICAgICAgICAgICAgICAgICB2YXIgdCA9IG51bGw7CiAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLnNpZGUgPT0gcy5Eb3VibGVTaWRlID8gbmV3IHMuTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCh7CiAgICAgICAgICAgICAgICAgICAgd2lyZWZyYW1lOiB0aGlzLndpcmVmcmFtZSwKICAgICAgICAgICAgICAgICAgICBzaWRlOiB0aGlzLnNpZGUsCiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRoaXMub3BhY2l0eSA8IDEsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogdGhpcy5vcGFjaXR5LAogICAgICAgICAgICAgICAgICAgIHdpcmVmcmFtZUxpbmV3aWR0aDogdGhpcy5saW5ld2lkdGgsCiAgICAgICAgICAgICAgICAgICAgdmVydGV4Q29sb3JzOiBzLkNvbG9yaW5nLlZlcnRleENvbG9ycwogICAgICAgICAgICAgICAgICB9KSA6IG5ldyBzLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoewogICAgICAgICAgICAgICAgICAgIHdpcmVmcmFtZTogdGhpcy53aXJlZnJhbWUsCiAgICAgICAgICAgICAgICAgICAgc2lkZTogdGhpcy5zaWRlLAogICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0aGlzLm9wYWNpdHkgPCAxLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IHRoaXMub3BhY2l0eSwKICAgICAgICAgICAgICAgICAgICB3aXJlZnJhbWVMaW5ld2lkdGg6IHRoaXMubGluZXdpZHRoLAogICAgICAgICAgICAgICAgICAgIHZlcnRleENvbG9yczogcy5Db2xvcmluZy5WZXJ0ZXhDb2xvcnMKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHZhciByID0gbmV3IHMuTWVzaCh0aGlzLmdlbywgdCk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVPYmouYWRkKHIpOwogICAgICAgICAgICAgICAgICB2YXIgYSA9IG5ldyBzLkxpbmVCYXNpY01hdGVyaWFsKHsKICAgICAgICAgICAgICAgICAgICAgIGxpbmV3aWR0aDogdGhpcy5saW5ld2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvcgogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIG4gPSBuZXcgcy5MaW5lKHRoaXMubGluZWdlbywgYSwgcy5MaW5lU3R5bGUuTGluZVBpZWNlcyk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVPYmouYWRkKG4pLCB0aGlzLnJlbmRlcmVkU2hhcGVPYmogPSB0aGlzLnNoYXBlT2JqLmNsb25lKCksIGUuYWRkKHRoaXMucmVuZGVyZWRTaGFwZU9iaik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlZ2wiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVnbChlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkU2hhcGVPYmogJiYgKHZvaWQgMCAhPT0gdGhpcy5yZW5kZXJlZFNoYXBlT2JqLmdlb21ldHJ5ICYmIHRoaXMucmVuZGVyZWRTaGFwZU9iai5nZW9tZXRyeS5kaXNwb3NlKCksIHZvaWQgMCAhPT0gdGhpcy5yZW5kZXJlZFNoYXBlT2JqLm1hdGVyaWFsICYmIHRoaXMucmVuZGVyZWRTaGFwZU9iai5tYXRlcmlhbC5kaXNwb3NlKCksIGUucmVtb3ZlKHRoaXMucmVuZGVyZWRTaGFwZU9iaiksIHRoaXMucmVuZGVyZWRTaGFwZU9iaiA9IG51bGwpLCB0aGlzLnNoYXBlT2JqID0gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwb3NpdGlvbiIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAieCIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIueDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ5IiwKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlci55OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInoiLAogICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSwgW3sKICAgICAgICAgICAgICBrZXk6ICJmaW5hbGl6ZUdlbyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmFsaXplR2VvKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS51cGRhdGVHZW9Hcm91cCgwKTsKICAgICAgICAgICAgICAgIHQudmVydGljZXMgPiAwICYmIHQudHJ1bmNhdGVBcnJheUJ1ZmZlcnMoITAsICEwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ1cGRhdGVDb2xvciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUNvbG9yKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByLCBzLCBhOwogICAgICAgICAgICAgICAgdCA9IHQgfHwgby5DQy5jb2xvcih0KSwgZS5jb2xvcnNOZWVkVXBkYXRlID0gITAsIHQuY29uc3RydWN0b3IgIT09IEFycmF5ICYmIChyID0gdC5yLCBzID0gdC5nLCBhID0gdC5iKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9uOCBpbiBlLmdlb21ldHJ5R3JvdXBzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfbzggPSBlLmdlb21ldHJ5R3JvdXBzW19uOF0sCiAgICAgICAgICAgICAgICAgICAgX2w0ID0gX284LmNvbG9yQXJyYXk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMzggPSAwLCBfbjkgPSBfbzgudmVydGljZXM7IF9lMzggPCBfbjk7ICsrX2UzOCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0LmNvbnN0cnVjdG9yID09PSBBcnJheSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9uMTAgPSB0W19lMzhdOwogICAgICAgICAgICAgICAgICAgICAgciA9IF9uMTAuciwgcyA9IF9uMTAuZywgYSA9IF9uMTAuYjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX2w0WzMgKiBfZTM4XSA9IHIsIF9sNFszICogX2UzOCArIDFdID0gcywgX2w0WzMgKiBfZTM4ICsgMl0gPSBhOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZHJhd0Fycm93IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0Fycm93KGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gci5zdGFydCwKICAgICAgICAgICAgICAgICAgbyA9IHIuZW5kLAogICAgICAgICAgICAgICAgICBsID0gci5yYWRpdXMsCiAgICAgICAgICAgICAgICAgIGggPSByLnJhZGl1c1JhdGlvLAogICAgICAgICAgICAgICAgICBjID0gci5taWQsCiAgICAgICAgICAgICAgICAgIHUgPSByLm1pZHBvczsKICAgICAgICAgICAgICAgIGlmICghcyB8fCAhbykgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGYgPSB0LnVwZGF0ZUdlb0dyb3VwKDUxKSwKICAgICAgICAgICAgICAgICAgcCA9IG5ldyBuLlZlY3RvcjMoby54LCBvLnksIG8ueikuc3ViKHMpOwogICAgICAgICAgICAgICAgaWYgKHUpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9lMzkgPSBwLmxlbmd0aCgpOwogICAgICAgICAgICAgICAgICBjID0gdSA+IDAgPyB1IC8gX2UzOSA6IChfZTM5ICsgdSkgLyBfZTM5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcC5tdWx0aXBseVNjYWxhcihjKTsKICAgICAgICAgICAgICAgIHZhciBnID0gbmV3IG4uVmVjdG9yMyhzLngsIHMueSwgcy56KS5hZGQocCksCiAgICAgICAgICAgICAgICAgIHYgPSBwLmNsb25lKCkubmVnYXRlKCk7CiAgICAgICAgICAgICAgICB2YXIgXyA9IG5ldyBuLlZlY3RvcjMocy54LCBzLnksIHMueik7CiAgICAgICAgICAgICAgICBlLmludGVyc2VjdGlvblNoYXBlLmN5bGluZGVyLnB1c2gobmV3IGEuQ3lsaW5kZXIoXywgZy5jbG9uZSgpLCBsKSksIGUuaW50ZXJzZWN0aW9uU2hhcGUuc3BoZXJlLnB1c2gobmV3IGEuU3BoZXJlKF8sIGwpKTsKICAgICAgICAgICAgICAgIHZhciB5ID0gW107CiAgICAgICAgICAgICAgICB5WzBdID0gcC5jbG9uZSgpLCBNYXRoLmFicyh5WzBdLngpID4gMWUtNCA/IHlbMF0ueSArPSAxIDogeVswXS54ICs9IDEsIHlbMF0uY3Jvc3MocCksIHlbMF0ubm9ybWFsaXplKCksIHlbNF0gPSB5WzBdLmNsb25lKCksIHlbNF0uY3Jvc3NWZWN0b3JzKHlbMF0sIHApLCB5WzRdLm5vcm1hbGl6ZSgpLCB5WzhdID0geVswXS5jbG9uZSgpLm5lZ2F0ZSgpLCB5WzEyXSA9IHlbNF0uY2xvbmUoKS5uZWdhdGUoKSwgeVsyXSA9IHlbMF0uY2xvbmUoKS5hZGQoeVs0XSkubm9ybWFsaXplKCksIHlbNl0gPSB5WzRdLmNsb25lKCkuYWRkKHlbOF0pLm5vcm1hbGl6ZSgpLCB5WzEwXSA9IHlbOF0uY2xvbmUoKS5hZGQoeVsxMl0pLm5vcm1hbGl6ZSgpLCB5WzE0XSA9IHlbMTJdLmNsb25lKCkuYWRkKHlbMF0pLm5vcm1hbGl6ZSgpLCB5WzFdID0geVswXS5jbG9uZSgpLmFkZCh5WzJdKS5ub3JtYWxpemUoKSwgeVszXSA9IHlbMl0uY2xvbmUoKS5hZGQoeVs0XSkubm9ybWFsaXplKCksIHlbNV0gPSB5WzRdLmNsb25lKCkuYWRkKHlbNl0pLm5vcm1hbGl6ZSgpLCB5WzddID0geVs2XS5jbG9uZSgpLmFkZCh5WzhdKS5ub3JtYWxpemUoKSwgeVs5XSA9IHlbOF0uY2xvbmUoKS5hZGQoeVsxMF0pLm5vcm1hbGl6ZSgpLCB5WzExXSA9IHlbMTBdLmNsb25lKCkuYWRkKHlbMTJdKS5ub3JtYWxpemUoKSwgeVsxM10gPSB5WzEyXS5jbG9uZSgpLmFkZCh5WzE0XSkubm9ybWFsaXplKCksIHlbMTVdID0geVsxNF0uY2xvbmUoKS5hZGQoeVswXSkubm9ybWFsaXplKCk7CiAgICAgICAgICAgICAgICB2YXIgYiwKICAgICAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICAgICAgeCwKICAgICAgICAgICAgICAgICAgQSwKICAgICAgICAgICAgICAgICAgQywKICAgICAgICAgICAgICAgICAgUywKICAgICAgICAgICAgICAgICAgTSwKICAgICAgICAgICAgICAgICAgeiwKICAgICAgICAgICAgICAgICAgTCwKICAgICAgICAgICAgICAgICAgRSwKICAgICAgICAgICAgICAgICAgVCwKICAgICAgICAgICAgICAgICAgaywKICAgICAgICAgICAgICAgICAgSSwKICAgICAgICAgICAgICAgICAgTywKICAgICAgICAgICAgICAgICAgRCwKICAgICAgICAgICAgICAgICAgRiwKICAgICAgICAgICAgICAgICAgUiwKICAgICAgICAgICAgICAgICAgUCwKICAgICAgICAgICAgICAgICAgRywKICAgICAgICAgICAgICAgICAgQiwKICAgICAgICAgICAgICAgICAgVSwKICAgICAgICAgICAgICAgICAgTiwKICAgICAgICAgICAgICAgICAgViA9IGYudmVydGljZXMsCiAgICAgICAgICAgICAgICAgIGogPSBmLnZlcnRleEFycmF5LAogICAgICAgICAgICAgICAgICBIID0gZi5mYWNlQXJyYXksCiAgICAgICAgICAgICAgICAgIFcgPSBmLm5vcm1hbEFycmF5LAogICAgICAgICAgICAgICAgICBxID0gZi5saW5lQXJyYXk7CiAgICAgICAgICAgICAgICBmb3IgKHcgPSAwLCB4ID0geS5sZW5ndGg7IHcgPCB4OyArK3cpIHsKICAgICAgICAgICAgICAgICAgYiA9IDMgKiAoViArIDMgKiB3KTsKICAgICAgICAgICAgICAgICAgdmFyIFkgPSB5W3ddLmNsb25lKCkubXVsdGlwbHlTY2FsYXIobCkuYWRkKHMpLAogICAgICAgICAgICAgICAgICAgIFogPSB5W3ddLmNsb25lKCkubXVsdGlwbHlTY2FsYXIobCkuYWRkKGcpLAogICAgICAgICAgICAgICAgICAgIFggPSB5W3ddLmNsb25lKCkubXVsdGlwbHlTY2FsYXIobCAqIGgpLmFkZChnKTsKICAgICAgICAgICAgICAgICAgaWYgKGpbYl0gPSBZLngsIGpbYiArIDFdID0gWS55LCBqW2IgKyAyXSA9IFkueiwgaltiICsgM10gPSBaLngsIGpbYiArIDRdID0gWi55LCBqW2IgKyA1XSA9IFoueiwgaltiICsgNl0gPSBYLngsIGpbYiArIDddID0gWC55LCBqW2IgKyA4XSA9IFgueiwgdyA+IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgSyA9IGpbYiAtIDNdLAogICAgICAgICAgICAgICAgICAgICAgJCA9IGpbYiAtIDJdLAogICAgICAgICAgICAgICAgICAgICAgUSA9IGpbYiAtIDFdLAogICAgICAgICAgICAgICAgICAgICAgSiA9IG5ldyBuLlZlY3RvcjMoSywgJCwgUSksCiAgICAgICAgICAgICAgICAgICAgICBlZSA9IG5ldyBuLlZlY3RvcjMoby54LCBvLnksIG8ueiksCiAgICAgICAgICAgICAgICAgICAgICB0ZSA9IGcuY2xvbmUoKSwKICAgICAgICAgICAgICAgICAgICAgIHJlID0gbmV3IG4uVmVjdG9yMyhYLngsIFgueSwgWC56KTsKICAgICAgICAgICAgICAgICAgICBlLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2gobmV3IGEuVHJpYW5nbGUocmUsIGVlLCBKKSksIGUuaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChuZXcgYS5UcmlhbmdsZShKLmNsb25lKCksIHRlLCByZS5jbG9uZSgpKSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGYudmVydGljZXMgKz0gNDgsIGpbYiA9IDMgKiBmLnZlcnRpY2VzXSA9IHMueCwgaltiICsgMV0gPSBzLnksIGpbYiArIDJdID0gcy56LCBqW2IgKyAzXSA9IGcueCwgaltiICsgNF0gPSBnLnksIGpbYiArIDVdID0gZy56LCBqW2IgKyA2XSA9IG8ueCwgaltiICsgN10gPSBvLnksIGpbYiArIDhdID0gby56LCBmLnZlcnRpY2VzICs9IDM7CiAgICAgICAgICAgICAgICB2YXIgaWUgPSBmLnZlcnRpY2VzIC0gMywKICAgICAgICAgICAgICAgICAgc2UgPSBmLnZlcnRpY2VzIC0gMiwKICAgICAgICAgICAgICAgICAgYWUgPSBmLnZlcnRpY2VzIC0gMSwKICAgICAgICAgICAgICAgICAgbmUgPSAzICogaWUsCiAgICAgICAgICAgICAgICAgIG9lID0gMyAqIHNlLAogICAgICAgICAgICAgICAgICBsZSA9IDMgKiBhZTsKICAgICAgICAgICAgICAgIGZvciAodyA9IDAsIHggPSB5Lmxlbmd0aCAtIDE7IHcgPCB4OyArK3cpIHsKICAgICAgICAgICAgICAgICAgdmFyIGhlID0gViArIDMgKiB3OwogICAgICAgICAgICAgICAgICBiID0gMyAqIGhlLCBDID0gZi5mYWNlaWR4LCBTID0gZi5saW5laWR4LCBJID0gMyAqIChNID0gaGUpLCBPID0gMyAqICh6ID0gaGUgKyAxKSwgRCA9IDMgKiAoTCA9IGhlICsgMiksIEYgPSAzICogKEUgPSBoZSArIDQpLCBSID0gMyAqIChUID0gaGUgKyA1KSwgUCA9IDMgKiAoayA9IGhlICsgMyksIEcgPSBCID0geVt3XSwgVSA9IE4gPSB5W3cgKyAxXSwgV1tJXSA9IEcueCwgV1tPXSA9IEIueCwgV1tQXSA9IE4ueCwgV1tJICsgMV0gPSBHLnksIFdbTyArIDFdID0gQi55LCBXW1AgKyAxXSA9IE4ueSwgV1tJICsgMl0gPSBHLnosIFdbTyArIDJdID0gQi56LCBXW1AgKyAyXSA9IE4ueiwgV1tPXSA9IEIueCwgV1tGXSA9IFUueCwgV1tQXSA9IE4ueCwgV1tPICsgMV0gPSBCLnksIFdbRiArIDFdID0gVS55LCBXW1AgKyAxXSA9IE4ueSwgV1tPICsgMl0gPSBCLnosIFdbRiArIDJdID0gVS56LCBXW1AgKyAyXSA9IE4ueiwgV1tEXSA9IEIueCwgV1tSXSA9IFUueCwgV1tEICsgMV0gPSBCLnksIFdbUiArIDFdID0gVS55LCBXW0QgKyAyXSA9IEIueiwgV1tSICsgMl0gPSBVLnosIEhbQ10gPSBNLCBIW0MgKyAxXSA9IHosIEhbQyArIDJdID0gaywgSFtDICsgM10gPSB6LCBIW0MgKyA0XSA9IEUsIEhbQyArIDVdID0gaywgSFtDICsgNl0gPSBNLCBIW0MgKyA3XSA9IGssIEhbQyArIDhdID0gaWUsIEhbQyArIDldID0gTCwgSFtDICsgMTBdID0gc2UsIEhbQyArIDExXSA9IFQsIEhbQyArIDEyXSA9IEwsIEhbQyArIDEzXSA9IGFlLCBIW0MgKyAxNF0gPSBULCBxW1NdID0gTSwgcVtTICsgMV0gPSB6LCBxW1MgKyAyXSA9IE0sIHFbUyArIDNdID0gaywgcVtTICsgNF0gPSBFLCBxW1MgKyA1XSA9IGssIHFbUyArIDZdID0gTSwgcVtTICsgN10gPSBrLCBxW1MgKyA4XSA9IEwsIHFbUyArIDldID0geiwgcVtTICsgMTBdID0gTCwgcVtTICsgMTFdID0gVCwgcVtTICsgMTJdID0gRSwgcVtTICsgMTNdID0gVCwgcVtTICsgMTRdID0gTCwgcVtTICsgMTVdID0gYWUsIHFbUyArIDE2XSA9IEwsIHFbUyArIDE3XSA9IFQsIHFbUyArIDE4XSA9IGFlLCBxW1MgKyAxOV0gPSBULCBmLmZhY2VpZHggKz0gMTUsIGYubGluZWlkeCArPSAyMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEEgPSBbViArIDQ1LCBWICsgNDYsIFYgKyAxLCBWLCBWICsgNDcsIFYgKyAyXSwgQyA9IGYuZmFjZWlkeCwgUyA9IGYubGluZWlkeCwgSSA9IDMgKiAoTSA9IEFbMF0pLCBPID0gMyAqICh6ID0gQVsxXSksIEQgPSAzICogKEwgPSBBWzRdKSwgRiA9IDMgKiAoRSA9IEFbMl0pLCBSID0gMyAqIChUID0gQVs1XSksIFAgPSAzICogKGsgPSBBWzNdKSwgRyA9IEIgPSB5WzE1XSwgVSA9IE4gPSB5WzBdLCBXW0ldID0gRy54LCBXW09dID0gQi54LCBXW1BdID0gTi54LCBXW0kgKyAxXSA9IEcueSwgV1tPICsgMV0gPSBCLnksIFdbUCArIDFdID0gTi55LCBXW0kgKyAyXSA9IEcueiwgV1tPICsgMl0gPSBCLnosIFdbUCArIDJdID0gTi56LCBXW09dID0gQi54LCBXW0ZdID0gVS54LCBXW1BdID0gTi54LCBXW08gKyAxXSA9IEIueSwgV1tGICsgMV0gPSBVLnksIFdbUCArIDFdID0gTi55LCBXW08gKyAyXSA9IEIueiwgV1tGICsgMl0gPSBVLnosIFdbUCArIDJdID0gTi56LCBXW0RdID0gQi54LCBXW1JdID0gVS54LCBXW0QgKyAxXSA9IEIueSwgV1tSICsgMV0gPSBVLnksIFdbRCArIDJdID0gQi56LCBXW1IgKyAyXSA9IFUueiwgcC5ub3JtYWxpemUoKSwgdi5ub3JtYWxpemUoKSwgV1tuZV0gPSB2LngsIFdbb2VdID0gV1tsZV0gPSBwLngsIFdbbmUgKyAxXSA9IHYueSwgV1tvZSArIDFdID0gV1tsZSArIDFdID0gcC55LCBXW25lICsgMl0gPSB2LnosIFdbb2UgKyAyXSA9IFdbbGUgKyAyXSA9IHAueiwgSFtDXSA9IE0sIEhbQyArIDFdID0geiwgSFtDICsgMl0gPSBrLCBIW0MgKyAzXSA9IHosIEhbQyArIDRdID0gRSwgSFtDICsgNV0gPSBrLCBIW0MgKyA2XSA9IE0sIEhbQyArIDddID0gaywgSFtDICsgOF0gPSBpZSwgSFtDICsgOV0gPSBMLCBIW0MgKyAxMF0gPSBzZSwgSFtDICsgMTFdID0gVCwgSFtDICsgMTJdID0gTCwgSFtDICsgMTNdID0gYWUsIEhbQyArIDE0XSA9IFQsIHFbU10gPSBNLCBxW1MgKyAxXSA9IHosIHFbUyArIDJdID0gTSwgcVtTICsgM10gPSBrLCBxW1MgKyA0XSA9IEUsIHFbUyArIDVdID0gaywgcVtTICsgNl0gPSBNLCBxW1MgKyA3XSA9IGssIHFbUyArIDhdID0gTCwgcVtTICsgOV0gPSB6LCBxW1MgKyAxMF0gPSBMLCBxW1MgKyAxMV0gPSBULCBxW1MgKyAxMl0gPSBFLCBxW1MgKyAxM10gPSBULCBxW1MgKyAxNF0gPSBMLCBxW1MgKyAxNV0gPSBhZSwgcVtTICsgMTZdID0gTCwgcVtTICsgMTddID0gVCwgcVtTICsgMThdID0gYWUsIHFbUyArIDE5XSA9IFQsIGYuZmFjZWlkeCArPSAxNSwgZi5saW5laWR4ICs9IDIwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInVwZGF0ZUJvdW5kaW5nRnJvbVBvaW50cyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUJvdW5kaW5nRnJvbVBvaW50cyhlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICBlLmNlbnRlci5zZXQoMCwgMCwgMCk7CiAgICAgICAgICAgICAgICB2YXIgYSA9IDEgLyAwLAogICAgICAgICAgICAgICAgICBuID0gMSAvIDAsCiAgICAgICAgICAgICAgICAgIG8gPSAxIC8gMCwKICAgICAgICAgICAgICAgICAgbCA9IC0xIC8gMCwKICAgICAgICAgICAgICAgICAgaCA9IC0xIC8gMCwKICAgICAgICAgICAgICAgICAgYyA9IC0xIC8gMDsKICAgICAgICAgICAgICAgIGUuYm94ICYmIChhID0gZS5ib3gubWluLngsIGwgPSBlLmJveC5tYXgueCwgbiA9IGUuYm94Lm1pbi55LCBoID0gZS5ib3gubWF4LnksIG8gPSBlLmJveC5taW4ueiwgYyA9IGUuYm94Lm1heC56KTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNDAgPSAwLCBfdDMyID0gczsgX2U0MCA8IF90MzI7IF9lNDArKykgewogICAgICAgICAgICAgICAgICB2YXIgdSA9IHJbMyAqIF9lNDBdLAogICAgICAgICAgICAgICAgICAgIGYgPSByWzMgKiBfZTQwICsgMV0sCiAgICAgICAgICAgICAgICAgICAgcCA9IHJbMyAqIF9lNDAgKyAyXTsKICAgICAgICAgICAgICAgICAgdSA8IGEgJiYgKGEgPSB1KSwgZiA8IG4gJiYgKG4gPSBmKSwgcCA8IG8gJiYgKG8gPSBwKSwgdSA+IGwgJiYgKGwgPSB1KSwgZiA+IGggJiYgKGggPSBmKSwgcCA+IGMgJiYgKGMgPSBwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGUuY2VudGVyLnNldCgobCArIGEpIC8gMiwgKGggKyBuKSAvIDIsIChjICsgbykgLyAyKSwgZS5yYWRpdXMgPSBlLmNlbnRlci5kaXN0YW5jZVRvKHsKICAgICAgICAgICAgICAgICAgeDogbCwKICAgICAgICAgICAgICAgICAgeTogaCwKICAgICAgICAgICAgICAgICAgejogYwogICAgICAgICAgICAgICAgfSksIGUuYm94ID0gewogICAgICAgICAgICAgICAgICBtaW46IHsKICAgICAgICAgICAgICAgICAgICB4OiBhLAogICAgICAgICAgICAgICAgICAgIHk6IG4sCiAgICAgICAgICAgICAgICAgICAgejogbwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtYXg6IHsKICAgICAgICAgICAgICAgICAgICB4OiBsLAogICAgICAgICAgICAgICAgICAgIHk6IGgsCiAgICAgICAgICAgICAgICAgICAgejogYwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEN1c3RvbUdlbyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEN1c3RvbUdlbyhlLCB0LCByLCBzLCBvKSB7CiAgICAgICAgICAgICAgICB2YXIgbCwKICAgICAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgeSA9IHQuYWRkR2VvR3JvdXAoKSwKICAgICAgICAgICAgICAgICAgYiA9IHIudmVydGV4QXJyLAogICAgICAgICAgICAgICAgICB3ID0gci5ub3JtYWxBcnIsCiAgICAgICAgICAgICAgICAgIHggPSByLmZhY2VBcnI7CiAgICAgICAgICAgICAgICB5LnZlcnRpY2VzID0gYi5sZW5ndGgsIHkuZmFjZWlkeCA9IHgubGVuZ3RoOwogICAgICAgICAgICAgICAgdmFyIEEgPSB5LnZlcnRleEFycmF5LAogICAgICAgICAgICAgICAgICBDID0geS5jb2xvckFycmF5OwogICAgICAgICAgICAgICAgZm9yIChzLmNvbnN0cnVjdG9yICE9PSBBcnJheSAmJiAodiA9IHMuciwgXyA9IHMuZywgdSA9IHMuYiksIHAgPSAwLCBnID0geS52ZXJ0aWNlczsgcCA8IGc7ICsrcCkgbCA9IDMgKiBwLCBoID0gYltwXSwgQVtsXSA9IGgueCwgQVtsICsgMV0gPSBoLnksIEFbbCArIDJdID0gaC56LCBzLmNvbnN0cnVjdG9yID09PSBBcnJheSAmJiAodiA9IChmID0gc1twXSkuciwgXyA9IGYuZywgdSA9IGYuYiksIENbbF0gPSB2LCBDW2wgKyAxXSA9IF8sIENbbCArIDJdID0gdTsKICAgICAgICAgICAgICAgIGlmIChvKSBmb3IgKHAgPSAwLCBnID0geS5mYWNlaWR4IC8gMzsgcCA8IGc7ICsrcCkgewogICAgICAgICAgICAgICAgICBjID0geFtsID0gMyAqIHBdLCB1ID0geFtsICsgMV0sIGYgPSB4W2wgKyAyXTsKICAgICAgICAgICAgICAgICAgdmFyIFMgPSBuZXcgbi5WZWN0b3IzKCksCiAgICAgICAgICAgICAgICAgICAgTSA9IG5ldyBuLlZlY3RvcjMoKSwKICAgICAgICAgICAgICAgICAgICB6ID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgICBlLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2gobmV3IGEuVHJpYW5nbGUoUy5jb3B5KGJbY10pLCBNLmNvcHkoYlt1XSksIHouY29weShiW2ZdKSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG8pIHsKICAgICAgICAgICAgICAgICAgdmFyIEwgPSBuZXcgbi5WZWN0b3IzKDAsIDAsIDApLAogICAgICAgICAgICAgICAgICAgIEUgPSAwOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTQxID0gMDsgX2U0MSA8IHQuZ2VvbWV0cnlHcm91cHMubGVuZ3RoOyBfZTQxKyspIEwuYWRkKHQuZ2VvbWV0cnlHcm91cHNbX2U0MV0uZ2V0Q2VudHJvaWQoKSksIEUrKzsKICAgICAgICAgICAgICAgICAgTC5kaXZpZGVTY2FsYXIoRSksIF9HTFNoYXBlLnVwZGF0ZUJvdW5kaW5nRnJvbVBvaW50cyhlLmJvdW5kaW5nU3BoZXJlLCB7CiAgICAgICAgICAgICAgICAgICAgY2VudHJvaWQ6IEwKICAgICAgICAgICAgICAgICAgfSwgQSwgeS52ZXJ0aWNlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeS5mYWNlQXJyYXkgPSBuZXcgVWludDE2QXJyYXkoeCksIHkudHJ1bmNhdGVBcnJheUJ1ZmZlcnMoITAsICEwKSwgdy5sZW5ndGggPCB5LnZlcnRpY2VzKSB5LnNldE5vcm1hbHMoKTtlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIFQsCiAgICAgICAgICAgICAgICAgICAgayA9IHkubm9ybWFsQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDMgKiB5LnZlcnRpY2VzKTsKICAgICAgICAgICAgICAgICAgZm9yIChwID0gMCwgZyA9IHkudmVydGljZXM7IHAgPCBnOyArK3ApIGwgPSAzICogcCwgVCA9IHdbcF0sIGtbbF0gPSBULngsIGtbbCArIDFdID0gVC55LCBrW2wgKyAyXSA9IFQuejsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHkuc2V0TGluZUluZGljZXMoKSwgeS5saW5laWR4ID0geS5saW5lQXJyYXkubGVuZ3RoOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInVwZGF0ZUZyb21TdHlsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUZyb21TdHlsZShlLCB0KSB7CiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQuY29sb3IgPyAoZS5jb2xvciA9IHQuY29sb3IgfHwgbmV3IG8uQ29sb3IoKSwgdC5jb2xvciBpbnN0YW5jZW9mIG8uQ29sb3IgfHwgKGUuY29sb3IgPSBvLkNDLmNvbG9yKHQuY29sb3IpKSkgOiBlLmNvbG9yID0gby5DQy5jb2xvcigwKSwgZS53aXJlZnJhbWUgPSAhIXQud2lyZWZyYW1lLCBlLm9wYWNpdHkgPSB0LmFscGhhID8gKDAsIG4uY2xhbXApKHQuYWxwaGEsIDAsIDEpIDogMSwgdm9pZCAwICE9PSB0Lm9wYWNpdHkgJiYgKGUub3BhY2l0eSA9ICgwLCBuLmNsYW1wKSh0Lm9wYWNpdHksIDAsIDEpKSwgZS5zaWRlID0gdm9pZCAwICE9PSB0LnNpZGUgPyB0LnNpZGUgOiBzLkRvdWJsZVNpZGUsIGUubGluZXdpZHRoID0gdm9pZCAwID09PSB0LmxpbmV3aWR0aCA/IDEgOiB0LmxpbmV3aWR0aCwgZS5jbGlja2FibGUgPSAhIXQuY2xpY2thYmxlLCBlLmNhbGxiYWNrID0gKDAsIGYubWFrZUZ1bmN0aW9uKSh0LmNhbGxiYWNrKSwgZS5ob3ZlcmFibGUgPSAhIXQuaG92ZXJhYmxlLCBlLmhvdmVyX2NhbGxiYWNrID0gKDAsIGYubWFrZUZ1bmN0aW9uKSh0LmhvdmVyX2NhbGxiYWNrKSwgZS51bmhvdmVyX2NhbGxiYWNrID0gKDAsIGYubWFrZUZ1bmN0aW9uKSh0LnVuaG92ZXJfY2FsbGJhY2spLCBlLmhpZGRlbiA9IHQuaGlkZGVuLCBlLmZyYW1lID0gdC5mcmFtZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkaXN0YW5jZV9mcm9tIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzdGFuY2VfZnJvbShlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGUueCAtIHQueCwgMikgKyBNYXRoLnBvdyhlLnkgLSB0LnksIDIpICsgTWF0aC5wb3coZS56IC0gdC56LCAyKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaW5TZWxlY3RlZFJlZ2lvbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluU2VsZWN0ZWRSZWdpb24oZSwgdCwgcikgewogICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCB0Lmxlbmd0aDsgcysrKSBpZiAoX0dMU2hhcGUuZGlzdGFuY2VfZnJvbSh0W3NdLCBlKSA8PSByKSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfR0xTaGFwZTsKICAgICAgICAgIH0oKTsKICAgICAgICAgIGZ1bmN0aW9uIHAoZSkgewogICAgICAgICAgICBpZiAoZS52ZXJ0ZXhBcnIubGVuZ3RoIDwgNjRlMykgcmV0dXJuIFtlXTsKICAgICAgICAgICAgdmFyIHQgPSBbewogICAgICAgICAgICAgIHZlcnRleEFycjogW10sCiAgICAgICAgICAgICAgbm9ybWFsQXJyOiBbXSwKICAgICAgICAgICAgICBmYWNlQXJyOiBbXQogICAgICAgICAgICB9XTsKICAgICAgICAgICAgZS5jb2xvckFyciAmJiAodC5jb2xvckFyciA9IFtdKTsKICAgICAgICAgICAgdmFyIHIgPSBbXSwKICAgICAgICAgICAgICBzID0gW10sCiAgICAgICAgICAgICAgYSA9IDAsCiAgICAgICAgICAgICAgbiA9IGUuZmFjZUFycjsKICAgICAgICAgICAgZm9yICh2YXIgX2w1ID0gMCwgX2gzID0gbi5sZW5ndGg7IF9sNSA8IF9oMzsgX2w1ICs9IDMpIHsKICAgICAgICAgICAgICB2YXIgX2g0ID0gdFthXTsKICAgICAgICAgICAgICBmb3IgKHZhciBfdDMzID0gMDsgX3QzMyA8IDM7IF90MzMrKykgewogICAgICAgICAgICAgICAgdmFyIG8gPSBuW19sNSArIF90MzNdOwogICAgICAgICAgICAgICAgcltvXSAhPT0gYSAmJiAocltvXSA9IGEsIHNbb10gPSBfaDQudmVydGV4QXJyLmxlbmd0aCwgX2g0LnZlcnRleEFyci5wdXNoKGUudmVydGV4QXJyW29dKSwgZS5ub3JtYWxBcnIgJiYgZS5ub3JtYWxBcnJbb10gJiYgX2g0Lm5vcm1hbEFyci5wdXNoKGUubm9ybWFsQXJyW29dKSwgZS5jb2xvckFyciAmJiBlLmNvbG9yQXJyW29dICYmIF9oNC5jb2xvckFyci5wdXNoKGUuY29sb3JBcnJbb10pKSwgX2g0LmZhY2VBcnIucHVzaChzW29dKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2g0LnZlcnRleEFyci5sZW5ndGggPj0gNjRlMyAmJiAodC5wdXNoKHsKICAgICAgICAgICAgICAgIHZlcnRleEFycjogW10sCiAgICAgICAgICAgICAgICBub3JtYWxBcnI6IFtdLAogICAgICAgICAgICAgICAgZmFjZUFycjogW10KICAgICAgICAgICAgICB9KSwgZS5jb2xvckFyciAmJiAodC5jb2xvckFyciA9IFtdKSwgYSsrKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgIH0KICAgICAgICAgIF9HTFNoYXBlLklTRE9ORSA9IDIsIF9HTFNoYXBlLmRyYXdDdXN0b20gPSBmdW5jdGlvbiAoZSwgdCwgcikgewogICAgICAgICAgICB2YXIgcyA9IHIsCiAgICAgICAgICAgICAgYSA9IHMudmVydGV4QXJyLAogICAgICAgICAgICAgIG4gPSBzLmZhY2VBcnI7CiAgICAgICAgICAgIDAgIT09IGEubGVuZ3RoICYmIDAgIT09IG4ubGVuZ3RoIHx8IGNvbnNvbGUud2FybigiRXJyb3IgYWRkaW5nIGN1c3RvbSBzaGFwZSBjb21wb25lbnQ6IE5vIHZlcnRpY2VzIGFuZC9vciBmYWNlIGluZGljZXMgc3VwcGxpZWQhIik7CiAgICAgICAgICAgIHZhciBsID0gci5jb2xvcjsKICAgICAgICAgICAgdm9pZCAwID09PSBsICYmIChsID0gZS5jb2xvciksIGwgPSBvLkNDLmNvbG9yKGwpOwogICAgICAgICAgICBmb3IgKHZhciBoID0gcChzKSwgYyA9IDAsIHUgPSBoLmxlbmd0aDsgYyA8IHU7IGMrKykgX0dMU2hhcGUuYWRkQ3VzdG9tR2VvKGUsIHQsIGhbY10sIGhbY10uY29sb3JBcnIgPyBoW2NdLmNvbG9yQXJyIDogbCwgci5jbGlja2FibGUpOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDkyMzA6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgR0xWaWV3ZXI6IGZ1bmN0aW9uIEdMVmlld2VyKCkgewogICAgICAgICAgICAgIHJldHVybiBfR0xWaWV3ZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNyZWF0ZVN0ZXJlb1ZpZXdlcjogZnVuY3Rpb24gY3JlYXRlU3RlcmVvVmlld2VyKCkgewogICAgICAgICAgICAgIHJldHVybiBiOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjcmVhdGVWaWV3ZXI6IGZ1bmN0aW9uIGNyZWF0ZVZpZXdlcigpIHsKICAgICAgICAgICAgICByZXR1cm4gXzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY3JlYXRlVmlld2VyR3JpZDogZnVuY3Rpb24gY3JlYXRlVmlld2VyR3JpZCgpIHsKICAgICAgICAgICAgICByZXR1cm4geTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcyA9IHIoNzY5MyksCiAgICAgICAgICAgIGEgPSByKDk2NTIpLAogICAgICAgICAgICBuID0gcigyNTUwKSwKICAgICAgICAgICAgbyA9IHIoOTAwNSksCiAgICAgICAgICAgIGwgPSByKDE0NjApLAogICAgICAgICAgICBoID0gcigyMTE2KSwKICAgICAgICAgICAgYyA9IHIoNzgyNSksCiAgICAgICAgICAgIHUgPSByKDg3ODMpLAogICAgICAgICAgICBmID0gcig3MzIzKSwKICAgICAgICAgICAgcCA9IHIoOTE5MiksCiAgICAgICAgICAgIGcgPSByKDE0OTYpLAogICAgICAgICAgICB2ID0gcigyMTA5KTsKICAgICAgICAgIHZhciBfR0xWaWV3ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfR0xWaWV3ZXIoZSkgewogICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0dMVmlld2VyKTsKICAgICAgICAgICAgICB0aGlzLm5vbW91c2UgPSAhMSwgdGhpcy5nbERPTSA9IG51bGwsIHRoaXMubW9kZWxzID0gW10sIHRoaXMuc3VyZmFjZXMgPSB7fSwgdGhpcy5zaGFwZXMgPSBbXSwgdGhpcy5sYWJlbHMgPSBbXSwgdGhpcy5jbGlja2FibGVzID0gW10sIHRoaXMuaG92ZXJhYmxlcyA9IFtdLCB0aGlzLmNvbnRleHRNZW51RW5hYmxlZEF0b21zID0gW10sIHRoaXMuY3VycmVudF9ob3ZlciA9IG51bGwsIHRoaXMuaG92ZXJEdXJhdGlvbiA9IDUwMCwgdGhpcy52aWV3ZXJfZnJhbWUgPSAwLCB0aGlzLnZpZXdDaGFuZ2VDYWxsYmFjayA9IG51bGwsIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFjayA9IG51bGwsIHRoaXMuTkVBUiA9IDEsIHRoaXMuRkFSID0gODAwLCB0aGlzLkNBTUVSQV9aID0gMTUwLCB0aGlzLmZvdiA9IDIwLCB0aGlzLmxpbmtlZFZpZXdlcnMgPSBbXSwgdGhpcy5yZW5kZXJlciA9IG51bGwsIHRoaXMuY29udHJvbF9hbGwgPSAhMSwgdGhpcy5zY2VuZSA9IG51bGwsIHRoaXMucm90YXRpb25Hcm91cCA9IG51bGwsIHRoaXMubW9kZWxHcm91cCA9IG51bGwsIHRoaXMuZm9nU3RhcnQgPSAuNCwgdGhpcy5zbGFiTmVhciA9IC01MCwgdGhpcy5zbGFiRmFyID0gNTAsIHRoaXMuY3EgPSBuZXcgYS5RdWF0ZXJuaW9uKDAsIDAsIDAsIDEpLCB0aGlzLmRxID0gbmV3IGEuUXVhdGVybmlvbigwLCAwLCAwLCAxKSwgdGhpcy5hbmltYXRlZCA9IDAsIHRoaXMuYW5pbWF0aW9uVGltZXJzID0gbmV3IFNldCgpLCB0aGlzLmlzRHJhZ2dpbmcgPSAhMSwgdGhpcy5tb3VzZVN0YXJ0WCA9IDAsIHRoaXMubW91c2VTdGFydFkgPSAwLCB0aGlzLnRvdWNoRGlzdGFuY2VTdGFydCA9IDAsIHRoaXMudG91Y2hIb2xkID0gITEsIHRoaXMuY3VycmVudE1vZGVsUG9zID0gMCwgdGhpcy5jeiA9IDAsIHRoaXMuY3NsYWJOZWFyID0gMCwgdGhpcy5jc2xhYkZhciA9IDAsIHRoaXMudXNlckNvbnRleHRNZW51SGFuZGxlciA9IG51bGwsIHRoaXMuY29uZmlnID0gdCwgdGhpcy5jYWxsYmFjayA9IHRoaXMuY29uZmlnLmNhbGxiYWNrLCB0aGlzLmRlZmF1bHRjb2xvcnMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0Y29sb3JzLCB0aGlzLmRlZmF1bHRjb2xvcnMgfHwgKHRoaXMuZGVmYXVsdGNvbG9ycyA9IG4uZWxlbWVudENvbG9ycy5kZWZhdWx0Q29sb3JzKSwgdGhpcy5ub21vdXNlID0gdGhpcy5jb25maWcubm9tb3VzZSwgdGhpcy5iZ0NvbG9yID0gMCwgdGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yID0gdGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yIHx8ICIjZmZmZmZmIiwgdm9pZCAwICE9PSB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kQ29sb3IgJiYgKHRoaXMuYmdDb2xvciA9IG4uQ0MuY29sb3IodGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yKS5nZXRIZXgoKSksIHRoaXMuY29uZmlnLmJhY2tncm91bmRBbHBoYSA9IG51bGwgPT0gdGhpcy5jb25maWcuYmFja2dyb3VuZEFscGhhID8gMSA6IHRoaXMuY29uZmlnLmJhY2tncm91bmRBbHBoYSwgdGhpcy5jYW1lcmF4ID0gMCwgdm9pZCAwICE9PSB0aGlzLmNvbmZpZy5jYW1lcmF4ICYmICh0aGlzLmNhbWVyYXggPSBwYXJzZUZsb2F0KHRoaXMuY29uZmlnLmNhbWVyYXgpKSwgdGhpcy5fdmlld2VyID0gdGhpcywgdGhpcy5jb250YWluZXIgPSBlLCBudWxsICE9IHRoaXMuY29uZmlnLmhvdmVyRHVyYXRpb24gJiYgKHRoaXMuaG92ZXJEdXJhdGlvbiA9IHRoaXMuY29uZmlnLmhvdmVyRHVyYXRpb24pLCB2b2lkIDAgPT09IHRoaXMuY29uZmlnLmFudGlhbGlhcyAmJiAodGhpcy5jb25maWcuYW50aWFsaWFzID0gITApLCB2b2lkIDAgPT09IHRoaXMuY29uZmlnLmNhcnRvb25RdWFsaXR5ICYmICh0aGlzLmNvbmZpZy5jYXJ0b29uUXVhbGl0eSA9IDEwKSwgdGhpcy5XSURUSCA9IHRoaXMuZ2V0V2lkdGgoKSwgdGhpcy5IRUlHSFQgPSB0aGlzLmdldEhlaWdodCgpLCB0aGlzLnNldHVwUmVuZGVyZXIoKSwgdGhpcy5yb3cgPSB0aGlzLmNvbmZpZy5yb3csIHRoaXMuY29sID0gdGhpcy5jb25maWcuY29sLCB0aGlzLmNvbHMgPSB0aGlzLmNvbmZpZy5jb2xzLCB0aGlzLnJvd3MgPSB0aGlzLmNvbmZpZy5yb3dzLCB0aGlzLnZpZXdlcnMgPSB0aGlzLmNvbmZpZy52aWV3ZXJzLCB0aGlzLmNvbnRyb2xfYWxsID0gdGhpcy5jb25maWcuY29udHJvbF9hbGwsIHRoaXMuQVNQRUNUID0gdGhpcy5yZW5kZXJlci5nZXRBc3BlY3QodGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpLCB0aGlzLmNhbWVyYSA9IG5ldyBzLkNhbWVyYSh0aGlzLmZvdiwgdGhpcy5BU1BFQ1QsIHRoaXMuTkVBUiwgdGhpcy5GQVIsIHRoaXMuY29uZmlnLm9ydGhvZ3JhcGhpYyksIHRoaXMuY2FtZXJhLnBvc2l0aW9uID0gbmV3IGEuVmVjdG9yMyh0aGlzLmNhbWVyYXgsIDAsIHRoaXMuQ0FNRVJBX1opLCB0aGlzLmxvb2tpbmdBdCA9IG5ldyBhLlZlY3RvcjMoKSwgdGhpcy5jYW1lcmEubG9va0F0KHRoaXMubG9va2luZ0F0KSwgdGhpcy5yYXljYXN0ZXIgPSBuZXcgcy5SYXljYXN0ZXIobmV3IGEuVmVjdG9yMygwLCAwLCAwKSwgbmV3IGEuVmVjdG9yMygwLCAwLCAwKSksIHRoaXMucHJvamVjdG9yID0gbmV3IHMuUHJvamVjdG9yKCksIHRoaXMuaW5pdGlhbGl6ZVNjZW5lKCksIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvckhleCh0aGlzLmJnQ29sb3IsIHRoaXMuY29uZmlnLmJhY2tncm91bmRBbHBoYSksIHRoaXMuc2NlbmUuZm9nLmNvbG9yID0gbi5DQy5jb2xvcih0aGlzLmJnQ29sb3IpLCBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCB0aGlzLl9oYW5kbGVNb3VzZVVwLmJpbmQodGhpcykpLCBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoInRvdWNoZW5kIiwgdGhpcy5faGFuZGxlTW91c2VVcC5iaW5kKHRoaXMpKSwgdGhpcy5pbml0Q29udGFpbmVyKHRoaXMuY29udGFpbmVyKSwgdGhpcy5jb25maWcuc3R5bGUgJiYgdGhpcy5zZXRWaWV3U3R5bGUodGhpcy5jb25maWcpLCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy5yZXNpemUuYmluZCh0aGlzKSksIHZvaWQgMCAhPT0gd2luZG93LlJlc2l6ZU9ic2VydmVyICYmICh0aGlzLmRpdndhdGNoZXIgPSBuZXcgd2luZG93LlJlc2l6ZU9ic2VydmVyKHRoaXMucmVzaXplLmJpbmQodGhpcykpLCB0aGlzLmRpdndhdGNoZXIub2JzZXJ2ZSh0aGlzLmNvbnRhaW5lcikpOwogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAiZnVuY3Rpb24iID09IHR5cGVvZiB0aGlzLmNhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2sodGhpcyk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImVycm9yIHdpdGggZ2x2aWV3ZXIgY2FsbGJhY2s6ICIgKyBlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9HTFZpZXdlciwgW3sKICAgICAgICAgICAgICBrZXk6ICJnZXRSZWN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVjdCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5jb250YWluZXIsCiAgICAgICAgICAgICAgICAgIHQgPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICAgICAgaWYgKDAgPT0gdC53aWR0aCAmJiAwID09IHQuaGVpZ2h0ICYmICJub25lIiA9PT0gZS5zdHlsZS5kaXNwbGF5KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcjE5ID0gZS5zdHlsZS5wb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICBfczE3ID0gZS5zdHlsZS52aXNpYmlsaXR5OwogICAgICAgICAgICAgICAgICBlLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siLCBlLnN0eWxlLnZpc2liaWxpdHkgPSAiaGlkZGVuIiwgZS5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSIsIHQgPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBlLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIsIGUuc3R5bGUudmlzaWJpbGl0eSA9IF9zMTcsIGUuc3R5bGUucG9zaXRpb24gPSBfcjE5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0V2lkdGgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXaWR0aCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlY3QoKS53aWR0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRIZWlnaHQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIZWlnaHQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWN0KCkuaGVpZ2h0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldHVwUmVuZGVyZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFJlbmRlcmVyKCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBzLlJlbmRlcmVyKHsKICAgICAgICAgICAgICAgICAgYW50aWFsaWFzOiB0aGlzLmNvbmZpZy5hbnRpYWxpYXMsCiAgICAgICAgICAgICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogITAsCiAgICAgICAgICAgICAgICAgIHByZW11bHRpcGxpZWRBbHBoYTogITEsCiAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmNvbmZpZy5pZCwKICAgICAgICAgICAgICAgICAgcm93OiB0aGlzLmNvbmZpZy5yb3csCiAgICAgICAgICAgICAgICAgIGNvbDogdGhpcy5jb25maWcuY29sLAogICAgICAgICAgICAgICAgICByb3dzOiB0aGlzLmNvbmZpZy5yb3dzLAogICAgICAgICAgICAgICAgICBjb2xzOiB0aGlzLmNvbmZpZy5jb2xzLAogICAgICAgICAgICAgICAgICBjYW52YXM6IHRoaXMuY29uZmlnLmNhbnZhcywKICAgICAgICAgICAgICAgICAgY29udGFpbmVyV2lkdGg6IHRoaXMuV0lEVEggfHwgMSwKICAgICAgICAgICAgICAgICAgY29udGFpbmVySGVpZ2h0OiB0aGlzLkhFSUdIVCB8fCAxCiAgICAgICAgICAgICAgICB9KSwgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLndpZHRoID0gIjEwMCUiLCB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gIjEwMCUiLCB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICIwIiwgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIiwgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICIwcHgiLCB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICIwcHgiLCB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUuekluZGV4ID0gIjAiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImluaXRpYWxpemVTY2VuZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemVTY2VuZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgcy5TY2VuZSgpLCB0aGlzLnNjZW5lLmZvZyA9IG5ldyBzLkZvZyh0aGlzLmJnQ29sb3IsIDEwMCwgMjAwKSwgdGhpcy5tb2RlbEdyb3VwID0gbmV3IHMuT2JqZWN0M0QoKSwgdGhpcy5yb3RhdGlvbkdyb3VwID0gbmV3IHMuT2JqZWN0M0QoKSwgdGhpcy5yb3RhdGlvbkdyb3VwLnVzZVF1YXRlcm5pb24gPSAhMCwgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24gPSBuZXcgYS5RdWF0ZXJuaW9uKDAsIDAsIDAsIDEpLCB0aGlzLnJvdGF0aW9uR3JvdXAuYWRkKHRoaXMubW9kZWxHcm91cCksIHRoaXMuc2NlbmUuYWRkKHRoaXMucm90YXRpb25Hcm91cCk7CiAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBzLkxpZ2h0KDE2Nzc3MjE1KTsKICAgICAgICAgICAgICAgIGUucG9zaXRpb24gPSBuZXcgYS5WZWN0b3IzKC4yLCAuMiwgMSkubm9ybWFsaXplKCksIGUuaW50ZW5zaXR5ID0gMSwgdGhpcy5zY2VuZS5hZGQoZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaW5pdENvbnRhaW5lciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRDb250YWluZXIoZSkgewogICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBlLCB0aGlzLldJRFRIID0gdGhpcy5nZXRXaWR0aCgpLCB0aGlzLkhFSUdIVCA9IHRoaXMuZ2V0SGVpZ2h0KCksIHRoaXMuQVNQRUNUID0gdGhpcy5yZW5kZXJlci5nZXRBc3BlY3QodGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpLCB0aGlzLnJlbmRlcmVyLnNldFNpemUodGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpLCB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KSwgdGhpcy5nbERPTSA9IHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCwgdGhpcy5ub21vdXNlIHx8ICh0aGlzLmdsRE9NLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIHRoaXMuX2hhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpLCB7CiAgICAgICAgICAgICAgICAgIHBhc3NpdmU6ICExCiAgICAgICAgICAgICAgICB9KSwgdGhpcy5nbERPTS5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0IiwgdGhpcy5faGFuZGxlTW91c2VEb3duLmJpbmQodGhpcyksIHsKICAgICAgICAgICAgICAgICAgcGFzc2l2ZTogITEKICAgICAgICAgICAgICAgIH0pLCB0aGlzLmdsRE9NLmFkZEV2ZW50TGlzdGVuZXIoIndoZWVsIiwgdGhpcy5faGFuZGxlTW91c2VTY3JvbGwuYmluZCh0aGlzKSwgewogICAgICAgICAgICAgICAgICBwYXNzaXZlOiAhMQogICAgICAgICAgICAgICAgfSksIHRoaXMuZ2xET00uYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgdGhpcy5faGFuZGxlTW91c2VNb3ZlLmJpbmQodGhpcyksIHsKICAgICAgICAgICAgICAgICAgcGFzc2l2ZTogITEKICAgICAgICAgICAgICAgIH0pLCB0aGlzLmdsRE9NLmFkZEV2ZW50TGlzdGVuZXIoInRvdWNobW92ZSIsIHRoaXMuX2hhbmRsZU1vdXNlTW92ZS5iaW5kKHRoaXMpLCB7CiAgICAgICAgICAgICAgICAgIHBhc3NpdmU6ICExCiAgICAgICAgICAgICAgICB9KSwgdGhpcy5nbERPTS5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIHRoaXMuX2hhbmRsZUNvbnRleHRNZW51LmJpbmQodGhpcyksIHsKICAgICAgICAgICAgICAgICAgcGFzc2l2ZTogITEKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkZWNBbmltIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVjQW5pbSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWQtLSwgdGhpcy5hbmltYXRlZCA8IDAgJiYgKHRoaXMuYW5pbWF0ZWQgPSAwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbmNBbmltIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5jQW5pbSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWQrKzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJuZXh0U3VyZklEIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dFN1cmZJRCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9yMjAgaW4gdGhpcy5zdXJmYWNlcykgaWYgKHRoaXMuc3VyZmFjZXMuaGFzT3duUHJvcGVydHkoX3IyMCkpIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSBwYXJzZUludChfcjIwKTsKICAgICAgICAgICAgICAgICAgaXNOYU4odCkgfHwgdCA+IGUgJiYgKGUgPSB0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBlICsgMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRTbGFiQW5kRm9nIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2xhYkFuZEZvZygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5jYW1lcmEucG9zaXRpb24ueiAtIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56OwogICAgICAgICAgICAgICAgZSA8IDEgJiYgKGUgPSAxKSwgdGhpcy5jYW1lcmEubmVhciA9IGUgKyB0aGlzLnNsYWJOZWFyLCB0aGlzLmNhbWVyYS5uZWFyIDwgMSAmJiAodGhpcy5jYW1lcmEubmVhciA9IDEpLCB0aGlzLmNhbWVyYS5mYXIgPSBlICsgdGhpcy5zbGFiRmFyLCB0aGlzLmNhbWVyYS5uZWFyICsgMSA+IHRoaXMuY2FtZXJhLmZhciAmJiAodGhpcy5jYW1lcmEuZmFyID0gdGhpcy5jYW1lcmEubmVhciArIDEpLCB0aGlzLmNhbWVyYS5mb3YgPSB0aGlzLmZvdiwgdGhpcy5jYW1lcmEucmlnaHQgPSBlICogTWF0aC50YW4oTWF0aC5QSSAvIDE4MCAqIHRoaXMuZm92KSwgdGhpcy5jYW1lcmEubGVmdCA9IC10aGlzLmNhbWVyYS5yaWdodCwgdGhpcy5jYW1lcmEudG9wID0gdGhpcy5jYW1lcmEucmlnaHQgLyB0aGlzLkFTUEVDVCwgdGhpcy5jYW1lcmEuYm90dG9tID0gLXRoaXMuY2FtZXJhLnRvcCwgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpLCB0aGlzLnNjZW5lLmZvZy5uZWFyID0gdGhpcy5jYW1lcmEubmVhciArIHRoaXMuZm9nU3RhcnQgKiAodGhpcy5jYW1lcmEuZmFyIC0gdGhpcy5jYW1lcmEubmVhciksIHRoaXMuc2NlbmUuZm9nLmZhciA9IHRoaXMuY2FtZXJhLmZhciwgdGhpcy5jb25maWcuZGlzYWJsZUZvZyAmJiAodGhpcy5zY2VuZS5mb2cubmVhciA9IHRoaXMuc2NlbmUuZm9nLmZhcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2hvdyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coZSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIuc2V0Vmlld3BvcnQoKSwgdGhpcy5zY2VuZSAmJiAodGhpcy5zZXRTbGFiQW5kRm9nKCksIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKSwgdGhpcy52aWV3Q2hhbmdlQ2FsbGJhY2sgJiYgdGhpcy52aWV3Q2hhbmdlQ2FsbGJhY2sodGhpcy5fdmlld2VyLmdldFZpZXcoKSksICFlICYmIHRoaXMubGlua2VkVmlld2Vycy5sZW5ndGggPiAwKSkgZm9yICh2YXIgdCA9IHRoaXMuX3ZpZXdlci5nZXRWaWV3KCksIHIgPSAwOyByIDwgdGhpcy5saW5rZWRWaWV3ZXJzLmxlbmd0aDsgcisrKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMubGlua2VkVmlld2Vyc1tyXS5zZXRWaWV3KHQsICEwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ1cGRhdGVDbGlja2FibGVzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ2xpY2thYmxlcygpIHsKICAgICAgICAgICAgICAgIHRoaXMuY2xpY2thYmxlcy5zcGxpY2UoMCwgdGhpcy5jbGlja2FibGVzLmxlbmd0aCksIHRoaXMuaG92ZXJhYmxlcy5zcGxpY2UoMCwgdGhpcy5ob3ZlcmFibGVzLmxlbmd0aCksIHRoaXMuY29udGV4dE1lbnVFbmFibGVkQXRvbXMuc3BsaWNlKDAsIHRoaXMuY29udGV4dE1lbnVFbmFibGVkQXRvbXMubGVuZ3RoKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNDIgPSAwLCBfdDM0ID0gdGhpcy5tb2RlbHMubGVuZ3RoOyBfZTQyIDwgX3QzNDsgX2U0MisrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDM1ID0gdGhpcy5tb2RlbHNbX2U0Ml07CiAgICAgICAgICAgICAgICAgIGlmIChfdDM1KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9lNDMgPSBfdDM1LnNlbGVjdGVkQXRvbXMoewogICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6ICEwCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9yMjEgPSBfdDM1LnNlbGVjdGVkQXRvbXMoewogICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmFibGU6ICEwCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9zMTggPSBfdDM1LnNlbGVjdGVkQXRvbXMoewogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWVudUVuYWJsZWQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTQ0ID0gMDsgX2U0NCA8IF9yMjEubGVuZ3RoOyBfZTQ0KyspIHRoaXMuaG92ZXJhYmxlcy5wdXNoKF9yMjFbX2U0NF0pOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90MzYgPSAwOyBfdDM2IDwgX2U0My5sZW5ndGg7IF90MzYrKykgdGhpcy5jbGlja2FibGVzLnB1c2goX2U0M1tfdDM2XSk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U0NSA9IDA7IF9lNDUgPCBfczE4Lmxlbmd0aDsgX2U0NSsrKSB0aGlzLmNvbnRleHRNZW51RW5hYmxlZEF0b21zLnB1c2goX3MxOFtfZTQ1XSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNDYgPSAwLCBfdDM3ID0gdGhpcy5zaGFwZXMubGVuZ3RoOyBfZTQ2IDwgX3QzNzsgX2U0NisrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDM4ID0gdGhpcy5zaGFwZXNbX2U0Nl07CiAgICAgICAgICAgICAgICAgIF90MzggJiYgX3QzOC5jbGlja2FibGUgJiYgdGhpcy5jbGlja2FibGVzLnB1c2goX3QzOCksIF90MzggJiYgX3QzOC5ob3ZlcmFibGUgJiYgdGhpcy5ob3ZlcmFibGVzLnB1c2goX3QzOCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaGFuZGxlQ2xpY2tTZWxlY3Rpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGlja1NlbGVjdGlvbihlLCB0LCByKSB7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMudGFyZ2V0ZWRPYmplY3RzKGUsIHQsIHRoaXMuY2xpY2thYmxlcyk7CiAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdmFyIGEgPSBzWzBdLmNsaWNrYWJsZTsKICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBhLmNhbGxiYWNrICYmICgiZnVuY3Rpb24iICE9IHR5cGVvZiBhLmNhbGxiYWNrICYmIChhLmNhbGxiYWNrID0gKDAsIG8ubWFrZUZ1bmN0aW9uKShhLmNhbGxiYWNrKSksICJmdW5jdGlvbiIgPT0gdHlwZW9mIGEuY2FsbGJhY2sgJiYgYS5jYWxsYmFjayhhLCB0aGlzLl92aWV3ZXIsIHIsIHRoaXMuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY2FudmFzT2Zmc2V0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FudmFzT2Zmc2V0KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmdsRE9NLAogICAgICAgICAgICAgICAgICB0ID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICAgICAgICAgICAgciA9IGUub3duZXJEb2N1bWVudCwKICAgICAgICAgICAgICAgICAgcyA9IHIuZG9jdW1lbnRFbGVtZW50LAogICAgICAgICAgICAgICAgICBhID0gci5kZWZhdWx0VmlldzsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHRvcDogdC50b3AgKyBhLnBhZ2VZT2Zmc2V0IC0gcy5jbGllbnRUb3AsCiAgICAgICAgICAgICAgICAgIGxlZnQ6IHQubGVmdCArIGEucGFnZVhPZmZzZXQgLSBzLmNsaWVudExlZnQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0SG92ZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIb3ZlcihlLCB0KSB7CiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfaG92ZXIgIT0gZSAmJiAodGhpcy5jdXJyZW50X2hvdmVyICYmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0aGlzLmN1cnJlbnRfaG92ZXIudW5ob3Zlcl9jYWxsYmFjayAmJiAodGhpcy5jdXJyZW50X2hvdmVyLnVuaG92ZXJfY2FsbGJhY2sgPSAoMCwgby5tYWtlRnVuY3Rpb24pKHRoaXMuY3VycmVudF9ob3Zlci51bmhvdmVyX2NhbGxiYWNrKSksIHRoaXMuY3VycmVudF9ob3Zlci51bmhvdmVyX2NhbGxiYWNrKHRoaXMuY3VycmVudF9ob3ZlciwgdGhpcy5fdmlld2VyLCB0LCB0aGlzLmNvbnRhaW5lcikpLCB0aGlzLmN1cnJlbnRfaG92ZXIgPSBlLCBlICYmIHZvaWQgMCAhPT0gZS5ob3Zlcl9jYWxsYmFjayAmJiAoImZ1bmN0aW9uIiAhPSB0eXBlb2YgZS5ob3Zlcl9jYWxsYmFjayAmJiAoZS5ob3Zlcl9jYWxsYmFjayA9ICgwLCBvLm1ha2VGdW5jdGlvbikoZS5ob3Zlcl9jYWxsYmFjaykpLCAiZnVuY3Rpb24iID09IHR5cGVvZiBlLmhvdmVyX2NhbGxiYWNrICYmIGUuaG92ZXJfY2FsbGJhY2soZSwgdGhpcy5fdmlld2VyLCB0LCB0aGlzLmNvbnRhaW5lcikpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJoYW5kbGVIb3ZlclNlbGVjdGlvbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUhvdmVyU2VsZWN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmICgwID09IHRoaXMuaG92ZXJhYmxlcy5sZW5ndGgpIHJldHVybjsKICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy50YXJnZXRlZE9iamVjdHMoZSwgdCwgdGhpcy5ob3ZlcmFibGVzKTsKICAgICAgICAgICAgICAgIGlmIChyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICB2YXIgcyA9IHJbMF0uY2xpY2thYmxlOwogICAgICAgICAgICAgICAgICB0aGlzLnNldEhvdmVyKHMpLCB0aGlzLmN1cnJlbnRfaG92ZXIgPSBzOwogICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuc2V0SG92ZXIobnVsbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaGFuZGxlSG92ZXJDb250aW51ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUhvdmVyQ29udGludWUoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnRhcmdldGVkT2JqZWN0cyhlLCB0LCB0aGlzLmhvdmVyYWJsZXMpOwogICAgICAgICAgICAgICAgMCAhPSByLmxlbmd0aCAmJiB2b2lkIDAgIT09IHJbMF0gfHwgdGhpcy5zZXRIb3ZlcihudWxsKSwgdm9pZCAwICE9PSByWzBdICYmIHJbMF0uY2xpY2thYmxlICE9PSB0aGlzLmN1cnJlbnRfaG92ZXIgJiYgdGhpcy5zZXRIb3ZlcihudWxsKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjYWxjVG91Y2hEaXN0YW5jZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGNUb3VjaERpc3RhbmNlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIC0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYLAogICAgICAgICAgICAgICAgICByID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIC0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZOwogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0ICogdCArIHIgKiByKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRYIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0WChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGUucGFnZVg7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ICYmICh0ID0gZS5wYWdlWCksIGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXNbMF0gPyB0ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzWzBdICYmICh0ID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0WSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFkoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLnBhZ2VZOwogICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCAmJiAodCA9IGUucGFnZVkpLCBlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzWzBdID8gdCA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUuY2hhbmdlZFRvdWNoZXMgJiYgZS5jaGFuZ2VkVG91Y2hlc1swXSAmJiAodCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkpLCB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlzSW5WaWV3ZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0luVmlld2VyKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHRoaXMudmlld2VycyAmJiAhdGhpcy5jb250cm9sX2FsbCkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuV0lEVEggLyB0aGlzLmNvbHMsCiAgICAgICAgICAgICAgICAgICAgcyA9IHRoaXMuSEVJR0hUIC8gdGhpcy5yb3dzLAogICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmNhbnZhc09mZnNldCgpLAogICAgICAgICAgICAgICAgICAgIG4gPSBlIC0gYS5sZWZ0LAogICAgICAgICAgICAgICAgICAgIG8gPSB0IC0gYS50b3AsCiAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMucm93cyAtIE1hdGguZmxvb3IobyAvIHMpIC0gMSwKICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5mbG9vcihuIC8gcik7CiAgICAgICAgICAgICAgICAgIGlmIChsICE9IHRoaXMucm93IHx8IGggIT0gdGhpcy5jb2wpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGp1c3Rab29tVG9MaW1pdHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGp1c3Rab29tVG9MaW1pdHMoZSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvd2VyWm9vbUxpbWl0ICYmIHRoaXMuY29uZmlnLmxvd2VyWm9vbUxpbWl0ID4gMCkgewogICAgICAgICAgICAgICAgICB2YXIgX3QzOSA9IHRoaXMuQ0FNRVJBX1ogLSB0aGlzLmNvbmZpZy5sb3dlclpvb21MaW1pdDsKICAgICAgICAgICAgICAgICAgZSA+IF90MzkgJiYgKGUgPSBfdDM5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy51cHBlclpvb21MaW1pdCAmJiB0aGlzLmNvbmZpZy51cHBlclpvb21MaW1pdCA+IDApIHsKICAgICAgICAgICAgICAgICAgdmFyIF90NDAgPSB0aGlzLkNBTUVSQV9aIC0gdGhpcy5jb25maWcudXBwZXJab29tTGltaXQ7CiAgICAgICAgICAgICAgICAgIGUgPCBfdDQwICYmIChlID0gX3Q0MCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZSA+IHRoaXMuQ0FNRVJBX1ogJiYgKGUgPSAuOTk5ICogdGhpcy5DQU1FUkFfWiksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidGFyZ2V0ZWRPYmplY3RzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGFyZ2V0ZWRPYmplY3RzKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gewogICAgICAgICAgICAgICAgICB4OiBlLAogICAgICAgICAgICAgICAgICB5OiB0LAogICAgICAgICAgICAgICAgICB6OiAtMQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHIpIHx8IChyID0gdGhpcy5zZWxlY3RlZEF0b21zKHIpKSwgMCA9PSByLmxlbmd0aCA/IFtdIDogKHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEocywgdGhpcy5jYW1lcmEpLCB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMubW9kZWxHcm91cCwgcikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1vZGVsVG9TY3JlZW4iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RlbFRvU2NyZWVuKGUpIHsKICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgICAgICAgICB2YXIgdCA9ICExOwogICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShlKSB8fCAoZSA9IFtlXSwgdCA9ICEwKTsKICAgICAgICAgICAgICAgIHZhciByID0gW10sCiAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLmNhbnZhc09mZnNldCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBhLlZlY3RvcjMoZS54LCBlLnksIGUueik7CiAgICAgICAgICAgICAgICAgIHQuYXBwbHlNYXRyaXg0KF90aGlzLm1vZGVsR3JvdXAubWF0cml4V29ybGQpLCBfdGhpcy5wcm9qZWN0b3IucHJvamVjdFZlY3Rvcih0LCBfdGhpcy5jYW1lcmEpOwogICAgICAgICAgICAgICAgICB2YXIgbiA9IF90aGlzLldJRFRIICogKHQueCArIDEpIC8gMiArIHMubGVmdCwKICAgICAgICAgICAgICAgICAgICBvID0gLV90aGlzLkhFSUdIVCAqICh0LnkgLSAxKSAvIDIgKyBzLnRvcDsKICAgICAgICAgICAgICAgICAgci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICB4OiBuLAogICAgICAgICAgICAgICAgICAgIHk6IG8KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KSwgdCAmJiAociA9IHJbMF0pLCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNjcmVlbk9mZnNldFRvTW9kZWwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JlZW5PZmZzZXRUb01vZGVsKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gZSAvIHRoaXMuV0lEVEgsCiAgICAgICAgICAgICAgICAgIG4gPSB0IC8gdGhpcy5IRUlHSFQsCiAgICAgICAgICAgICAgICAgIG8gPSB2b2lkIDAgPT09IHIgPyB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiA6IHIsCiAgICAgICAgICAgICAgICAgIGwgPSB0aGlzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbiwKICAgICAgICAgICAgICAgICAgaCA9IG5ldyBhLlZlY3RvcjMoMCwgMCwgbyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0b3IucHJvamVjdFZlY3RvcihoLCB0aGlzLmNhbWVyYSksIGgueCArPSAyICogcywgaC55IC09IDIgKiBuLCB0aGlzLnByb2plY3Rvci51bnByb2plY3RWZWN0b3IoaCwgdGhpcy5jYW1lcmEpLCBoLnogPSAwLCBoLmFwcGx5UXVhdGVybmlvbihsKSwgaDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzY3JlZW5Ub01vZGVsRGlzdGFuY2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JlZW5Ub01vZGVsRGlzdGFuY2UoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNhbnZhc09mZnNldCgpLAogICAgICAgICAgICAgICAgICBzID0gbmV3IGEuVmVjdG9yMyh0LngsIHQueSwgdC56KTsKICAgICAgICAgICAgICAgIHMuYXBwbHlNYXRyaXg0KHRoaXMubW9kZWxHcm91cC5tYXRyaXhXb3JsZCk7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHMuY2xvbmUoKTsKICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdG9yLnByb2plY3RWZWN0b3IocywgdGhpcy5jYW1lcmEpOwogICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgYS5WZWN0b3IzKDIgKiAoZS54IC0gci5sZWZ0KSAvIHRoaXMuV0lEVEggLSAxLCAyICogKGUueSAtIHIudG9wKSAvIC10aGlzLkhFSUdIVCArIDEsIHMueik7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0b3IudW5wcm9qZWN0VmVjdG9yKG8sIHRoaXMuY2FtZXJhKSwgby5kaXN0YW5jZVRvKG4pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFZpZXdDaGFuZ2VDYWxsYmFjayIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpZXdDaGFuZ2VDYWxsYmFjayhlKSB7CiAgICAgICAgICAgICAgICAiZnVuY3Rpb24iICE9IHR5cGVvZiBlICYmIG51bGwgIT0gZSB8fCAodGhpcy52aWV3Q2hhbmdlQ2FsbGJhY2sgPSBlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRTdGF0ZUNoYW5nZUNhbGxiYWNrIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3RhdGVDaGFuZ2VDYWxsYmFjayhlKSB7CiAgICAgICAgICAgICAgICAiZnVuY3Rpb24iICE9IHR5cGVvZiBlICYmIG51bGwgIT0gZSB8fCAodGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrID0gZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0Q29uZmlnIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29uZmlnKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENvbmZpZyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbmZpZyhlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0SW50ZXJuYWxTdGF0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEludGVybmFsU3RhdGUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHsKICAgICAgICAgICAgICAgICAgbW9kZWxzOiBbXSwKICAgICAgICAgICAgICAgICAgc3VyZmFjZXM6IFtdLAogICAgICAgICAgICAgICAgICBzaGFwZXM6IFtdLAogICAgICAgICAgICAgICAgICBsYWJlbHM6IFtdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3Q0MSA9IDA7IF90NDEgPCB0aGlzLm1vZGVscy5sZW5ndGg7IF90NDErKykgdGhpcy5tb2RlbHNbX3Q0MV0gJiYgKGUubW9kZWxzW190NDFdID0gdGhpcy5tb2RlbHNbX3Q0MV0uZ2V0SW50ZXJuYWxTdGF0ZSgpKTsKICAgICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEludGVybmFsU3RhdGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJbnRlcm5hbFN0YXRlKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS5tb2RlbHM7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTQ3ID0gMDsgX2U0NyA8IHQubGVuZ3RoOyBfZTQ3KyspIHRbX2U0N10gJiYgKHRoaXMubW9kZWxzW19lNDddID0gbmV3IGguR0xNb2RlbChfZTQ3KSwgdGhpcy5tb2RlbHNbX2U0N10uc2V0SW50ZXJuYWxTdGF0ZSh0W19lNDddKSk7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFpvb21MaW1pdHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRab29tTGltaXRzKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZSAmJiAodGhpcy5jb25maWcubG93ZXJab29tTGltaXQgPSBlKSwgdCAmJiAodGhpcy5jb25maWcudXBwZXJab29tTGltaXQgPSB0KSwgdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnogPSB0aGlzLmFkanVzdFpvb21Ub0xpbWl0cyh0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiksIHRoaXMuc2hvdygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENhbWVyYVBhcmFtZXRlcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDYW1lcmFQYXJhbWV0ZXJzKGUpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZS5mb3YgJiYgKHRoaXMuZm92ID0gZS5mb3YsIHRoaXMuY2FtZXJhLmZvdiA9IHRoaXMuZm92KSwgdm9pZCAwICE9PSBlLnogJiYgKHRoaXMuQ0FNRVJBX1ogPSBlLnosIHRoaXMuY2FtZXJhLnogPSB0aGlzLkNBTUVSQV9aKSwgdm9pZCAwICE9PSBlLm9ydGhvZ3JhcGhpYyAmJiAodGhpcy5jYW1lcmEub3J0aG8gPSBlLm9ydGhvZ3JhcGhpYyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiX2hhbmRsZU1vdXNlRG93biIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZURvd24oZSkgewogICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQoKSwgIXRoaXMuc2NlbmUpIHJldHVybjsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXRYKGUpLAogICAgICAgICAgICAgICAgICByID0gdGhpcy5nZXRZKGUpOwogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCkgcmV0dXJuOwogICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gITAsIHRoaXMubW91c2VCdXR0b24gPSBlLndoaWNoLCB0aGlzLm1vdXNlU3RhcnRYID0gdCwgdGhpcy5tb3VzZVN0YXJ0WSA9IHIsIHRoaXMudG91Y2hIb2xkID0gITAsIHRoaXMudG91Y2hEaXN0YW5jZVN0YXJ0ID0gMCwgZS50YXJnZXRUb3VjaGVzICYmIDIgPT0gZS50YXJnZXRUb3VjaGVzLmxlbmd0aCAmJiAodGhpcy50b3VjaERpc3RhbmNlU3RhcnQgPSB0aGlzLmNhbGNUb3VjaERpc3RhbmNlKGUpKSwgdGhpcy5jcSA9IHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLmNsb25lKCksIHRoaXMuY3ogPSB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiwgdGhpcy5jdXJyZW50TW9kZWxQb3MgPSB0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24uY2xvbmUoKSwgdGhpcy5jc2xhYk5lYXIgPSB0aGlzLnNsYWJOZWFyLCB0aGlzLmNzbGFiRmFyID0gdGhpcy5zbGFiRmFyOwogICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0VG91Y2hlcyAmJiAxID09IHMudG91Y2hIb2xkICYmIChzLmdsRE9NID0gcy5yZW5kZXJlci5kb21FbGVtZW50LCBzLmdsRE9NLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJjb250ZXh0bWVudSIpKSk7CiAgICAgICAgICAgICAgICB9LCAxZTMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIl9oYW5kbGVNb3VzZVVwIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZU1vdXNlVXAoZSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMudG91Y2hIb2xkID0gITEsIHRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLnNjZW5lKSB7CiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXRYKGUpLAogICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmdldFkoZSk7CiAgICAgICAgICAgICAgICAgIGlmICh0ID09IHRoaXMubW91c2VTdGFydFggJiYgciA9PSB0aGlzLm1vdXNlU3RhcnRZKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLmNhbnZhc09mZnNldCgpLAogICAgICAgICAgICAgICAgICAgICAgYSA9ICh0IC0gcy5sZWZ0KSAvIHRoaXMuV0lEVEggKiAyIC0gMSwKICAgICAgICAgICAgICAgICAgICAgIG4gPSAtKHIgLSBzLnRvcCkgLyB0aGlzLkhFSUdIVCAqIDIgKyAxOwogICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tTZWxlY3Rpb24oYSwgbiwgZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9ICExOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIl9oYW5kbGVNb3VzZVNjcm9sbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZVNjcm9sbChlKSB7CiAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLnNjZW5lKSB7CiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXRYKGUpLAogICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmdldFkoZSk7CiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQgJiYgdGhpcy5pc0luVmlld2VyKHQsIHIpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAuODUgKiAodGhpcy5DQU1FUkFfWiAtIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56KSwKICAgICAgICAgICAgICAgICAgICAgIGEgPSAxOwogICAgICAgICAgICAgICAgICAgIGUuY3RybEtleSAmJiAoYSA9IC0xKSwgZS5kZXRhaWwgPyB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiArPSBhICogcyAqIGUuZGV0YWlsIC8gMTAgOiBlLndoZWVsRGVsdGEgJiYgKHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56IC09IGEgKiBzICogZS53aGVlbERlbHRhIC8gNDAwKSwgdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnogPSB0aGlzLmFkanVzdFpvb21Ub0xpbWl0cyh0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiksIHRoaXMuc2hvdygpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicG5nVVJJIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcG5nVVJJKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzKCkudG9EYXRhVVJMKCJpbWFnZS9wbmciKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhcG5nVVJJIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBuZ1VSSShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CiAgICAgICAgICAgICAgICByZXR1cm4gZSA9IGUgfHwgMSwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgdmFyIHMgPSAwLAogICAgICAgICAgICAgICAgICAgIGEgPSB0LnZpZXdDaGFuZ2VDYWxsYmFjaywKICAgICAgICAgICAgICAgICAgICBuID0gW10sCiAgICAgICAgICAgICAgICAgICAgbyA9IFtdLAogICAgICAgICAgICAgICAgICAgIGwgPSBEYXRlLm5vdygpOwogICAgICAgICAgICAgICAgICB0LnZpZXdDaGFuZ2VDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvLnB1c2goRGF0ZS5ub3coKSAtIGwpLCBsID0gRGF0ZS5ub3coKSwgbi5wdXNoKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICB0LmdldENhbnZhcygpLnRvQmxvYihmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgICAgICAgICB0LmFycmF5QnVmZmVyKCkudGhlbihlKTsKICAgICAgICAgICAgICAgICAgICAgIH0sICJpbWFnZS9wbmciKTsKICAgICAgICAgICAgICAgICAgICB9KSksIHMgKz0gMSwgcyA9PSBlICYmICh0LnZpZXdDaGFuZ2VDYWxsYmFjayA9IGEsIFByb21pc2UuYWxsKG4pLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gW107CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDQyID0gMDsgX3Q0MiA8IGUubGVuZ3RoOyBfdDQyKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yMjIgPSAoMCwgdi5kZWNvZGUpKGVbX3Q0Ml0pOwogICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2goKDAsIHYudG9SR0JBOCkoX3IyMilbMF0pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0LmdldENhbnZhcygpLndpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICBuID0gdC5nZXRDYW52YXMoKS5oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAoMCwgdi5lbmNvZGUpKHMsIGEsIG4sIDAsIG8pLAogICAgICAgICAgICAgICAgICAgICAgICBoID0gbmV3IEJsb2IoW2xdLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImltYWdlL3BuZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgICAgICAgICAgYy5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICByKGUudGFyZ2V0LnJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgICB9LCBjLnJlYWRBc0RhdGFVUkwoaCk7CiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0Q2FudmFzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FudmFzKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2xET007CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0UmVuZGVyZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZW5kZXJlcigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEhvdmVyRHVyYXRpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIb3ZlckR1cmF0aW9uKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJEdXJhdGlvbiA9IGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiX2hhbmRsZU1vdXNlTW92ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU1vdmUoZSkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaG92ZXJUaW1lb3V0KTsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5jYW52YXNPZmZzZXQoKSwKICAgICAgICAgICAgICAgICAgciA9ICh0aGlzLmdldFgoZSkgLSB0LmxlZnQpIC8gdGhpcy5XSURUSCAqIDIgLSAxLAogICAgICAgICAgICAgICAgICBzID0gLSh0aGlzLmdldFkoZSkgLSB0LnRvcCkgLyB0aGlzLkhFSUdIVCAqIDIgKyAxOwogICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzOwogICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuY3VycmVudF9ob3ZlciAmJiB0aGlzLmhhbmRsZUhvdmVyQ29udGludWUociwgcyksIHRoaXMuaG92ZXJhYmxlcy5sZW5ndGggPiAwICYmICh0aGlzLmhvdmVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBhLmhhbmRsZUhvdmVyU2VsZWN0aW9uKHIsIHMpOwogICAgICAgICAgICAgICAgfSwgdGhpcy5ob3ZlckR1cmF0aW9uKSksIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5zY2VuZSAmJiB0aGlzLmlzRHJhZ2dpbmcpIHsKICAgICAgICAgICAgICAgICAgdmFyIG4gPSAwLAogICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLmdldFgoZSksCiAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuZ2V0WShlKTsKICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gbyAmJiB0aGlzLmlzSW5WaWV3ZXIobywgbCkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IChvIC0gdGhpcy5tb3VzZVN0YXJ0WCkgLyB0aGlzLldJRFRILAogICAgICAgICAgICAgICAgICAgICAgYyA9IChsIC0gdGhpcy5tb3VzZVN0YXJ0WSkgLyB0aGlzLkhFSUdIVDsKICAgICAgICAgICAgICAgICAgICBpZiAoMCAhPSB0aGlzLnRvdWNoRGlzdGFuY2VTdGFydCAmJiBlLnRhcmdldFRvdWNoZXMgJiYgMiA9PSBlLnRhcmdldFRvdWNoZXMubGVuZ3RoKSBuID0gMiwgYyA9IDIgKiAodGhpcy5jYWxjVG91Y2hEaXN0YW5jZShlKSAtIHRoaXMudG91Y2hEaXN0YW5jZVN0YXJ0KSAvICh0aGlzLldJRFRIICsgdGhpcy5IRUlHSFQpO2Vsc2UgZS50YXJnZXRUb3VjaGVzICYmIDMgPT0gZS50YXJnZXRUb3VjaGVzLmxlbmd0aCAmJiAobiA9IDEpOwogICAgICAgICAgICAgICAgICAgIHZhciB1ID0gdGhpcy5yZW5kZXJlci5nZXRYUmF0aW8oKSwKICAgICAgICAgICAgICAgICAgICAgIGYgPSB0aGlzLnJlbmRlcmVyLmdldFlSYXRpbygpOwogICAgICAgICAgICAgICAgICAgIGggKj0gdSwgYyAqPSBmOwogICAgICAgICAgICAgICAgICAgIHZhciBwLAogICAgICAgICAgICAgICAgICAgICAgZyA9IE1hdGguc3FydChoICogaCArIGMgKiBjKTsKICAgICAgICAgICAgICAgICAgICBpZiAoMyA9PSBuIHx8IDMgPT0gdGhpcy5tb3VzZUJ1dHRvbiAmJiBlLmN0cmxLZXkpIHRoaXMuc2xhYk5lYXIgPSB0aGlzLmNzbGFiTmVhciArIDEwMCAqIGgsIHRoaXMuc2xhYkZhciA9IHRoaXMuY3NsYWJGYXIgLSAxMDAgKiBjO2Vsc2UgaWYgKDIgPT0gbiB8fCAzID09IHRoaXMubW91c2VCdXR0b24gfHwgZS5zaGlmdEtleSkgKHAgPSAuODUgKiAodGhpcy5DQU1FUkFfWiAtIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56KSkgPCA4MCAmJiAocCA9IDgwKSwgdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnogPSB0aGlzLmN6ICsgYyAqIHAsIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56ID0gdGhpcy5hZGp1c3Rab29tVG9MaW1pdHModGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnopO2Vsc2UgaWYgKDEgPT0gbiB8fCAyID09IHRoaXMubW91c2VCdXR0b24gfHwgZS5jdHJsS2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHRoaXMuc2NyZWVuT2Zmc2V0VG9Nb2RlbCh1ICogKG8gLSB0aGlzLm1vdXNlU3RhcnRYKSwgZiAqIChsIC0gdGhpcy5tb3VzZVN0YXJ0WSkpOwogICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLmFkZFZlY3RvcnModGhpcy5jdXJyZW50TW9kZWxQb3MsIHYpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKDAgPT09IG4gfHwgMSA9PSB0aGlzLm1vdXNlQnV0dG9uKSAmJiAwICE9PSBnKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgXyA9IE1hdGguc2luKGcgKiBNYXRoLlBJKSAvIGc7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRxLnggPSBNYXRoLmNvcyhnICogTWF0aC5QSSksIHRoaXMuZHEueSA9IDAsIHRoaXMuZHEueiA9IF8gKiBoLCB0aGlzLmRxLncgPSAtXyAqIGMsIHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLnNldCgxLCAwLCAwLCAwKSwgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24ubXVsdGlwbHkodGhpcy5kcSksIHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLm11bHRpcGx5KHRoaXMuY3EpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIl9oYW5kbGVDb250ZXh0TWVudSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVDb250ZXh0TWVudShlKSB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuZ2V0WChlKSwKICAgICAgICAgICAgICAgICAgciA9IHRoaXMuZ2V0WShlKTsKICAgICAgICAgICAgICAgIGlmICh0ID09IHRoaXMubW91c2VTdGFydFggJiYgciA9PSB0aGlzLm1vdXNlU3RhcnRZKSB7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5tb3VzZVN0YXJ0WCwKICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5tb3VzZVN0YXJ0WSwKICAgICAgICAgICAgICAgICAgICBuID0gKHMgLSAoaCA9IHRoaXMuY2FudmFzT2Zmc2V0KCkpLmxlZnQpIC8gdGhpcy5XSURUSCAqIDIgLSAxLAogICAgICAgICAgICAgICAgICAgIG8gPSAtKGEgLSBoLnRvcCkgLyB0aGlzLkhFSUdIVCAqIDIgKyAxOwogICAgICAgICAgICAgICAgICB2YXIgX2U0OCA9IHRoaXMudGFyZ2V0ZWRPYmplY3RzKG4sIG8sIHRoaXMuY29udGV4dE1lbnVFbmFibGVkQXRvbXMpOwogICAgICAgICAgICAgICAgICB2YXIgbCA9IG51bGw7CiAgICAgICAgICAgICAgICAgIF9lNDgubGVuZ3RoICYmIChsID0gX2U0OFswXS5jbGlja2FibGUpOwogICAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMuY2FudmFzT2Zmc2V0KCk7CiAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLm1vdXNlU3RhcnRYIC0gaC5sZWZ0LCBhID0gdGhpcy5tb3VzZVN0YXJ0WSAtIGgudG9wOwogICAgICAgICAgICAgICAgICB0aGlzLnVzZXJDb250ZXh0TWVudUhhbmRsZXIgJiYgdGhpcy51c2VyQ29udGV4dE1lbnVIYW5kbGVyKGwsIHMsIGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENvbnRhaW5lciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbnRhaW5lcihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9ICgwLCBvLmdldEVsZW1lbnQpKGUpIHx8IHRoaXMuY29udGFpbmVyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdENvbnRhaW5lcih0KSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRCYWNrZ3JvdW5kQ29sb3IiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCYWNrZ3JvdW5kQ29sb3IoZSwgdCkgewogICAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gdCB8fCB0IDwgMCB8fCB0ID4gMSkgJiYgKHQgPSAxKTsKICAgICAgICAgICAgICAgIHZhciByID0gbi5DQy5jb2xvcihlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjZW5lLmZvZy5jb2xvciA9IHIsIHRoaXMuYmdDb2xvciA9IHIuZ2V0SGV4KCksIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvckhleChyLmdldEhleCgpLCB0KSwgdGhpcy5zaG93KCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0UHJvamVjdGlvbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb2plY3Rpb24oZSkgewogICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEub3J0aG8gPSAib3J0aG9ncmFwaGljIiA9PT0gZSwgdGhpcy5zZXRTbGFiQW5kRm9nKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Vmlld1N0eWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vmlld1N0eWxlKGUpIHsKICAgICAgICAgICAgICAgIGlmICgib3V0bGluZSIgPT09IGUuc3R5bGUpIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7fTsKICAgICAgICAgICAgICAgICAgZS5jb2xvciAmJiAodC5jb2xvciA9IG4uQ0MuY29sb3IoZS5jb2xvcikpLCBlLndpZHRoICYmICh0LndpZHRoID0gZS53aWR0aCksIHRoaXMucmVuZGVyZXIuZW5hYmxlT3V0bGluZSh0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnJlbmRlcmVyLmRpc2FibGVPdXRsaW5lKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ1cGRhdGVTaXplIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLldJRFRILCB0aGlzLkhFSUdIVCksIHRoaXMuQVNQRUNUID0gdGhpcy5yZW5kZXJlci5nZXRBc3BlY3QodGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpLCB0aGlzLnJlbmRlcmVyLnNldFNpemUodGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpLCB0aGlzLmNhbWVyYS5hc3BlY3QgPSB0aGlzLkFTUEVDVCwgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFdpZHRoIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0V2lkdGgoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuV0lEVEggPSBlIHx8IHRoaXMuV0lEVEgsIHRoaXMudXBkYXRlU2l6ZSgpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEhlaWdodCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhlaWdodChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5IRUlHSFQgPSBlIHx8IHRoaXMuSEVJR0hULCB0aGlzLnVwZGF0ZVNpemUoKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZXNpemUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7CiAgICAgICAgICAgICAgICB0aGlzLldJRFRIID0gdGhpcy5nZXRXaWR0aCgpLCB0aGlzLkhFSUdIVCA9IHRoaXMuZ2V0SGVpZ2h0KCk7CiAgICAgICAgICAgICAgICB2YXIgZSA9ICExOwogICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIuaXNMb3N0KCkgJiYgdGhpcy5XSURUSCA+IDAgJiYgdGhpcy5IRUlHSFQgPiAwICYmICh0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCJjYW52YXMiKS5yZW1vdmUoKSwgdGhpcy5zZXR1cFJlbmRlcmVyKCksIHRoaXMuaW5pdENvbnRhaW5lcih0aGlzLmNvbnRhaW5lciksIGUgPSAhMCksIDAgPT0gdGhpcy5XSURUSCB8fCAwID09IHRoaXMuSEVJR0hUID8gdGhpcy5hbmltYXRlZCAmJiB0aGlzLl92aWV3ZXIucGF1c2VBbmltYXRlKCkgOiB0aGlzLmFuaW1hdGVkICYmIHRoaXMuX3ZpZXdlci5yZXN1bWVBbmltYXRlKCksIHRoaXMudXBkYXRlU2l6ZSgpLCBlKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTQ5ID0gdGhpcy5yZW5kZXJlci5zdXBwb3J0ZWRFeHRlbnNpb25zKCk7CiAgICAgICAgICAgICAgICAgIF9lNDkucmVnZW4gPSAhMCwgdGhpcy5fdmlld2VyLnJlbmRlcihudWxsLCBfZTQ5KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnNob3coKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE1vZGVsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZWwoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSA/IDAgPT0gdGhpcy5tb2RlbHMubGVuZ3RoID8gbnVsbCA6IHRoaXMubW9kZWxzW3RoaXMubW9kZWxzLmxlbmd0aCAtIDFdIDogZSBpbnN0YW5jZW9mIGguR0xNb2RlbCA/IGUgOiBlIGluIHRoaXMubW9kZWxzID8gdGhpcy5tb2RlbHNbZV0gOiAwID09IHRoaXMubW9kZWxzLmxlbmd0aCA/IG51bGwgOiB0aGlzLm1vZGVsc1t0aGlzLm1vZGVscy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzcGluIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BpbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgICAgICAgICAgIGlmIChjbGVhckludGVydmFsKHRoaXMuc3BpbkludGVydmFsKSwgdm9pZCAwID09PSBlICYmIChlID0gInkiKSwgImJvb2xlYW4iID09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgICAgIGlmICghZSkgcmV0dXJuOwogICAgICAgICAgICAgICAgICBlID0gInkiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShlKSAmJiAoZSA9IHsKICAgICAgICAgICAgICAgICAgeDogZVswXSwKICAgICAgICAgICAgICAgICAgeTogZVsxXSwKICAgICAgICAgICAgICAgICAgejogZVsyXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLnNwaW5JbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgIXIuZ2V0Q2FudmFzKCkuaXNDb25uZWN0ZWQgJiYgci5yZW5kZXJlci5pc0xvc3QoKSAmJiBjbGVhckludGVydmFsKHIuc3BpbkludGVydmFsKSwgci5yb3RhdGUoMSAqIHQsIGUpOwogICAgICAgICAgICAgICAgfSwgMjUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFuaW1hdGVNb3Rpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlTW90aW9uKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgICAgIHZhciBvID0gTWF0aC5jZWlsKGUgLyAyMCk7CiAgICAgICAgICAgICAgICBvIDwgMSAmJiAobyA9IDEpLCB0aGlzLmluY0FuaW0oKTsKICAgICAgICAgICAgICAgIHZhciBsID0gewogICAgICAgICAgICAgICAgICBtcG9zOiB0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24uY2xvbmUoKSwKICAgICAgICAgICAgICAgICAgcno6IHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56LAogICAgICAgICAgICAgICAgICByb3Q6IHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLmNsb25lKCksCiAgICAgICAgICAgICAgICAgIGNhbTogdGhpcy5sb29raW5nQXQuY2xvbmUoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTUwID0gbmV3IEFycmF5KG8pOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDQzID0gMDsgX3Q0MyA8IG87IF90NDMrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBfaDUgPSAoX3Q0MyArIDEpIC8gbywKICAgICAgICAgICAgICAgICAgICAgIF9jMiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgbXBvczogbC5tcG9zLAogICAgICAgICAgICAgICAgICAgICAgICByejogbC5yeiwKICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBsLnJvdAogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBfYzIubXBvcyA9IHIuY2xvbmUoKS5zdWIobC5tcG9zKS5tdWx0aXBseVNjYWxhcihfaDUpLmFkZChsLm1wb3MpLCBfYzIucnogPSBsLnJ6ICsgX2g1ICogKHMgLSBsLnJ6KSwgX2MyLnJvdCA9IF9HTFZpZXdlci5zbGVycChsLnJvdCwgYSwgX2g1KSwgX2MyLmNhbSA9IG4uY2xvbmUoKS5zdWIobC5jYW0pLm11bHRpcGx5U2NhbGFyKF9oNSkuYWRkKGwuY2FtKSwgX2U1MFtfdDQzXSA9IF9jMjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB2YXIgX3Q0NCA9IDAsCiAgICAgICAgICAgICAgICAgICAgX2g2ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBfYzMgPSBmdW5jdGlvbiBfYzMoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IF9lNTBbX3Q0NF07CiAgICAgICAgICAgICAgICAgICAgICBfdDQ0ICs9IDEsIF9oNi5tb2RlbEdyb3VwLnBvc2l0aW9uID0gci5tcG9zLCBfaDYucm90YXRpb25Hcm91cC5wb3NpdGlvbi56ID0gci5yeiwgX2g2LnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbiA9IHIucm90LCBfaDYuY2FtZXJhLmxvb2tBdChyLmNhbSksIF90NDQgPCBfZTUwLmxlbmd0aCA/IHNldFRpbWVvdXQoX2MzLCAyMCkgOiBfaDYuZGVjQW5pbSgpLCBfaDYuc2hvdygpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoX2MzLCAyMCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgaCA9IHt9OwogICAgICAgICAgICAgICAgICB2YXIgX2U1MSA9IDEgLyBvOwogICAgICAgICAgICAgICAgICBpZiAociAmJiAoaC5tcG9zID0gci5jbG9uZSgpLnN1YihsLm1wb3MpLm11bHRpcGx5U2NhbGFyKF9lNTEpKSwgdm9pZCAwICE9PSBzICYmIG51bGwgIT0gcyAmJiAoaC5yeiA9IF9lNTEgKiAocyAtIGwucnopKSwgYSkgewogICAgICAgICAgICAgICAgICAgIHZhciBjID0gX0dMVmlld2VyLnNsZXJwKGwucm90LCBhLCBfZTUxKTsKICAgICAgICAgICAgICAgICAgICBoLnJvdCA9IGwucm90LmNsb25lKCkuaW52ZXJzZSgpLm11bHRpcGx5KGMpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIG4gJiYgKGguY2FtID0gbi5jbG9uZSgpLnN1YihsLmNhbSkubXVsdGlwbHlTY2FsYXIoX2U1MSkpOwogICAgICAgICAgICAgICAgICB2YXIgX3Q0NSA9IDAsCiAgICAgICAgICAgICAgICAgICAgX3UzID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBfZjQgPSBmdW5jdGlvbiBfZjQoKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdDQ1ICs9IDEsIGgubXBvcyAmJiBfdTMubW9kZWxHcm91cC5wb3NpdGlvbi5hZGQoaC5tcG9zKSwgaC5yeiAmJiAoX3UzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiArPSBoLnJ6KSwgaC5yb3QgJiYgX3UzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbi5tdWx0aXBseShoLnJvdCksIGguY2FtICYmIChfdTMubG9va2luZ0F0LmFkZChoLmNhbSksIF91My5jYW1lcmEubG9va0F0KF91My5sb29raW5nQXQpKSwgX3Q0NSA8IG8gPyBzZXRUaW1lb3V0KF9mNCwgMjApIDogX3UzLmRlY0FuaW0oKSwgX3UzLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KF9mNCwgMjApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJvdGF0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJvdGF0ZShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogInkiOwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CiAgICAgICAgICAgICAgICB2YXIgcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogITE7CiAgICAgICAgICAgICAgICBpZiAoIngiID09IHQgPyB0ID0gewogICAgICAgICAgICAgICAgICB4OiAxLAogICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICB9IDogInkiID09IHQgPyB0ID0gewogICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICB5OiAxLAogICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICB9IDogInoiID09IHQgJiYgKHQgPSB7CiAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgIHo6IDEKICAgICAgICAgICAgICAgIH0pLCAidngiID09IHQgPyB0ID0gewogICAgICAgICAgICAgICAgICB2eDogMSwKICAgICAgICAgICAgICAgICAgdnk6IDAsCiAgICAgICAgICAgICAgICAgIHZ6OiAwCiAgICAgICAgICAgICAgICB9IDogInZ5IiA9PSB0ID8gdCA9IHsKICAgICAgICAgICAgICAgICAgdng6IDAsCiAgICAgICAgICAgICAgICAgIHZ5OiAxLAogICAgICAgICAgICAgICAgICB2ejogMAogICAgICAgICAgICAgICAgfSA6ICJ2eiIgPT0gdCAmJiAodCA9IHsKICAgICAgICAgICAgICAgICAgdng6IDAsCiAgICAgICAgICAgICAgICAgIHZ5OiAwLAogICAgICAgICAgICAgICAgICB2ejogMQogICAgICAgICAgICAgICAgfSksIHZvaWQgMCAhPT0gdC52eCkgewogICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBhLlZlY3RvcjModC52eCwgdC52eSwgdC52eik7CiAgICAgICAgICAgICAgICAgIG4uYXBwbHlRdWF0ZXJuaW9uKHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uKSwgdCA9IHsKICAgICAgICAgICAgICAgICAgICB4OiBuLngsCiAgICAgICAgICAgICAgICAgICAgeTogbi55LAogICAgICAgICAgICAgICAgICAgIHo6IG4uegogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG8gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgICAgICAgbyA9IE1hdGguc2luKGUgLyAyKSwKICAgICAgICAgICAgICAgICAgICBsID0gTWF0aC5jb3MoZSAvIDIpOwogICAgICAgICAgICAgICAgICByZXR1cm4gciA9IHQueCAqIG8sIHMgPSB0LnkgKiBvLCBuID0gdC56ICogbywgbmV3IGEuUXVhdGVybmlvbihyLCBzLCBuLCBsKS5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICAgIH0oTWF0aC5QSSAqIGUgLyAxODApOwogICAgICAgICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgICAgICAgdmFyIGwgPSBuZXcgYS5RdWF0ZXJuaW9uKCkuY29weSh0aGlzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbikubXVsdGlwbHkobyk7CiAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU1vdGlvbihyLCBzLCB0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24sIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56LCBsLCB0aGlzLmxvb2tpbmdBdCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24ubXVsdGlwbHkobyksIHRoaXMuc2hvdygpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic3VyZmFjZXNGaW5pc2hlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1cmZhY2VzRmluaXNoZWQoKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlIGluIHRoaXMuc3VyZmFjZXMpIGlmICghdGhpcy5zdXJmYWNlc1tlXVswXS5kb25lKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICByZXR1cm4gITA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0VmlldyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZXcoKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubW9kZWxHcm91cCkgcmV0dXJuIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAxXTsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLAogICAgICAgICAgICAgICAgICB0ID0gdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb247CiAgICAgICAgICAgICAgICByZXR1cm4gW2UueCwgZS55LCBlLnosIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56LCB0LngsIHQueSwgdC56LCB0LnddOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFZpZXciLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaWV3KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUgJiYgKGUgaW5zdGFuY2VvZiBBcnJheSB8fCA4ICE9PSBlLmxlbmd0aCkgJiYgdGhpcy5tb2RlbEdyb3VwICYmIHRoaXMucm90YXRpb25Hcm91cCA/ICh0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24ueCA9IGVbMF0sIHRoaXMubW9kZWxHcm91cC5wb3NpdGlvbi55ID0gZVsxXSwgdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLnogPSBlWzJdLCB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiA9IGVbM10sIHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLnggPSBlWzRdLCB0aGlzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbi55ID0gZVs1XSwgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24ueiA9IGVbNl0sIHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLncgPSBlWzddLCB2b2lkIDAgIT09IGVbOF0gJiYgKHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi54ID0gZVs4XSwgdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnkgPSBlWzldKSwgdGhpcy5zaG93KHQpLCB0aGlzKSA6IHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVuZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGUsIHQpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0Vmlld3BvcnQoKSwgdGhpcy51cGRhdGVDbGlja2FibGVzKCk7CiAgICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZ2V0VmlldygpOwogICAgICAgICAgICAgICAgZm9yICh0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2sgJiYgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrKHRoaXMuZ2V0SW50ZXJuYWxTdGF0ZSgpKSwgdCB8fCAodCA9IHRoaXMucmVuZGVyZXIuc3VwcG9ydGVkRXh0ZW5zaW9ucygpKSwgciA9IDA7IHIgPCB0aGlzLm1vZGVscy5sZW5ndGg7IHIrKykgdGhpcy5tb2RlbHNbcl0gJiYgdGhpcy5tb2RlbHNbcl0uZ2xvYmoodGhpcy5tb2RlbEdyb3VwLCB0KTsKICAgICAgICAgICAgICAgIGZvciAociA9IDA7IHIgPCB0aGlzLnNoYXBlcy5sZW5ndGg7IHIrKykgdGhpcy5zaGFwZXNbcl0gJiYgKHZvaWQgMCA9PT0gdGhpcy5zaGFwZXNbcl0uZnJhbWUgfHwgdGhpcy52aWV3ZXJfZnJhbWUgPCAwIHx8IHRoaXMuc2hhcGVzW3JdLmZyYW1lIDwgMCB8fCB0aGlzLnNoYXBlc1tyXS5mcmFtZSA9PSB0aGlzLnZpZXdlcl9mcmFtZSA/IHRoaXMuc2hhcGVzW3JdLmdsb2JqKHRoaXMubW9kZWxHcm91cCwgdCkgOiB0aGlzLnNoYXBlc1tyXS5yZW1vdmVnbCh0aGlzLm1vZGVsR3JvdXApKTsKICAgICAgICAgICAgICAgIGZvciAociA9IDA7IHIgPCB0aGlzLmxhYmVscy5sZW5ndGg7IHIrKykgdGhpcy5sYWJlbHNbcl0gJiYgdm9pZCAwICE9PSB0aGlzLmxhYmVsc1tyXS5mcmFtZSAmJiB0aGlzLmxhYmVsc1tyXS5mcmFtZSA+PSAwICYmICh0aGlzLm1vZGVsR3JvdXAucmVtb3ZlKHRoaXMubGFiZWxzW3JdLnNwcml0ZSksICh0aGlzLnZpZXdlcl9mcmFtZSA8IDAgfHwgdGhpcy5sYWJlbHNbcl0uZnJhbWUgPT0gdGhpcy52aWV3ZXJfZnJhbWUpICYmIHRoaXMubW9kZWxHcm91cC5hZGQodGhpcy5sYWJlbHNbcl0uc3ByaXRlKSk7CiAgICAgICAgICAgICAgICBmb3IgKHIgaW4gdGhpcy5zdXJmYWNlcykgaWYgKHRoaXMuc3VyZmFjZXMuaGFzT3duUHJvcGVydHkocikpIHsKICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLnN1cmZhY2VzW3JdOwogICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgby5sZW5ndGg7IGErKykgaWYgKG8uaGFzT3duUHJvcGVydHkoYSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IG9bYV0uZ2VvOwogICAgICAgICAgICAgICAgICAgIGlmICghb1thXS5maW5pc2hlZCB8fCB0LnJlZ2VuKSB7CiAgICAgICAgICAgICAgICAgICAgICBsLnZlcnRpY2VzTmVlZFVwZGF0ZSA9ICEwLCBsLmVsZW1lbnRzTmVlZFVwZGF0ZSA9ICEwLCBsLm5vcm1hbHNOZWVkVXBkYXRlID0gITAsIGwuY29sb3JzTmVlZFVwZGF0ZSA9ICEwLCBsLmJ1ZmZlcnNOZWVkVXBkYXRlID0gITAsIGwuYm91bmRpbmdTcGhlcmUgPSBudWxsLCBvW2FdLmRvbmUgJiYgKG9bYV0uZmluaXNoZWQgPSAhMCksIG9bYV0ubGFzdEdMICYmIHRoaXMubW9kZWxHcm91cC5yZW1vdmUob1thXS5sYXN0R0wpOwogICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGggPSBvW2FdLm1hdCBpbnN0YW5jZW9mIHMuTGluZUJhc2ljTWF0ZXJpYWwgPyBuZXcgcy5MaW5lKGwsIG9bYV0ubWF0KSA6IG5ldyBzLk1lc2gobCwgb1thXS5tYXQpLCBvW2FdLm1hdC50cmFuc3BhcmVudCAmJiAwID09IG9bYV0ubWF0Lm9wYWNpdHkgPyBoLnZpc2libGUgPSAhMSA6IGgudmlzaWJsZSA9ICEwLCBvW2FdLnN5bW1ldHJpZXMubGVuZ3RoID4gMSB8fCAxID09IG9bYV0uc3ltbWV0cmllcy5sZW5ndGggJiYgIW9bYV0uc3ltbWV0cmllc1thXS5pc0lkZW50aXR5KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IG5ldyBzLk9iamVjdDNEKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCBvW2FdLnN5bW1ldHJpZXMubGVuZ3RoOyBjKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGguY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmLm1hdHJpeCA9IG9bYV0uc3ltbWV0cmllc1tjXSwgZi5tYXRyaXhBdXRvVXBkYXRlID0gITEsIHUuYWRkKGYpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG9bYV0ubGFzdEdMID0gdSwgdGhpcy5tb2RlbEdyb3VwLmFkZCh1KTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBvW2FdLmxhc3RHTCA9IGgsIHRoaXMubW9kZWxHcm91cC5hZGQoaCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRWaWV3KG4pLCAiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIGUodGhpcyksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0TW9kZWxMaXN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZWxMaXN0KGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gW107CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBlIHx8IHZvaWQgMCA9PT0gZS5tb2RlbCkgZm9yICh2YXIgX2U1MiA9IDA7IF9lNTIgPCB0aGlzLm1vZGVscy5sZW5ndGg7IF9lNTIrKykgdGhpcy5tb2RlbHNbX2U1Ml0gJiYgdC5wdXNoKHRoaXMubW9kZWxzW19lNTJdKTtlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIF9zMTkgPSBlLm1vZGVsOwogICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KF9zMTkpIHx8IChfczE5ID0gW19zMTldKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U1MyA9IDA7IF9lNTMgPCBfczE5Lmxlbmd0aDsgX2U1MysrKSBpZiAoIm51bWJlciIgPT0gdHlwZW9mIF9zMTlbX2U1M10pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IF9zMTlbX2U1M107CiAgICAgICAgICAgICAgICAgICAgciA8IDAgJiYgKHIgKz0gdGhpcy5tb2RlbHMubGVuZ3RoKSwgdC5wdXNoKHRoaXMubW9kZWxzW3JdKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHQucHVzaChfczE5W19lNTNdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldEF0b21zRnJvbVNlbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0b21zRnJvbVNlbChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IFtdOwogICAgICAgICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0ge30pOwogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldE1vZGVsTGlzdChlKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9zMjAgPSAwOyBfczIwIDwgci5sZW5ndGg7IF9zMjArKykgdCA9IHQuY29uY2F0KHJbX3MyMF0uc2VsZWN0ZWRBdG9tcyhlKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhdG9tSXNTZWxlY3RlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0b21Jc1NlbGVjdGVkKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IHt9KTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSB0aGlzLmdldE1vZGVsTGlzdCh0KSwgcyA9IDA7IHMgPCByLmxlbmd0aDsgcysrKSBpZiAocltzXS5hdG9tSXNTZWxlY3RlZChlLCB0KSkgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNlbGVjdGVkQXRvbXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RlZEF0b21zKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0b21zRnJvbVNlbChlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRVbmlxdWVWYWx1ZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVbmlxdWVWYWx1ZXMoZSwgdCkgewogICAgICAgICAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0ge30pOwogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldEF0b21zRnJvbVNlbCh0KSwKICAgICAgICAgICAgICAgICAgcyA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgYSBpbiByKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyW2FdLmhhc093blByb3BlcnR5KGUpKSBzW3JbYV1bZV1dID0gITA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicGRiRGF0YSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBkYkRhdGEoZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMuZ2V0QXRvbXNGcm9tU2VsKGUpLCByID0gIiIsIHMgPSAwLCBhID0gdC5sZW5ndGg7IHMgPCBhOyArK3MpIHIgKz0gdFtzXS5wZGJsaW5lICsgIlxuIjsKICAgICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInpvb20iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB6b29tKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDI7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAhMTsKICAgICAgICAgICAgICAgIHZhciBzID0gKHRoaXMuQ0FNRVJBX1ogLSB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueikgLyBlLAogICAgICAgICAgICAgICAgICBhID0gdGhpcy5DQU1FUkFfWiAtIHM7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA+IDAgPyB0aGlzLmFuaW1hdGVNb3Rpb24odCwgciwgdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLCB0aGlzLmFkanVzdFpvb21Ub0xpbWl0cyhhKSwgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24sIHRoaXMubG9va2luZ0F0KSA6ICh0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiA9IHRoaXMuYWRqdXN0Wm9vbVRvTGltaXRzKGEpLCB0aGlzLnNob3coKSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNsYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNsYXRlKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwOwogICAgICAgICAgICAgICAgdmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICExOwogICAgICAgICAgICAgICAgdmFyIG4gPSBlIC8gdGhpcy5XSURUSCwKICAgICAgICAgICAgICAgICAgbyA9IHQgLyB0aGlzLkhFSUdIVCwKICAgICAgICAgICAgICAgICAgbCA9IG5ldyBhLlZlY3RvcjMoMCwgMCwgLXRoaXMuQ0FNRVJBX1opOwogICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0b3IucHJvamVjdFZlY3RvcihsLCB0aGlzLmNhbWVyYSksIGwueCAtPSBuLCBsLnkgLT0gbywgdGhpcy5wcm9qZWN0b3IudW5wcm9qZWN0VmVjdG9yKGwsIHRoaXMuY2FtZXJhKSwgbC56ID0gMDsKICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy5sb29raW5nQXQuY2xvbmUoKS5hZGQobCk7CiAgICAgICAgICAgICAgICByZXR1cm4gciA+IDAgPyB0aGlzLmFuaW1hdGVNb3Rpb24ociwgcywgdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLCB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiwgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24sIGgpIDogKHRoaXMubG9va2luZ0F0ID0gaCwgdGhpcy5jYW1lcmEubG9va0F0KHRoaXMubG9va2luZ0F0KSwgdGhpcy5zaG93KCkpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInRyYW5zbGF0ZVNjZW5lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNsYXRlU2NlbmUoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CiAgICAgICAgICAgICAgICB2YXIgcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogITE7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuc2NyZWVuT2Zmc2V0VG9Nb2RlbChlLCB0KSwKICAgICAgICAgICAgICAgICAgbiA9IHRoaXMubW9kZWxHcm91cC5wb3NpdGlvbi5jbG9uZSgpLmFkZChhKTsKICAgICAgICAgICAgICAgIHJldHVybiByID4gMCA/IHRoaXMuYW5pbWF0ZU1vdGlvbihyLCBzLCB0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24sIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56LCB0aGlzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbiwgdGhpcy5sb29raW5nQXQpIDogKHRoaXMubW9kZWxHcm91cC5wb3NpdGlvbiA9IG4sIHRoaXMuc2hvdygpKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJmaXRTbGFiIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZml0U2xhYihlKSB7CiAgICAgICAgICAgICAgICBlID0gZSB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXRBdG9tc0Zyb21TZWwoZSksCiAgICAgICAgICAgICAgICAgIHIgPSAoMCwgby5nZXRFeHRlbnQpKHQpLAogICAgICAgICAgICAgICAgICBzID0gclsxXVswXSAtIHJbMF1bMF0sCiAgICAgICAgICAgICAgICAgIGEgPSByWzFdWzFdIC0gclswXVsxXSwKICAgICAgICAgICAgICAgICAgbiA9IHJbMV1bMl0gLSByWzBdWzJdLAogICAgICAgICAgICAgICAgICBsID0gTWF0aC5zcXJ0KHMgKiBzICsgYSAqIGEgKyBuICogbik7CiAgICAgICAgICAgICAgICByZXR1cm4gbCA8IDUgJiYgKGwgPSA1KSwgdGhpcy5zbGFiTmVhciA9IC1sIC8gMS45LCB0aGlzLnNsYWJGYXIgPSBsIC8gMiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjZW50ZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjZW50ZXIoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAhMTsKICAgICAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgICBsID0gdGhpcy5nZXRBdG9tc0Zyb21TZWwoZSksCiAgICAgICAgICAgICAgICAgIGggPSAoMCwgby5nZXRFeHRlbnQpKGwpOwogICAgICAgICAgICAgICAgKDAsIG8uaXNFbXB0eU9iamVjdCkoZSkgPyAodGhpcy5zaGFwZXMuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmJvdW5kaW5nU3BoZXJlICYmIGUuYm91bmRpbmdTcGhlcmUuY2VudGVyKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLmJvdW5kaW5nU3BoZXJlLmNlbnRlciwKICAgICAgICAgICAgICAgICAgICAgIHIgPSBlLmJvdW5kaW5nU3BoZXJlLnJhZGl1czsKICAgICAgICAgICAgICAgICAgICByID4gMCA/IChsLnB1c2gobmV3IGEuVmVjdG9yMyh0LnggKyByLCB0LnksIHQueikpLCBsLnB1c2gobmV3IGEuVmVjdG9yMyh0LnggLSByLCB0LnksIHQueikpLCBsLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSArIHIsIHQueikpLCBsLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSAtIHIsIHQueikpLCBsLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSwgdC56ICsgcikpLCBsLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSwgdC56IC0gcikpKSA6IGwucHVzaCh0KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksIGggPSAoMCwgby5nZXRFeHRlbnQpKGwpLCBzID0gbCwgbiA9IGgpIDogKHMgPSB0aGlzLmdldEF0b21zRnJvbVNlbCh7fSksIG4gPSAoMCwgby5nZXRFeHRlbnQpKHMpKTsKICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IGEuVmVjdG9yMyhoWzJdWzBdLCBoWzJdWzFdLCBoWzJdWzJdKSwKICAgICAgICAgICAgICAgICAgdSA9IG5bMV1bMF0gLSBuWzBdWzBdLAogICAgICAgICAgICAgICAgICBmID0gblsxXVsxXSAtIG5bMF1bMV0sCiAgICAgICAgICAgICAgICAgIHAgPSBuWzFdWzJdIC0gblswXVsyXSwKICAgICAgICAgICAgICAgICAgZyA9IE1hdGguc3FydCh1ICogdSArIGYgKiBmICsgcCAqIHApOwogICAgICAgICAgICAgICAgZyA8IDUgJiYgKGcgPSA1KSwgdGhpcy5zbGFiTmVhciA9IC1nIC8gMS45LCB0aGlzLnNsYWJGYXIgPSBnIC8gMiwgdSA9IGhbMV1bMF0gLSBoWzBdWzBdLCBmID0gaFsxXVsxXSAtIGhbMF1bMV0sIHAgPSBoWzFdWzJdIC0gaFswXVsyXSwgKGcgPSBNYXRoLnNxcnQodSAqIHUgKyBmICogZiArIHAgKiBwKSkgPCA1ICYmIChnID0gNSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB2ID0gMjUsIF8gPSAwOyBfIDwgbC5sZW5ndGg7IF8rKykgaWYgKGxbX10pIHsKICAgICAgICAgICAgICAgICAgdmFyIHkgPSBjLmRpc3RhbmNlVG9TcXVhcmVkKGxbX10pOwogICAgICAgICAgICAgICAgICB5ID4gdiAmJiAodiA9IHkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZyA9IDIgKiBNYXRoLnNxcnQodik7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGMuY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA+IDAgPyB0aGlzLmFuaW1hdGVNb3Rpb24odCwgciwgYiwgdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLnosIHRoaXMucm90YXRpb25Hcm91cC5xdWF0ZXJuaW9uLCB0aGlzLmxvb2tpbmdBdCkgOiAodGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uID0gYiwgdGhpcy5zaG93KCkpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInpvb21UbyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21UbygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICExOwogICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLmdldEF0b21zRnJvbVNlbChlKSwKICAgICAgICAgICAgICAgICAgbiA9ICgwLCBvLmdldEV4dGVudCkocyksCiAgICAgICAgICAgICAgICAgIGwgPSBuOwogICAgICAgICAgICAgICAgaWYgKCgwLCBvLmlzRW1wdHlPYmplY3QpKGUpKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTU0ID0gcyAmJiBzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hhcGVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmJvdW5kaW5nU3BoZXJlKSBpZiAoZS5ib3VuZGluZ1NwaGVyZS5ib3gpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfdDQ2ID0gZS5ib3VuZGluZ1NwaGVyZS5ib3g7CiAgICAgICAgICAgICAgICAgICAgICBzLnB1c2gobmV3IGEuVmVjdG9yMyhfdDQ2Lm1pbi54LCBfdDQ2Lm1pbi55LCBfdDQ2Lm1pbi56KSksIHMucHVzaChuZXcgYS5WZWN0b3IzKF90NDYubWF4LngsIF90NDYubWF4LnksIF90NDYubWF4LnopKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuYm91bmRpbmdTcGhlcmUuY2VudGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUuYm91bmRpbmdTcGhlcmUuY2VudGVyLAogICAgICAgICAgICAgICAgICAgICAgICByID0gZS5ib3VuZGluZ1NwaGVyZS5yYWRpdXM7CiAgICAgICAgICAgICAgICAgICAgICByID4gMCA/IChzLnB1c2gobmV3IGEuVmVjdG9yMyh0LnggKyByLCB0LnksIHQueikpLCBzLnB1c2gobmV3IGEuVmVjdG9yMyh0LnggLSByLCB0LnksIHQueikpLCBzLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSArIHIsIHQueikpLCBzLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSAtIHIsIHQueikpLCBzLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSwgdC56ICsgcikpLCBzLnB1c2gobmV3IGEuVmVjdG9yMyh0LngsIHQueSwgdC56IC0gcikpKSA6IHMucHVzaCh0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLCBsID0gKDAsIG8uZ2V0RXh0ZW50KShzKSwgIV9lNTQpIGZvciAodmFyIF9lNTUgPSAwOyBfZTU1IDwgMzsgX2U1NSsrKSBuWzJdW19lNTVdID0gKGxbMF1bX2U1NV0gKyBsWzFdW19lNTVdKSAvIDI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgX2U1NiA9IHRoaXMuZ2V0QXRvbXNGcm9tU2VsKHt9KTsKICAgICAgICAgICAgICAgICAgbCA9ICgwLCBvLmdldEV4dGVudCkoX2U1Nik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgaCA9IG5ldyBhLlZlY3RvcjMoblsyXVswXSwgblsyXVsxXSwgblsyXVsyXSksCiAgICAgICAgICAgICAgICAgIGMgPSBsWzFdWzBdIC0gbFswXVswXSwKICAgICAgICAgICAgICAgICAgdSA9IGxbMV1bMV0gLSBsWzBdWzFdLAogICAgICAgICAgICAgICAgICBmID0gbFsxXVsyXSAtIGxbMF1bMl0sCiAgICAgICAgICAgICAgICAgIHAgPSBNYXRoLnNxcnQoYyAqIGMgKyB1ICogdSArIGYgKiBmKTsKICAgICAgICAgICAgICAgIHAgPCA1ICYmIChwID0gNSksIHRoaXMuc2xhYk5lYXIgPSAtcCAvIDEuOSwgdGhpcy5zbGFiRmFyID0gcCAvIDIsIDAgPT09IE9iamVjdC5rZXlzKGUpLmxlbmd0aCAmJiAodGhpcy5zbGFiTmVhciA9IE1hdGgubWluKDIgKiAtcCwgLTUwKSwgdGhpcy5zbGFiRmFyID0gTWF0aC5tYXgoMiAqIHAsIDUwKSk7CiAgICAgICAgICAgICAgICB2YXIgZyA9IHRoaXMuY29uZmlnLm1pbmltdW1ab29tVG9EaXN0YW5jZSB8fCA1OwogICAgICAgICAgICAgICAgYyA9IG5bMV1bMF0gLSBuWzBdWzBdLCB1ID0gblsxXVsxXSAtIG5bMF1bMV0sIGYgPSBuWzFdWzJdIC0gblswXVsyXSwgKHAgPSBNYXRoLnNxcnQoYyAqIGMgKyB1ICogdSArIGYgKiBmKSkgPCBnICYmIChwID0gZyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB2ID0gZyAqIGcsIF8gPSAwOyBfIDwgcy5sZW5ndGg7IF8rKykgaWYgKHNbX10pIHsKICAgICAgICAgICAgICAgICAgdmFyIHkgPSBoLmRpc3RhbmNlVG9TcXVhcmVkKHNbX10pOwogICAgICAgICAgICAgICAgICB5ID4gdiAmJiAodiA9IHkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcCA9IDIgKiBNYXRoLnNxcnQodik7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGguY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSksCiAgICAgICAgICAgICAgICAgIHcgPSAtKC41ICogcCAvIE1hdGgudGFuKE1hdGguUEkgLyAxODAgKiB0aGlzLmNhbWVyYS5mb3YgLyAyKSAtIHRoaXMuQ0FNRVJBX1opOwogICAgICAgICAgICAgICAgcmV0dXJuIHcgPSB0aGlzLmFkanVzdFpvb21Ub0xpbWl0cyh3KSwgdCA+IDAgPyB0aGlzLmFuaW1hdGVNb3Rpb24odCwgciwgYiwgdywgdGhpcy5yb3RhdGlvbkdyb3VwLnF1YXRlcm5pb24sIHRoaXMubG9va2luZ0F0KSA6ICh0aGlzLm1vZGVsR3JvdXAucG9zaXRpb24gPSBiLCB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiA9IHcsIHRoaXMuc2hvdygpKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRTbGFiIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2xhYihlLCB0KSB7CiAgICAgICAgICAgICAgICB0aGlzLnNsYWJOZWFyID0gZSwgdGhpcy5zbGFiRmFyID0gdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRTbGFiIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2xhYigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIG5lYXI6IHRoaXMuc2xhYk5lYXIsCiAgICAgICAgICAgICAgICAgIGZhcjogdGhpcy5zbGFiRmFyCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZExhYmVsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGFiZWwoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAhMTsKICAgICAgICAgICAgICAgIGlmIChyKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhID0gKDAsIG8uZ2V0RXh0ZW50KSh0aGlzLmdldEF0b21zRnJvbVNlbChyKSk7CiAgICAgICAgICAgICAgICAgIHQucG9zaXRpb24gPSB7CiAgICAgICAgICAgICAgICAgICAgeDogYVsyXVswXSwKICAgICAgICAgICAgICAgICAgICB5OiBhWzJdWzFdLAogICAgICAgICAgICAgICAgICAgIHo6IGFbMl1bMl0KICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IGMuTGFiZWwoZSwgdCk7CiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZXRDb250ZXh0KCksIHRoaXMubW9kZWxHcm91cC5hZGQobi5zcHJpdGUpLCB0aGlzLmxhYmVscy5wdXNoKG4pLCBzIHx8IHRoaXMuc2hvdygpLCBuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZFJlc0xhYmVscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc0xhYmVscyhlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogITE7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMubGFiZWxzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VG9Nb2RlbHMoImFkZFJlc0xhYmVscyIsIGUsIHRoaXMsIHQsIHIpLCB0aGlzLnNob3coKSwgdGhpcy5sYWJlbHMuc2xpY2Uocyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkUHJvcGVydHlMYWJlbHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQcm9wZXJ0eUxhYmVscyhlLCB0LCByKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRvTW9kZWxzKCJhZGRQcm9wZXJ0eUxhYmVscyIsIGUsIHQsIHRoaXMsIHIpLCB0aGlzLnNob3coKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW1vdmVMYWJlbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5sYWJlbHMubGVuZ3RoOyB0KyspIGlmICh0aGlzLmxhYmVsc1t0XSA9PSBlKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnNwbGljZSh0LCAxKSwgZS5kaXNwb3NlKCksIHRoaXMubW9kZWxHcm91cC5yZW1vdmUoZS5zcHJpdGUpOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3coKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW1vdmVBbGxMYWJlbHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxMYWJlbHMoKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMubGFiZWxzLmxlbmd0aDsgZSsrKSB0aGlzLmxhYmVsc1tlXSAmJiB0aGlzLmxhYmVsc1tlXS5zcHJpdGUgJiYgdGhpcy5tb2RlbEdyb3VwLnJlbW92ZSh0aGlzLmxhYmVsc1tlXS5zcHJpdGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxzLnNwbGljZSgwLCB0aGlzLmxhYmVscy5sZW5ndGgpLCB0aGlzLnNob3coKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRMYWJlbFN0eWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGFiZWxTdHlsZShlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbEdyb3VwLnJlbW92ZShlLnNwcml0ZSksIGUuZGlzcG9zZSgpLCBlLnN0eWxlc3BlYyA9IHQsIGUuc2V0Q29udGV4dCgpLCB0aGlzLm1vZGVsR3JvdXAuYWRkKGUuc3ByaXRlKSwgdGhpcy5zaG93KCksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0TGFiZWxUZXh0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGFiZWxUZXh0KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsR3JvdXAucmVtb3ZlKGUuc3ByaXRlKSwgZS5kaXNwb3NlKCksIGUudGV4dCA9IHQsIGUuc2V0Q29udGV4dCgpLCB0aGlzLm1vZGVsR3JvdXAuYWRkKGUuc3ByaXRlKSwgdGhpcy5zaG93KCksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkU2hhcGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTaGFwZShlKSB7CiAgICAgICAgICAgICAgICBlID0gZSB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IHUuR0xTaGFwZShlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0LnNoYXBlUG9zaXRpb24gPSB0aGlzLnNoYXBlcy5sZW5ndGgsIHRoaXMuc2hhcGVzLnB1c2godCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlU2hhcGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTaGFwZShlKSB7CiAgICAgICAgICAgICAgICBpZiAoIWUpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgZm9yIChlLnJlbW92ZWdsKHRoaXMubW9kZWxHcm91cCksIGRlbGV0ZSB0aGlzLnNoYXBlc1tlLnNoYXBlUG9zaXRpb25dOyB0aGlzLnNoYXBlcy5sZW5ndGggPiAwICYmIHZvaWQgMCA9PT0gdGhpcy5zaGFwZXNbdGhpcy5zaGFwZXMubGVuZ3RoIC0gMV07KSB0aGlzLnNoYXBlcy5wb3AoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZUFsbFNoYXBlcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbFNoYXBlcygpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgdGhpcy5zaGFwZXMubGVuZ3RoOyBlKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnNoYXBlc1tlXTsKICAgICAgICAgICAgICAgICAgdCAmJiB0LnJlbW92ZWdsKHRoaXMubW9kZWxHcm91cCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFwZXMuc3BsaWNlKDAsIHRoaXMuc2hhcGVzLmxlbmd0aCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0U2VsZWN0aW9uQ2VudGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0aW9uQ2VudGVyKGUpIHsKICAgICAgICAgICAgICAgIGlmIChlLmhhc093blByb3BlcnR5KCJ4IikgJiYgZS5oYXNPd25Qcm9wZXJ0eSgieSIpICYmIGUuaGFzT3duUHJvcGVydHkoInoiKSkgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuZ2V0QXRvbXNGcm9tU2VsKGUpOwogICAgICAgICAgICAgICAgaWYgKDAgPT0gdC5sZW5ndGgpIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgciA9ICgwLCBvLmdldEV4dGVudCkodCk7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB4OiByWzBdWzBdICsgKHJbMV1bMF0gLSByWzBdWzBdKSAvIDIsCiAgICAgICAgICAgICAgICAgIHk6IHJbMF1bMV0gKyAoclsxXVsxXSAtIHJbMF1bMV0pIC8gMiwKICAgICAgICAgICAgICAgICAgejogclswXVsyXSArIChyWzFdWzJdIC0gclswXVsyXSkgLyAyCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZFNwaGVyZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNwaGVyZShlKSB7CiAgICAgICAgICAgICAgICAoZSA9IGUgfHwge30pLmNlbnRlciA9IHRoaXMuZ2V0U2VsZWN0aW9uQ2VudGVyKGUuY2VudGVyKTsKICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IHUuR0xTaGFwZShlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0LnNoYXBlUG9zaXRpb24gPSB0aGlzLnNoYXBlcy5sZW5ndGgsIHQuYWRkU3BoZXJlKGUpLCB0aGlzLnNoYXBlcy5wdXNoKHQpLCB0LmZpbmFsaXplKCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkQm94IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQm94KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICAgICAgICAgICAgbnVsbCAhPSBlLmNvcm5lciAmJiAoZS5jb3JuZXIgPSB0aGlzLmdldFNlbGVjdGlvbkNlbnRlcihlLmNvcm5lcikpLCBudWxsICE9IGUuY2VudGVyICYmIChlLmNlbnRlciA9IHRoaXMuZ2V0U2VsZWN0aW9uQ2VudGVyKGUuY2VudGVyKSk7CiAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyB1LkdMU2hhcGUoZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdC5zaGFwZVBvc2l0aW9uID0gdGhpcy5zaGFwZXMubGVuZ3RoLCB0LmFkZEJveChlKSwgdGhpcy5zaGFwZXMucHVzaCh0KSwgdC5maW5hbGl6ZSgpLCB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEFycm93IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQXJyb3coKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgICAgICAgICAgICBlLnN0YXJ0ID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5zdGFydCksIGUuZW5kID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5lbmQpOwogICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgdS5HTFNoYXBlKGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgdC5hZGRBcnJvdyhlKSwgdGhpcy5zaGFwZXMucHVzaCh0KSwgdC5maW5hbGl6ZSgpLCB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEN5bGluZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ3lsaW5kZXIoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgICAgICAgICAgICBlLnN0YXJ0ID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5zdGFydCksIGUuZW5kID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5lbmQpOwogICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgdS5HTFNoYXBlKGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgZS5kYXNoZWQgPyB0LmFkZERhc2hlZEN5bGluZGVyKGUpIDogdC5hZGRDeWxpbmRlcihlKSwgdGhpcy5zaGFwZXMucHVzaCh0KSwgdC5maW5hbGl6ZSgpLCB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZEN1cnZlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ3VydmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyB1LkdMU2hhcGUoZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdC5zaGFwZVBvc2l0aW9uID0gdGhpcy5zaGFwZXMubGVuZ3RoLCB0LmFkZEN1cnZlKGUpLCB0aGlzLnNoYXBlcy5wdXNoKHQpLCB0LmZpbmFsaXplKCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkTGluZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgICAgICAgICAgICBlLnN0YXJ0ID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5zdGFydCksIGUuZW5kID0gdGhpcy5nZXRTZWxlY3Rpb25DZW50ZXIoZS5lbmQpLCBlLndpcmVmcmFtZSA9ICEwOwogICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgdS5HTFNoYXBlKGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgZS5kYXNoZWQgPyB0ID0gdGhpcy5hZGRMaW5lRGFzaGVkKGUsIHQpIDogdC5hZGRMaW5lKGUpLCB0aGlzLnNoYXBlcy5wdXNoKHQpLCB0LmZpbmFsaXplKCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkVW5pdENlbGwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRVbml0Q2VsbChlLCB0KSB7CiAgICAgICAgICAgICAgICBlID0gdGhpcy5nZXRNb2RlbChlKSwgKHQgPSB0IHx8IHsKICAgICAgICAgICAgICAgICAgYWxhYmVsOiAiYSIsCiAgICAgICAgICAgICAgICAgIGJsYWJlbDogImIiLAogICAgICAgICAgICAgICAgICBjbGFiZWw6ICJjIgogICAgICAgICAgICAgICAgfSkuYm94ID0gdC5ib3ggfHwge30sIHQuYXN0eWxlID0gdC5hc3R5bGUgfHwgewogICAgICAgICAgICAgICAgICBjb2xvcjogInJlZCIsCiAgICAgICAgICAgICAgICAgIHJhZGl1czogLjEsCiAgICAgICAgICAgICAgICAgIG1pZHBvczogLTEKICAgICAgICAgICAgICAgIH0sIHQuYnN0eWxlID0gdC5ic3R5bGUgfHwgewogICAgICAgICAgICAgICAgICBjb2xvcjogImdyZWVuIiwKICAgICAgICAgICAgICAgICAgcmFkaXVzOiAuMSwKICAgICAgICAgICAgICAgICAgbWlkcG9zOiAtMQogICAgICAgICAgICAgICAgfSwgdC5jc3R5bGUgPSB0LmNzdHlsZSB8fCB7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAiYmx1ZSIsCiAgICAgICAgICAgICAgICAgIHJhZGl1czogLjEsCiAgICAgICAgICAgICAgICAgIG1pZHBvczogLTEKICAgICAgICAgICAgICAgIH0sIHQuYWxhYmVsc3R5bGUgPSB0LmFsYWJlbHN0eWxlIHx8IHsKICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiAicmVkIiwKICAgICAgICAgICAgICAgICAgc2hvd0JhY2tncm91bmQ6ICExLAogICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6ICJjZW50ZXIiLAogICAgICAgICAgICAgICAgICBpbkZyb250OiAhMQogICAgICAgICAgICAgICAgfSwgdC5ibGFiZWxzdHlsZSA9IHQuYmxhYmVsc3R5bGUgfHwgewogICAgICAgICAgICAgICAgICBmb250Q29sb3I6ICJncmVlbiIsCiAgICAgICAgICAgICAgICAgIHNob3dCYWNrZ3JvdW5kOiAhMSwKICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgaW5Gcm9udDogITEKICAgICAgICAgICAgICAgIH0sIHQuY2xhYmVsc3R5bGUgPSB0LmNsYWJlbHN0eWxlIHx8IHsKICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiAiYmx1ZSIsCiAgICAgICAgICAgICAgICAgIHNob3dCYWNrZ3JvdW5kOiAhMSwKICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgaW5Gcm9udDogITEKICAgICAgICAgICAgICAgIH0sIGUudW5pdENlbGxPYmplY3RzICYmIHRoaXMucmVtb3ZlVW5pdENlbGwoZSksIGUudW5pdENlbGxPYmplY3RzID0gewogICAgICAgICAgICAgICAgICBzaGFwZXM6IFtdLAogICAgICAgICAgICAgICAgICBsYWJlbHM6IFtdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIHIgPSBlLmdldENyeXN0RGF0YSgpLAogICAgICAgICAgICAgICAgICBzID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmIChyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyLm1hdHJpeCkgcyA9IHIubWF0cml4O2Vsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgICAgICAgICBoID0gci5hLAogICAgICAgICAgICAgICAgICAgICAgYyA9IHIuYiwKICAgICAgICAgICAgICAgICAgICAgIGYgPSByLmMsCiAgICAgICAgICAgICAgICAgICAgICBwID0gci5hbHBoYSwKICAgICAgICAgICAgICAgICAgICAgIGcgPSByLmJldGEsCiAgICAgICAgICAgICAgICAgICAgICB2ID0gci5nYW1tYTsKICAgICAgICAgICAgICAgICAgICBwID0gcCAqIE1hdGguUEkgLyAxODAsIGcgPSBnICogTWF0aC5QSSAvIDE4MCwgdiA9IHYgKiBNYXRoLlBJIC8gMTgwLCBuID0gTWF0aC5jb3MoZyksIG8gPSAoTWF0aC5jb3MocCkgLSBNYXRoLmNvcyhnKSAqIE1hdGguY29zKHYpKSAvIE1hdGguc2luKHYpLCBsID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDEgLSBuICogbiAtIG8gKiBvKSksIHMgPSBuZXcgYS5NYXRyaXgzKGgsIGMgKiBNYXRoLmNvcyh2KSwgZiAqIG4sIDAsIGMgKiBNYXRoLnNpbih2KSwgZiAqIG8sIDAsIDAsIGYgKiBsKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB2YXIgXyA9IFtuZXcgYS5WZWN0b3IzKDAsIDAsIDApLCBuZXcgYS5WZWN0b3IzKDEsIDAsIDApLCBuZXcgYS5WZWN0b3IzKDAsIDEsIDApLCBuZXcgYS5WZWN0b3IzKDAsIDAsIDEpLCBuZXcgYS5WZWN0b3IzKDEsIDEsIDApLCBuZXcgYS5WZWN0b3IzKDAsIDEsIDEpLCBuZXcgYS5WZWN0b3IzKDEsIDAsIDEpLCBuZXcgYS5WZWN0b3IzKDEsIDEsIDEpXTsKICAgICAgICAgICAgICAgICAgaWYgKHIubWF0cml4NCkgZm9yICh2YXIgX2U1NyA9IDA7IF9lNTcgPCBfLmxlbmd0aDsgX2U1NysrKSByLnNpemUgJiYgX1tfZTU3XS5tdWx0aXBseVZlY3RvcnMoX1tfZTU3XSwgci5zaXplKSwgX1tfZTU3XSA9IF9bX2U1N10uYXBwbHlNYXRyaXg0KHIubWF0cml4NCk7ZWxzZSBmb3IgKHZhciBfZTU4ID0gMDsgX2U1OCA8IF8ubGVuZ3RoOyBfZTU4KyspIF9bX2U1OF0gPSBfW19lNThdLmFwcGx5TWF0cml4MyhzKTsKICAgICAgICAgICAgICAgICAgaWYgKHQuYm94ICYmICF0LmJveC5oaWRkZW4pIHsKICAgICAgICAgICAgICAgICAgICB0LmJveC53aXJlZnJhbWUgPSAhMDsKICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG5ldyB1LkdMU2hhcGUodC5ib3gpOwogICAgICAgICAgICAgICAgICAgIHkuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgeS5hZGRMaW5lKHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBfWzBdLAogICAgICAgICAgICAgICAgICAgICAgZW5kOiBfWzFdCiAgICAgICAgICAgICAgICAgICAgfSksIHkuYWRkTGluZSh7CiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogX1swXSwKICAgICAgICAgICAgICAgICAgICAgIGVuZDogX1syXQogICAgICAgICAgICAgICAgICAgIH0pLCB5LmFkZExpbmUoewogICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9bMV0sCiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IF9bNF0KICAgICAgICAgICAgICAgICAgICB9KSwgeS5hZGRMaW5lKHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBfWzJdLAogICAgICAgICAgICAgICAgICAgICAgZW5kOiBfWzRdCiAgICAgICAgICAgICAgICAgICAgfSksIHkuYWRkTGluZSh7CiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogX1swXSwKICAgICAgICAgICAgICAgICAgICAgIGVuZDogX1szXQogICAgICAgICAgICAgICAgICAgIH0pLCB5LmFkZExpbmUoewogICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9bM10sCiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IF9bNV0KICAgICAgICAgICAgICAgICAgICB9KSwgeS5hZGRMaW5lKHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBfWzJdLAogICAgICAgICAgICAgICAgICAgICAgZW5kOiBfWzVdCiAgICAgICAgICAgICAgICAgICAgfSksIHkuYWRkTGluZSh7CiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogX1sxXSwKICAgICAgICAgICAgICAgICAgICAgIGVuZDogX1s2XQogICAgICAgICAgICAgICAgICAgIH0pLCB5LmFkZExpbmUoewogICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9bNF0sCiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IF9bN10KICAgICAgICAgICAgICAgICAgICB9KSwgeS5hZGRMaW5lKHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBfWzZdLAogICAgICAgICAgICAgICAgICAgICAgZW5kOiBfWzddCiAgICAgICAgICAgICAgICAgICAgfSksIHkuYWRkTGluZSh7CiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogX1szXSwKICAgICAgICAgICAgICAgICAgICAgIGVuZDogX1s2XQogICAgICAgICAgICAgICAgICAgIH0pLCB5LmFkZExpbmUoewogICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9bNV0sCiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IF9bN10KICAgICAgICAgICAgICAgICAgICB9KSwgdGhpcy5zaGFwZXMucHVzaCh5KSwgZS51bml0Q2VsbE9iamVjdHMuc2hhcGVzLnB1c2goeSksIHkuZmluYWxpemUoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoIXQuYXN0eWxlLmhpZGRlbikgewogICAgICAgICAgICAgICAgICAgIHQuYXN0eWxlLnN0YXJ0ID0gX1swXSwgdC5hc3R5bGUuZW5kID0gX1sxXTsKICAgICAgICAgICAgICAgICAgICB2YXIgX3IyMyA9IHRoaXMuYWRkQXJyb3codC5hc3R5bGUpOwogICAgICAgICAgICAgICAgICAgIGUudW5pdENlbGxPYmplY3RzLnNoYXBlcy5wdXNoKF9yMjMpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICghdC5ic3R5bGUuaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdC5ic3R5bGUuc3RhcnQgPSBfWzBdLCB0LmJzdHlsZS5lbmQgPSBfWzJdOwogICAgICAgICAgICAgICAgICAgIHZhciBfcjI0ID0gdGhpcy5hZGRBcnJvdyh0LmJzdHlsZSk7CiAgICAgICAgICAgICAgICAgICAgZS51bml0Q2VsbE9iamVjdHMuc2hhcGVzLnB1c2goX3IyNCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCF0LmNzdHlsZS5oaWRkZW4pIHsKICAgICAgICAgICAgICAgICAgICB0LmNzdHlsZS5zdGFydCA9IF9bMF0sIHQuY3N0eWxlLmVuZCA9IF9bM107CiAgICAgICAgICAgICAgICAgICAgdmFyIF9yMjUgPSB0aGlzLmFkZEFycm93KHQuY3N0eWxlKTsKICAgICAgICAgICAgICAgICAgICBlLnVuaXRDZWxsT2JqZWN0cy5zaGFwZXMucHVzaChfcjI1KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAodC5hbGFiZWwpIHsKICAgICAgICAgICAgICAgICAgICB0LmFsYWJlbHN0eWxlLnBvc2l0aW9uID0gX1sxXTsKICAgICAgICAgICAgICAgICAgICB2YXIgX3IyNiA9IHRoaXMuYWRkTGFiZWwodC5hbGFiZWwsIHQuYWxhYmVsc3R5bGUpOwogICAgICAgICAgICAgICAgICAgIGUudW5pdENlbGxPYmplY3RzLmxhYmVscy5wdXNoKF9yMjYpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICh0LmJsYWJlbCkgewogICAgICAgICAgICAgICAgICAgIHQuYmxhYmVsc3R5bGUucG9zaXRpb24gPSBfWzJdOwogICAgICAgICAgICAgICAgICAgIHZhciBfcjI3ID0gdGhpcy5hZGRMYWJlbCh0LmJsYWJlbCwgdC5ibGFiZWxzdHlsZSk7CiAgICAgICAgICAgICAgICAgICAgZS51bml0Q2VsbE9iamVjdHMubGFiZWxzLnB1c2goX3IyNyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHQuY2xhYmVsKSB7CiAgICAgICAgICAgICAgICAgICAgdC5jbGFiZWxzdHlsZS5wb3NpdGlvbiA9IF9bM107CiAgICAgICAgICAgICAgICAgICAgdmFyIF9yMjggPSB0aGlzLmFkZExhYmVsKHQuY2xhYmVsLCB0LmNsYWJlbHN0eWxlKTsKICAgICAgICAgICAgICAgICAgICBlLnVuaXRDZWxsT2JqZWN0cy5sYWJlbHMucHVzaChfcjI4KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZVVuaXRDZWxsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlVW5pdENlbGwoZSkgewogICAgICAgICAgICAgICAgaWYgKChlID0gdGhpcy5nZXRNb2RlbChlKSkudW5pdENlbGxPYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDQ3ID0gdGhpczsKICAgICAgICAgICAgICAgICAgZS51bml0Q2VsbE9iamVjdHMuc2hhcGVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBfdDQ3LnJlbW92ZVNoYXBlKGUpOwogICAgICAgICAgICAgICAgICB9KSwgZS51bml0Q2VsbE9iamVjdHMubGFiZWxzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBfdDQ3LnJlbW92ZUxhYmVsKGUpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlbGV0ZSBlLnVuaXRDZWxsT2JqZWN0czsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZXBsaWNhdGVVbml0Q2VsbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxpY2F0ZVVuaXRDZWxsKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDM7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZTsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0OwogICAgICAgICAgICAgICAgdmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB2YXIgbyA9IChzID0gdGhpcy5nZXRNb2RlbChzKSkuZ2V0Q3J5c3REYXRhKCk7CiAgICAgICAgICAgICAgICBpZiAobykgewogICAgICAgICAgICAgICAgICB2YXIgX2w2ID0gcy5zZWxlY3RlZEF0b21zKHt9KSwKICAgICAgICAgICAgICAgICAgICBfaDcgPSBvLm1hdHJpeDsKICAgICAgICAgICAgICAgICAgdmFyIF9jNCA9IGZ1bmN0aW9uIF9jNChlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgJSAyID09IDAgPyAtZSAvIDIgOiBNYXRoLmNlaWwoZSAvIDIpOwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbjExID0gMDsgX24xMSA8IGU7IF9uMTErKykgZm9yICh2YXIgX2U1OSA9IDA7IF9lNTkgPCB0OyBfZTU5KyspIGZvciAodmFyIF90NDggPSAwOyBfdDQ4IDwgcjsgX3Q0OCsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gX24xMSAmJiAwID09IF9lNTkgJiYgMCA9PSBfdDQ4KSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgX3IyOSA9IG5ldyBhLlZlY3RvcjMoX2M0KF9uMTEpLCBfYzQoX2U1OSksIF9jNChfdDQ4KSk7CiAgICAgICAgICAgICAgICAgICAgX3IyOS5hcHBseU1hdHJpeDMoX2g3KTsKICAgICAgICAgICAgICAgICAgICB2YXIgX285ID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U2MCA9IDA7IF9lNjAgPCBfbDYubGVuZ3RoOyBfZTYwKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfdDQ5ID0ge307CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcjMwIGluIF9sNltfZTYwXSkgX3Q0OVtfcjMwXSA9IF9sNltfZTYwXVtfcjMwXTsKICAgICAgICAgICAgICAgICAgICAgIF90NDkueCArPSBfcjI5LngsIF90NDkueSArPSBfcjI5LnksIF90NDkueiArPSBfcjI5LnosIF9vOS5wdXNoKF90NDkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBzLmFkZEF0b21zKF9vOSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgbiAmJiBzLmFzc2lnbkJvbmRzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkTGluZURhc2hlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpbmVEYXNoZWQoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIsIHM7CiAgICAgICAgICAgICAgICBlLmRhc2hMZW5ndGggPSBlLmRhc2hMZW5ndGggfHwgLjUsIGUuZ2FwTGVuZ3RoID0gZS5nYXBMZW5ndGggfHwgLjUsIHIgPSBlLnN0YXJ0ID8gbmV3IGEuVmVjdG9yMyhlLnN0YXJ0LnggfHwgMCwgZS5zdGFydC55IHx8IDAsIGUuc3RhcnQueiB8fCAwKSA6IG5ldyBhLlZlY3RvcjMoMCwgMCwgMCksIHMgPSBlLmVuZCA/IG5ldyBhLlZlY3RvcjMoZS5lbmQueCwgZS5lbmQueSB8fCAwLCBlLmVuZC56IHx8IDApIDogbmV3IGEuVmVjdG9yMygwLCAwLCAwKTsKICAgICAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgICBoID0gbmV3IGEuVmVjdG9yMygpLAogICAgICAgICAgICAgICAgICBjID0gbmV3IGEuVmVjdG9yMygpLAogICAgICAgICAgICAgICAgICB1ID0gbmV3IGEuVmVjdG9yMygpLAogICAgICAgICAgICAgICAgICBmID0gci5jbG9uZSgpLAogICAgICAgICAgICAgICAgICBwID0gMDsKICAgICAgICAgICAgICAgIGZvciAoaC5zdWJWZWN0b3JzKHMsIHIpLCBuID0gaC5sZW5ndGgoKSwgaC5ub3JtYWxpemUoKSwgYyA9IGguY2xvbmUoKSwgdSA9IGguY2xvbmUoKSwgYy5tdWx0aXBseVNjYWxhcihlLmRhc2hMZW5ndGgpLCB1Lm11bHRpcGx5U2NhbGFyKGUuZ2FwTGVuZ3RoKSwgbyA9IGMubGVuZ3RoKCksIGwgPSB1Lmxlbmd0aCgpOyBwIDwgbjspIHsKICAgICAgICAgICAgICAgICAgaWYgKHAgKyBvID4gbikgewogICAgICAgICAgICAgICAgICAgIGUuc3RhcnQgPSByLCBlLmVuZCA9IHMsIHQuYWRkTGluZShlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmLmFkZFZlY3RvcnMociwgYyksIGUuc3RhcnQgPSByLCBlLmVuZCA9IGYsIHQuYWRkTGluZShlKSwgciA9IGYuY2xvbmUoKSwgcCArPSBvLCBmLmFkZFZlY3RvcnMociwgdSksIHIgPSBmLmNsb25lKCksIHAgKz0gbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0LmZpbmFsaXplKCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkQ3VzdG9tIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ3VzdG9tKGUpIHsKICAgICAgICAgICAgICAgIGUgPSBlIHx8IHt9OwogICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgdS5HTFNoYXBlKGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgdC5hZGRDdXN0b20oZSksIHRoaXMuc2hhcGVzLnB1c2godCksIHQuZmluYWxpemUoKSwgdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRWb2x1bWV0cmljRGF0YSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFZvbHVtZXRyaWNEYXRhKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IGYuVm9sdW1lRGF0YShlLCB0KTsKICAgICAgICAgICAgICAgIHJldHVybiByLmhhc093blByb3BlcnR5KCJ0cmFuc2ZlcmZuIikgPyB0aGlzLmFkZFZvbHVtZXRyaWNSZW5kZXIocywgcikgOiB0aGlzLmFkZElzb3N1cmZhY2Uocywgcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkSXNvc3VyZmFjZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZElzb3N1cmZhY2UoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IHUuR0xTaGFwZSh0KTsKICAgICAgICAgICAgICAgIHJldHVybiBzLnNoYXBlUG9zaXRpb24gPSB0aGlzLnNoYXBlcy5sZW5ndGgsIHMuYWRkSXNvc3VyZmFjZShlLCB0LCByKSwgdGhpcy5zaGFwZXMucHVzaChzKSwgczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRWb2x1bWV0cmljUmVuZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVm9sdW1ldHJpY1JlbmRlcihlLCB0KSB7CiAgICAgICAgICAgICAgICB0ID0gdCB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciByID0gbmV3IGcuR0xWb2x1bWV0cmljUmVuZGVyKGUsIHQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHIuc2hhcGVQb3NpdGlvbiA9IHRoaXMuc2hhcGVzLmxlbmd0aCwgdGhpcy5zaGFwZXMucHVzaChyKSwgcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJoYXNWb2x1bWV0cmljUmVuZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFzVm9sdW1ldHJpY1JlbmRlcigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnN1cHBvcnRzVm9sdW1ldHJpYygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImVuYWJsZUZvZyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUZvZyhlKSB7CiAgICAgICAgICAgICAgICBlID8gdGhpcy5zY2VuZS5mb2cgPSBuZXcgcy5Gb2codGhpcy5iZ0NvbG9yLCAxMDAsIDIwMCkgOiAodGhpcy5jb25maWcuZGlzYWJsZUZvZyA9ICEwLCB0aGlzLnNob3coKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0RnJhbWUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGcmFtZShlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlcl9mcmFtZSA9IGU7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0Lm1vZGVscy5tYXAoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5zZXRGcmFtZShlLCB0KTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKHMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHIoKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRGcmFtZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZyYW1lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld2VyX2ZyYW1lOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE51bUZyYW1lcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE51bUZyYW1lcygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIF90NTAgPSAwOyBfdDUwIDwgdGhpcy5tb2RlbHMubGVuZ3RoOyBfdDUwKyspIHRoaXMubW9kZWxzW190NTBdLmdldE51bUZyYW1lcygpID4gZSAmJiAoZSA9IHRoaXMubW9kZWxzW190NTBdLmdldE51bUZyYW1lcygpKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF90NTEgPSAwOyBfdDUxIDwgdGhpcy5zaGFwZXMubGVuZ3RoOyBfdDUxKyspIHRoaXMuc2hhcGVzW190NTFdLmZyYW1lICYmIHRoaXMuc2hhcGVzW190NTFdLmZyYW1lID49IGUgJiYgKGUgPSB0aGlzLnNoYXBlc1tfdDUxXS5mcmFtZSArIDEpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3Q1MiA9IDA7IF90NTIgPCB0aGlzLmxhYmVscy5sZW5ndGg7IF90NTIrKykgdGhpcy5sYWJlbHNbX3Q1Ml0uZnJhbWUgJiYgdGhpcy5sYWJlbHNbX3Q1Ml0uZnJhbWUgPj0gZSAmJiAoZSA9IHRoaXMubGFiZWxzW190NTJdLmZyYW1lICsgMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhbmltYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZShlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmluY0FuaW0oKTsKICAgICAgICAgICAgICAgIHZhciB0ID0gMTAwLAogICAgICAgICAgICAgICAgICByID0gImZvcndhcmQiLAogICAgICAgICAgICAgICAgICBzID0gMDsKICAgICAgICAgICAgICAgIChlID0gZSB8fCB7fSkuaW50ZXJ2YWwgJiYgKHQgPSBlLmludGVydmFsKSwgZS5sb29wICYmIChyID0gZS5sb29wKSwgZS5yZXBzICYmIChzID0gZS5yZXBzKTsKICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5nZXROdW1GcmFtZXMoKSwKICAgICAgICAgICAgICAgICAgbiA9IHRoaXMsCiAgICAgICAgICAgICAgICAgIGwgPSAwOwogICAgICAgICAgICAgICAgZS5zdGFydEZyYW1lICYmIChsID0gZS5zdGFydEZyYW1lICUgYSk7CiAgICAgICAgICAgICAgICB2YXIgaCA9IDE7CiAgICAgICAgICAgICAgICBlLnN0ZXAgJiYgKHMgLz0gaCA9IGUuc3RlcCk7CiAgICAgICAgICAgICAgICB2YXIgYywKICAgICAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICAgICAgZiA9IDAsCiAgICAgICAgICAgICAgICAgIHAgPSBhICogcywKICAgICAgICAgICAgICAgICAgZyA9IG5ldyBEYXRlKCksCiAgICAgICAgICAgICAgICAgIHYgPSBmdW5jdGlvbiB2KGUpIHsKICAgICAgICAgICAgICAgICAgICBnID0gbmV3IERhdGUoKSwgImZvcndhcmQiID09IGUgPyBuLnNldEZyYW1lKGwpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgbCA9IChsICsgaCkgJSBhLCBjKCk7CiAgICAgICAgICAgICAgICAgICAgfSkgOiAiYmFja3dhcmQiID09IGUgPyBuLnNldEZyYW1lKGEgLSAxIC0gbCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICBsID0gKGwgKyBoKSAlIGEsIGMoKTsKICAgICAgICAgICAgICAgICAgICB9KSA6IG4uc2V0RnJhbWUobCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICBoICo9IChsICs9IGgpICUgKGEgLSAxKSA9PSAwID8gLTEgOiAxLCBjKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gYyA9IGZ1bmN0aW9uIGMoKSB7CiAgICAgICAgICAgICAgICAgIGlmIChuLnJlbmRlcigpLCBuLmdldENhbnZhcygpLmlzQ29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCsrZiAhPSBwICYmIG4uaXNBbmltYXRlZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQgLSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBnLmdldFRpbWUoKSk7CiAgICAgICAgICAgICAgICAgICAgICBlID0gZSA+IDAgPyBlIDogMCwgbi5hbmltYXRpb25UaW1lcnMuZGVsZXRlKHUpLCB1ID0gbmV3IG8uUGF1c2FibGVUaW1lcih2LCBlLCByKSwgbi5hbmltYXRpb25UaW1lcnMuYWRkKHUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB1LmNhbmNlbCgpLCBuLmFuaW1hdGlvblRpbWVycy5kZWxldGUodSksIG4uZGVjQW5pbSgpOwogICAgICAgICAgICAgICAgICB9IGVsc2Ugbi5zdG9wQW5pbWF0ZSgpOwogICAgICAgICAgICAgICAgfSwgdSA9IG5ldyBvLlBhdXNhYmxlVGltZXIodiwgMCwgciksIHRoaXMuYW5pbWF0aW9uVGltZXJzLmFkZCh1KSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzdG9wQW5pbWF0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BBbmltYXRlKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZWQgPSAwLCB0aGlzLmFuaW1hdGlvblRpbWVycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIGUuY2FuY2VsKCk7CiAgICAgICAgICAgICAgICB9KSwgdGhpcy5hbmltYXRpb25UaW1lcnMgPSBuZXcgU2V0KCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicGF1c2VBbmltYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2VBbmltYXRlKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uVGltZXJzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgZS5wYXVzZSgpOwogICAgICAgICAgICAgICAgfSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVzdW1lQW5pbWF0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUFuaW1hdGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25UaW1lcnMuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICBlLnJlc3VtZSgpOwogICAgICAgICAgICAgICAgfSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaXNBbmltYXRlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQW5pbWF0ZWQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlZCA+IDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkTW9kZWwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb2RlbChlLCB0LCByKSB7CiAgICAgICAgICAgICAgICByICYmICFyLmRlZmF1bHRjb2xvcnMgPyAoci5kZWZhdWx0Y29sb3JzID0gdGhpcy5kZWZhdWx0Y29sb3JzLCByLmNhcnRvb25RdWFsaXR5ID0gci5jYXJ0b29uUXVhbGl0eSB8fCB0aGlzLmNvbmZpZy5jYXJ0b29uUXVhbGl0eSkgOiB2b2lkIDAgPT09IHIgJiYgKHIgPSB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRjb2xvcnM6IHRoaXMuZGVmYXVsdGNvbG9ycywKICAgICAgICAgICAgICAgICAgY2FydG9vblF1YWxpdHk6IHRoaXMuY29uZmlnLmNhcnRvb25RdWFsaXR5CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IGguR0xNb2RlbCh0aGlzLm1vZGVscy5sZW5ndGgsIHIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHMuYWRkTW9sRGF0YShlLCB0LCByKSwgdGhpcy5tb2RlbHMucHVzaChzKSwgczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRNb2RlbHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb2RlbHMoZSwgdCwgcikgewogICAgICAgICAgICAgICAgKHIgPSByIHx8IHt9KS5tdWx0aW1vZGVsID0gITAsIHIuZnJhbWVzID0gITA7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gaC5HTE1vZGVsLnBhcnNlTW9sRGF0YShlLCB0LCByKSwgYSA9IDA7IGEgPCBzLmxlbmd0aDsgYSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IGguR0xNb2RlbCh0aGlzLm1vZGVscy5sZW5ndGgsIHRoaXMuZGVmYXVsdGNvbG9ycyk7CiAgICAgICAgICAgICAgICAgIG4uc2V0QXRvbURlZmF1bHRzKHNbYV0pLCBuLmFkZEZyYW1lKHNbYV0pLCBuLnNldEZyYW1lKDApLCBzLm1vZGVsRGF0YSAmJiBuLnNldE1vZGVsRGF0YShzLm1vZGVsRGF0YVthXSksIG4uc2V0RG9udER1cGxpY2F0ZUF0b21zKCFyLmR1cGxpY2F0ZUFzc2VtYmx5QXRvbXMpLCB0aGlzLm1vZGVscy5wdXNoKG4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZE1vZGVsc0FzRnJhbWVzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTW9kZWxzQXNGcmFtZXMoZSwgdCwgcikgewogICAgICAgICAgICAgICAgKHIgPSByIHx8IHt9KS5tdWx0aW1vZGVsID0gITAsIHIuZnJhbWVzID0gITA7CiAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyBoLkdMTW9kZWwodGhpcy5tb2RlbHMubGVuZ3RoLCB0aGlzLmRlZmF1bHRjb2xvcnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHMuYWRkTW9sRGF0YShlLCB0LCByKSwgdGhpcy5tb2RlbHMucHVzaChzKSwgczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRBc09uZU1vbGVjdWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQXNPbmVNb2xlY3VsZShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICAociA9IHIgfHwge30pLm11bHRpbW9kZWwgPSAhMCwgci5vbmVtb2wgPSAhMDsKICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IGguR0xNb2RlbCh0aGlzLm1vZGVscy5sZW5ndGgsIHRoaXMuZGVmYXVsdGNvbG9ycyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcy5hZGRNb2xEYXRhKGUsIHQsIHIpLCB0aGlzLm1vZGVscy5wdXNoKHMpLCBzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZU1vZGVsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTW9kZWwoZSkgewogICAgICAgICAgICAgICAgaWYgKGUgPSB0aGlzLmdldE1vZGVsKGUpKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoZS5yZW1vdmVnbCh0aGlzLm1vZGVsR3JvdXApLCBkZWxldGUgdGhpcy5tb2RlbHNbZS5nZXRJRCgpXTsgdGhpcy5tb2RlbHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgPT09IHRoaXMubW9kZWxzW3RoaXMubW9kZWxzLmxlbmd0aCAtIDFdOykgdGhpcy5tb2RlbHMucG9wKCk7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZUFsbE1vZGVscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbE1vZGVscygpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgdGhpcy5tb2RlbHMubGVuZ3RoOyBlKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm1vZGVsc1tlXTsKICAgICAgICAgICAgICAgICAgdCAmJiB0LnJlbW92ZWdsKHRoaXMubW9kZWxHcm91cCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHMuc3BsaWNlKDAsIHRoaXMubW9kZWxzLmxlbmd0aCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZXhwb3J0SlNPTiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydEpTT04oZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB7fTsKICAgICAgICAgICAgICAgIHJldHVybiByLm0gPSB2b2lkIDAgPT09IHQgPyB0aGlzLm1vZGVscy5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHQudG9DRE9iamVjdChlKTsKICAgICAgICAgICAgICAgIH0pIDogW3RoaXMubW9kZWxzW3RdLnRvQ0RPYmplY3QoKV0sIEpTT04uc3RyaW5naWZ5KHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImV4cG9ydFZSTUwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHBvcnRWUk1MKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm1vZGVsR3JvdXA7CiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5VG9Nb2RlbHMoInJlbW92ZWdsIiwgdGhpcy5tb2RlbEdyb3VwKSwgdGhpcy5tb2RlbEdyb3VwID0gbmV3IHMuT2JqZWN0M0QoKSwgdGhpcy5yZW5kZXIobnVsbCwgewogICAgICAgICAgICAgICAgICBzdXBwb3J0c0ltcG9zdGVyczogITEsCiAgICAgICAgICAgICAgICAgIHN1cHBvcnRzQUlBOiAhMSwKICAgICAgICAgICAgICAgICAgcmVnZW46ICEwCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciB0ID0gIiNWUk1MIFYyLjAgdXRmOFxuIiArIHRoaXMubW9kZWxHcm91cC52cm1sKCkgKyAiXG4iOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUb01vZGVscygicmVtb3ZlZ2wiLCB0aGlzLm1vZGVsR3JvdXApLCB0aGlzLm1vZGVsR3JvdXAgPSBlLCB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNyZWF0ZU1vZGVsRnJvbSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1vZGVsRnJvbShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogITE7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gbmV3IGguR0xNb2RlbCh0aGlzLm1vZGVscy5sZW5ndGgsIHRoaXMuZGVmYXVsdGNvbG9ycyksIHMgPSAwOyBzIDwgdGhpcy5tb2RlbHMubGVuZ3RoOyBzKyspIGlmICh0aGlzLm1vZGVsc1tzXSkgewogICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMubW9kZWxzW3NdLnNlbGVjdGVkQXRvbXMoZSk7CiAgICAgICAgICAgICAgICAgIHIuYWRkQXRvbXMoYSksIHQgJiYgdGhpcy5tb2RlbHNbc10ucmVtb3ZlQXRvbXMoYSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHMucHVzaChyKSwgcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhcHBseVRvTW9kZWxzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlUb01vZGVscyhlLCB0LCByLCBzLCBhLCBuLCBvKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gdGhpcy5nZXRNb2RlbExpc3QodCksIGggPSAwOyBoIDwgbC5sZW5ndGg7IGgrKykgbFtoXVtlXSh0LCByLCBzLCBhLCBuLCBvKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRTdHlsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0eWxlKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgJiYgKHQgPSBlLCBlID0ge30pLCB0aGlzLmFwcGx5VG9Nb2RlbHMoInNldFN0eWxlIiwgZSwgdCwgITEpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZFN0eWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3R5bGUoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IGUsIGUgPSB7fSksIHRoaXMuYXBwbHlUb01vZGVscygic2V0U3R5bGUiLCBlLCB0LCAhMCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q2xpY2thYmxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2xpY2thYmxlKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VG9Nb2RlbHMoInNldENsaWNrYWJsZSIsIGUsIHQsIHIpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEhvdmVyYWJsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhvdmVyYWJsZShlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRvTW9kZWxzKCJzZXRIb3ZlcmFibGUiLCBlLCB0LCByLCBzKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJlbmFibGVDb250ZXh0TWVudSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUNvbnRleHRNZW51KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VG9Nb2RlbHMoImVuYWJsZUNvbnRleHRNZW51IiwgZSwgdCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidmlicmF0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZpYnJhdGUoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUb01vZGVscygidmlicmF0ZSIsIGUsIHQsIHIsIHRoaXMsIHMpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldENvbG9yQnlQcm9wZXJ0eSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbG9yQnlQcm9wZXJ0eShlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRvTW9kZWxzKCJzZXRDb2xvckJ5UHJvcGVydHkiLCBlLCB0LCByLCBzKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRDb2xvckJ5RWxlbWVudCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbG9yQnlFbGVtZW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VG9Nb2RlbHMoInNldENvbG9yQnlFbGVtZW50IiwgZSwgdCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY2FydmVVcEV4dGVudCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhcnZlVXBFeHRlbnQoZSwgdCwgcikgewogICAgICAgICAgICAgICAgdmFyIHMgPSBbXSwKICAgICAgICAgICAgICAgICAgYSA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U2MSA9IDAsIF9yMzEgPSB0Lmxlbmd0aDsgX2U2MSA8IF9yMzE7IF9lNjErKykgYVt0W19lNjFdLmluZGV4XSA9IF9lNjE7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uIG4oZSkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3IzMiA9IDAsIF9zMjEgPSBlLmxlbmd0aDsgX3IzMiA8IF9zMjE7IF9yMzIrKykgZVtfcjMyXS5pbmRleCBpbiBhICYmIHQucHVzaChhW2VbX3IzMl0uaW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbyA9IGZ1bmN0aW9uIG8oZSkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gW107CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbMF0gPSBbZVswXVswXSwgZVswXVsxXSwgZVswXVsyXV0sIHRbMV0gPSBbZVsxXVswXSwgZVsxXVsxXSwgZVsxXVsyXV0sIHQ7CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGwgPSBmdW5jdGlvbiBsKGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoX0dMVmlld2VyLnZvbHVtZShlKSA8IF9HTFZpZXdlci5tYXhWb2x1bWUpIHJldHVybiBbZV07CiAgICAgICAgICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICAgICAgICByID0gZVsxXVswXSAtIGVbMF1bMF0sCiAgICAgICAgICAgICAgICAgICAgICBzID0gZVsxXVsxXSAtIGVbMF1bMV0sCiAgICAgICAgICAgICAgICAgICAgICBhID0gZVsxXVsyXSAtIGVbMF1bMl07CiAgICAgICAgICAgICAgICAgICAgdCA9IHIgPiBzICYmIHIgPiBhID8gMCA6IHMgPiByICYmIHMgPiBhID8gMSA6IDI7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBvKGUpLAogICAgICAgICAgICAgICAgICAgICAgaCA9IG8oZSksCiAgICAgICAgICAgICAgICAgICAgICBjID0gKGVbMV1bdF0gLSBlWzBdW3RdKSAvIDIgKyBlWzBdW3RdOwogICAgICAgICAgICAgICAgICAgIG5bMV1bdF0gPSBjLCBoWzBdW3RdID0gYzsKICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGwobiksCiAgICAgICAgICAgICAgICAgICAgICBmID0gbChoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdS5jb25jYXQoZik7CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGggPSBsKGUpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U2MiA9IDAsIF9hMTQgPSBoLmxlbmd0aDsgX2U2MiA8IF9hMTQ7IF9lNjIrKykgewogICAgICAgICAgICAgICAgICB2YXIgX2ExNSA9IG8oaFtfZTYyXSk7CiAgICAgICAgICAgICAgICAgIF9hMTVbMF1bMF0gLT0gNiwgX2ExNVswXVsxXSAtPSA2LCBfYTE1WzBdWzJdIC09IDYsIF9hMTVbMV1bMF0gKz0gNiwgX2ExNVsxXVsxXSArPSA2LCBfYTE1WzFdWzJdICs9IDY7CiAgICAgICAgICAgICAgICAgIHZhciBfbDcgPSBfR0xWaWV3ZXIuZ2V0QXRvbXNXaXRoaW4odCwgX2ExNSksCiAgICAgICAgICAgICAgICAgICAgX2M1ID0gX0dMVmlld2VyLmdldEF0b21zV2l0aGluKHIsIGhbX2U2Ml0pOwogICAgICAgICAgICAgICAgICBzLnB1c2goewogICAgICAgICAgICAgICAgICAgIGV4dGVudDogaFtfZTYyXSwKICAgICAgICAgICAgICAgICAgICBhdG9tczogbihfbDcpLAogICAgICAgICAgICAgICAgICAgIHRvc2hvdzogbihfYzUpCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkTWVzaCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1lc2goZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB7CiAgICAgICAgICAgICAgICAgICAgZ2VvOiBlLmdlb21ldHJ5LAogICAgICAgICAgICAgICAgICAgIG1hdDogZS5tYXRlcmlhbCwKICAgICAgICAgICAgICAgICAgICBkb25lOiAhMCwKICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZDogITEKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgciA9IHRoaXMubmV4dFN1cmZJRCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VyZmFjZXNbcl0gPSB0LCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZFN1cmZhY2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTdXJmYWNlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB2YXIgaCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBmID0gdGhpcy5uZXh0U3VyZklEKCksCiAgICAgICAgICAgICAgICAgIGcgPSBudWxsLAogICAgICAgICAgICAgICAgICB2ID0gdGhpcywKICAgICAgICAgICAgICAgICAgXyA9IHAuU3VyZmFjZVR5cGUuVkRXOwogICAgICAgICAgICAgICAgInN0cmluZyIgPT0gdHlwZW9mIGUgPyB2b2lkIDAgIT09IF9HTFZpZXdlci5zdXJmYWNlVHlwZU1hcFtlLnRvVXBwZXJDYXNlKCldID8gXyA9IF9HTFZpZXdlci5zdXJmYWNlVHlwZU1hcFtlXSA6IGNvbnNvbGUubG9nKCJTdXJmYWNlIHR5cGUgOiAiICsgZSArICIgaXMgbm90IHJlY29nbml6ZWQiKSA6ICJudW1iZXIiID09IHR5cGVvZiBlICYmIChfID0gZSk7CiAgICAgICAgICAgICAgICB2YXIgeSA9IG51bGwsCiAgICAgICAgICAgICAgICAgIGIgPSBudWxsLAogICAgICAgICAgICAgICAgICB3ID0gX0dMVmlld2VyLnNoYWxsb3dDb3B5KHRoaXMuZ2V0QXRvbXNGcm9tU2VsKHIpKTsKICAgICAgICAgICAgICAgIHkgPSBuID8gX0dMVmlld2VyLnNoYWxsb3dDb3B5KHRoaXMuZ2V0QXRvbXNGcm9tU2VsKG4pKSA6IHcsICgwLCBvLmFkanVzdFZvbHVtZVN0eWxlKSh0KTsKICAgICAgICAgICAgICAgIHZhciB4LAogICAgICAgICAgICAgICAgICBBID0gITE7CiAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgdGhpcy5tb2RlbHMubGVuZ3RoOyB4KyspIGlmICh0aGlzLm1vZGVsc1t4XSkgewogICAgICAgICAgICAgICAgICB2YXIgQyA9IHRoaXMubW9kZWxzW3hdLmdldFN5bW1ldHJpZXMoKTsKICAgICAgICAgICAgICAgICAgaWYgKEMubGVuZ3RoID4gMSB8fCAxID09IEMubGVuZ3RoICYmICFDWzBdLmlzSWRlbnRpdHkoKSkgewogICAgICAgICAgICAgICAgICAgIEEgPSAhMDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIFMgPSBmdW5jdGlvbiBTKGUsIHIsIHMpIHsKICAgICAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgICAgIGIgPSBoID8gX0dMVmlld2VyLnNoYWxsb3dDb3B5KHYuZ2V0QXRvbXNGcm9tU2VsKGgpKSA6IHM7CiAgICAgICAgICAgICAgICAgIHZhciBuID0gKDAsIG8uZ2V0RXh0ZW50KShzLCAhMCk7CiAgICAgICAgICAgICAgICAgIGlmICh0Lm1hcCAmJiB0Lm1hcC5wcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0Lm1hcC5wcm9wOwogICAgICAgICAgICAgICAgICAgIHZhciBfZTYzID0gKDAsIGwuZ2V0R3JhZGllbnQpKHQubWFwLnNjaGVtZSB8fCB0Lm1hcC5ncmFkaWVudCB8fCBuZXcgbC5HcmFkaWVudC5SV0IoKSksCiAgICAgICAgICAgICAgICAgICAgICBfcjMzID0gX2U2My5yYW5nZSgpOwogICAgICAgICAgICAgICAgICAgIF9yMzMgfHwgKF9yMzMgPSAoMCwgby5nZXRQcm9wZXJ0eVJhbmdlKShzLCBjKSksIHQuY29sb3JzY2hlbWUgPSB7CiAgICAgICAgICAgICAgICAgICAgICBwcm9wOiBjLAogICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQ6IF9lNjMKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNjQgPSAwLCBfczIyID0gci5sZW5ndGg7IF9lNjQgPCBfczIyOyBfZTY0KyspIChhID0gcltfZTY0XSkuc3VyZmFjZUNvbG9yID0gKDAsIG8uZ2V0Q29sb3JGcm9tU3R5bGUpKGEsIHQpOwogICAgICAgICAgICAgICAgICB2YXIgeSA9IF9HTFZpZXdlci52b2x1bWUobiksCiAgICAgICAgICAgICAgICAgICAgdyA9IHYuY2FydmVVcEV4dGVudChuLCByLCBzKTsKICAgICAgICAgICAgICAgICAgaWYgKGIgJiYgYi5sZW5ndGggJiYgYi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSAoMCwgby5nZXRFeHRlbnQpKGIsICEwKTsKICAgICAgICAgICAgICAgICAgICB3LnNvcnQoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZnVuY3Rpb24gcihlLCB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZS5leHRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHJbMV1bMF0gLSByWzBdWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSByWzFdWzFdIC0gclswXVsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gclsxXVsyXSAtIHJbMF1bMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHMgLSB0WzJdWzBdOwogICAgICAgICAgICAgICAgICAgICAgICBvICo9IG87CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gYSAtIHRbMl1bMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGwgKj0gbDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBuIC0gdFsyXVsyXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8gKyBsICsgKGggKj0gaCk7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIoZSwgeCkgLSByKHQsIHgpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHZhciBBID0gW107CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNjUgPSAwLCBfdDUzID0gci5sZW5ndGg7IF9lNjUgPCBfdDUzOyBfZTY1KyspIGEgPSByW19lNjVdLCBBW19lNjVdID0gewogICAgICAgICAgICAgICAgICAgIHg6IGEueCwKICAgICAgICAgICAgICAgICAgICB5OiBhLnksCiAgICAgICAgICAgICAgICAgICAgejogYS56LAogICAgICAgICAgICAgICAgICAgIHNlcmlhbDogX2U2NSwKICAgICAgICAgICAgICAgICAgICBlbGVtOiBhLmVsZW0KICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgaWYgKCEhcC5zeW5jU3VyZmFjZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBDID0gZnVuY3Rpb24gQyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBfR0xWaWV3ZXIuZ2VuZXJhdGVNZXNoU3luY0hlbHBlcihfLCB3W3RdLmV4dGVudCwgd1t0XS5hdG9tcywgd1t0XS50b3Nob3csIEEsIHkpLCBuID0gKDAsIHUuc3BsaXRNZXNoKSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEFycjogYS52ZXJ0aWNlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZUFycjogYS5mYWNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGwgPSAwLCBoID0gbi5sZW5ndGg7IGwgPCBoOyBsKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiBuW2xdLnZlcnRleEFyciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXM6IG5bbF0uZmFjZUFycgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gX0dMVmlld2VyLmdlbmVyYXRlU3VyZmFjZU1lc2gociwgYSwgZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgby5tZXJnZUdlb3MpKGUuZ2VvLCBjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgdi5yZW5kZXIoKSwgcygpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBTID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U2NiA9IDA7IF9lNjYgPCB3Lmxlbmd0aDsgX2U2NisrKSBTLnB1c2goQyhfZTY2KSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZG9uZSA9ICEwLCBQcm9taXNlLnJlc29sdmUoZik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdmFyIE0gPSBbXTsKICAgICAgICAgICAgICAgICAgXyA8IDAgJiYgKF8gPSAwKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U2NyA9IDAsIF90NTQgPSBfR0xWaWV3ZXIubnVtV29ya2VyczsgX2U2NyA8IF90NTQ7IF9lNjcrKykgewogICAgICAgICAgICAgICAgICAgIHZhciB6ID0gbmV3IFdvcmtlcigkM0Rtb2wuU3VyZmFjZVdvcmtlcik7CiAgICAgICAgICAgICAgICAgICAgTS5wdXNoKHopLCB6LnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IC0xLAogICAgICAgICAgICAgICAgICAgICAgYXRvbXM6IEEsCiAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IHkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHQsIHMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24gbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgTSAmJiBNLmxlbmd0aCAmJiBNLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBlICYmIGUudGVybWluYXRlICYmIGUudGVybWluYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGwgPSBmdW5jdGlvbiBsKHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9ICgwLCB1LnNwbGl0TWVzaCkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QXJyOiBzLmRhdGEudmVydGljZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlQXJyOiBzLmRhdGEuZmFjZXMKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaCA9IDAsIGMgPSBsLmxlbmd0aDsgaCA8IGM7IGgrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogbFtoXS52ZXJ0ZXhBcnIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VzOiBsW2hdLmZhY2VBcnIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfID0gX0dMVmlld2VyLmdlbmVyYXRlU3VyZmFjZU1lc2gociwgcCwgZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIG8ubWVyZ2VHZW9zKShlLmdlbywgXyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdi5yZW5kZXIoKSwgKythID09IHcubGVuZ3RoICYmIChlLmRvbmUgPSAhMCwgbigpLCB0KGYpKTsKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBoID0gZnVuY3Rpb24gaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG4oKSwgY29uc29sZS5sb2coZS5tZXNzYWdlICsgIiAoIiArIGUuZmlsZW5hbWUgKyAiOiIgKyBlLmxpbmVubyArICIpIiksIHMoZSk7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNjggPSAwOyBfZTY4IDwgdy5sZW5ndGg7IF9lNjgrKykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBNW19lNjggJSBNLmxlbmd0aF07CiAgICAgICAgICAgICAgICAgICAgICBjLm9ubWVzc2FnZSA9IGwsIGMub25lcnJvciA9IGgsIGMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfLAogICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEV4dGVudDogd1tfZTY4XS5leHRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkQXRvbXM6IHdbX2U2OF0uYXRvbXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0b21zVG9TaG93OiB3W19lNjhdLnRvc2hvdwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0ID0gdCB8fCB7fSwgZyA9IF9HTFZpZXdlci5nZXRNYXRXaXRoU3R5bGUodCk7CiAgICAgICAgICAgICAgICB2YXIgTSA9IFtdOwogICAgICAgICAgICAgICAgTS5zdHlsZSA9IHQsIE0uYXRvbXNlbCA9IHIsIE0uYWxsc2VsID0gbiwgTS5mb2N1cyA9IGg7CiAgICAgICAgICAgICAgICB2YXIgeiA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoQSkgewogICAgICAgICAgICAgICAgICB2YXIgTCA9IHt9LAogICAgICAgICAgICAgICAgICAgIEUgPSB7fTsKICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHRoaXMubW9kZWxzLmxlbmd0aDsgeCsrKSBMW3hdID0gW10sIEVbeF0gPSBbXTsKICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHkubGVuZ3RoOyB4KyspIExbeVt4XS5tb2RlbF0ucHVzaCh5W3hdKTsKICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHcubGVuZ3RoOyB4KyspIEVbd1t4XS5tb2RlbF0ucHVzaCh3W3hdKTsKICAgICAgICAgICAgICAgICAgdmFyIFQgPSBbXTsKICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHRoaXMubW9kZWxzLmxlbmd0aDsgeCsrKSBFW3hdLmxlbmd0aCA+IDAgJiYgKE0ucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgZ2VvOiBuZXcgcy5HZW9tZXRyeSghMCksCiAgICAgICAgICAgICAgICAgICAgbWF0OiBnLAogICAgICAgICAgICAgICAgICAgIGRvbmU6ICExLAogICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkOiAhMSwKICAgICAgICAgICAgICAgICAgICBzeW1tZXRyaWVzOiB0aGlzLm1vZGVsc1t4XS5nZXRTeW1tZXRyaWVzKCkKICAgICAgICAgICAgICAgICAgfSksIFQucHVzaChTKE1bTS5sZW5ndGggLSAxXSwgTFt4XSwgRVt4XSkpKTsKICAgICAgICAgICAgICAgICAgeiA9IFByb21pc2UuYWxsKFQpOwogICAgICAgICAgICAgICAgfSBlbHNlIE0ucHVzaCh7CiAgICAgICAgICAgICAgICAgIGdlbzogbmV3IHMuR2VvbWV0cnkoITApLAogICAgICAgICAgICAgICAgICBtYXQ6IGcsCiAgICAgICAgICAgICAgICAgIGRvbmU6ICExLAogICAgICAgICAgICAgICAgICBmaW5pc2hlZDogITEsCiAgICAgICAgICAgICAgICAgIHN5bW1ldHJpZXM6IFtuZXcgYS5NYXRyaXg0KCldCiAgICAgICAgICAgICAgICB9KSwgeiA9IFMoTVtNLmxlbmd0aCAtIDFdLCB5LCB3KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN1cmZhY2VzW2ZdID0gTSwgei5zdXJmaWQgPSBmLCBjICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIGMgPyAoei50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIGMoZSk7CiAgICAgICAgICAgICAgICB9KSwgZikgOiB6OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFN1cmZhY2VNYXRlcmlhbFN0eWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3VyZmFjZU1hdGVyaWFsU3R5bGUoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKCgwLCBvLmFkanVzdFZvbHVtZVN0eWxlKSh0KSwgdGhpcy5zdXJmYWNlc1tlXSkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuc3VyZmFjZXNbZV07CiAgICAgICAgICAgICAgICAgIHIuc3R5bGUgPSB0OwogICAgICAgICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICAgICAgICAgICAgICAgICAgICBsID0gclthXS5tYXQgPSBfR0xWaWV3ZXIuZ2V0TWF0V2l0aFN0eWxlKHQpOwogICAgICAgICAgICAgICAgICAgIGlmIChyW2FdLm1hdC5zaWRlID0gcy5Gcm9udFNpZGUsIHQuY29sb3IpIHsKICAgICAgICAgICAgICAgICAgICAgIHJbYV0ubWF0LmNvbG9yID0gdC5jb2xvciwgclthXS5nZW8uY29sb3JzTmVlZFVwZGF0ZSA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgdmFyIF9lNjkgPSBuLkNDLmNvbG9yKHQuY29sb3IpOwogICAgICAgICAgICAgICAgICAgICAgclthXS5nZW8uc2V0Q29sb3JzKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9lNjk7CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGwudm9sZGF0YSAmJiBsLnZvbHNjaGVtZSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9lNzAgPSBsLnZvbHNjaGVtZSwKICAgICAgICAgICAgICAgICAgICAgICAgX3Q1NSA9IGwudm9sZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgX3MyMyA9IG4uQ0MsCiAgICAgICAgICAgICAgICAgICAgICAgIF9vMTAgPSBfZTcwLnJhbmdlKCkgfHwgWy0xLCAxXTsKICAgICAgICAgICAgICAgICAgICAgIHJbYV0uZ2VvLnNldENvbG9ycyhmdW5jdGlvbiAociwgYSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IF90NTUuZ2V0VmFsKHIsIGEsIG4pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3MyMy5jb2xvcihfZTcwLnZhbHVlVG9IZXgobCwgX28xMCkpOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJbYV0uZmluaXNoZWQgPSAhMTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCByLmxlbmd0aDsgYSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGw7CiAgICAgICAgICAgICAgICAgICAgX2xvb3AoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0U3VyZmFjZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1cmZhY2UoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VyZmFjZXNbZV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlU3VyZmFjZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVN1cmZhY2UoZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMuc3VyZmFjZXNbZV0sIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgdFtyXSAmJiB0W3JdLmxhc3RHTCAmJiAodm9pZCAwICE9PSB0W3JdLmdlbyAmJiB0W3JdLmdlby5kaXNwb3NlKCksIHZvaWQgMCAhPT0gdFtyXS5tYXQgJiYgdFtyXS5tYXQuZGlzcG9zZSgpLCB0aGlzLm1vZGVsR3JvdXAucmVtb3ZlKHRbcl0ubGFzdEdMKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMuc3VyZmFjZXNbZV0sIHRoaXMuc2hvdygpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZUFsbFN1cmZhY2VzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsU3VyZmFjZXMoKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlIGluIHRoaXMuc3VyZmFjZXMpIGlmICh0aGlzLnN1cmZhY2VzLmhhc093blByb3BlcnR5KGUpKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSB0aGlzLnN1cmZhY2VzW2VdLCByID0gMDsgciA8IHQubGVuZ3RoOyByKyspIHRbcl0gJiYgdFtyXS5sYXN0R0wgJiYgKHZvaWQgMCAhPT0gdFtyXS5nZW8gJiYgdFtyXS5nZW8uZGlzcG9zZSgpLCB2b2lkIDAgIT09IHRbcl0ubWF0ICYmIHRbcl0ubWF0LmRpc3Bvc2UoKSwgdGhpcy5tb2RlbEdyb3VwLnJlbW92ZSh0W3JdLmxhc3RHTCkpOwogICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zdXJmYWNlc1tlXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3coKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJqbW9sTW92ZVRvIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam1vbE1vdmVUbygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5tb2RlbEdyb3VwLnBvc2l0aW9uLAogICAgICAgICAgICAgICAgICB0ID0gImNlbnRlciB7ICIgKyAtZS54ICsgIiAiICsgLWUueSArICIgIiArIC1lLnogKyAiIH07ICIsCiAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnJvdGF0aW9uR3JvdXAucXVhdGVybmlvbjsKICAgICAgICAgICAgICAgIHJldHVybiB0ICs9ICJtb3ZldG8gLjUgcXVhdGVybmlvbiB7ICIgKyByLnggKyAiICIgKyByLnkgKyAiICIgKyByLnogKyAiICIgKyByLncgKyAiIH07IjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbGVhciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQWxsU3VyZmFjZXMoKSwgdGhpcy5yZW1vdmVBbGxNb2RlbHMoKSwgdGhpcy5yZW1vdmVBbGxMYWJlbHMoKSwgdGhpcy5yZW1vdmVBbGxTaGFwZXMoKSwgdGhpcy5zaG93KCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibWFwQXRvbVByb3BlcnRpZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXBBdG9tUHJvcGVydGllcyhlLCB0KSB7CiAgICAgICAgICAgICAgICB0ID0gdCB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5nZXRBdG9tc0Zyb21TZWwodCk7CiAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSkgZm9yICh2YXIgX3Q1NiA9IDAsIF9zMjQgPSByLmxlbmd0aDsgX3Q1NiA8IF9zMjQ7IF90NTYrKykgewogICAgICAgICAgICAgICAgICBlKHJbX3Q1Nl0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIF90NTcgPSAwLCBfbjEyID0gci5sZW5ndGg7IF90NTcgPCBfbjEyOyBfdDU3KyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHMgPSByW190NTddOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDU4ID0gMCwgX3IzNCA9IGUubGVuZ3RoOyBfdDU4IDwgX3IzNDsgX3Q1OCsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9yMzUgPSBlW190NThdOwogICAgICAgICAgICAgICAgICAgIGlmIChfcjM1LnByb3BzKSBmb3IgKHZhciBhIGluIF9yMzUucHJvcHMpIF9yMzUucHJvcHMuaGFzT3duUHJvcGVydHkoYSkgJiYgdGhpcy5hdG9tSXNTZWxlY3RlZChzLCBfcjM1KSAmJiAocy5wcm9wZXJ0aWVzIHx8IChzLnByb3BlcnRpZXMgPSB7fSksIHMucHJvcGVydGllc1thXSA9IF9yMzUucHJvcHNbYV0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJsaW5rVmlld2VyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlua1ZpZXdlcihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saW5rZWRWaWV3ZXJzLnB1c2goZSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0UGVyY2VpdmVkRGlzdGFuY2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQZXJjZWl2ZWREaXN0YW5jZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkNBTUVSQV9aIC0gdGhpcy5yb3RhdGlvbkdyb3VwLnBvc2l0aW9uLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0UGVyY2VpdmVkRGlzdGFuY2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQZXJjZWl2ZWREaXN0YW5jZShlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0aW9uR3JvdXAucG9zaXRpb24ueiA9IHRoaXMuQ0FNRVJBX1ogLSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEF1dG9FeWVTZXBhcmF0aW9uIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QXV0b0V5ZVNlcGFyYXRpb24oZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldFBlcmNlaXZlZERpc3RhbmNlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdCB8fCAodCA9IDUpLCBlIHx8IHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggPiAwID8gdGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IHIgKiBNYXRoLnRhbihNYXRoLlBJIC8gMTgwICogdCkgOiB0aGlzLmNhbWVyYS5wb3NpdGlvbi54ID0gLXIgKiBNYXRoLnRhbihNYXRoLlBJIC8gMTgwICogdCksIHRoaXMuY2FtZXJhLmxvb2tBdChuZXcgYS5WZWN0b3IzKDAsIDAsIHRoaXMucm90YXRpb25Hcm91cC5wb3NpdGlvbi56KSksIHRoaXMuY2FtZXJhLnBvc2l0aW9uLng7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0RGVmYXVsdENhcnRvb25RdWFsaXR5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVmYXVsdENhcnRvb25RdWFsaXR5KGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmNhcnRvb25RdWFsaXR5ID0gZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dLCBbewogICAgICAgICAgICAgIGtleTogInNsZXJwIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2xlcnAoZSwgdCwgcikgewogICAgICAgICAgICAgICAgaWYgKDEgPT0gcikgcmV0dXJuIHQuY2xvbmUoKTsKICAgICAgICAgICAgICAgIGlmICgwID09IHIpIHJldHVybiBlLmNsb25lKCk7CiAgICAgICAgICAgICAgICB2YXIgcyA9IGUueCAqIHQueCArIGUueSAqIHQueSArIGUueiAqIHQueiArIGUudyAqIHQudzsKICAgICAgICAgICAgICAgIGlmIChzID4gLjk5OTUpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9zMjUgPSBuZXcgYS5RdWF0ZXJuaW9uKGUueCArIHIgKiAodC54IC0gZS54KSwgZS55ICsgciAqICh0LnkgLSBlLnkpLCBlLnogKyByICogKHQueiAtIGUueiksIGUudyArIHIgKiAodC53IC0gZS53KSk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfczI1Lm5vcm1hbGl6ZSgpLCBfczI1OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcyA8IDAgJiYgKHQgPSB0LmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLTEpLCBzID0gLXMpLCBzID4gMSA/IHMgPSAxIDogcyA8IC0xICYmIChzID0gLTEpOwogICAgICAgICAgICAgICAgdmFyIG4gPSBNYXRoLmFjb3MocykgKiByLAogICAgICAgICAgICAgICAgICBvID0gdC5jbG9uZSgpOwogICAgICAgICAgICAgICAgby5zdWIoZS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKHMpKSwgby5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICAgIHZhciBsID0gTWF0aC5jb3MobiksCiAgICAgICAgICAgICAgICAgIGggPSBNYXRoLnNpbihuKSwKICAgICAgICAgICAgICAgICAgYyA9IG5ldyBhLlF1YXRlcm5pb24oZS54ICogbCArIG8ueCAqIGgsIGUueSAqIGwgKyBvLnkgKiBoLCBlLnogKiBsICsgby56ICogaCwgZS53ICogbCArIG8udyAqIGgpOwogICAgICAgICAgICAgICAgcmV0dXJuIGMubm9ybWFsaXplKCksIGM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0QXRvbXNXaXRoaW4iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdG9tc1dpdGhpbihlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2ExNiA9IDA7IF9hMTYgPCBlLmxlbmd0aDsgX2ExNisrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gZVtfYTE2XTsKICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBzICYmIChzLnggPCB0WzBdWzBdIHx8IHMueCA+IHRbMV1bMF0gfHwgcy55IDwgdFswXVsxXSB8fCBzLnkgPiB0WzFdWzFdIHx8IHMueiA8IHRbMF1bMl0gfHwgcy56ID4gdFsxXVsyXSB8fCByLnB1c2gocykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidm9sdW1lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdm9sdW1lKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoZVsxXVswXSAtIGVbMF1bMF0pICogKGVbMV1bMV0gLSBlWzBdWzFdKSAqIChlWzFdWzJdIC0gZVswXVsyXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2VuZXJhdGVTdXJmYWNlTWVzaCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlU3VyZmFjZU1lc2goZSwgdCwgcikgewogICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgcy5HZW9tZXRyeSghMCksCiAgICAgICAgICAgICAgICAgIGwgPSBvLnVwZGF0ZUdlb0dyb3VwKDApLAogICAgICAgICAgICAgICAgICBoID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDU5ID0gMCwgX3IzNiA9IGUubGVuZ3RoOyBfdDU5IDwgX3IzNjsgX3Q1OSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjID0gZVtfdDU5XTsKICAgICAgICAgICAgICAgICAgYyAmJiAodm9pZCAwICE9PSBjLnN1cmZhY2VDb2xvciA/IGhbX3Q1OV0gPSBjLnN1cmZhY2VDb2xvciA6IGMuY29sb3IgJiYgKGhbX3Q1OV0gPSBuLkNDLmNvbG9yKGMuY29sb3IpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgdSA9IGwudmVydGV4QXJyYXksCiAgICAgICAgICAgICAgICAgIGYgPSB0LnZlcnRpY2VzOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U3MSA9IDAsIF90NjAgPSBmLmxlbmd0aDsgX2U3MSA8IF90NjA7IF9lNzErKykgewogICAgICAgICAgICAgICAgICB2YXIgX3Q2MSA9IDMgKiBsLnZlcnRpY2VzOwogICAgICAgICAgICAgICAgICB1W190NjFdID0gZltfZTcxXS54LCB1W190NjEgKyAxXSA9IGZbX2U3MV0ueSwgdVtfdDYxICsgMl0gPSBmW19lNzFdLnosIGwudmVydGljZXMrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwID0gbC5jb2xvckFycmF5OwogICAgICAgICAgICAgICAgaWYgKHIudm9sZGF0YSAmJiByLnZvbHNjaGVtZSkgewogICAgICAgICAgICAgICAgICB2YXIgZyA9IHIudm9sc2NoZW1lLAogICAgICAgICAgICAgICAgICAgIHYgPSByLnZvbGRhdGEsCiAgICAgICAgICAgICAgICAgICAgXyA9IGcucmFuZ2UoKSB8fCBbLTEsIDFdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTcyID0gMCwgX3Q2MiA9IGYubGVuZ3RoOyBfZTcyIDwgX3Q2MjsgX2U3MisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90NjMgPSB2LmdldFZhbChmW19lNzJdLngsIGZbX2U3Ml0ueSwgZltfZTcyXS56KSwKICAgICAgICAgICAgICAgICAgICAgIF9yMzcgPSBuLkNDLmNvbG9yKGcudmFsdWVUb0hleChfdDYzLCBfKSksCiAgICAgICAgICAgICAgICAgICAgICBfczI2ID0gMyAqIF9lNzI7CiAgICAgICAgICAgICAgICAgICAgcFtfczI2XSA9IF9yMzcuciwgcFtfczI2ICsgMV0gPSBfcjM3LmcsIHBbX3MyNiArIDJdID0gX3IzNy5iOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGgubGVuZ3RoID4gMCkgZm9yICh2YXIgX2U3MyA9IDAsIF90NjQgPSBmLmxlbmd0aDsgX2U3MyA8IF90NjQ7IF9lNzMrKykgewogICAgICAgICAgICAgICAgICB2YXIgX3Q2NSA9IGZbX2U3M10uYXRvbWlkLAogICAgICAgICAgICAgICAgICAgIF9yMzggPSAzICogX2U3MzsKICAgICAgICAgICAgICAgICAgcFtfcjM4XSA9IGhbX3Q2NV0uciwgcFtfcjM4ICsgMV0gPSBoW190NjVdLmcsIHBbX3IzOCArIDJdID0gaFtfdDY1XS5iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHkgPSB0LmZhY2VzOwogICAgICAgICAgICAgICAgbC5mYWNlaWR4ID0geS5sZW5ndGgsIG8uaW5pdFR5cGVkQXJyYXlzKCk7CiAgICAgICAgICAgICAgICB2YXIgYiwKICAgICAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICAgICAgeCwKICAgICAgICAgICAgICAgICAgQSwKICAgICAgICAgICAgICAgICAgQyA9IGwudmVydGV4QXJyYXksCiAgICAgICAgICAgICAgICAgIFMgPSBsLm5vcm1hbEFycmF5OwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U3NCA9IDAsIF90NjYgPSB5Lmxlbmd0aDsgX2U3NCA8IF90NjY7IF9lNzQgKz0gMykgewogICAgICAgICAgICAgICAgICB2YXIgTSA9IDMgKiB5W19lNzRdLAogICAgICAgICAgICAgICAgICAgIHogPSAzICogeVtfZTc0ICsgMV0sCiAgICAgICAgICAgICAgICAgICAgTCA9IDMgKiB5W19lNzQgKyAyXTsKICAgICAgICAgICAgICAgICAgYiA9IG5ldyBhLlZlY3RvcjMoQ1tNXSwgQ1tNICsgMV0sIENbTSArIDJdKSwgdyA9IG5ldyBhLlZlY3RvcjMoQ1t6XSwgQ1t6ICsgMV0sIENbeiArIDJdKSwgKHggPSBuZXcgYS5WZWN0b3IzKENbTF0sIENbTCArIDFdLCBDW0wgKyAyXSkpLnN1YlZlY3RvcnMoeCwgdyksIGIuc3ViVmVjdG9ycyhiLCB3KSwgeC5jcm9zcyhiKSwgKEEgPSB4KS5ub3JtYWxpemUoKSwgU1tNXSArPSBBLngsIFNbel0gKz0gQS54LCBTW0xdICs9IEEueCwgU1tNICsgMV0gKz0gQS55LCBTW3ogKyAxXSArPSBBLnksIFNbTCArIDFdICs9IEEueSwgU1tNICsgMl0gKz0gQS56LCBTW3ogKyAyXSArPSBBLnosIFNbTCArIDJdICs9IEEuejsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBsLmZhY2VBcnJheSA9IG5ldyBVaW50MTZBcnJheSh5KSwgbmV3IHMuTWVzaChvLCByKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZW5lcmF0ZU1lc2hTeW5jSGVscGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVNZXNoU3luY0hlbHBlcihlLCB0LCByLCBzLCBhLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBwLlByb3RlaW5TdXJmYWNlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gby5pbml0cGFybSh0LCAxICE9PSBlLCBuKSwgby5maWxsdm94ZWxzKGEsIHIpLCBvLmJ1aWxkYm91bmRhcnkoKSwgZSAhPSBwLlN1cmZhY2VUeXBlLlNFUyAmJiBlICE9IHAuU3VyZmFjZVR5cGUuTVMgfHwgKG8uZmFzdGRpc3RhbmNlbWFwKCksIG8uYm91bmRpbmdhdG9tKCExKSwgby5maWxsdm94ZWxzd2FhbHMoYSwgcikpLCBvLm1hcmNoaW5nY3ViZShlKSwgby5nZXRGYWNlc0FuZFZlcnRpY2VzKHMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE1hdFdpdGhTdHlsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1hdFdpdGhTdHlsZShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBzLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgaW4gdC52ZXJ0ZXhDb2xvcnMgPSBzLkNvbG9yaW5nLlZlcnRleENvbG9ycywgZSkgImNvbG9yIiA9PT0gciB8fCAibWFwIiA9PT0gciB8fCBlLmhhc093blByb3BlcnR5KHIpICYmICh0W3JdID0gZVtyXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBlLm9wYWNpdHkgJiYgKDEgPT09IGUub3BhY2l0eSA/IHQudHJhbnNwYXJlbnQgPSAhMSA6IHQudHJhbnNwYXJlbnQgPSAhMCksIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2hhbGxvd0NvcHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaGFsbG93Q29weShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IFtdOwogICAgICAgICAgICAgICAgdmFyIHIgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9zMjcgPSAwOyBfczI3IDwgcjsgX3MyNysrKSB0W19zMjddID0gKDAsIG8uZXh0ZW5kKSh7fSwgZVtfczI3XSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9HTFZpZXdlcjsKICAgICAgICAgIH0oKTsKICAgICAgICAgIGZ1bmN0aW9uIF8oZSwgdCkgewogICAgICAgICAgICBpZiAoZSA9ICgwLCBvLmdldEVsZW1lbnQpKGUpKSB7CiAgICAgICAgICAgICAgdCA9IHQgfHwge307CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX0dMVmlld2VyKGUsIHQpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHRocm93ICJlcnJvciBjcmVhdGluZyB2aWV3ZXI6ICIgKyBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geShlKSB7CiAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICAgICAgICBpZiAoZSA9ICgwLCBvLmdldEVsZW1lbnQpKGUpKSB7CiAgICAgICAgICAgICAgdmFyIHMgPSBbXSwKICAgICAgICAgICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICAgICAgICByLnJvd3MgPSB0LnJvd3MsIHIuY29scyA9IHQuY29scywgci5jb250cm9sX2FsbCA9IG51bGwgIT0gdC5jb250cm9sX2FsbCAmJiB0LmNvbnRyb2xfYWxsLCBlLmFwcGVuZENoaWxkKGEpOwogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHQucm93czsgbisrKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGwgPSBbXSwgaCA9IDA7IGggPCB0LmNvbHM7IGgrKykgewogICAgICAgICAgICAgICAgICAgIHIucm93ID0gbiwgci5jb2wgPSBoLCByLmNhbnZhcyA9IGEsIHIudmlld2VycyA9IHMsIHIuY29udHJvbF9hbGwgPSB0LmNvbnRyb2xfYWxsOwogICAgICAgICAgICAgICAgICAgIHZhciBjID0gXyhlLCByKTsKICAgICAgICAgICAgICAgICAgICBsLnB1c2goYyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcy51bnNoaWZ0KGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHRocm93ICJlcnJvciBjcmVhdGluZyB2aWV3ZXIgZ3JpZDogIiArIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBiKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwogICAgICAgICAgICBpZiAoZSA9ICgwLCBvLmdldEVsZW1lbnQpKGUpKSB7CiAgICAgICAgICAgICAgdmFyIHIgPSB5KGUsIHsKICAgICAgICAgICAgICAgIHJvd3M6IDEsCiAgICAgICAgICAgICAgICBjb2xzOiAyLAogICAgICAgICAgICAgICAgY29udHJvbF9hbGw6ICEwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdGhpcy5nbHZpZXdlcjEgPSByWzBdWzBdLCB0aGlzLmdsdmlld2VyMiA9IHJbMF1bMV0sIHRoaXMuZ2x2aWV3ZXIxLnNldEF1dG9FeWVTZXBhcmF0aW9uKCExKSwgdGhpcy5nbHZpZXdlcjIuc2V0QXV0b0V5ZVNlcGFyYXRpb24oITApLCB0aGlzLmdsdmlld2VyMS5saW5rVmlld2VyKHRoaXMuZ2x2aWV3ZXIyKSwgdGhpcy5nbHZpZXdlcjIubGlua1ZpZXdlcih0aGlzLmdsdmlld2VyMSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuZ2x2aWV3ZXIxLl9fcHJvdG9fXykuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiB0Lmdsdmlld2VyMVtlXTsKICAgICAgICAgICAgICAgIH0pLCBhID0gMDsgYSA8IHMubGVuZ3RoOyBhKyspIHRoaXNbc1thXV0gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmdsdmlld2VyMVtlXS5hcHBseSh0aGlzLmdsdmlld2VyMSwgYXJndW1lbnRzKSwKICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5nbHZpZXdlcjJbZV0uYXBwbHkodGhpcy5nbHZpZXdlcjIsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBbdCwgcl07CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0oc1thXSk7CiAgICAgICAgICAgICAgdGhpcy5zZXRDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChlLCB0LCByKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IGUubGVuZ3RoOyBzKyspIGVbc10uc2V0Q29vcmRpbmF0ZXModCwgcik7CiAgICAgICAgICAgICAgfSwgdGhpcy5zdXJmYWNlc0ZpbmlzaGVkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2x2aWV3ZXIxLnN1cmZhY2VzRmluaXNoZWQoKSAmJiB0aGlzLmdsdmlld2VyMi5zdXJmYWNlc0ZpbmlzaGVkKCk7CiAgICAgICAgICAgICAgfSwgdGhpcy5pc0FuaW1hdGVkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2x2aWV3ZXIxLmlzQW5pbWF0ZWQoKSB8fCB0aGlzLmdsdmlld2VyMi5pc0FuaW1hdGVkKCk7CiAgICAgICAgICAgICAgfSwgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdGhpcy5nbHZpZXdlcjEucmVuZGVyKCksIHRoaXMuZ2x2aWV3ZXIyLnJlbmRlcigpLCBlICYmIGUodGhpcyk7CiAgICAgICAgICAgICAgfSwgdGhpcy5nZXRDYW52YXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nbHZpZXdlcjEuZ2V0Q2FudmFzKCk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgX0dMVmlld2VyLm51bVdvcmtlcnMgPSA0LCBfR0xWaWV3ZXIubWF4Vm9sdW1lID0gNjRlMywgX0dMVmlld2VyLnN1cmZhY2VUeXBlTWFwID0gewogICAgICAgICAgICBWRFc6IHAuU3VyZmFjZVR5cGUuVkRXLAogICAgICAgICAgICBNUzogcC5TdXJmYWNlVHlwZS5NUywKICAgICAgICAgICAgU0FTOiBwLlN1cmZhY2VUeXBlLlNBUywKICAgICAgICAgICAgU0VTOiBwLlN1cmZhY2VUeXBlLlNFUwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDE0NjA6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgQ3VzdG9tTGluZWFyOiBmdW5jdGlvbiBDdXN0b21MaW5lYXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9DdXN0b21MaW5lYXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEdyYWRpZW50OiBmdW5jdGlvbiBHcmFkaWVudCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0dyYWRpZW50OwogICAgICAgICAgICB9LAogICAgICAgICAgICBHcmFkaWVudFR5cGU6IGZ1bmN0aW9uIEdyYWRpZW50VHlwZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0dyYWRpZW50VHlwZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUk9ZR0I6IGZ1bmN0aW9uIFJPWUdCKCkgewogICAgICAgICAgICAgIHJldHVybiBfUk9ZR0I7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFJXQjogZnVuY3Rpb24gUldCKCkgewogICAgICAgICAgICAgIHJldHVybiBfUldCOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTaW5lYm93OiBmdW5jdGlvbiBTaW5lYm93KCkgewogICAgICAgICAgICAgIHJldHVybiBfU2luZWJvdzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnVpbHRpbkdyYWRpZW50czogZnVuY3Rpb24gYnVpbHRpbkdyYWRpZW50cygpIHsKICAgICAgICAgICAgICByZXR1cm4gbzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0R3JhZGllbnQ6IGZ1bmN0aW9uIGdldEdyYWRpZW50KCkgewogICAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgICB9LAogICAgICAgICAgICBub3JtYWxpemVWYWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHMgPSByKDI1NTApOwogICAgICAgICAgdmFyIF9HcmFkaWVudFR5cGUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUNsYXNzKGZ1bmN0aW9uIF9HcmFkaWVudFR5cGUoKSB7CiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfR3JhZGllbnRUeXBlKTsKICAgICAgICAgIH0pOwogICAgICAgICAgZnVuY3Rpb24gYShlLCB0LCByKSB7CiAgICAgICAgICAgIHJldHVybiB0ID49IGUgPyAociA8IGUgJiYgKHIgPSBlKSwgciA+IHQgJiYgKHIgPSB0KSwgewogICAgICAgICAgICAgIGxvOiBlLAogICAgICAgICAgICAgIGhpOiB0LAogICAgICAgICAgICAgIHZhbDogcgogICAgICAgICAgICB9KSA6IChyID4gZSAmJiAociA9IGUpLCByIDwgdCAmJiAociA9IHQpLCB7CiAgICAgICAgICAgICAgbG86IHQsCiAgICAgICAgICAgICAgaGk6IGUsCiAgICAgICAgICAgICAgdmFsOiByID0gZSAtIHIgKyB0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gbihlKSB7CiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgX0dyYWRpZW50VHlwZSkgcmV0dXJuIGU7CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUuZ3JhZGllbnQgJiYgb1tlLmdyYWRpZW50XSkgewogICAgICAgICAgICAgIHZhciBfdDY3ID0gdm9pZCAwID09PSBlLm1pbiA/IC0xIDogZS5taW4sCiAgICAgICAgICAgICAgICBfcjM5ID0gdm9pZCAwID09PSBlLm1heCA/IDEgOiBlLm1heDsKICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBlLm1pZCA/IHZvaWQgMCA9PT0gZS5jb2xvcnMgPyBuZXcgb1tlLmdyYWRpZW50XShfdDY3LCBfcjM5KSA6IG5ldyBvW2UuZ3JhZGllbnRdKF90NjcsIF9yMzksIGUuY29sb3JzKSA6IG5ldyBvW2UuZ3JhZGllbnRdKF90NjcsIF9yMzksIGUubWlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBfUldCID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfR3JhZGllbnRUeXBlMikgewogICAgICAgICAgICBfaW5oZXJpdHMoX1JXQiwgX0dyYWRpZW50VHlwZTIpOwogICAgICAgICAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKF9SV0IpOwogICAgICAgICAgICBmdW5jdGlvbiBfUldCKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMyOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfUldCKTsKICAgICAgICAgICAgICBfdGhpczIgPSBfc3VwZXIuY2FsbCh0aGlzKSwgX3RoaXMyLmdyYWRpZW50ID0gIlJXQiIsIF90aGlzMi5tdWx0ID0gMSwgX3RoaXMyLm1pZCA9IHIsIF90aGlzMi5taW4gPSBlLCBfdGhpczIubWF4ID0gdCwgdm9pZCAwID09PSB0ICYmIEFycmF5LmlzQXJyYXkoZSkgJiYgZS5sZW5ndGggPj0gMiA/IChfdGhpczIubWF4ID0gZVsxXSwgX3RoaXMyLm1pbiA9IGVbMF0pIDogZSAmJiB0ICYmICFBcnJheS5pc0FycmF5KGUpICYmIChfdGhpczIubWluID0gZSwgX3RoaXMyLm1heCA9IHQpOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9SV0IsIFt7CiAgICAgICAgICAgICAga2V5OiAicmFuZ2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByYW5nZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMubWluICYmIHZvaWQgMCAhPT0gdGhpcy5tYXggPyBbdGhpcy5taW4sIHRoaXMubWF4XSA6IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidmFsdWVUb0hleCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlVG9IZXgoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIsIHM7CiAgICAgICAgICAgICAgICBpZiAoZSA9IHRoaXMubXVsdCAqIGUsIHQgPyAociA9IHRbMF0sIHMgPSB0WzFdKSA6IChyID0gdGhpcy5taW4sIHMgPSB0aGlzLm1heCksIHZvaWQgMCA9PT0gZSkgcmV0dXJuIDE2Nzc3MjE1OwogICAgICAgICAgICAgICAgdmFyIG4gPSBhKHIsIHMsIGUpOwogICAgICAgICAgICAgICAgciA9IG4ubG87CiAgICAgICAgICAgICAgICB2YXIgbywKICAgICAgICAgICAgICAgICAgbCA9ICgocyA9IG4uaGkpICsgcikgLyAyOwogICAgICAgICAgICAgICAgcmV0dXJuIChlID0gbi52YWwpIDwgKGwgPSB0ICYmIHZvaWQgMCAhPT0gdFsyXSA/IHRbMl0gOiB2b2lkIDAgIT09IHRoaXMubWlkID8gdGhpcy5taWQgOiAociArIHMpIC8gMikgPyAxNjcxMTY4MCArIDI1NiAqIChvID0gTWF0aC5mbG9vcigyNTUgKiBNYXRoLnNxcnQoKGUgLSByKSAvIChsIC0gcikpKSkgKyBvIDogZSA+IGwgPyA2NTUzNiAqIChvID0gTWF0aC5mbG9vcigyNTUgKiBNYXRoLnNxcnQoMSAtIChlIC0gbCkgLyAocyAtIGwpKSkpICsgMjU2ICogbyArIDI1NSA6IDE2Nzc3MjE1OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1JXQjsKICAgICAgICAgIH0oX0dyYWRpZW50VHlwZSk7CiAgICAgICAgICB2YXIgX1JPWUdCID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfR3JhZGllbnRUeXBlMykgewogICAgICAgICAgICBfaW5oZXJpdHMoX1JPWUdCLCBfR3JhZGllbnRUeXBlMyk7CiAgICAgICAgICAgIHZhciBfc3VwZXIyID0gX2NyZWF0ZVN1cGVyKF9ST1lHQik7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9ST1lHQihlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzMzsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1JPWUdCKTsKICAgICAgICAgICAgICBfdGhpczMgPSBfc3VwZXIyLmNhbGwodGhpcyksIF90aGlzMy5ncmFkaWVudCA9ICJST1lHQiIsIF90aGlzMy5tdWx0ID0gMSwgX3RoaXMzLm1pbiA9IGUsIF90aGlzMy5tYXggPSB0LCB2b2lkIDAgPT09IHQgJiYgQXJyYXkuaXNBcnJheShlKSAmJiBlLmxlbmd0aCA+PSAyID8gKF90aGlzMy5tYXggPSBlWzFdLCBfdGhpczMubWluID0gZVswXSkgOiBlICYmIHQgJiYgIUFycmF5LmlzQXJyYXkoZSkgJiYgKF90aGlzMy5taW4gPSBlLCBfdGhpczMubWF4ID0gdCk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMzsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1JPWUdCLCBbewogICAgICAgICAgICAgIGtleTogInZhbHVlVG9IZXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZVRvSGV4KGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByLCBzOwogICAgICAgICAgICAgICAgaWYgKGUgPSB0aGlzLm11bHQgKiBlLCB0ID8gKHIgPSB0WzBdLCBzID0gdFsxXSkgOiAociA9IHRoaXMubWluLCBzID0gdGhpcy5tYXgpLCB2b2lkIDAgPT09IGUpIHJldHVybiAxNjc3NzIxNTsKICAgICAgICAgICAgICAgIHZhciBuID0gYShyLCBzLCBlKSwKICAgICAgICAgICAgICAgICAgbyA9ICgociA9IG4ubG8pICsgKHMgPSBuLmhpKSkgLyAyLAogICAgICAgICAgICAgICAgICBsID0gKHIgKyBvKSAvIDIsCiAgICAgICAgICAgICAgICAgIGggPSAobyArIHMpIC8gMjsKICAgICAgICAgICAgICAgIHJldHVybiAoZSA9IG4udmFsKSA8IGwgPyAxNjcxMTY4MCArIDI1NiAqIE1hdGguZmxvb3IoMjU1ICogTWF0aC5zcXJ0KChlIC0gcikgLyAobCAtIHIpKSkgKyAwIDogZSA8IG8gPyA2NTUzNiAqIE1hdGguZmxvb3IoMjU1ICogTWF0aC5zcXJ0KDEgLSAoZSAtIGwpIC8gKG8gLSBsKSkpICsgNjUyODAgKyAwIDogZSA8IGggPyA2NTI4MCArIDEgKiBNYXRoLmZsb29yKDI1NSAqIE1hdGguc3FydCgoZSAtIG8pIC8gKGggLSBvKSkpIDogMCArIDI1NiAqIE1hdGguZmxvb3IoMjU1ICogTWF0aC5zcXJ0KDEgLSAoZSAtIGgpIC8gKHMgLSBoKSkpICsgMjU1OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJhbmdlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmFuZ2UoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLm1pbiAmJiB2b2lkIDAgIT09IHRoaXMubWF4ID8gW3RoaXMubWluLCB0aGlzLm1heF0gOiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1JPWUdCOwogICAgICAgICAgfShfR3JhZGllbnRUeXBlKTsKICAgICAgICAgIHZhciBfU2luZWJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0dyYWRpZW50VHlwZTQpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9TaW5lYm93LCBfR3JhZGllbnRUeXBlNCk7CiAgICAgICAgICAgIHZhciBfc3VwZXIzID0gX2NyZWF0ZVN1cGVyKF9TaW5lYm93KTsKICAgICAgICAgICAgZnVuY3Rpb24gX1NpbmVib3coZSwgdCkgewogICAgICAgICAgICAgIHZhciBfdGhpczQ7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9TaW5lYm93KTsKICAgICAgICAgICAgICBfdGhpczQgPSBfc3VwZXIzLmNhbGwodGhpcyksIF90aGlzNC5ncmFkaWVudCA9ICJTaW5lYm93IiwgX3RoaXM0Lm11bHQgPSAxLCBfdGhpczQubWluID0gZSwgX3RoaXM0Lm1heCA9IHQsIHZvaWQgMCA9PT0gdCAmJiBBcnJheS5pc0FycmF5KGUpICYmIGUubGVuZ3RoID49IDIgJiYgKF90aGlzNC5tYXggPSBlWzFdLCBfdGhpczQubWluID0gZVswXSksIHQgPCBlICYmIChfdGhpczQubXVsdCA9IC0xLCBfdGhpczQubWluICo9IC0xLCBfdGhpczQubWF4ICo9IC0xKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfU2luZWJvdywgW3sKICAgICAgICAgICAgICBrZXk6ICJ2YWx1ZVRvSGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWVUb0hleChlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciwgczsKICAgICAgICAgICAgICAgIGlmIChlID0gdGhpcy5tdWx0ICogZSwgdCA/IChyID0gdFswXSwgcyA9IHRbMV0pIDogKHIgPSB0aGlzLm1pbiwgcyA9IHRoaXMubWF4KSwgdm9pZCAwID09PSBlKSByZXR1cm4gMTY3NzcyMTU7CiAgICAgICAgICAgICAgICB2YXIgYSA9IF9HcmFkaWVudC5ub3JtYWxpemVWYWx1ZShyLCBzLCBlKTsKICAgICAgICAgICAgICAgIHIgPSBhLmxvLCBzID0gYS5oaTsKICAgICAgICAgICAgICAgIHZhciBuID0gNSAqICgoKGUgPSBhLnZhbCkgLSByKSAvIChzIC0gcikpIC8gNiArIC41LAogICAgICAgICAgICAgICAgICBvID0gTWF0aC5zaW4oTWF0aC5QSSAqIG4pOwogICAgICAgICAgICAgICAgbyAqPSAyNTUgKiBvOwogICAgICAgICAgICAgICAgdmFyIGwgPSBNYXRoLnNpbihNYXRoLlBJICogKG4gKyAxIC8gMykpOwogICAgICAgICAgICAgICAgbCAqPSAyNTUgKiBsOwogICAgICAgICAgICAgICAgdmFyIGggPSBNYXRoLnNpbihNYXRoLlBJICogKG4gKyAyIC8gMykpOwogICAgICAgICAgICAgICAgcmV0dXJuIGggKj0gMjU1ICogaCwgNjU1MzYgKiBNYXRoLmZsb29yKG8pICsgMjU2ICogTWF0aC5mbG9vcihoKSArIDEgKiBNYXRoLmZsb29yKGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJhbmdlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmFuZ2UoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLm1pbiAmJiB2b2lkIDAgIT09IHRoaXMubWF4ID8gW3RoaXMubWluLCB0aGlzLm1heF0gOiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1NpbmVib3c7CiAgICAgICAgICB9KF9HcmFkaWVudFR5cGUpOwogICAgICAgICAgdmFyIF9DdXN0b21MaW5lYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9HcmFkaWVudFR5cGU1KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfQ3VzdG9tTGluZWFyLCBfR3JhZGllbnRUeXBlNSk7CiAgICAgICAgICAgIHZhciBfc3VwZXI0ID0gX2NyZWF0ZVN1cGVyKF9DdXN0b21MaW5lYXIpOwogICAgICAgICAgICBmdW5jdGlvbiBfQ3VzdG9tTGluZWFyKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXM1OwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfQ3VzdG9tTGluZWFyKTsKICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICBpZiAoX3RoaXM1ID0gX3N1cGVyNC5jYWxsKHRoaXMpLCBfdGhpczUuZ3JhZGllbnQgPSAibGluZWFyIiwgX3RoaXM1LmNvbG9ycyA9IG5ldyBBcnJheSgpLCBBcnJheS5pc0FycmF5KGUpICYmIGUubGVuZ3RoID49IDIgPyAoX3RoaXM1Lm1heCA9IGVbMV0sIF90aGlzNS5taW4gPSBlWzBdLCBhID0gdCkgOiAoX3RoaXM1Lm1pbiA9IGUsIF90aGlzNS5tYXggPSB0LCBhID0gciksIGEpIHsKICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3IxMCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGEpLAogICAgICAgICAgICAgICAgICBfc3RlcDEwOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IxMC5zKCk7ICEoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX2U3NSA9IF9zdGVwMTAudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmNvbG9ycy5wdXNoKHMuQ0MuY29sb3IoX2U3NSkpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTAuZShlcnIpOwogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTAuZigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSBfdGhpczUuY29sb3JzLnB1c2gocy5DQy5jb2xvcigwKSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzNSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9DdXN0b21MaW5lYXIsIFt7CiAgICAgICAgICAgICAga2V5OiAicmFuZ2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByYW5nZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMubWluICYmIHZvaWQgMCAhPT0gdGhpcy5tYXggPyBbdGhpcy5taW4sIHRoaXMubWF4XSA6IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidmFsdWVUb0hleCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlVG9IZXgoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIsIG47CiAgICAgICAgICAgICAgICBpZiAodCA/IChyID0gdFswXSwgbiA9IHRbMV0pIDogKHIgPSB0aGlzLm1pbiwgbiA9IHRoaXMubWF4KSwgdm9pZCAwID09PSBlKSByZXR1cm4gMTY3NzcyMTU7CiAgICAgICAgICAgICAgICB2YXIgbyA9IGEociwgbiwgZSk7CiAgICAgICAgICAgICAgICByID0gby5sbywgbiA9IG8uaGksIGUgPSBvLnZhbDsKICAgICAgICAgICAgICAgIHZhciBsID0gdGhpcy5jb2xvcnMubGVuZ3RoLAogICAgICAgICAgICAgICAgICBoID0gKG4gLSByKSAvIGwsCiAgICAgICAgICAgICAgICAgIGMgPSBNYXRoLm1pbihNYXRoLmZsb29yKChlIC0gcikgLyBoKSwgbCAtIDEpLAogICAgICAgICAgICAgICAgICB1ID0gTWF0aC5taW4oYyArIDEsIGwgLSAxKSwKICAgICAgICAgICAgICAgICAgZiA9IChlIC0gciAtIGMgKiBoKSAvIGgsCiAgICAgICAgICAgICAgICAgIHAgPSB0aGlzLmNvbG9yc1tjXSwKICAgICAgICAgICAgICAgICAgZyA9IHRoaXMuY29sb3JzW3VdOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzLkNvbG9yKHAuciArIGYgKiAoZy5yIC0gcC5yKSwgcC5nICsgZiAqIChnLmcgLSBwLmcpLCBwLmIgKyBmICogKGcuYiAtIHAuYikpLmdldEhleCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX0N1c3RvbUxpbmVhcjsKICAgICAgICAgIH0oX0dyYWRpZW50VHlwZSk7CiAgICAgICAgICB2YXIgbyA9IHsKICAgICAgICAgICAgcndiOiBfUldCLAogICAgICAgICAgICBSV0I6IF9SV0IsCiAgICAgICAgICAgIHJveWdiOiBfUk9ZR0IsCiAgICAgICAgICAgIFJPWUdCOiBfUk9ZR0IsCiAgICAgICAgICAgIHNpbmVib3c6IF9TaW5lYm93LAogICAgICAgICAgICBsaW5lYXI6IF9DdXN0b21MaW5lYXIKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgX0dyYWRpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfR3JhZGllbnRUeXBlNikgewogICAgICAgICAgICBfaW5oZXJpdHMoX0dyYWRpZW50LCBfR3JhZGllbnRUeXBlNik7CiAgICAgICAgICAgIHZhciBfc3VwZXI1ID0gX2NyZWF0ZVN1cGVyKF9HcmFkaWVudCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9HcmFkaWVudCgpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0dyYWRpZW50KTsKICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfR3JhZGllbnQsIFt7CiAgICAgICAgICAgICAga2V5OiAidmFsdWVUb0hleCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlVG9IZXgoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmFuZ2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByYW5nZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX0dyYWRpZW50OwogICAgICAgICAgfShfR3JhZGllbnRUeXBlKTsKICAgICAgICAgIF9HcmFkaWVudC5SV0IgPSBfUldCLCBfR3JhZGllbnQuUk9ZR0IgPSBfUk9ZR0IsIF9HcmFkaWVudC5TaW5lYm93ID0gX1NpbmVib3csIF9HcmFkaWVudC5DdXN0b21MaW5lYXIgPSBfQ3VzdG9tTGluZWFyLCBfR3JhZGllbnQuYnVpbHRpbkdyYWRpZW50cyA9IG8sIF9HcmFkaWVudC5ub3JtYWxpemVWYWx1ZSA9IGEsIF9HcmFkaWVudC5nZXRHcmFkaWVudCA9IG47CiAgICAgICAgfSwKICAgICAgICA3ODI1OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIExhYmVsOiBmdW5jdGlvbiBMYWJlbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0xhYmVsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBMYWJlbENvdW50OiBmdW5jdGlvbiBMYWJlbENvdW50KCkgewogICAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig3NjkzKSwKICAgICAgICAgICAgYSA9IHIoMTQ2MCksCiAgICAgICAgICAgIG4gPSByKDI1NTApOwogICAgICAgICAgdmFyIG8gPSAwOwogICAgICAgICAgZnVuY3Rpb24gbChlLCB0LCByKSB7CiAgICAgICAgICAgIHZhciBzID0gcjsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZSAmJiAoZSBpbnN0YW5jZW9mIG4uQ29sb3IgPyBzID0gZS5zY2FsZWQoKSA6IHZvaWQgMCAhPT0gKHMgPSBuLkNDLmNvbG9yKGUpKS5zY2FsZWQgJiYgKHMgPSBzLnNjYWxlZCgpKSksIHZvaWQgMCAhPT0gdCAmJiAocy5hID0gcGFyc2VGbG9hdCh0KSksIHM7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgX0xhYmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX0xhYmVsKGUsIHQpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0xhYmVsKTsKICAgICAgICAgICAgICB0aGlzLmlkID0gbysrLCB0aGlzLnN0eWxlc3BlYyA9IHQgfHwge30sIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIiksIHRoaXMuY2FudmFzLndpZHRoID0gMTM0LCB0aGlzLmNhbnZhcy5oZWlnaHQgPSAzNSwgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgiMmQiKSwgdGhpcy5zcHJpdGUgPSBuZXcgcy5TcHJpdGUoKSwgdGhpcy50ZXh0ID0gZSwgdGhpcy5mcmFtZSA9IHRoaXMuc3R5bGVzcGVjLmZyYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfTGFiZWwsIFt7CiAgICAgICAgICAgICAga2V5OiAiZ2V0U3R5bGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0eWxlc3BlYzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRDb250ZXh0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udGV4dCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5zdHlsZXNwZWMsCiAgICAgICAgICAgICAgICAgIHQgPSB2b2lkIDAgIT09IGUudXNlU2NyZWVuICYmIGUudXNlU2NyZWVuLAogICAgICAgICAgICAgICAgICByID0gZS5zaG93QmFja2dyb3VuZDsKICAgICAgICAgICAgICAgICIwIiAhPT0gciAmJiAiZmFsc2UiICE9PSByIHx8IChyID0gITEpLCB2b2lkIDAgPT09IHIgJiYgKHIgPSAhMCk7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGUuZm9udCA/IGUuZm9udCA6ICJzYW5zLXNlcmlmIiwKICAgICAgICAgICAgICAgICAgbyA9IHBhcnNlSW50KGUuZm9udFNpemUpID8gcGFyc2VJbnQoZS5mb250U2l6ZSkgOiAxOCwKICAgICAgICAgICAgICAgICAgaCA9IGwoZS5mb250Q29sb3IsIGUuZm9udE9wYWNpdHksIHsKICAgICAgICAgICAgICAgICAgICByOiAyNTUsCiAgICAgICAgICAgICAgICAgICAgZzogMjU1LAogICAgICAgICAgICAgICAgICAgIGI6IDI1NSwKICAgICAgICAgICAgICAgICAgICBhOiAxCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBjID0gZS5wYWRkaW5nID8gZS5wYWRkaW5nIDogNCwKICAgICAgICAgICAgICAgICAgdSA9IGUuYm9yZGVyVGhpY2tuZXNzID8gZS5ib3JkZXJUaGlja25lc3MgOiAwLAogICAgICAgICAgICAgICAgICBmID0gbChlLmJhY2tncm91bmRDb2xvciwgZS5iYWNrZ3JvdW5kT3BhY2l0eSwgewogICAgICAgICAgICAgICAgICAgIHI6IDAsCiAgICAgICAgICAgICAgICAgICAgZzogMCwKICAgICAgICAgICAgICAgICAgICBiOiAwLAogICAgICAgICAgICAgICAgICAgIGE6IDEKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIHAgPSBsKGUuYm9yZGVyQ29sb3IsIGUuYm9yZGVyT3BhY2l0eSwgZiksCiAgICAgICAgICAgICAgICAgIGcgPSBlLnBvc2l0aW9uID8gZS5wb3NpdGlvbiA6IHsKICAgICAgICAgICAgICAgICAgICB4OiAtMTAsCiAgICAgICAgICAgICAgICAgICAgeTogMSwKICAgICAgICAgICAgICAgICAgICB6OiAxCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHYgPSB2b2lkIDAgPT09IGUuaW5Gcm9udCB8fCBlLmluRnJvbnQ7CiAgICAgICAgICAgICAgICAiZmFsc2UiICE9PSB2ICYmICIwIiAhPT0gdiB8fCAodiA9ICExKTsKICAgICAgICAgICAgICAgIHZhciBfID0gZS5hbGlnbm1lbnQgfHwgcy5TcHJpdGVBbGlnbm1lbnQudG9wTGVmdDsKICAgICAgICAgICAgICAgICJzdHJpbmciID09IHR5cGVvZiBfICYmIF8gaW4gcy5TcHJpdGVBbGlnbm1lbnQgJiYgKF8gPSBzLlNwcml0ZUFsaWdubWVudFtfXSk7CiAgICAgICAgICAgICAgICB2YXIgeSA9ICIiOwogICAgICAgICAgICAgICAgZS5ib2xkICYmICh5ID0gImJvbGQgIiksIHRoaXMuY29udGV4dC5mb250ID0geSArIG8gKyAicHggICIgKyBuOwogICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50ZXh0KS53aWR0aDsKICAgICAgICAgICAgICAgIHIgfHwgKHUgPSAwKTsKICAgICAgICAgICAgICAgIHZhciB3ID0gYiArIDIuNSAqIHUgKyAyICogYywKICAgICAgICAgICAgICAgICAgeCA9IDEuMjUgKiBvICsgMiAqIHUgKyAyICogYzsKICAgICAgICAgICAgICAgIGlmIChlLmJhY2tncm91bmRJbWFnZSkgewogICAgICAgICAgICAgICAgICB2YXIgQSA9IGUuYmFja2dyb3VuZEltYWdlLAogICAgICAgICAgICAgICAgICAgIEMgPSBlLmJhY2tncm91bmRXaWR0aCA/IGUuYmFja2dyb3VuZFdpZHRoIDogQS53aWR0aCwKICAgICAgICAgICAgICAgICAgICBTID0gZS5iYWNrZ3JvdW5kSGVpZ2h0ID8gZS5iYWNrZ3JvdW5kSGVpZ2h0IDogQS5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgIEMgPiB3ICYmICh3ID0gQyksIFMgPiB4ICYmICh4ID0gUyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW52YXMud2lkdGggPSB3LCB0aGlzLmNhbnZhcy5oZWlnaHQgPSB4LCB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpLCB5ID0gIiIsIGUuYm9sZCAmJiAoeSA9ICJib2xkICIpLCB0aGlzLmNvbnRleHQuZm9udCA9IHkgKyBvICsgInB4ICAiICsgbiwgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICJyZ2JhKCIgKyBmLnIgKyAiLCIgKyBmLmcgKyAiLCIgKyBmLmIgKyAiLCIgKyBmLmEgKyAiKSIsIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICJyZ2JhKCIgKyBwLnIgKyAiLCIgKyBwLmcgKyAiLCIgKyBwLmIgKyAiLCIgKyBwLmEgKyAiKSIsIGUuYmFja2dyb3VuZEdyYWRpZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDY4ID0gdGhpcy5jb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIHggLyAyLCB3LCB4IC8gMiksCiAgICAgICAgICAgICAgICAgICAgX3I0MCA9IGEuR3JhZGllbnQuZ2V0R3JhZGllbnQoZS5iYWNrZ3JvdW5kR3JhZGllbnQpLAogICAgICAgICAgICAgICAgICAgIF9zMjggPSBfcjQwLnJhbmdlKCksCiAgICAgICAgICAgICAgICAgICAgX24xMyA9IC0xLAogICAgICAgICAgICAgICAgICAgIF9vMTEgPSAxOwogICAgICAgICAgICAgICAgICBfczI4ICYmIChfbjEzID0gX3MyOFswXSwgX28xMSA9IF9zMjhbMV0pOwogICAgICAgICAgICAgICAgICB2YXIgX2g4ID0gX28xMSAtIF9uMTM7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lNzYgPSAwOyBfZTc2IDwgMS4wMTsgX2U3NiArPSAuMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBfczI5ID0gbChfcjQwLnZhbHVlVG9IZXgoX24xMyArIF9oOCAqIF9lNzYpKSwKICAgICAgICAgICAgICAgICAgICAgIF9hMTcgPSAicmdiYSgiICsgX3MyOS5yICsgIiwiICsgX3MyOS5nICsgIiwiICsgX3MyOS5iICsgIiwiICsgX3MyOS5hICsgIikiOwogICAgICAgICAgICAgICAgICAgIF90NjguYWRkQ29sb3JTdG9wKF9lNzYsIF9hMTcpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBfdDY4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVXaWR0aCA9IHUsIHIgJiYgZnVuY3Rpb24gKGUsIHQsIHIsIHMsIGEsIG4sIG8pIHsKICAgICAgICAgICAgICAgICAgZS5iZWdpblBhdGgoKSwgZS5tb3ZlVG8odCArIG4sIHIpLCBlLmxpbmVUbyh0ICsgcyAtIG4sIHIpLCBlLnF1YWRyYXRpY0N1cnZlVG8odCArIHMsIHIsIHQgKyBzLCByICsgbiksIGUubGluZVRvKHQgKyBzLCByICsgYSAtIG4pLCBlLnF1YWRyYXRpY0N1cnZlVG8odCArIHMsIHIgKyBhLCB0ICsgcyAtIG4sIHIgKyBhKSwgZS5saW5lVG8odCArIG4sIHIgKyBhKSwgZS5xdWFkcmF0aWNDdXJ2ZVRvKHQsIHIgKyBhLCB0LCByICsgYSAtIG4pLCBlLmxpbmVUbyh0LCByICsgbiksIGUucXVhZHJhdGljQ3VydmVUbyh0LCByLCB0ICsgbiwgciksIGUuY2xvc2VQYXRoKCksIGUuZmlsbCgpLCBvICYmIGUuc3Ryb2tlKCk7CiAgICAgICAgICAgICAgICB9KHRoaXMuY29udGV4dCwgdSwgdSwgdyAtIDIgKiB1LCB4IC0gMiAqIHUsIDYsIHUgPiAwKSwgZS5iYWNrZ3JvdW5kSW1hZ2UgJiYgdGhpcy5jb250ZXh0LmRyYXdJbWFnZShBLCAwLCAwLCB3LCB4KSwgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICJyZ2JhKCIgKyBoLnIgKyAiLCIgKyBoLmcgKyAiLCIgKyBoLmIgKyAiLCIgKyBoLmEgKyAiKSIsIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRleHQsIHUgKyBjLCBvICsgdSArIGMsIGIpOwogICAgICAgICAgICAgICAgdmFyIE0gPSBuZXcgcy5UZXh0dXJlKHRoaXMuY2FudmFzKTsKICAgICAgICAgICAgICAgIE0ubmVlZHNVcGRhdGUgPSAhMCwgdGhpcy5zcHJpdGUubWF0ZXJpYWwgPSBuZXcgcy5TcHJpdGVNYXRlcmlhbCh7CiAgICAgICAgICAgICAgICAgIG1hcDogTSwKICAgICAgICAgICAgICAgICAgdXNlU2NyZWVuQ29vcmRpbmF0ZXM6IHQsCiAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogXywKICAgICAgICAgICAgICAgICAgZGVwdGhUZXN0OiAhdiwKICAgICAgICAgICAgICAgICAgc2NyZWVuT2Zmc2V0OiBlLnNjcmVlbk9mZnNldCB8fCBudWxsCiAgICAgICAgICAgICAgICB9KSwgdGhpcy5zcHJpdGUuc2NhbGUuc2V0KDEsIDEsIDEpLCB0aGlzLnNwcml0ZS5wb3NpdGlvbi5zZXQoZy54LCBnLnksIGcueik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzcG9zZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7CiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHRoaXMuc3ByaXRlLm1hdGVyaWFsLm1hcCAmJiB0aGlzLnNwcml0ZS5tYXRlcmlhbC5tYXAuZGlzcG9zZSgpLCB2b2lkIDAgIT09IHRoaXMuc3ByaXRlLm1hdGVyaWFsICYmIHRoaXMuc3ByaXRlLm1hdGVyaWFsLmRpc3Bvc2UoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9MYWJlbDsKICAgICAgICAgIH0oKTsKICAgICAgICB9LAogICAgICAgIDkxOTI6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgTWFyY2hpbmdDdWJlOiBmdW5jdGlvbiBNYXJjaGluZ0N1YmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9NYXJjaGluZ0N1YmU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1hcmNoaW5nQ3ViZUluaXRpYWxpemVyOiBmdW5jdGlvbiBNYXJjaGluZ0N1YmVJbml0aWFsaXplcigpIHsKICAgICAgICAgICAgICByZXR1cm4gX01hcmNoaW5nQ3ViZUluaXRpYWxpemVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBQb2ludEdyaWQ6IGZ1bmN0aW9uIFBvaW50R3JpZCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX1BvaW50R3JpZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUHJvdGVpblN1cmZhY2U6IGZ1bmN0aW9uIChfUHJvdGVpblN1cmZhY2UpIHsKICAgICAgICAgICAgICBmdW5jdGlvbiBQcm90ZWluU3VyZmFjZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfUHJvdGVpblN1cmZhY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgUHJvdGVpblN1cmZhY2UudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX1Byb3RlaW5TdXJmYWNlLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICByZXR1cm4gUHJvdGVpblN1cmZhY2U7CiAgICAgICAgICAgIH0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiBQcm90ZWluU3VyZmFjZTsKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIFN1cmZhY2VUeXBlOiBmdW5jdGlvbiBTdXJmYWNlVHlwZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0U3luY1N1cmZhY2U6IGZ1bmN0aW9uIHNldFN5bmNTdXJmYWNlKCkgewogICAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzeW5jU3VyZmFjZTogZnVuY3Rpb24gc3luY1N1cmZhY2UoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgIGEgPSByKDk2NTIpOwogICAgICAgICAgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGVbZS5WRFcgPSAxXSA9ICJWRFciLCBlW2UuTVMgPSAyXSA9ICJNUyIsIGVbZS5TQVMgPSAzXSA9ICJTQVMiLCBlW2UuU0VTID0gNF0gPSAiU0VTIjsKICAgICAgICAgIH0ocyB8fCAocyA9IHt9KSk7CiAgICAgICAgICB2YXIgbiA9ICExOwogICAgICAgICAgZnVuY3Rpb24gbyhlKSB7CiAgICAgICAgICAgIG4gPSBlOwogICAgICAgICAgfQogICAgICAgICAgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoIk1TSUUgIikgPj0gMCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJUcmlkZW50LyIpID49IDApICYmIChuID0gITApOwogICAgICAgICAgdmFyIF9NYXJjaGluZ0N1YmVJbml0aWFsaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9NYXJjaGluZ0N1YmVJbml0aWFsaXplcigpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01hcmNoaW5nQ3ViZUluaXRpYWxpemVyKTsKICAgICAgICAgICAgICB0aGlzLklTRE9ORSA9IDIsIHRoaXMuZWRnZVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAyODE2LCAwLCAwLCAwLCAxNzkyLCAwLCAzMzI4LCAzNTg0LCAzODQwLCAwLCAwLCAwLCAxMzgsIDAsIDIxLCAwLCAxMzQsIDAsIDAsIDAsIDY1MiwgMCwgMjA2NywgMzg2NSwgMzYwMCwgMCwgMCwgMCwgNDIsIDAsIDAsIDAsIDI5NCwgMCwgMCwgMjEsIDI4LCAwLCAzODc1LCAxMDQ5LCAzMzYwLCAwLCAxNjgsIDE2MiwgMTcwLCAwLCA2NDUsIDI0NzUsIDIyMTAsIDAsIDY4NywgMjkzLCAxNzIsIDQwMTAsIDM3NDcsIDM0OTcsIDMyMzIsIDAsIDAsIDAsIDAsIDAsIDY5LCAwLCA5MDAsIDAsIDAsIDAsIDE3OTIsIDEzOCwgMTMxLCAxNjA4LCAxOTIwLCAwLCA4MSwgMCwgMjA3NCwgODQsIDg1LCA4NCwgODYsIDAsIDgxLCAwLCAzNjc2LCAzMzAsIDExMDUsIDE4ODEsIDE2MTYsIDAsIDAsIDAsIDQyLCAwLCA2OSwgMCwgNTAyLCAwLCAwLCAyMSwgMzU4MCwgMTM4LCAyMDM1LCAxMjczLCAxNTIwLCAyODE2LCAxMDQsIDIzMzcsIDEwNiwgODQwLCA1ODEsIDM2NywgMTAyLCAyODE2LCAzNjk1LCAzNDI5LCAzMTgwLCAxODk4LCAxNjM1LCAxMzg1LCAxMTIwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAzOTEwLCAwLCAwLCA2OSwgNTg4LCA0MiwgMjA4MywgNDEsIDI4ODAsIDAsIDAsIDAsIDE3MjIsIDAsIDIyOTMsIDQwOTUsIDM4MzAsIDAsIDI1NSwgNzU3LCA3NjQsIDI1MzgsIDIyOTEsIDMwNjUsIDI4MDAsIDAsIDAsIDgxLCAzMzgsIDAsIDM5MjUsIDExMTksIDM0MTQsIDg0LCA4NTUsIDg1LCAzNDAsIDIxMzAsIDI4OTksIDg5LCAyMzg0LCAxNzkyLCA3MTIsIDE5NCwgMTE2MiwgNDAzNiwgMzc4MSwgMzUzNSwgMzI3MCwgNzA4LCA3MTksIDE5NywgMjA0LCAzMDE4LCAyNzU1LCAyNTA1LCAyMjQwLCAwLCAwLCAwLCAwLCAxNjgsIDQyMCwgMTY4LCAxOTU4LCAxNjIsIDE2MiwgNjc2LCAyOTg4LCAxNzAsIDE2MywgNjgwLCA5MjgsIDMzMjgsIDMwOTYsIDMzMjgsIDM2NDIsIDUyLCA1MywgMTg1NSwgMTU5MCwgMjM0MCwgMjExMSwgMjg2OSwgMjYyMCwgMjk4LCA1MSwgODI1LCA1NjAsIDM1ODQsIDM1ODQsIDMwOTAsIDM0ODIsIDE2NjgsIDE5NDEsIDExODMsIDE0MzAsIDE0NiwgMjk3NSwgMjA2OSwgMjQ2MCwgMTU0LCA5MTUsIDE1MywgNDAwLCAzODQwLCAzNTkyLCAzMzI5LCAzMDgyLCAxNzk2LCAxNTQxLCAxMjk1LCAxMDMwLCAyODE4LCAyNTc1LCAyMzA5LCAyMDYwLCA3NzgsIDUxNSwgMjY1LCAwXSksIHRoaXMudHJpVGFibGUgPSBbW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgW10sIFsxMSwgOSwgOF0sIFtdLCBbXSwgW10sIFs4LCAxMCwgOV0sIFtdLCBbMTAsIDgsIDExXSwgWzksIDExLCAxMF0sIFs4LCAxMCwgOSwgOCwgMTEsIDEwXSwgW10sIFtdLCBbXSwgWzEsIDcsIDNdLCBbXSwgWzQsIDIsIDBdLCBbXSwgWzIsIDEsIDddLCBbXSwgW10sIFtdLCBbMiwgNywgMywgMiwgOSwgN10sIFtdLCBbMSwgNCwgMTEsIDEsIDAsIDRdLCBbMywgOCwgMCwgMTEsIDksIDQsIDExLCAxMCwgOV0sIFs0LCAxMSwgOSwgMTEsIDEwLCA5XSwgW10sIFtdLCBbXSwgWzUsIDMsIDFdLCBbXSwgW10sIFtdLCBbMiwgNSwgOCwgMiwgMSwgNV0sIFtdLCBbXSwgWzIsIDQsIDBdLCBbMywgMiwgNF0sIFtdLCBbMCwgOSwgMSwgOCwgMTAsIDUsIDgsIDExLCAxMF0sIFszLCA0LCAwLCAzLCAxMCwgNF0sIFs1LCA4LCAxMCwgOCwgMTEsIDEwXSwgW10sIFszLCA1LCA3XSwgWzcsIDEsIDVdLCBbMSwgNywgMywgMSwgNSwgN10sIFtdLCBbOSwgMiwgMCwgOSwgNywgMl0sIFswLCAzLCA4LCAxLCA3LCAxMSwgMSwgNSwgN10sIFsxMSwgMSwgNywgMSwgNSwgN10sIFtdLCBbOSwgMSwgMCwgNSwgMywgMiwgNSwgNywgM10sIFs4LCAyLCA1LCA4LCAwLCAyXSwgWzIsIDUsIDMsIDUsIDcsIDNdLCBbMywgOSwgMSwgMywgOCwgOSwgNywgMTEsIDEwLCA3LCAxMCwgNV0sIFs5LCAxLCAwLCAxMCwgNywgMTEsIDEwLCA1LCA3XSwgWzMsIDgsIDAsIDcsIDEwLCA1LCA3LCAxMSwgMTBdLCBbMTEsIDUsIDcsIDExLCAxMCwgNV0sIFtdLCBbXSwgW10sIFtdLCBbXSwgWzAsIDYsIDJdLCBbXSwgWzcsIDIsIDksIDcsIDksIDhdLCBbXSwgW10sIFtdLCBbOCwgMTAsIDldLCBbNywgMSwgM10sIFs3LCAxLCAwXSwgWzYsIDksIDMsIDYsIDEwLCA5XSwgWzcsIDEwLCA4LCAxMCwgOSwgOF0sIFtdLCBbNiwgMCwgNF0sIFtdLCBbMTEsIDEsIDQsIDExLCAzLCAxXSwgWzIsIDQsIDZdLCBbMiwgMCwgNCwgMiwgNCwgNl0sIFsyLCA0LCA2XSwgWzEsIDQsIDIsIDQsIDYsIDJdLCBbXSwgWzYsIDAsIDRdLCBbXSwgWzIsIDExLCAzLCA2LCA5LCA0LCA2LCAxMCwgOV0sIFs4LCA2LCAxLCA4LCAxLCAzXSwgWzEwLCAwLCA2LCAwLCA0LCA2XSwgWzgsIDAsIDMsIDksIDYsIDEwLCA5LCA0LCA2XSwgWzEwLCA0LCA2LCAxMCwgOSwgNF0sIFtdLCBbXSwgW10sIFs1LCAzLCAxXSwgW10sIFswLCA2LCAyXSwgW10sIFs3LCA0LCA4LCA1LCAyLCAxLCA1LCA2LCAyXSwgW10sIFtdLCBbMiwgNCwgMF0sIFs3LCA0LCA4LCAyLCAxMSwgMywgMTAsIDUsIDZdLCBbNywgMSwgM10sIFs1LCA2LCAxMCwgMCwgOSwgMSwgOCwgNywgNF0sIFs1LCA2LCAxMCwgNywgMCwgMywgNywgNCwgMF0sIFsxMCwgNSwgNiwgNCwgOCwgN10sIFs5LCAxMSwgOF0sIFszLCA1LCA2XSwgWzAsIDUsIDExLCAwLCAxMSwgOF0sIFs2LCAzLCA1LCAzLCAxLCA1XSwgWzMsIDksIDYsIDMsIDgsIDldLCBbOSwgNiwgMCwgNiwgMiwgMF0sIFswLCAzLCA4LCAyLCA1LCA2LCAyLCAxLCA1XSwgWzEsIDYsIDIsIDEsIDUsIDZdLCBbOSwgMTEsIDhdLCBbMSwgMCwgOSwgNiwgMTAsIDUsIDExLCAzLCAyXSwgWzYsIDEwLCA1LCAyLCA4LCAwLCAyLCAxMSwgOF0sIFszLCAyLCAxMSwgMTAsIDUsIDZdLCBbMTAsIDUsIDYsIDksIDMsIDgsIDksIDEsIDNdLCBbMCwgOSwgMSwgNSwgNiwgMTBdLCBbOCwgMCwgMywgMTAsIDUsIDZdLCBbMTAsIDUsIDZdLCBbXSwgW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgWzEsIDEwLCAyLCA5LCAxMSwgNiwgOSwgOCwgMTFdLCBbXSwgW10sIFs2LCAwLCAyXSwgWzMsIDYsIDksIDMsIDIsIDZdLCBbMywgNSwgMV0sIFswLCA1LCAxLCAwLCAxMSwgNV0sIFswLCAzLCA1XSwgWzYsIDksIDExLCA5LCA4LCAxMV0sIFtdLCBbXSwgW10sIFs0LCA1LCA5LCA3LCAxLCAxMCwgNywgMywgMV0sIFtdLCBbMTEsIDYsIDcsIDIsIDQsIDUsIDIsIDAsIDRdLCBbMTEsIDYsIDcsIDgsIDAsIDMsIDEsIDEwLCAyLCA5LCA0LCA1XSwgWzYsIDcsIDExLCAxLCAxMCwgMiwgOSwgNCwgNV0sIFtdLCBbNCwgMSwgMCwgNCwgNSwgMSwgNiwgNywgMywgNiwgMywgMl0sIFs5LCA0LCA1LCAwLCA2LCA3LCAwLCAyLCA2XSwgWzQsIDUsIDksIDYsIDMsIDIsIDYsIDcsIDNdLCBbNiwgNywgMTEsIDUsIDMsIDgsIDUsIDEsIDNdLCBbNiwgNywgMTEsIDQsIDEsIDAsIDQsIDUsIDFdLCBbNCwgNSwgOSwgMywgOCwgMCwgMTEsIDYsIDddLCBbOSwgNCwgNSwgNywgMTEsIDZdLCBbXSwgW10sIFswLCA2LCA0XSwgWzgsIDYsIDQsIDgsIDEsIDZdLCBbXSwgWzAsIDEwLCAyLCAwLCA5LCAxMCwgNCwgOCwgMTEsIDQsIDExLCA2XSwgWzEwLCAyLCAxLCA2LCAwLCAzLCA2LCA0LCAwXSwgWzEwLCAyLCAxLCAxMSwgNCwgOCwgMTEsIDYsIDRdLCBbNCwgMiwgNl0sIFsxLCAwLCA5LCAyLCA0LCA4LCAyLCA2LCA0XSwgWzIsIDQsIDAsIDIsIDYsIDRdLCBbOCwgMiwgNCwgMiwgNiwgNF0sIFsxMSwgNCwgMSwgMTEsIDYsIDRdLCBbMCwgOSwgMSwgNCwgMTEsIDYsIDQsIDgsIDExXSwgWzMsIDYsIDAsIDYsIDQsIDBdLCBbOCwgNiwgNCwgOCwgMTEsIDZdLCBbMTAsIDgsIDldLCBbNiwgMywgOSwgNiwgNywgM10sIFs2LCA3LCAxXSwgWzEwLCA3LCAxLCA3LCAzLCAxXSwgWzcsIDExLCA2LCA4LCAxMCwgMiwgOCwgOSwgMTBdLCBbMTEsIDYsIDcsIDEwLCAwLCA5LCAxMCwgMiwgMF0sIFsyLCAxLCAxMCwgNywgMTEsIDYsIDgsIDAsIDNdLCBbMSwgMTAsIDIsIDYsIDcsIDExXSwgWzcsIDIsIDYsIDcsIDksIDJdLCBbMSwgMCwgOSwgMywgNiwgNywgMywgMiwgNl0sIFs3LCAwLCA2LCAwLCAyLCA2XSwgWzIsIDcsIDMsIDIsIDYsIDddLCBbNywgMTEsIDYsIDMsIDksIDEsIDMsIDgsIDldLCBbOSwgMSwgMCwgMTEsIDYsIDddLCBbMCwgMywgOCwgMTEsIDYsIDddLCBbMTEsIDYsIDddLCBbXSwgW10sIFtdLCBbXSwgWzUsIDMsIDddLCBbOCwgNSwgMiwgOCwgNywgNV0sIFs1LCAzLCA3XSwgWzEsIDEwLCAyLCA1LCA4LCA3LCA1LCA5LCA4XSwgWzEsIDcsIDVdLCBbMSwgNywgNV0sIFs5LCAyLCA3LCA5LCA3LCA1XSwgWzExLCAzLCAyLCA4LCA1LCA5LCA4LCA3LCA1XSwgWzEsIDMsIDcsIDEsIDcsIDVdLCBbMCwgNywgMSwgNywgNSwgMV0sIFs5LCAzLCA1LCAzLCA3LCA1XSwgWzksIDcsIDUsIDksIDgsIDddLCBbOCwgMTAsIDExXSwgWzMsIDQsIDEwLCAzLCAxMCwgMTFdLCBbOCwgMTAsIDExXSwgWzUsIDksIDQsIDEsIDExLCAzLCAxLCAxMCwgMTFdLCBbMiwgNCwgNV0sIFs1LCAyLCA0LCAyLCAwLCA0XSwgWzAsIDMsIDgsIDUsIDksIDQsIDEwLCAyLCAxXSwgWzIsIDEsIDEwLCA5LCA0LCA1XSwgWzIsIDgsIDUsIDIsIDExLCA4XSwgWzMsIDIsIDExLCAxLCA0LCA1LCAxLCAwLCA0XSwgWzksIDQsIDUsIDgsIDIsIDExLCA4LCAwLCAyXSwgWzExLCAzLCAyLCA5LCA0LCA1XSwgWzgsIDUsIDMsIDUsIDEsIDNdLCBbNSwgMCwgNCwgNSwgMSwgMF0sIFszLCA4LCAwLCA0LCA1LCA5XSwgWzksIDQsIDVdLCBbMTEsIDksIDEwXSwgWzExLCA5LCAxMF0sIFsxLCAxMSwgNCwgMSwgMTAsIDExXSwgWzgsIDcsIDQsIDExLCAxLCAxMCwgMTEsIDMsIDFdLCBbMiwgNywgOSwgMiwgOSwgMTBdLCBbNCwgOCwgNywgMCwgMTAsIDIsIDAsIDksIDEwXSwgWzIsIDEsIDEwLCAwLCA3LCA0LCAwLCAzLCA3XSwgWzEwLCAyLCAxLCA4LCA3LCA0XSwgWzEsIDcsIDRdLCBbMywgMiwgMTEsIDQsIDgsIDcsIDksIDEsIDBdLCBbMTEsIDQsIDIsIDQsIDAsIDJdLCBbMiwgMTEsIDMsIDcsIDQsIDhdLCBbNCwgMSwgNywgMSwgMywgN10sIFsxLCAwLCA5LCA4LCA3LCA0XSwgWzMsIDQsIDAsIDMsIDcsIDRdLCBbOCwgNywgNF0sIFs4LCA5LCAxMCwgOCwgMTAsIDExXSwgWzMsIDksIDExLCA5LCAxMCwgMTFdLCBbMCwgMTAsIDgsIDEwLCAxMSwgOF0sIFsxMCwgMywgMSwgMTAsIDExLCAzXSwgWzIsIDgsIDEwLCA4LCA5LCAxMF0sIFs5LCAyLCAwLCA5LCAxMCwgMl0sIFs4LCAwLCAzLCAxLCAxMCwgMl0sIFsxMCwgMiwgMV0sIFsxLCAxMSwgOSwgMTEsIDgsIDldLCBbMTEsIDMsIDIsIDAsIDksIDFdLCBbMTEsIDAsIDIsIDExLCA4LCAwXSwgWzExLCAzLCAyXSwgWzgsIDEsIDMsIDgsIDksIDFdLCBbOSwgMSwgMF0sIFs4LCAwLCAzXSwgW11dLCB0aGlzLmVkZ2VUYWJsZTIgPSBbMCwgMjY1LCA1MTUsIDc3OCwgMjA2MCwgMjMwOSwgMjU3NSwgMjgyMiwgMTAzMCwgMTI5NSwgMTU0MSwgMTgwNCwgMzA4MiwgMzMzMSwgMzU5MywgMzg0MCwgNDAwLCAxNTMsIDkxNSwgNjY2LCAyNDYwLCAyMTk3LCAyOTc1LCAyNzEwLCAxNDMwLCAxMTgzLCAxOTQxLCAxNjkyLCAzNDgyLCAzMjE5LCAzOTkzLCAzNzI4LCA1NjAsIDgyNSwgNTEsIDMxNCwgMjYyMCwgMjg2OSwgMjExMSwgMjM1OCwgMTU5MCwgMTg1NSwgMTA3NywgMTM0MCwgMzY0MiwgMzg5MSwgMzEyOSwgMzM3NiwgOTI4LCA2ODEsIDQxOSwgMTcwLCAyOTg4LCAyNzI1LCAyNDc5LCAyMjE0LCAxOTU4LCAxNzExLCAxNDQ1LCAxMTk2LCA0MDEwLCAzNzQ3LCAzNDk3LCAzMjMyLCAyMjQwLCAyNTA1LCAyNzU1LCAzMDE4LCAyMDQsIDQ1MywgNzE5LCA5NjYsIDMyNzAsIDM1MzUsIDM3ODEsIDQwNDQsIDEyMjYsIDE0NzUsIDE3MzcsIDE5ODQsIDIzODQsIDIxMzcsIDI4OTksIDI2NTAsIDM0OCwgODUsIDg2MywgNTk4LCAzNDE0LCAzMTY3LCAzOTI1LCAzNjc2LCAxMzcwLCAxMTA3LCAxODgxLCAxNjE2LCAyODAwLCAzMDY1LCAyMjkxLCAyNTU0LCA3NjQsIDEwMTMsIDI1NSwgNTAyLCAzODMwLCA0MDk1LCAzMzE3LCAzNTgwLCAxNzg2LCAyMDM1LCAxMjczLCAxNTIwLCAyOTEyLCAyNjY1LCAyNDAzLCAyMTU0LCA4NzYsIDYxMywgMzY3LCAxMDIsIDM5NDIsIDM2OTUsIDM0MjksIDMxODAsIDE4OTgsIDE2MzUsIDEzODUsIDExMjAsIDExMjAsIDEzODUsIDE2MzUsIDE4OTgsIDMxODAsIDM0MjksIDM2OTUsIDM5NDIsIDEwMiwgMzY3LCA2MTMsIDg3NiwgMjE1NCwgMjQwMywgMjY2NSwgMjkxMiwgMTUyMCwgMTI3MywgMjAzNSwgMTc4NiwgMzU4MCwgMzMxNywgNDA5NSwgMzgzMCwgNTAyLCAyNTUsIDEwMTMsIDc2NCwgMjU1NCwgMjI5MSwgMzA2NSwgMjgwMCwgMTYxNiwgMTg4MSwgMTEwNywgMTM3MCwgMzY3NiwgMzkyNSwgMzE2NywgMzQxNCwgNTk4LCA4NjMsIDg1LCAzNDgsIDI2NTAsIDI4OTksIDIxMzcsIDIzODQsIDE5ODQsIDE3MzcsIDE0NzUsIDEyMjYsIDQwNDQsIDM3ODEsIDM1MzUsIDMyNzAsIDk2NiwgNzE5LCA0NTMsIDIwNCwgMzAxOCwgMjc1NSwgMjUwNSwgMjI0MCwgMzIzMiwgMzQ5NywgMzc0NywgNDAxMCwgMTE5NiwgMTQ0NSwgMTcxMSwgMTk1OCwgMjIxNCwgMjQ3OSwgMjcyNSwgMjk4OCwgMTcwLCA0MTksIDY4MSwgOTI4LCAzMzc2LCAzMTI5LCAzODkxLCAzNjQyLCAxMzQwLCAxMDc3LCAxODU1LCAxNTkwLCAyMzU4LCAyMTExLCAyODY5LCAyNjIwLCAzMTQsIDUxLCA4MjUsIDU2MCwgMzcyOCwgMzk5MywgMzIxOSwgMzQ4MiwgMTY5MiwgMTk0MSwgMTE4MywgMTQzMCwgMjcxMCwgMjk3NSwgMjE5NywgMjQ2MCwgNjY2LCA5MTUsIDE1MywgNDAwLCAzODQwLCAzNTkzLCAzMzMxLCAzMDgyLCAxODA0LCAxNTQxLCAxMjk1LCAxMDMwLCAyODIyLCAyNTc1LCAyMzA5LCAyMDYwLCA3NzgsIDUxNSwgMjY1LCAwXSwgdGhpcy50cmlUYWJsZTIgPSBbW10sIFs4LCAzLCAwXSwgWzksIDAsIDFdLCBbOCwgMywgMSwgOCwgMSwgOV0sIFsxMSwgMiwgM10sIFsxMSwgMiwgMCwgMTEsIDAsIDhdLCBbMTEsIDIsIDMsIDAsIDEsIDldLCBbMiwgMSwgMTEsIDEsIDksIDExLCAxMSwgOSwgOF0sIFsxMCwgMSwgMl0sIFs4LCAzLCAwLCAxLCAyLCAxMF0sIFs5LCAwLCAyLCA5LCAyLCAxMF0sIFszLCAyLCA4LCAyLCAxMCwgOCwgOCwgMTAsIDldLCBbMTAsIDEsIDMsIDEwLCAzLCAxMV0sIFsxLCAwLCAxMCwgMCwgOCwgMTAsIDEwLCA4LCAxMV0sIFswLCAzLCA5LCAzLCAxMSwgOSwgOSwgMTEsIDEwXSwgWzgsIDEwLCA5LCA4LCAxMSwgMTBdLCBbOCwgNCwgN10sIFszLCAwLCA0LCAzLCA0LCA3XSwgWzEsIDksIDAsIDgsIDQsIDddLCBbOSwgNCwgMSwgNCwgNywgMSwgMSwgNywgM10sIFsyLCAzLCAxMSwgNywgOCwgNF0sIFs3LCAxMSwgNCwgMTEsIDIsIDQsIDQsIDIsIDBdLCBbMywgMTEsIDIsIDQsIDcsIDgsIDksIDAsIDFdLCBbMiwgNywgMTEsIDIsIDEsIDcsIDEsIDQsIDcsIDEsIDksIDRdLCBbMTAsIDEsIDIsIDgsIDQsIDddLCBbMiwgMTAsIDEsIDAsIDQsIDcsIDAsIDcsIDNdLCBbNCwgNywgOCwgMCwgMiwgMTAsIDAsIDEwLCA5XSwgWzIsIDcsIDMsIDIsIDksIDcsIDcsIDksIDQsIDIsIDEwLCA5XSwgWzgsIDQsIDcsIDExLCAxMCwgMSwgMTEsIDEsIDNdLCBbMTEsIDQsIDcsIDEsIDQsIDExLCAxLCAxMSwgMTAsIDEsIDAsIDRdLCBbMywgOCwgMCwgNywgMTEsIDQsIDExLCA5LCA0LCAxMSwgMTAsIDldLCBbNywgMTEsIDQsIDQsIDExLCA5LCAxMSwgMTAsIDldLCBbOSwgNSwgNF0sIFszLCAwLCA4LCA0LCA5LCA1XSwgWzUsIDQsIDAsIDUsIDAsIDFdLCBbNCwgOCwgNSwgOCwgMywgNSwgNSwgMywgMV0sIFsxMSwgMiwgMywgOSwgNSwgNF0sIFs5LCA1LCA0LCA4LCAxMSwgMiwgOCwgMiwgMF0sIFszLCAxMSwgMiwgMSwgNSwgNCwgMSwgNCwgMF0sIFs4LCA1LCA0LCAyLCA1LCA4LCAyLCA4LCAxMSwgMiwgMSwgNV0sIFsyLCAxMCwgMSwgOSwgNSwgNF0sIFswLCA4LCAzLCA1LCA0LCA5LCAxMCwgMSwgMl0sIFsxMCwgNSwgMiwgNSwgNCwgMiwgMiwgNCwgMF0sIFszLCA0LCA4LCAzLCAyLCA0LCAyLCA1LCA0LCAyLCAxMCwgNV0sIFs1LCA0LCA5LCAxLCAzLCAxMSwgMSwgMTEsIDEwXSwgWzAsIDksIDEsIDQsIDgsIDUsIDgsIDEwLCA1LCA4LCAxMSwgMTBdLCBbMywgNCwgMCwgMywgMTAsIDQsIDQsIDEwLCA1LCAzLCAxMSwgMTBdLCBbNCwgOCwgNSwgNSwgOCwgMTAsIDgsIDExLCAxMF0sIFs5LCA1LCA3LCA5LCA3LCA4XSwgWzAsIDksIDMsIDksIDUsIDMsIDMsIDUsIDddLCBbOCwgMCwgNywgMCwgMSwgNywgNywgMSwgNV0sIFsxLCA3LCAzLCAxLCA1LCA3XSwgWzExLCAyLCAzLCA4LCA5LCA1LCA4LCA1LCA3XSwgWzksIDIsIDAsIDksIDcsIDIsIDIsIDcsIDExLCA5LCA1LCA3XSwgWzAsIDMsIDgsIDIsIDEsIDExLCAxLCA3LCAxMSwgMSwgNSwgN10sIFsyLCAxLCAxMSwgMTEsIDEsIDcsIDEsIDUsIDddLCBbMSwgMiwgMTAsIDUsIDcsIDgsIDUsIDgsIDldLCBbOSwgMSwgMCwgMTAsIDUsIDIsIDUsIDMsIDIsIDUsIDcsIDNdLCBbNSwgMiwgMTAsIDgsIDIsIDUsIDgsIDUsIDcsIDgsIDAsIDJdLCBbMTAsIDUsIDIsIDIsIDUsIDMsIDUsIDcsIDNdLCBbMywgOSwgMSwgMywgOCwgOSwgNywgMTEsIDEwLCA3LCAxMCwgNV0sIFs5LCAxLCAwLCAxMCwgNywgMTEsIDEwLCA1LCA3XSwgWzMsIDgsIDAsIDcsIDEwLCA1LCA3LCAxMSwgMTBdLCBbMTEsIDUsIDcsIDExLCAxMCwgNV0sIFsxMSwgNywgNl0sIFswLCA4LCAzLCAxMSwgNywgNl0sIFs5LCAwLCAxLCAxMSwgNywgNl0sIFs3LCA2LCAxMSwgMywgMSwgOSwgMywgOSwgOF0sIFsyLCAzLCA3LCAyLCA3LCA2XSwgWzgsIDcsIDAsIDcsIDYsIDAsIDAsIDYsIDJdLCBbMSwgOSwgMCwgMywgNywgNiwgMywgNiwgMl0sIFs3LCA2LCAyLCA3LCAyLCA5LCAyLCAxLCA5LCA3LCA5LCA4XSwgWzEsIDIsIDEwLCA2LCAxMSwgN10sIFsyLCAxMCwgMSwgNywgNiwgMTEsIDgsIDMsIDBdLCBbMTEsIDcsIDYsIDEwLCA5LCAwLCAxMCwgMCwgMl0sIFs3LCA2LCAxMSwgMywgMiwgOCwgOCwgMiwgMTAsIDgsIDEwLCA5XSwgWzYsIDEwLCA3LCAxMCwgMSwgNywgNywgMSwgM10sIFs2LCAxMCwgMSwgNiwgMSwgNywgNywgMSwgMCwgNywgMCwgOF0sIFs5LCAwLCAzLCA2LCA5LCAzLCA2LCAxMCwgOSwgNiwgMywgN10sIFs2LCAxMCwgNywgNywgMTAsIDgsIDEwLCA5LCA4XSwgWzgsIDQsIDYsIDgsIDYsIDExXSwgWzExLCAzLCA2LCAzLCAwLCA2LCA2LCAwLCA0XSwgWzAsIDEsIDksIDQsIDYsIDExLCA0LCAxMSwgOF0sIFsxLCA5LCA0LCAxMSwgMSwgNCwgMTEsIDMsIDEsIDExLCA0LCA2XSwgWzMsIDgsIDIsIDgsIDQsIDIsIDIsIDQsIDZdLCBbMiwgMCwgNCwgMiwgNCwgNl0sIFsxLCA5LCAwLCAzLCA4LCAyLCAyLCA4LCA0LCAyLCA0LCA2XSwgWzksIDQsIDEsIDEsIDQsIDIsIDQsIDYsIDJdLCBbMTAsIDEsIDIsIDExLCA4LCA0LCAxMSwgNCwgNl0sIFsxMCwgMSwgMiwgMTEsIDMsIDYsIDYsIDMsIDAsIDYsIDAsIDRdLCBbMCwgMiwgMTAsIDAsIDEwLCA5LCA0LCAxMSwgOCwgNCwgNiwgMTFdLCBbMiwgMTEsIDMsIDYsIDksIDQsIDYsIDEwLCA5XSwgWzgsIDQsIDYsIDgsIDYsIDEsIDYsIDEwLCAxLCA4LCAxLCAzXSwgWzEsIDAsIDEwLCAxMCwgMCwgNiwgMCwgNCwgNl0sIFs4LCAwLCAzLCA5LCA2LCAxMCwgOSwgNCwgNl0sIFsxMCwgNCwgNiwgMTAsIDksIDRdLCBbOSwgNSwgNCwgNywgNiwgMTFdLCBbNCwgOSwgNSwgMywgMCwgOCwgMTEsIDcsIDZdLCBbNiwgMTEsIDcsIDQsIDAsIDEsIDQsIDEsIDVdLCBbNiwgMTEsIDcsIDQsIDgsIDUsIDUsIDgsIDMsIDUsIDMsIDFdLCBbNCwgOSwgNSwgNiwgMiwgMywgNiwgMywgN10sIFs5LCA1LCA0LCA4LCA3LCAwLCAwLCA3LCA2LCAwLCA2LCAyXSwgWzQsIDAsIDEsIDQsIDEsIDUsIDYsIDMsIDcsIDYsIDIsIDNdLCBbNywgNCwgOCwgNSwgMiwgMSwgNSwgNiwgMl0sIFs2LCAxMSwgNywgMSwgMiwgMTAsIDksIDUsIDRdLCBbMTEsIDcsIDYsIDgsIDMsIDAsIDEsIDIsIDEwLCA5LCA1LCA0XSwgWzExLCA3LCA2LCAxMCwgNSwgMiwgMiwgNSwgNCwgMiwgNCwgMF0sIFs3LCA0LCA4LCAyLCAxMSwgMywgMTAsIDUsIDZdLCBbNCwgOSwgNSwgNiwgMTAsIDcsIDcsIDEwLCAxLCA3LCAxLCAzXSwgWzUsIDYsIDEwLCAwLCA5LCAxLCA4LCA3LCA0XSwgWzUsIDYsIDEwLCA3LCAwLCAzLCA3LCA0LCAwXSwgWzEwLCA1LCA2LCA0LCA4LCA3XSwgWzUsIDYsIDksIDYsIDExLCA5LCA5LCAxMSwgOF0sIFswLCA5LCA1LCAwLCA1LCAzLCAzLCA1LCA2LCAzLCA2LCAxMV0sIFswLCAxLCA1LCAwLCA1LCAxMSwgNSwgNiwgMTEsIDAsIDExLCA4XSwgWzExLCAzLCA2LCA2LCAzLCA1LCAzLCAxLCA1XSwgWzksIDUsIDYsIDMsIDksIDYsIDMsIDgsIDksIDMsIDYsIDJdLCBbNSwgNiwgOSwgOSwgNiwgMCwgNiwgMiwgMF0sIFswLCAzLCA4LCAyLCA1LCA2LCAyLCAxLCA1XSwgWzEsIDYsIDIsIDEsIDUsIDZdLCBbMSwgMiwgMTAsIDUsIDYsIDksIDksIDYsIDExLCA5LCAxMSwgOF0sIFsxLCAwLCA5LCA2LCAxMCwgNSwgMTEsIDMsIDJdLCBbNiwgMTAsIDUsIDIsIDgsIDAsIDIsIDExLCA4XSwgWzMsIDIsIDExLCAxMCwgNSwgNl0sIFsxMCwgNSwgNiwgOSwgMywgOCwgOSwgMSwgM10sIFswLCA5LCAxLCA1LCA2LCAxMF0sIFs4LCAwLCAzLCAxMCwgNSwgNl0sIFsxMCwgNSwgNl0sIFsxMCwgNiwgNV0sIFs4LCAzLCAwLCAxMCwgNiwgNV0sIFswLCAxLCA5LCA1LCAxMCwgNl0sIFsxMCwgNiwgNSwgOSwgOCwgMywgOSwgMywgMV0sIFszLCAxMSwgMiwgMTAsIDYsIDVdLCBbNiwgNSwgMTAsIDIsIDAsIDgsIDIsIDgsIDExXSwgWzEsIDksIDAsIDYsIDUsIDEwLCAxMSwgMiwgM10sIFsxLCAxMCwgMiwgNSwgOSwgNiwgOSwgMTEsIDYsIDksIDgsIDExXSwgWzEsIDIsIDYsIDEsIDYsIDVdLCBbMCwgOCwgMywgMiwgNiwgNSwgMiwgNSwgMV0sIFs1LCA5LCA2LCA5LCAwLCA2LCA2LCAwLCAyXSwgWzksIDYsIDUsIDMsIDYsIDksIDMsIDksIDgsIDMsIDIsIDZdLCBbMTEsIDYsIDMsIDYsIDUsIDMsIDMsIDUsIDFdLCBbMCwgNSwgMSwgMCwgMTEsIDUsIDUsIDExLCA2LCAwLCA4LCAxMV0sIFswLCA1LCA5LCAwLCAzLCA1LCAzLCA2LCA1LCAzLCAxMSwgNl0sIFs1LCA5LCA2LCA2LCA5LCAxMSwgOSwgOCwgMTFdLCBbMTAsIDYsIDUsIDQsIDcsIDhdLCBbNSwgMTAsIDYsIDcsIDMsIDAsIDcsIDAsIDRdLCBbNSwgMTAsIDYsIDAsIDEsIDksIDgsIDQsIDddLCBbNCwgNSwgOSwgNiwgNywgMTAsIDcsIDEsIDEwLCA3LCAzLCAxXSwgWzcsIDgsIDQsIDIsIDMsIDExLCAxMCwgNiwgNV0sIFsxMSwgNiwgNywgMTAsIDIsIDUsIDIsIDQsIDUsIDIsIDAsIDRdLCBbMTEsIDYsIDcsIDgsIDAsIDMsIDEsIDEwLCAyLCA5LCA0LCA1XSwgWzYsIDcsIDExLCAxLCAxMCwgMiwgOSwgNCwgNV0sIFs3LCA4LCA0LCA1LCAxLCAyLCA1LCAyLCA2XSwgWzQsIDEsIDAsIDQsIDUsIDEsIDYsIDcsIDMsIDYsIDMsIDJdLCBbOSwgNCwgNSwgOCwgMCwgNywgMCwgNiwgNywgMCwgMiwgNl0sIFs0LCA1LCA5LCA2LCAzLCAyLCA2LCA3LCAzXSwgWzYsIDcsIDExLCA0LCA1LCA4LCA1LCAzLCA4LCA1LCAxLCAzXSwgWzYsIDcsIDExLCA0LCAxLCAwLCA0LCA1LCAxXSwgWzQsIDUsIDksIDMsIDgsIDAsIDExLCA2LCA3XSwgWzksIDQsIDUsIDcsIDExLCA2XSwgWzEwLCA2LCA0LCAxMCwgNCwgOV0sIFs4LCAzLCAwLCA5LCAxMCwgNiwgOSwgNiwgNF0sIFsxLCAxMCwgMCwgMTAsIDYsIDAsIDAsIDYsIDRdLCBbOCwgNiwgNCwgOCwgMSwgNiwgNiwgMSwgMTAsIDgsIDMsIDFdLCBbMiwgMywgMTEsIDYsIDQsIDksIDYsIDksIDEwXSwgWzAsIDEwLCAyLCAwLCA5LCAxMCwgNCwgOCwgMTEsIDQsIDExLCA2XSwgWzEwLCAyLCAxLCAxMSwgNiwgMywgNiwgMCwgMywgNiwgNCwgMF0sIFsxMCwgMiwgMSwgMTEsIDQsIDgsIDExLCA2LCA0XSwgWzksIDEsIDQsIDEsIDIsIDQsIDQsIDIsIDZdLCBbMSwgMCwgOSwgMywgMiwgOCwgMiwgNCwgOCwgMiwgNiwgNF0sIFsyLCA0LCAwLCAyLCA2LCA0XSwgWzMsIDIsIDgsIDgsIDIsIDQsIDIsIDYsIDRdLCBbMSwgNCwgOSwgMTEsIDQsIDEsIDExLCAxLCAzLCAxMSwgNiwgNF0sIFswLCA5LCAxLCA0LCAxMSwgNiwgNCwgOCwgMTFdLCBbMTEsIDYsIDMsIDMsIDYsIDAsIDYsIDQsIDBdLCBbOCwgNiwgNCwgOCwgMTEsIDZdLCBbNiwgNywgMTAsIDcsIDgsIDEwLCAxMCwgOCwgOV0sIFs5LCAzLCAwLCA2LCAzLCA5LCA2LCA5LCAxMCwgNiwgNywgM10sIFs2LCAxLCAxMCwgNiwgNywgMSwgNywgMCwgMSwgNywgOCwgMF0sIFs2LCA3LCAxMCwgMTAsIDcsIDEsIDcsIDMsIDFdLCBbNywgMTEsIDYsIDMsIDgsIDIsIDgsIDEwLCAyLCA4LCA5LCAxMF0sIFsxMSwgNiwgNywgMTAsIDAsIDksIDEwLCAyLCAwXSwgWzIsIDEsIDEwLCA3LCAxMSwgNiwgOCwgMCwgM10sIFsxLCAxMCwgMiwgNiwgNywgMTFdLCBbNywgMiwgNiwgNywgOSwgMiwgMiwgOSwgMSwgNywgOCwgOV0sIFsxLCAwLCA5LCAzLCA2LCA3LCAzLCAyLCA2XSwgWzgsIDAsIDcsIDcsIDAsIDYsIDAsIDIsIDZdLCBbMiwgNywgMywgMiwgNiwgN10sIFs3LCAxMSwgNiwgMywgOSwgMSwgMywgOCwgOV0sIFs5LCAxLCAwLCAxMSwgNiwgN10sIFswLCAzLCA4LCAxMSwgNiwgN10sIFsxMSwgNiwgN10sIFsxMSwgNywgNSwgMTEsIDUsIDEwXSwgWzMsIDAsIDgsIDcsIDUsIDEwLCA3LCAxMCwgMTFdLCBbOSwgMCwgMSwgMTAsIDExLCA3LCAxMCwgNywgNV0sIFszLCAxLCA5LCAzLCA5LCA4LCA3LCAxMCwgMTEsIDcsIDUsIDEwXSwgWzEwLCAyLCA1LCAyLCAzLCA1LCA1LCAzLCA3XSwgWzUsIDEwLCAyLCA4LCA1LCAyLCA4LCA3LCA1LCA4LCAyLCAwXSwgWzksIDAsIDEsIDEwLCAyLCA1LCA1LCAyLCAzLCA1LCAzLCA3XSwgWzEsIDEwLCAyLCA1LCA4LCA3LCA1LCA5LCA4XSwgWzIsIDExLCAxLCAxMSwgNywgMSwgMSwgNywgNV0sIFswLCA4LCAzLCAyLCAxMSwgMSwgMSwgMTEsIDcsIDEsIDcsIDVdLCBbOSwgMCwgMiwgOSwgMiwgNywgMiwgMTEsIDcsIDksIDcsIDVdLCBbMTEsIDMsIDIsIDgsIDUsIDksIDgsIDcsIDVdLCBbMSwgMywgNywgMSwgNywgNV0sIFs4LCA3LCAwLCAwLCA3LCAxLCA3LCA1LCAxXSwgWzAsIDMsIDksIDksIDMsIDUsIDMsIDcsIDVdLCBbOSwgNywgNSwgOSwgOCwgN10sIFs0LCA1LCA4LCA1LCAxMCwgOCwgOCwgMTAsIDExXSwgWzMsIDAsIDQsIDMsIDQsIDEwLCA0LCA1LCAxMCwgMywgMTAsIDExXSwgWzAsIDEsIDksIDQsIDUsIDgsIDgsIDUsIDEwLCA4LCAxMCwgMTFdLCBbNSwgOSwgNCwgMSwgMTEsIDMsIDEsIDEwLCAxMV0sIFszLCA4LCA0LCAzLCA0LCAyLCAyLCA0LCA1LCAyLCA1LCAxMF0sIFsxMCwgMiwgNSwgNSwgMiwgNCwgMiwgMCwgNF0sIFswLCAzLCA4LCA1LCA5LCA0LCAxMCwgMiwgMV0sIFsyLCAxLCAxMCwgOSwgNCwgNV0sIFs4LCA0LCA1LCAyLCA4LCA1LCAyLCAxMSwgOCwgMiwgNSwgMV0sIFszLCAyLCAxMSwgMSwgNCwgNSwgMSwgMCwgNF0sIFs5LCA0LCA1LCA4LCAyLCAxMSwgOCwgMCwgMl0sIFsxMSwgMywgMiwgOSwgNCwgNV0sIFs0LCA1LCA4LCA4LCA1LCAzLCA1LCAxLCAzXSwgWzUsIDAsIDQsIDUsIDEsIDBdLCBbMywgOCwgMCwgNCwgNSwgOV0sIFs5LCA0LCA1XSwgWzcsIDQsIDExLCA0LCA5LCAxMSwgMTEsIDksIDEwXSwgWzMsIDAsIDgsIDcsIDQsIDExLCAxMSwgNCwgOSwgMTEsIDksIDEwXSwgWzExLCA3LCA0LCAxLCAxMSwgNCwgMSwgMTAsIDExLCAxLCA0LCAwXSwgWzgsIDcsIDQsIDExLCAxLCAxMCwgMTEsIDMsIDFdLCBbMiwgMywgNywgMiwgNywgOSwgNywgNCwgOSwgMiwgOSwgMTBdLCBbNCwgOCwgNywgMCwgMTAsIDIsIDAsIDksIDEwXSwgWzIsIDEsIDEwLCAwLCA3LCA0LCAwLCAzLCA3XSwgWzEwLCAyLCAxLCA4LCA3LCA0XSwgWzIsIDExLCA3LCAyLCA3LCAxLCAxLCA3LCA0LCAxLCA0LCA5XSwgWzMsIDIsIDExLCA0LCA4LCA3LCA5LCAxLCAwXSwgWzcsIDQsIDExLCAxMSwgNCwgMiwgNCwgMCwgMl0sIFsyLCAxMSwgMywgNywgNCwgOF0sIFs5LCAxLCA0LCA0LCAxLCA3LCAxLCAzLCA3XSwgWzEsIDAsIDksIDgsIDcsIDRdLCBbMywgNCwgMCwgMywgNywgNF0sIFs4LCA3LCA0XSwgWzgsIDksIDEwLCA4LCAxMCwgMTFdLCBbMCwgOSwgMywgMywgOSwgMTEsIDksIDEwLCAxMV0sIFsxLCAxMCwgMCwgMCwgMTAsIDgsIDEwLCAxMSwgOF0sIFsxMCwgMywgMSwgMTAsIDExLCAzXSwgWzMsIDgsIDIsIDIsIDgsIDEwLCA4LCA5LCAxMF0sIFs5LCAyLCAwLCA5LCAxMCwgMl0sIFs4LCAwLCAzLCAxLCAxMCwgMl0sIFsxMCwgMiwgMV0sIFsyLCAxMSwgMSwgMSwgMTEsIDksIDExLCA4LCA5XSwgWzExLCAzLCAyLCAwLCA5LCAxXSwgWzExLCAwLCAyLCAxMSwgOCwgMF0sIFsxMSwgMywgMl0sIFs4LCAxLCAzLCA4LCA5LCAxXSwgWzksIDEsIDBdLCBbOCwgMCwgM10sIFtdXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX01hcmNoaW5nQ3ViZUluaXRpYWxpemVyLCBbewogICAgICAgICAgICAgIGtleTogIm1hcmNoIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFyY2goZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgdmFyIG4gPSAhIXMuZnVsbHRhYmxlLAogICAgICAgICAgICAgICAgICBvID0gcy5oYXNPd25Qcm9wZXJ0eSgib3JpZ2luIikgJiYgcy5vcmlnaW4uaGFzT3duUHJvcGVydHkoIngiKSA/IHMub3JpZ2luIDogewogICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGwgPSAhIXMudm94ZWwsCiAgICAgICAgICAgICAgICAgIGggPSBzLm1hdHJpeCwKICAgICAgICAgICAgICAgICAgYyA9IHMublggfHwgMCwKICAgICAgICAgICAgICAgICAgdSA9IHMublkgfHwgMCwKICAgICAgICAgICAgICAgICAgZiA9IHMublogfHwgMCwKICAgICAgICAgICAgICAgICAgcCA9IHMuc2NhbGUgfHwgMSwKICAgICAgICAgICAgICAgICAgZyA9IG51bGw7CiAgICAgICAgICAgICAgICBnID0gcy51bml0Q3ViZSA/IHMudW5pdEN1YmUgOiB7CiAgICAgICAgICAgICAgICAgIHg6IHAsCiAgICAgICAgICAgICAgICAgIHk6IHAsCiAgICAgICAgICAgICAgICAgIHo6IHAKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgdiwKICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgeSA9IG5ldyBJbnQzMkFycmF5KGMgKiB1ICogZik7CiAgICAgICAgICAgICAgICBmb3IgKHYgPSAwLCBfID0geS5sZW5ndGg7IHYgPCBfOyArK3YpIHlbdl0gPSAtMTsKICAgICAgICAgICAgICAgIHZhciBiID0gZnVuY3Rpb24gYihlLCByLCBzLCBuLCBjLCBwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBfID0gYzsKICAgICAgICAgICAgICAgICAgICBpZiAoISEhKG4gJiAxIDw8IGMpICYmICEhKG4gJiAxIDw8IHApICYmIChfID0gcCksIDEgJiBfICYmIHMrKywgMiAmIF8gJiYgcisrLCA0ICYgXyAmJiBlKyssIGgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfdDY5ID0gbmV3IGEuVmVjdG9yMyhlLCByLCBzKTsKICAgICAgICAgICAgICAgICAgICAgIF90NjkgPSBfdDY5LmFwcGx5TWF0cml4NChoKSwgdiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgeDogX3Q2OS54LAogICAgICAgICAgICAgICAgICAgICAgICB5OiBfdDY5LnksCiAgICAgICAgICAgICAgICAgICAgICAgIHo6IF90NjkuegogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugdi54ID0gby54ICsgZy54ICogZSwgdi55ID0gby55ICsgZy55ICogciwgdi56ID0gby56ICsgZy56ICogczsKICAgICAgICAgICAgICAgICAgICB2YXIgYiA9ICh1ICogZSArIHIpICogZiArIHM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwgPyAodC5wdXNoKHYpLCB0Lmxlbmd0aCAtIDEpIDogKHlbYl0gPCAwICYmICh5W2JdID0gdC5sZW5ndGgsIHQucHVzaCh2KSksIHlbYl0pOwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB3ID0gbmV3IEludDMyQXJyYXkoMTIpLAogICAgICAgICAgICAgICAgICB4ID0gbiA/IHRoaXMuZWRnZVRhYmxlMiA6IHRoaXMuZWRnZVRhYmxlLAogICAgICAgICAgICAgICAgICBBID0gbiA/IHRoaXMudHJpVGFibGUyIDogdGhpcy50cmlUYWJsZTsKICAgICAgICAgICAgICAgIGZvciAodiA9IDA7IHYgPCBjIC0gMTsgKyt2KSBmb3IgKHZhciBfczMwID0gMDsgX3MzMCA8IHUgLSAxOyArK19zMzApIGZvciAodmFyIF9hMTggPSAwOyBfYTE4IDwgZiAtIDE7ICsrX2ExOCkgewogICAgICAgICAgICAgICAgICB2YXIgX24xNCA9IDA7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90NzAgPSAwOyBfdDcwIDwgODsgKytfdDcwKSB7CiAgICAgICAgICAgICAgICAgICAgX24xNCB8PSAhIShlWyh1ICogKHYgKyAoKDQgJiBfdDcwKSA+PiAyKSkgKyBfczMwICsgKCgyICYgX3Q3MCkgPj4gMSkpICogZiArIF9hMTggKyAoMSAmIF90NzApXSAmIHRoaXMuSVNET05FKSA8PCBfdDcwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBfbjE0IHx8IDI1NSA9PT0gX24xNCkgY29udGludWU7CiAgICAgICAgICAgICAgICAgIHZhciBfbzEyID0geFtfbjE0XTsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IF9vMTIpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICB2YXIgX2g5ID0gQVtfbjE0XTsKICAgICAgICAgICAgICAgICAgMSAmIF9vMTIgJiYgKHdbMF0gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDAsIDEpKSwgMiAmIF9vMTIgJiYgKHdbMV0gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDEsIDMpKSwgNCAmIF9vMTIgJiYgKHdbMl0gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDMsIDIpKSwgOCAmIF9vMTIgJiYgKHdbM10gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDIsIDApKSwgMTYgJiBfbzEyICYmICh3WzRdID0gYih2LCBfczMwLCBfYTE4LCBfbjE0LCA0LCA1KSksIDMyICYgX28xMiAmJiAod1s1XSA9IGIodiwgX3MzMCwgX2ExOCwgX24xNCwgNSwgNykpLCA2NCAmIF9vMTIgJiYgKHdbNl0gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDcsIDYpKSwgMTI4ICYgX28xMiAmJiAod1s3XSA9IGIodiwgX3MzMCwgX2ExOCwgX24xNCwgNiwgNCkpLCAyNTYgJiBfbzEyICYmICh3WzhdID0gYih2LCBfczMwLCBfYTE4LCBfbjE0LCAwLCA0KSksIDUxMiAmIF9vMTIgJiYgKHdbOV0gPSBiKHYsIF9zMzAsIF9hMTgsIF9uMTQsIDEsIDUpKSwgMTAyNCAmIF9vMTIgJiYgKHdbMTBdID0gYih2LCBfczMwLCBfYTE4LCBfbjE0LCAzLCA3KSksIDIwNDggJiBfbzEyICYmICh3WzExXSA9IGIodiwgX3MzMCwgX2ExOCwgX24xNCwgMiwgNikpOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTc3ID0gMDsgX2U3NyA8IF9oOS5sZW5ndGg7IF9lNzcgKz0gMykgewogICAgICAgICAgICAgICAgICAgIHZhciBfczMxID0gd1tfaDlbX2U3N11dLAogICAgICAgICAgICAgICAgICAgICAgX2ExOSA9IHdbX2g5W19lNzcgKyAxXV0sCiAgICAgICAgICAgICAgICAgICAgICBfbjE1ID0gd1tfaDlbX2U3NyArIDJdXTsKICAgICAgICAgICAgICAgICAgICBsICYmIF9lNzcgPj0gMyAmJiAodC5wdXNoKHRbX3MzMV0pLCBfczMxID0gdC5sZW5ndGggLSAxLCB0LnB1c2godFtfYTE5XSksIF9hMTkgPSB0Lmxlbmd0aCAtIDEsIHQucHVzaCh0W19uMTVdKSwgX24xNSA9IHQubGVuZ3RoIC0gMSksIHIucHVzaChfczMxKSwgci5wdXNoKF9hMTkpLCByLnB1c2goX24xNSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJsYXBsYWNpYW5TbW9vdGgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsYXBsYWNpYW5TbW9vdGgoZSwgdCwgcikgewogICAgICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgICAgIGggPSBuZXcgQXJyYXkodC5sZW5ndGgpOwogICAgICAgICAgICAgICAgZm9yIChzID0gMCwgYSA9IHQubGVuZ3RoOyBzIDwgYTsgcysrKSBoW3NdID0gewogICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIGMsCiAgICAgICAgICAgICAgICAgIHUgPSBuZXcgQXJyYXkoMjApOwogICAgICAgICAgICAgICAgZm9yIChzID0gMDsgcyA8IDIwOyBzKyspIHVbc10gPSBuZXcgQXJyYXkodC5sZW5ndGgpOwogICAgICAgICAgICAgICAgZm9yIChzID0gMCwgYSA9IHQubGVuZ3RoOyBzIDwgYTsgcysrKSB1WzBdW3NdID0gMDsKICAgICAgICAgICAgICAgIGZvciAocyA9IDAsIGEgPSByLmxlbmd0aCAvIDM7IHMgPCBhOyBzKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIF9lNzggPSAzICogcywKICAgICAgICAgICAgICAgICAgICBfdDcxID0gMyAqIHMgKyAxLAogICAgICAgICAgICAgICAgICAgIF9hMjAgPSAzICogcyArIDI7CiAgICAgICAgICAgICAgICAgIGZvciAoYyA9ICEwLCBuID0gMCwgbyA9IHVbMF1bcltfZTc4XV07IG4gPCBvOyBuKyspIGlmIChyW190NzFdID09IHVbbiArIDFdW3JbX2U3OF1dKSB7CiAgICAgICAgICAgICAgICAgICAgYyA9ICExOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZvciAoYyAmJiAodVswXVtyW19lNzhdXSsrLCB1W3VbMF1bcltfZTc4XV1dW3JbX2U3OF1dID0gcltfdDcxXSksIGMgPSAhMCwgbiA9IDAsIG8gPSB1WzBdW3JbX2U3OF1dOyBuIDwgbzsgbisrKSBpZiAocltfYTIwXSA9PSB1W24gKyAxXVtyW19lNzhdXSkgewogICAgICAgICAgICAgICAgICAgIGMgPSAhMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmb3IgKGMgJiYgKHVbMF1bcltfZTc4XV0rKywgdVt1WzBdW3JbX2U3OF1dXVtyW19lNzhdXSA9IHJbX2EyMF0pLCBjID0gITAsIG4gPSAwLCBvID0gdVswXVtyW190NzFdXTsgbiA8IG87IG4rKykgaWYgKHJbX2U3OF0gPT0gdVtuICsgMV1bcltfdDcxXV0pIHsKICAgICAgICAgICAgICAgICAgICBjID0gITE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yIChjICYmICh1WzBdW3JbX3Q3MV1dKyssIHVbdVswXVtyW190NzFdXV1bcltfdDcxXV0gPSByW19lNzhdKSwgYyA9ICEwLCBuID0gMCwgbyA9IHVbMF1bcltfdDcxXV07IG4gPCBvOyBuKyspIGlmIChyW19hMjBdID09IHVbbiArIDFdW3JbX3Q3MV1dKSB7CiAgICAgICAgICAgICAgICAgICAgYyA9ICExOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZvciAoYyAmJiAodVswXVtyW190NzFdXSsrLCB1W3VbMF1bcltfdDcxXV1dW3JbX3Q3MV1dID0gcltfYTIwXSksIGMgPSAhMCwgbiA9IDA7IG4gPCB1WzBdW3JbX2EyMF1dOyBuKyspIGlmIChyW19lNzhdID09IHVbbiArIDFdW3JbX2EyMF1dKSB7CiAgICAgICAgICAgICAgICAgICAgYyA9ICExOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZvciAoYyAmJiAodVswXVtyW19hMjBdXSsrLCB1W3VbMF1bcltfYTIwXV1dW3JbX2EyMF1dID0gcltfZTc4XSksIGMgPSAhMCwgbiA9IDAsIG8gPSB1WzBdW3JbX2EyMF1dOyBuIDwgbzsgbisrKSBpZiAocltfdDcxXSA9PSB1W24gKyAxXVtyW19hMjBdXSkgewogICAgICAgICAgICAgICAgICAgIGMgPSAhMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjICYmICh1WzBdW3JbX2EyMF1dKyssIHVbdVswXVtyW19hMjBdXV1bcltfYTIwXV0gPSByW190NzFdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBmID0gLjU7CiAgICAgICAgICAgICAgICBmb3IgKGwgPSAwOyBsIDwgZTsgbCsrKSB7CiAgICAgICAgICAgICAgICAgIGZvciAocyA9IDAsIGEgPSB0Lmxlbmd0aDsgcyA8IGE7IHMrKykgaWYgKHVbMF1bc10gPCAzKSBoW3NdLnggPSB0W3NdLngsIGhbc10ueSA9IHRbc10ueSwgaFtzXS56ID0gdFtzXS56O2Vsc2UgaWYgKDMgPT0gdVswXVtzXSB8fCA0ID09IHVbMF1bc10pIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGhbc10ueCA9IDAsIGhbc10ueSA9IDAsIGhbc10ueiA9IDAsIG4gPSAwLCBvID0gdVswXVtzXTsgbiA8IG87IG4rKykgaFtzXS54ICs9IHRbdVtuICsgMV1bc11dLngsIGhbc10ueSArPSB0W3VbbiArIDFdW3NdXS55LCBoW3NdLnogKz0gdFt1W24gKyAxXVtzXV0uejsKICAgICAgICAgICAgICAgICAgICBoW3NdLnggKz0gZiAqIHRbc10ueCwgaFtzXS55ICs9IGYgKiB0W3NdLnksIGhbc10ueiArPSBmICogdFtzXS56LCBoW3NdLnggLz0gZiArIHVbMF1bc10sIGhbc10ueSAvPSBmICsgdVswXVtzXSwgaFtzXS56IC89IGYgKyB1WzBdW3NdOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvciAoaFtzXS54ID0gMCwgaFtzXS55ID0gMCwgaFtzXS56ID0gMCwgbiA9IDAsIG8gPSB1WzBdW3NdOyBuIDwgbzsgbisrKSBoW3NdLnggKz0gdFt1W24gKyAxXVtzXV0ueCwgaFtzXS55ICs9IHRbdVtuICsgMV1bc11dLnksIGhbc10ueiArPSB0W3VbbiArIDFdW3NdXS56OwogICAgICAgICAgICAgICAgICAgIGhbc10ueCArPSAxICogdFtzXS54LCBoW3NdLnkgKz0gMSAqIHRbc10ueSwgaFtzXS56ICs9IDEgKiB0W3NdLnosIGhbc10ueCAvPSAxICsgdVswXVtzXSwgaFtzXS55IC89IDEgKyB1WzBdW3NdLCBoW3NdLnogLz0gMSArIHVbMF1bc107CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yIChzID0gMCwgYSA9IHQubGVuZ3RoOyBzIDwgYTsgcysrKSB0W3NdLnggPSBoW3NdLngsIHRbc10ueSA9IGhbc10ueSwgdFtzXS56ID0gaFtzXS56OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX01hcmNoaW5nQ3ViZUluaXRpYWxpemVyOwogICAgICAgICAgfSgpOwogICAgICAgICAgdmFyIF9NYXJjaGluZ0N1YmUgPSBuZXcgX01hcmNoaW5nQ3ViZUluaXRpYWxpemVyKCk7CiAgICAgICAgICB2YXIgX1BvaW50R3JpZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9Qb2ludEdyaWQoZSwgdCwgcikgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfUG9pbnRHcmlkKTsKICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBuZXcgSW50MzJBcnJheShlICogdCAqIHIgKiAzKSwgdGhpcy53aWR0aCA9IHQsIHRoaXMuaGVpZ2h0ID0gcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1BvaW50R3JpZCwgW3sKICAgICAgICAgICAgICBrZXk6ICJzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgdmFyIGEgPSAzICogKChlICogdGhpcy53aWR0aCArIHQpICogdGhpcy5oZWlnaHQgKyByKTsKICAgICAgICAgICAgICAgIHRoaXMuZGF0YVthXSA9IHMuaXgsIHRoaXMuZGF0YVthICsgMV0gPSBzLml5LCB0aGlzLmRhdGFbYSArIDJdID0gcy5pejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoZSwgdCwgcikgewogICAgICAgICAgICAgICAgdmFyIHMgPSAzICogKChlICogdGhpcy53aWR0aCArIHQpICogdGhpcy5oZWlnaHQgKyByKTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIGl4OiB0aGlzLmRhdGFbc10sCiAgICAgICAgICAgICAgICAgIGl5OiB0aGlzLmRhdGFbcyArIDFdLAogICAgICAgICAgICAgICAgICBpejogdGhpcy5kYXRhW3MgKyAyXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9Qb2ludEdyaWQ7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgUHJvdGVpblN1cmZhY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBQcm90ZWluU3VyZmFjZSgpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdGVpblN1cmZhY2UpOwogICAgICAgICAgICAgIHRoaXMuSU5PVVQgPSAxLCB0aGlzLklTRE9ORSA9IDIsIHRoaXMuSVNCT1VORCA9IDQsIHRoaXMucHRyYW54ID0gMCwgdGhpcy5wdHJhbnkgPSAwLCB0aGlzLnB0cmFueiA9IDAsIHRoaXMucHJvYmVSYWRpdXMgPSAxLjQsIHRoaXMuZGVmYXVsdFNjYWxlRmFjdG9yID0gMiwgdGhpcy5zY2FsZUZhY3RvciA9IHRoaXMuZGVmYXVsdFNjYWxlRmFjdG9yLCB0aGlzLnBIZWlnaHQgPSAwLCB0aGlzLnBXaWR0aCA9IDAsIHRoaXMucExlbmd0aCA9IDAsIHRoaXMuY3V0UmFkaXVzID0gMCwgdGhpcy52cEJpdHMgPSBudWxsLCB0aGlzLnZwRGlzdGFuY2UgPSBudWxsLCB0aGlzLnZwQXRvbUlEID0gbnVsbCwgdGhpcy5wbWlueCA9IDAsIHRoaXMucG1pbnkgPSAwLCB0aGlzLnBtaW56ID0gMCwgdGhpcy5wbWF4eCA9IDAsIHRoaXMucG1heHkgPSAwLCB0aGlzLnBtYXh6ID0gMCwgdGhpcy5kZXB0eSA9IHt9LCB0aGlzLndpZHh6ID0ge30sIHRoaXMuZmFjZXMgPSBbXSwgdGhpcy52ZXJ0cyA9IFtdLCB0aGlzLnZkd1JhZGlpID0gewogICAgICAgICAgICAgICAgSDogMS4yLAogICAgICAgICAgICAgICAgTGk6IDEuODIsCiAgICAgICAgICAgICAgICBOYTogMi4yNywKICAgICAgICAgICAgICAgIEs6IDIuNzUsCiAgICAgICAgICAgICAgICBDOiAxLjcsCiAgICAgICAgICAgICAgICBOOiAxLjU1LAogICAgICAgICAgICAgICAgTzogMS41MiwKICAgICAgICAgICAgICAgIEY6IDEuNDcsCiAgICAgICAgICAgICAgICBQOiAxLjgsCiAgICAgICAgICAgICAgICBTOiAxLjgsCiAgICAgICAgICAgICAgICBDTDogMS43NSwKICAgICAgICAgICAgICAgIEJSOiAxLjg1LAogICAgICAgICAgICAgICAgU0U6IDEuOSwKICAgICAgICAgICAgICAgIFpOOiAxLjM5LAogICAgICAgICAgICAgICAgQ1U6IDEuNCwKICAgICAgICAgICAgICAgIE5JOiAxLjYzLAogICAgICAgICAgICAgICAgWDogMgogICAgICAgICAgICAgIH0sIHRoaXMubmIgPSBbbmV3IEludDMyQXJyYXkoWzEsIDAsIDBdKSwgbmV3IEludDMyQXJyYXkoWy0xLCAwLCAwXSksIG5ldyBJbnQzMkFycmF5KFswLCAxLCAwXSksIG5ldyBJbnQzMkFycmF5KFswLCAtMSwgMF0pLCBuZXcgSW50MzJBcnJheShbMCwgMCwgMV0pLCBuZXcgSW50MzJBcnJheShbMCwgMCwgLTFdKSwgbmV3IEludDMyQXJyYXkoWzEsIDEsIDBdKSwgbmV3IEludDMyQXJyYXkoWzEsIC0xLCAwXSksIG5ldyBJbnQzMkFycmF5KFstMSwgMSwgMF0pLCBuZXcgSW50MzJBcnJheShbLTEsIC0xLCAwXSksIG5ldyBJbnQzMkFycmF5KFsxLCAwLCAxXSksIG5ldyBJbnQzMkFycmF5KFsxLCAwLCAtMV0pLCBuZXcgSW50MzJBcnJheShbLTEsIDAsIDFdKSwgbmV3IEludDMyQXJyYXkoWy0xLCAwLCAtMV0pLCBuZXcgSW50MzJBcnJheShbMCwgMSwgMV0pLCBuZXcgSW50MzJBcnJheShbMCwgMSwgLTFdKSwgbmV3IEludDMyQXJyYXkoWzAsIC0xLCAxXSksIG5ldyBJbnQzMkFycmF5KFswLCAtMSwgLTFdKSwgbmV3IEludDMyQXJyYXkoWzEsIDEsIDFdKSwgbmV3IEludDMyQXJyYXkoWzEsIDEsIC0xXSksIG5ldyBJbnQzMkFycmF5KFsxLCAtMSwgMV0pLCBuZXcgSW50MzJBcnJheShbLTEsIDEsIDFdKSwgbmV3IEludDMyQXJyYXkoWzEsIC0xLCAtMV0pLCBuZXcgSW50MzJBcnJheShbLTEsIC0xLCAxXSksIG5ldyBJbnQzMkFycmF5KFstMSwgMSwgLTFdKSwgbmV3IEludDMyQXJyYXkoWy0xLCAtMSwgLTFdKV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKFByb3RlaW5TdXJmYWNlLCBbewogICAgICAgICAgICAgIGtleTogImdldFZEV0luZGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VkRXSW5kZXgoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUuZWxlbSAmJiB2b2lkIDAgIT09IHRoaXMudmR3UmFkaWlbZS5lbGVtXSA/IGUuZWxlbSA6ICJYIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRGYWNlc0FuZFZlcnRpY2VzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmFjZXNBbmRWZXJ0aWNlcyhlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3I0MSA9IDAsIF9zMzIgPSBlLmxlbmd0aDsgX3I0MSA8IF9zMzI7IF9yNDErKykgdFtlW19yNDFdXSA9ICEwOwogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnZlcnRzOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U3OSA9IDAsIF90NzIgPSByLmxlbmd0aDsgX2U3OSA8IF90NzI7IF9lNzkrKykgcltfZTc5XS54ID0gcltfZTc5XS54IC8gdGhpcy5zY2FsZUZhY3RvciAtIHRoaXMucHRyYW54LCByW19lNzldLnkgPSByW19lNzldLnkgLyB0aGlzLnNjYWxlRmFjdG9yIC0gdGhpcy5wdHJhbnksIHJbX2U3OV0ueiA9IHJbX2U3OV0ueiAvIHRoaXMuc2NhbGVGYWN0b3IgLSB0aGlzLnB0cmFuejsKICAgICAgICAgICAgICAgIHZhciBzID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTgwID0gMCwgX2EyMSA9IHRoaXMuZmFjZXMubGVuZ3RoOyBfZTgwIDwgX2EyMTsgX2U4MCArPSAzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfYTIyID0gdGhpcy5mYWNlc1tfZTgwXSwKICAgICAgICAgICAgICAgICAgICBfbjE2ID0gdGhpcy5mYWNlc1tfZTgwICsgMV0sCiAgICAgICAgICAgICAgICAgICAgX28xMyA9IHRoaXMuZmFjZXNbX2U4MCArIDJdLAogICAgICAgICAgICAgICAgICAgIGwgPSByW19hMjJdLmF0b21pZCwKICAgICAgICAgICAgICAgICAgICBoID0gcltfbjE2XS5hdG9taWQsCiAgICAgICAgICAgICAgICAgICAgYyA9IHJbX28xM10uYXRvbWlkLAogICAgICAgICAgICAgICAgICAgIHUgPSBsOwogICAgICAgICAgICAgICAgICBoIDwgdSAmJiAodSA9IGgpLCBjIDwgdSAmJiAodSA9IGMpLCB0W3VdICYmIF9hMjIgIT09IF9uMTYgJiYgX24xNiAhPT0gX28xMyAmJiBfYTIyICE9PSBfbzEzICYmIChzLnB1c2goX2EyMiksIHMucHVzaChfbjE2KSwgcy5wdXNoKF9vMTMpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZwQml0cyA9IG51bGwsIHRoaXMudnBEaXN0YW5jZSA9IG51bGwsIHRoaXMudnBBdG9tSUQgPSBudWxsLCB7CiAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiByLAogICAgICAgICAgICAgICAgICBmYWNlczogcwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbml0cGFybSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRwYXJtKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHIgPiAxZTYgJiYgKHRoaXMuc2NhbGVGYWN0b3IgPSB0aGlzLmRlZmF1bHRTY2FsZUZhY3RvciAvIDIpOwogICAgICAgICAgICAgICAgdmFyIHMgPSAxIC8gdGhpcy5zY2FsZUZhY3RvciAqIDUuNTsKICAgICAgICAgICAgICAgIHRoaXMucG1pbnggPSBlWzBdWzBdLCB0aGlzLnBtYXh4ID0gZVsxXVswXSwgdGhpcy5wbWlueSA9IGVbMF1bMV0sIHRoaXMucG1heHkgPSBlWzFdWzFdLCB0aGlzLnBtaW56ID0gZVswXVsyXSwgdGhpcy5wbWF4eiA9IGVbMV1bMl0sIHQgPyAodGhpcy5wbWlueCAtPSB0aGlzLnByb2JlUmFkaXVzICsgcywgdGhpcy5wbWlueSAtPSB0aGlzLnByb2JlUmFkaXVzICsgcywgdGhpcy5wbWlueiAtPSB0aGlzLnByb2JlUmFkaXVzICsgcywgdGhpcy5wbWF4eCArPSB0aGlzLnByb2JlUmFkaXVzICsgcywgdGhpcy5wbWF4eSArPSB0aGlzLnByb2JlUmFkaXVzICsgcywgdGhpcy5wbWF4eiArPSB0aGlzLnByb2JlUmFkaXVzICsgcykgOiAodGhpcy5wbWlueCAtPSBzLCB0aGlzLnBtaW55IC09IHMsIHRoaXMucG1pbnogLT0gcywgdGhpcy5wbWF4eCArPSBzLCB0aGlzLnBtYXh5ICs9IHMsIHRoaXMucG1heHogKz0gcyksIHRoaXMucG1pbnggPSBNYXRoLmZsb29yKHRoaXMucG1pbnggKiB0aGlzLnNjYWxlRmFjdG9yKSAvIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMucG1pbnkgPSBNYXRoLmZsb29yKHRoaXMucG1pbnkgKiB0aGlzLnNjYWxlRmFjdG9yKSAvIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMucG1pbnogPSBNYXRoLmZsb29yKHRoaXMucG1pbnogKiB0aGlzLnNjYWxlRmFjdG9yKSAvIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMucG1heHggPSBNYXRoLmNlaWwodGhpcy5wbWF4eCAqIHRoaXMuc2NhbGVGYWN0b3IpIC8gdGhpcy5zY2FsZUZhY3RvciwgdGhpcy5wbWF4eSA9IE1hdGguY2VpbCh0aGlzLnBtYXh5ICogdGhpcy5zY2FsZUZhY3RvcikgLyB0aGlzLnNjYWxlRmFjdG9yLCB0aGlzLnBtYXh6ID0gTWF0aC5jZWlsKHRoaXMucG1heHogKiB0aGlzLnNjYWxlRmFjdG9yKSAvIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMucHRyYW54ID0gLXRoaXMucG1pbngsIHRoaXMucHRyYW55ID0gLXRoaXMucG1pbnksIHRoaXMucHRyYW56ID0gLXRoaXMucG1pbnosIHRoaXMucExlbmd0aCA9IE1hdGguY2VpbCh0aGlzLnNjYWxlRmFjdG9yICogKHRoaXMucG1heHggLSB0aGlzLnBtaW54KSkgKyAxLCB0aGlzLnBXaWR0aCA9IE1hdGguY2VpbCh0aGlzLnNjYWxlRmFjdG9yICogKHRoaXMucG1heHkgLSB0aGlzLnBtaW55KSkgKyAxLCB0aGlzLnBIZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5zY2FsZUZhY3RvciAqICh0aGlzLnBtYXh6IC0gdGhpcy5wbWlueikpICsgMSwgdGhpcy5ib3VuZGluZ2F0b20odCksIHRoaXMuY3V0UmFkaXVzID0gdGhpcy5wcm9iZVJhZGl1cyAqIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMudnBCaXRzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5wTGVuZ3RoICogdGhpcy5wV2lkdGggKiB0aGlzLnBIZWlnaHQpLCB0aGlzLnZwRGlzdGFuY2UgPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMucExlbmd0aCAqIHRoaXMucFdpZHRoICogdGhpcy5wSGVpZ2h0KSwgdGhpcy52cEF0b21JRCA9IG5ldyBJbnQzMkFycmF5KHRoaXMucExlbmd0aCAqIHRoaXMucFdpZHRoICogdGhpcy5wSGVpZ2h0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJib3VuZGluZ2F0b20iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBib3VuZGluZ2F0b20oZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9yNDIgaW4gdGhpcy52ZHdSYWRpaSkgewogICAgICAgICAgICAgICAgICB2YXIgX3MzMyA9IHRoaXMudmR3UmFkaWlbX3I0Ml07CiAgICAgICAgICAgICAgICAgIHRbX3I0Ml0gPSBlID8gKF9zMzMgKyB0aGlzLnByb2JlUmFkaXVzKSAqIHRoaXMuc2NhbGVGYWN0b3IgKyAuNSA6IF9zMzMgKiB0aGlzLnNjYWxlRmFjdG9yICsgLjU7CiAgICAgICAgICAgICAgICAgIHZhciBfYTIzID0gdFtfcjQyXSAqIHRbX3I0Ml07CiAgICAgICAgICAgICAgICAgIHRoaXMud2lkeHpbX3I0Ml0gPSBNYXRoLmZsb29yKHRbX3I0Ml0pICsgMSwgdGhpcy5kZXB0eVtfcjQyXSA9IG5ldyBJbnQzMkFycmF5KHRoaXMud2lkeHpbX3I0Ml0gKiB0aGlzLndpZHh6W19yNDJdKTsKICAgICAgICAgICAgICAgICAgdmFyIF9uMTcgPSAwOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTgxID0gMDsgX2U4MSA8IHRoaXMud2lkeHpbX3I0Ml07IF9lODErKykgZm9yICh2YXIgX3Q3MyA9IDA7IF90NzMgPCB0aGlzLndpZHh6W19yNDJdOyBfdDczKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3MzNCA9IF9lODEgKiBfZTgxICsgX3Q3MyAqIF90NzM7CiAgICAgICAgICAgICAgICAgICAgaWYgKF9zMzQgPiBfYTIzKSB0aGlzLmRlcHR5W19yNDJdW19uMTddID0gLTE7ZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX2U4MiA9IE1hdGguc3FydChfYTIzIC0gX3MzNCk7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcHR5W19yNDJdW19uMTddID0gTWF0aC5mbG9vcihfZTgyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX24xNysrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZmlsbHZveGVscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGx2b3hlbHMoZSwgdCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U4MyA9IDAsIF90NzQgPSB0aGlzLnZwQml0cy5sZW5ndGg7IF9lODMgPCBfdDc0OyBfZTgzKyspIHRoaXMudnBCaXRzW19lODNdID0gMCwgdGhpcy52cERpc3RhbmNlW19lODNdID0gLTEsIHRoaXMudnBBdG9tSURbX2U4M10gPSAtMTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9yNDMgaW4gdCkgewogICAgICAgICAgICAgICAgICB2YXIgX3MzNSA9IGVbdFtfcjQzXV07CiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gX3MzNSAmJiB0aGlzLmZpbGxBdG9tKF9zMzUsIGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgX2U4NCA9IDAsIF90NzUgPSB0aGlzLnZwQml0cy5sZW5ndGg7IF9lODQgPCBfdDc1OyBfZTg0KyspIHRoaXMudnBCaXRzW19lODRdICYgdGhpcy5JTk9VVCAmJiAodGhpcy52cEJpdHNbX2U4NF0gfD0gdGhpcy5JU0RPTkUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImZpbGxBdG9tIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbEF0b20oZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBNYXRoLmZsb29yKC41ICsgdGhpcy5zY2FsZUZhY3RvciAqIChlLnggKyB0aGlzLnB0cmFueCkpLAogICAgICAgICAgICAgICAgICBzID0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoZS55ICsgdGhpcy5wdHJhbnkpKSwKICAgICAgICAgICAgICAgICAgYSA9IE1hdGguZmxvb3IoLjUgKyB0aGlzLnNjYWxlRmFjdG9yICogKGUueiArIHRoaXMucHRyYW56KSksCiAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmdldFZEV0luZGV4KGUpLAogICAgICAgICAgICAgICAgICBvID0gMCwKICAgICAgICAgICAgICAgICAgbCA9IHRoaXMucFdpZHRoICogdGhpcy5wSGVpZ2h0OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDAsIGMgPSB0aGlzLndpZHh6W25dOyBoIDwgYzsgaCsrKSBmb3IgKHZhciB1ID0gMDsgdSA8IGM7IHUrKykgewogICAgICAgICAgICAgICAgICBpZiAoLTEgIT0gdGhpcy5kZXB0eVtuXVtvXSkgZm9yICh2YXIgX2M2ID0gLTE7IF9jNiA8IDI7IF9jNisrKSBmb3IgKHZhciBmID0gLTE7IGYgPCAyOyBmKyspIGZvciAodmFyIHAgPSAtMTsgcCA8IDI7IHArKykgaWYgKDAgIT09IF9jNiAmJiAwICE9PSBmICYmIDAgIT09IHApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IF9jNiAqIGgsCiAgICAgICAgICAgICAgICAgICAgICB2ID0gcCAqIHU7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2gxMCA9IDA7IF9oMTAgPD0gdGhpcy5kZXB0eVtuXVtvXTsgX2gxMCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX24xOCA9IF9oMTAgKiBmLAogICAgICAgICAgICAgICAgICAgICAgICBfbzE0ID0gciArIGcsCiAgICAgICAgICAgICAgICAgICAgICAgIF9jNyA9IHMgKyBfbjE4LAogICAgICAgICAgICAgICAgICAgICAgICBfdTQgPSBhICsgdjsKICAgICAgICAgICAgICAgICAgICAgIGlmIChfbzE0IDwgMCB8fCBfYzcgPCAwIHx8IF91NCA8IDAgfHwgX28xNCA+PSB0aGlzLnBMZW5ndGggfHwgX2M3ID49IHRoaXMucFdpZHRoIHx8IF91NCA+PSB0aGlzLnBIZWlnaHQpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgdmFyIF9wMyA9IF9vMTQgKiBsICsgX2M3ICogdGhpcy5wSGVpZ2h0ICsgX3U0OwogICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudnBCaXRzW19wM10gJiB0aGlzLklOT1VUKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbzE1ID0gdFt0aGlzLnZwQXRvbUlEW19wM11dOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoX28xNS5zZXJpYWwgIT0gZS5zZXJpYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3Q3NiA9IHIgKyBnIC0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoX28xNS54ICsgdGhpcy5wdHJhbngpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sOCA9IHMgKyBfbjE4IC0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoX28xNS55ICsgdGhpcy5wdHJhbnkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oMTEgPSBhICsgdiAtIE1hdGguZmxvb3IoLjUgKyB0aGlzLnNjYWxlRmFjdG9yICogKF9vMTUueiArIHRoaXMucHRyYW56KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZyAqIGcgKyBfbjE4ICogX24xOCArIHYgKiB2IDwgX3Q3NiAqIF90NzYgKyBfbDggKiBfbDggKyBfaDExICogX2gxMSAmJiAodGhpcy52cEF0b21JRFtfcDNdID0gZS5zZXJpYWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy52cEJpdHNbX3AzXSB8PSB0aGlzLklOT1VULCB0aGlzLnZwQXRvbUlEW19wM10gPSBlLnNlcmlhbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgbysrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImZpbGx2b3hlbHN3YWFscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGx2b3hlbHN3YWFscyhlLCB0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTg1ID0gMCwgX3Q3NyA9IHRoaXMudnBCaXRzLmxlbmd0aDsgX2U4NSA8IF90Nzc7IF9lODUrKykgdGhpcy52cEJpdHNbX2U4NV0gJj0gfnRoaXMuSVNET05FOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3I0NCBpbiB0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfczM2ID0gZVt0W19yNDRdXTsKICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBfczM2ICYmIHRoaXMuZmlsbEF0b21XYWFscyhfczM2LCBlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJmaWxsQXRvbVdhYWxzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbEF0b21XYWFscyhlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IDAsCiAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLmZsb29yKC41ICsgdGhpcy5zY2FsZUZhY3RvciAqIChlLnggKyB0aGlzLnB0cmFueCkpLAogICAgICAgICAgICAgICAgICBhID0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoZS55ICsgdGhpcy5wdHJhbnkpKSwKICAgICAgICAgICAgICAgICAgbiA9IE1hdGguZmxvb3IoLjUgKyB0aGlzLnNjYWxlRmFjdG9yICogKGUueiArIHRoaXMucHRyYW56KSksCiAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLmdldFZEV0luZGV4KGUpLAogICAgICAgICAgICAgICAgICBsID0gdGhpcy5wV2lkdGggKiB0aGlzLnBIZWlnaHQ7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMCwgYyA9IHRoaXMud2lkeHpbb107IGggPCBjOyBoKyspIGZvciAodmFyIHUgPSAwOyB1IDwgYzsgdSsrKSB7CiAgICAgICAgICAgICAgICAgIGlmICgtMSAhPSB0aGlzLmRlcHR5W29dW3JdKSBmb3IgKHZhciBfYzggPSAtMTsgX2M4IDwgMjsgX2M4KyspIGZvciAodmFyIGYgPSAtMTsgZiA8IDI7IGYrKykgZm9yICh2YXIgcCA9IC0xOyBwIDwgMjsgcCsrKSBpZiAoMCAhPT0gX2M4ICYmIDAgIT09IGYgJiYgMCAhPT0gcCkgewogICAgICAgICAgICAgICAgICAgIHZhciBnID0gX2M4ICogaCwKICAgICAgICAgICAgICAgICAgICAgIHYgPSBwICogdTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaDEyID0gMDsgX2gxMiA8PSB0aGlzLmRlcHR5W29dW3JdOyBfaDEyKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfcjQ1ID0gX2gxMiAqIGYsCiAgICAgICAgICAgICAgICAgICAgICAgIF9vMTYgPSBzICsgZywKICAgICAgICAgICAgICAgICAgICAgICAgX2M5ID0gYSArIF9yNDUsCiAgICAgICAgICAgICAgICAgICAgICAgIF91NSA9IG4gKyB2OwogICAgICAgICAgICAgICAgICAgICAgaWYgKF9vMTYgPCAwIHx8IF9jOSA8IDAgfHwgX3U1IDwgMCB8fCBfbzE2ID49IHRoaXMucExlbmd0aCB8fCBfYzkgPj0gdGhpcy5wV2lkdGggfHwgX3U1ID49IHRoaXMucEhlaWdodCkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX3A0ID0gX28xNiAqIGwgKyBfYzkgKiB0aGlzLnBIZWlnaHQgKyBfdTU7CiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52cEJpdHNbX3A0XSAmIHRoaXMuSVNET05FKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbzE3ID0gdFt0aGlzLnZwQXRvbUlEW19wNF1dOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoX28xNy5zZXJpYWwgIT0gZS5zZXJpYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3Q3OCA9IHMgKyBnIC0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoX28xNy54ICsgdGhpcy5wdHJhbngpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sOSA9IGEgKyBfcjQ1IC0gTWF0aC5mbG9vciguNSArIHRoaXMuc2NhbGVGYWN0b3IgKiAoX28xNy55ICsgdGhpcy5wdHJhbnkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oMTMgPSBuICsgdiAtIE1hdGguZmxvb3IoLjUgKyB0aGlzLnNjYWxlRmFjdG9yICogKF9vMTcueiArIHRoaXMucHRyYW56KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZyAqIGcgKyBfcjQ1ICogX3I0NSArIHYgKiB2IDwgX3Q3OCAqIF90NzggKyBfbDkgKiBfbDkgKyBfaDEzICogX2gxMyAmJiAodGhpcy52cEF0b21JRFtfcDRdID0gZS5zZXJpYWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy52cEJpdHNbX3A0XSB8PSB0aGlzLklTRE9ORSwgdGhpcy52cEF0b21JRFtfcDRdID0gZS5zZXJpYWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJidWlsZGJvdW5kYXJ5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRib3VuZGFyeSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5wV2lkdGggKiB0aGlzLnBIZWlnaHQ7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDc5ID0gMDsgX3Q3OSA8IHRoaXMucExlbmd0aDsgX3Q3OSsrKSBmb3IgKHZhciBfcjQ2ID0gMDsgX3I0NiA8IHRoaXMucEhlaWdodDsgX3I0NisrKSBmb3IgKHZhciBfczM3ID0gMDsgX3MzNyA8IHRoaXMucFdpZHRoOyBfczM3KyspIHsKICAgICAgICAgICAgICAgICAgdmFyIF9hMjQgPSBfdDc5ICogZSArIF9zMzcgKiB0aGlzLnBIZWlnaHQgKyBfcjQ2OwogICAgICAgICAgICAgICAgICBpZiAodGhpcy52cEJpdHNbX2EyNF0gJiB0aGlzLklOT1VUKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9uMTkgPSAwOwogICAgICAgICAgICAgICAgICAgIGZvciAoOyBfbjE5IDwgMjY7KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX28xOCA9IF90NzkgKyB0aGlzLm5iW19uMTldWzBdLAogICAgICAgICAgICAgICAgICAgICAgICBsID0gX3I0NiArIHRoaXMubmJbX24xOV1bMl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBfczM3ICsgdGhpcy5uYltfbjE5XVsxXTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChfbzE4ID4gLTEgJiYgX28xOCA8IHRoaXMucExlbmd0aCAmJiBoID4gLTEgJiYgaCA8IHRoaXMucFdpZHRoICYmIGwgPiAtMSAmJiBsIDwgdGhpcy5wSGVpZ2h0ICYmICEodGhpcy52cEJpdHNbX28xOCAqIGUgKyBoICogdGhpcy5wSGVpZ2h0ICsgbF0gJiB0aGlzLklOT1VUKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZwQml0c1tfYTI0XSB8PSB0aGlzLklTQk9VTkQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgX24xOSsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImZhc3RkaXN0YW5jZW1hcCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZhc3RkaXN0YW5jZW1hcCgpIHsKICAgICAgICAgICAgICAgIHZhciBlLAogICAgICAgICAgICAgICAgICB0ID0gbmV3IF9Qb2ludEdyaWQodGhpcy5wTGVuZ3RoLCB0aGlzLnBXaWR0aCwgdGhpcy5wSGVpZ2h0KSwKICAgICAgICAgICAgICAgICAgciA9IHRoaXMucFdpZHRoICogdGhpcy5wSGVpZ2h0LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy5jdXRSYWRpdXMgKiB0aGlzLmN1dFJhZGl1cywKICAgICAgICAgICAgICAgICAgYSA9IFtdLAogICAgICAgICAgICAgICAgICBuID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfczM4ID0gMDsgX3MzOCA8IHRoaXMucExlbmd0aDsgX3MzOCsrKSBmb3IgKHZhciBfbjIwID0gMDsgX24yMCA8IHRoaXMucFdpZHRoOyBfbjIwKyspIGZvciAodmFyIF9vMTkgPSAwOyBfbzE5IDwgdGhpcy5wSGVpZ2h0OyBfbzE5KyspIGlmIChlID0gX3MzOCAqIHIgKyBfbjIwICogdGhpcy5wSGVpZ2h0ICsgX28xOSwgdGhpcy52cEJpdHNbZV0gJj0gfnRoaXMuSVNET05FLCB0aGlzLnZwQml0c1tlXSAmIHRoaXMuSU5PVVQgJiYgdGhpcy52cEJpdHNbZV0gJiB0aGlzLklTQk9VTkQpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yNDcgPSB7CiAgICAgICAgICAgICAgICAgICAgaXg6IF9zMzgsCiAgICAgICAgICAgICAgICAgICAgaXk6IF9uMjAsCiAgICAgICAgICAgICAgICAgICAgaXo6IF9vMTkKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgdC5zZXQoX3MzOCwgX24yMCwgX28xOSwgX3I0NyksIGEucHVzaChfcjQ3KSwgdGhpcy52cERpc3RhbmNlW2VdID0gMCwgdGhpcy52cEJpdHNbZV0gfD0gdGhpcy5JU0RPTkUsIHRoaXMudnBCaXRzW2VdICY9IH50aGlzLklTQk9VTkQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmZhc3RvbmVzaGVsbChhLCB0KSwgYSA9IFtdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDgwID0gMCwgX28yMCA9IG4ubGVuZ3RoOyBfdDgwIDwgX28yMDsgX3Q4MCsrKSBlID0gciAqIG5bX3Q4MF0uaXggKyB0aGlzLnBIZWlnaHQgKiBuW190ODBdLml5ICsgbltfdDgwXS5peiwgdGhpcy52cEJpdHNbZV0gJj0gfnRoaXMuSVNCT1VORCwgdGhpcy52cERpc3RhbmNlW2VdIDw9IDEuMDQwNCAqIHMgJiYgYS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBpeDogbltfdDgwXS5peCwKICAgICAgICAgICAgICAgICAgICBpeTogbltfdDgwXS5peSwKICAgICAgICAgICAgICAgICAgICBpejogbltfdDgwXS5pegogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKDAgIT09IGEubGVuZ3RoKTsKICAgICAgICAgICAgICAgIGEgPSBbXSwgbiA9IFtdLCB0ID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcy5zY2FsZUZhY3RvciAtIC41OwogICAgICAgICAgICAgICAgbyA8IDAgJiYgKG8gPSAwKTsKICAgICAgICAgICAgICAgIHZhciBsID0gcyAtIC41IC8gKC4xICsgbyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDgxID0gMDsgX3Q4MSA8IHRoaXMucExlbmd0aDsgX3Q4MSsrKSBmb3IgKHZhciBfczM5ID0gMDsgX3MzOSA8IHRoaXMucFdpZHRoOyBfczM5KyspIGZvciAodmFyIF9hMjUgPSAwOyBfYTI1IDwgdGhpcy5wSGVpZ2h0OyBfYTI1KyspIGUgPSBfdDgxICogciArIF9zMzkgKiB0aGlzLnBIZWlnaHQgKyBfYTI1LCB0aGlzLnZwQml0c1tlXSAmPSB+dGhpcy5JU0JPVU5ELCB0aGlzLnZwQml0c1tlXSAmIHRoaXMuSU5PVVQgJiYgKHRoaXMudnBCaXRzW2VdICYgdGhpcy5JU0RPTkUgJiYgISh0aGlzLnZwQml0c1tlXSAmIHRoaXMuSVNET05FICYmIHRoaXMudnBEaXN0YW5jZVtlXSA+PSBsKSB8fCAodGhpcy52cEJpdHNbZV0gfD0gdGhpcy5JU0JPVU5EKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZmFzdG9uZXNoZWxsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmFzdG9uZXNoZWxsKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgICBoLAogICAgICAgICAgICAgICAgICBjLAogICAgICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgICAgICBmID0gW107CiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5sZW5ndGgpIHJldHVybiBmOwogICAgICAgICAgICAgICAgdmFyIHAgPSB7CiAgICAgICAgICAgICAgICAgICAgaXg6IC0xLAogICAgICAgICAgICAgICAgICAgIGl5OiAtMSwKICAgICAgICAgICAgICAgICAgICBpejogLTEKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZyA9IHRoaXMucFdpZHRoICogdGhpcy5wSGVpZ2h0OwogICAgICAgICAgICAgICAgZm9yICh2YXIgdiA9IDAsIF8gPSBlLmxlbmd0aDsgdiA8IF87IHYrKykgewogICAgICAgICAgICAgICAgICByID0gZVt2XS5peCwgcyA9IGVbdl0uaXksIGEgPSBlW3ZdLml6LCBjID0gdC5nZXQociwgcywgYSk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lODYgPSAwOyBfZTg2IDwgNjsgX2U4NisrKSBwLml4ID0gciArIHRoaXMubmJbX2U4Nl1bMF0sIHAuaXkgPSBzICsgdGhpcy5uYltfZTg2XVsxXSwgcC5peiA9IGEgKyB0aGlzLm5iW19lODZdWzJdLCBwLml4IDwgdGhpcy5wTGVuZ3RoICYmIHAuaXggPiAtMSAmJiBwLml5IDwgdGhpcy5wV2lkdGggJiYgcC5peSA+IC0xICYmIHAuaXogPCB0aGlzLnBIZWlnaHQgJiYgcC5peiA+IC0xICYmICh1ID0gcC5peCAqIGcgKyB0aGlzLnBIZWlnaHQgKiBwLml5ICsgcC5peiwgdGhpcy52cEJpdHNbdV0gJiB0aGlzLklOT1VUICYmICEodGhpcy52cEJpdHNbdV0gJiB0aGlzLklTRE9ORSkgPyAodC5zZXQocC5peCwgcC5peSwgYSArIHRoaXMubmJbX2U4Nl1bMl0sIGMpLCBuID0gcC5peCAtIGMuaXgsIG8gPSBwLml5IC0gYy5peSwgbCA9IHAuaXogLSBjLml6LCBoID0gbiAqIG4gKyBvICogbyArIGwgKiBsLCB0aGlzLnZwRGlzdGFuY2VbdV0gPSBoLCB0aGlzLnZwQml0c1t1XSB8PSB0aGlzLklTRE9ORSwgdGhpcy52cEJpdHNbdV0gfD0gdGhpcy5JU0JPVU5ELCBmLnB1c2goewogICAgICAgICAgICAgICAgICAgIGl4OiBwLml4LAogICAgICAgICAgICAgICAgICAgIGl5OiBwLml5LAogICAgICAgICAgICAgICAgICAgIGl6OiBwLml6CiAgICAgICAgICAgICAgICAgIH0pKSA6IHRoaXMudnBCaXRzW3VdICYgdGhpcy5JTk9VVCAmJiB0aGlzLnZwQml0c1t1XSAmIHRoaXMuSVNET05FICYmIChuID0gcC5peCAtIGMuaXgsIG8gPSBwLml5IC0gYy5peSwgbCA9IHAuaXogLSBjLml6LCBoID0gbiAqIG4gKyBvICogbyArIGwgKiBsLCBoIDwgdGhpcy52cERpc3RhbmNlW3VdICYmICh0LnNldChwLml4LCBwLml5LCBwLml6LCBjKSwgdGhpcy52cERpc3RhbmNlW3VdID0gaCwgdGhpcy52cEJpdHNbdV0gJiB0aGlzLklTQk9VTkQgfHwgKHRoaXMudnBCaXRzW3VdIHw9IHRoaXMuSVNCT1VORCwgZi5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBpeDogcC5peCwKICAgICAgICAgICAgICAgICAgICBpeTogcC5peSwKICAgICAgICAgICAgICAgICAgICBpejogcC5pegogICAgICAgICAgICAgICAgICB9KSkpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdiA9IDAsIF8yID0gZS5sZW5ndGg7IF92IDwgXzI7IF92KyspIHsKICAgICAgICAgICAgICAgICAgciA9IGVbX3ZdLml4LCBzID0gZVtfdl0uaXksIGEgPSBlW192XS5peiwgYyA9IHQuZ2V0KHIsIHMsIGEpOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTg3ID0gNjsgX2U4NyA8IDE4OyBfZTg3KyspIHAuaXggPSByICsgdGhpcy5uYltfZTg3XVswXSwgcC5peSA9IHMgKyB0aGlzLm5iW19lODddWzFdLCBwLml6ID0gYSArIHRoaXMubmJbX2U4N11bMl0sIHAuaXggPCB0aGlzLnBMZW5ndGggJiYgcC5peCA+IC0xICYmIHAuaXkgPCB0aGlzLnBXaWR0aCAmJiBwLml5ID4gLTEgJiYgcC5peiA8IHRoaXMucEhlaWdodCAmJiBwLml6ID4gLTEgJiYgKHUgPSBwLml4ICogZyArIHRoaXMucEhlaWdodCAqIHAuaXkgKyBwLml6LCB0aGlzLnZwQml0c1t1XSAmIHRoaXMuSU5PVVQgJiYgISh0aGlzLnZwQml0c1t1XSAmIHRoaXMuSVNET05FKSA/ICh0LnNldChwLml4LCBwLml5LCBhICsgdGhpcy5uYltfZTg3XVsyXSwgYyksIG4gPSBwLml4IC0gYy5peCwgbyA9IHAuaXkgLSBjLml5LCBsID0gcC5peiAtIGMuaXosIGggPSBuICogbiArIG8gKiBvICsgbCAqIGwsIHRoaXMudnBEaXN0YW5jZVt1XSA9IGgsIHRoaXMudnBCaXRzW3VdIHw9IHRoaXMuSVNET05FLCB0aGlzLnZwQml0c1t1XSB8PSB0aGlzLklTQk9VTkQsIGYucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgaXg6IHAuaXgsCiAgICAgICAgICAgICAgICAgICAgaXk6IHAuaXksCiAgICAgICAgICAgICAgICAgICAgaXo6IHAuaXoKICAgICAgICAgICAgICAgICAgfSkpIDogdGhpcy52cEJpdHNbdV0gJiB0aGlzLklOT1VUICYmIHRoaXMudnBCaXRzW3VdICYgdGhpcy5JU0RPTkUgJiYgKG4gPSBwLml4IC0gYy5peCwgbyA9IHAuaXkgLSBjLml5LCBsID0gcC5peiAtIGMuaXosIGggPSBuICogbiArIG8gKiBvICsgbCAqIGwsIGggPCB0aGlzLnZwRGlzdGFuY2VbdV0gJiYgKHQuc2V0KHAuaXgsIHAuaXksIHAuaXosIGMpLCB0aGlzLnZwRGlzdGFuY2VbdV0gPSBoLCB0aGlzLnZwQml0c1t1XSAmIHRoaXMuSVNCT1VORCB8fCAodGhpcy52cEJpdHNbdV0gfD0gdGhpcy5JU0JPVU5ELCBmLnB1c2goewogICAgICAgICAgICAgICAgICAgIGl4OiBwLml4LAogICAgICAgICAgICAgICAgICAgIGl5OiBwLml5LAogICAgICAgICAgICAgICAgICAgIGl6OiBwLml6CiAgICAgICAgICAgICAgICAgIH0pKSkpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIF92MiA9IDAsIF8zID0gZS5sZW5ndGg7IF92MiA8IF8zOyBfdjIrKykgewogICAgICAgICAgICAgICAgICByID0gZVtfdjJdLml4LCBzID0gZVtfdjJdLml5LCBhID0gZVtfdjJdLml6LCBjID0gdC5nZXQociwgcywgYSk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lODggPSAxODsgX2U4OCA8IDI2OyBfZTg4KyspIHAuaXggPSByICsgdGhpcy5uYltfZTg4XVswXSwgcC5peSA9IHMgKyB0aGlzLm5iW19lODhdWzFdLCBwLml6ID0gYSArIHRoaXMubmJbX2U4OF1bMl0sIHAuaXggPCB0aGlzLnBMZW5ndGggJiYgcC5peCA+IC0xICYmIHAuaXkgPCB0aGlzLnBXaWR0aCAmJiBwLml5ID4gLTEgJiYgcC5peiA8IHRoaXMucEhlaWdodCAmJiBwLml6ID4gLTEgJiYgKHUgPSBwLml4ICogZyArIHRoaXMucEhlaWdodCAqIHAuaXkgKyBwLml6LCB0aGlzLnZwQml0c1t1XSAmIHRoaXMuSU5PVVQgJiYgISh0aGlzLnZwQml0c1t1XSAmIHRoaXMuSVNET05FKSA/ICh0LnNldChwLml4LCBwLml5LCBhICsgdGhpcy5uYltfZTg4XVsyXSwgYyksIG4gPSBwLml4IC0gYy5peCwgbyA9IHAuaXkgLSBjLml5LCBsID0gcC5peiAtIGMuaXosIGggPSBuICogbiArIG8gKiBvICsgbCAqIGwsIHRoaXMudnBEaXN0YW5jZVt1XSA9IGgsIHRoaXMudnBCaXRzW3VdIHw9IHRoaXMuSVNET05FLCB0aGlzLnZwQml0c1t1XSB8PSB0aGlzLklTQk9VTkQsIGYucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgaXg6IHAuaXgsCiAgICAgICAgICAgICAgICAgICAgaXk6IHAuaXksCiAgICAgICAgICAgICAgICAgICAgaXo6IHAuaXoKICAgICAgICAgICAgICAgICAgfSkpIDogdGhpcy52cEJpdHNbdV0gJiB0aGlzLklOT1VUICYmIHRoaXMudnBCaXRzW3VdICYgdGhpcy5JU0RPTkUgJiYgKG4gPSBwLml4IC0gYy5peCwgbyA9IHAuaXkgLSBjLml5LCBsID0gcC5peiAtIGMuaXosIGggPSBuICogbiArIG8gKiBvICsgbCAqIGwsIGggPCB0aGlzLnZwRGlzdGFuY2VbdV0gJiYgKHQuc2V0KHAuaXgsIHAuaXksIHAuaXosIGMpLCB0aGlzLnZwRGlzdGFuY2VbdV0gPSBoLCB0aGlzLnZwQml0c1t1XSAmIHRoaXMuSVNCT1VORCB8fCAodGhpcy52cEJpdHNbdV0gfD0gdGhpcy5JU0JPVU5ELCBmLnB1c2goewogICAgICAgICAgICAgICAgICAgIGl4OiBwLml4LAogICAgICAgICAgICAgICAgICAgIGl5OiBwLml5LAogICAgICAgICAgICAgICAgICAgIGl6OiBwLml6CiAgICAgICAgICAgICAgICAgIH0pKSkpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1hcmNoaW5nY3ViZWluaXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXJjaGluZ2N1YmVpbml0KGUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIF90ODIgPSAwLCBfcjQ4ID0gdGhpcy52cEJpdHMubGVuZ3RoOyBfdDgyIDwgX3I0ODsgX3Q4MisrKSAxID09IGUgPyB0aGlzLnZwQml0c1tfdDgyXSAmPSB+dGhpcy5JU0JPVU5EIDogNCA9PSBlID8gKHRoaXMudnBCaXRzW190ODJdICY9IH50aGlzLklTRE9ORSwgdGhpcy52cEJpdHNbX3Q4Ml0gJiB0aGlzLklTQk9VTkQgJiYgKHRoaXMudnBCaXRzW190ODJdIHw9IHRoaXMuSVNET05FKSwgdGhpcy52cEJpdHNbX3Q4Ml0gJj0gfnRoaXMuSVNCT1VORCkgOiAyID09IGUgPyB0aGlzLnZwQml0c1tfdDgyXSAmIHRoaXMuSVNCT1VORCAmJiB0aGlzLnZwQml0c1tfdDgyXSAmIHRoaXMuSVNET05FID8gdGhpcy52cEJpdHNbX3Q4Ml0gJj0gfnRoaXMuSVNCT1VORCA6IHRoaXMudnBCaXRzW190ODJdICYgdGhpcy5JU0JPVU5EICYmICEodGhpcy52cEJpdHNbX3Q4Ml0gJiB0aGlzLklTRE9ORSkgJiYgKHRoaXMudnBCaXRzW190ODJdIHw9IHRoaXMuSVNET05FKSA6IDMgPT0gZSAmJiAodGhpcy52cEJpdHNbX3Q4Ml0gJj0gfnRoaXMuSVNCT1VORCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibWFyY2hpbmdjdWJlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFyY2hpbmdjdWJlKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMubWFyY2hpbmdjdWJlaW5pdChlKSwgdGhpcy52ZXJ0cyA9IFtdLCB0aGlzLmZhY2VzID0gW10sIF9NYXJjaGluZ0N1YmUubWFyY2godGhpcy52cEJpdHMsIHRoaXMudmVydHMsIHRoaXMuZmFjZXMsIHsKICAgICAgICAgICAgICAgICAgc21vb3RoOiAxLAogICAgICAgICAgICAgICAgICBuWDogdGhpcy5wTGVuZ3RoLAogICAgICAgICAgICAgICAgICBuWTogdGhpcy5wV2lkdGgsCiAgICAgICAgICAgICAgICAgIG5aOiB0aGlzLnBIZWlnaHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnBXaWR0aCAqIHRoaXMucEhlaWdodDsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lODkgPSAwLCBfcjQ5ID0gdGhpcy52ZXJ0cy5sZW5ndGg7IF9lODkgPCBfcjQ5OyBfZTg5KyspIHRoaXMudmVydHNbX2U4OV0uYXRvbWlkID0gdGhpcy52cEF0b21JRFt0aGlzLnZlcnRzW19lODldLnggKiB0ICsgdGhpcy5wSGVpZ2h0ICogdGhpcy52ZXJ0c1tfZTg5XS55ICsgdGhpcy52ZXJ0c1tfZTg5XS56XTsKICAgICAgICAgICAgICAgIF9NYXJjaGluZ0N1YmUubGFwbGFjaWFuU21vb3RoKDEsIHRoaXMudmVydHMsIHRoaXMuZmFjZXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gUHJvdGVpblN1cmZhY2U7CiAgICAgICAgICB9KCk7CiAgICAgICAgfSwKICAgICAgICA3MzIzOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIFZvbHVtZURhdGE6IGZ1bmN0aW9uIFZvbHVtZURhdGEoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9Wb2x1bWVEYXRhOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig5MDA1KSwKICAgICAgICAgICAgYSA9IHIoOTY1MiksCiAgICAgICAgICAgIG4gPSByKDU1OTEpLAogICAgICAgICAgICBvID0gcig5NzIpLAogICAgICAgICAgICBsID0gcig3ODg1KTsKICAgICAgICAgIHZhciBfVm9sdW1lRGF0YSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9Wb2x1bWVEYXRhKGUsIHQsIHIpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1ZvbHVtZURhdGEpOwogICAgICAgICAgICAgIGlmICh0aGlzLnVuaXQgPSB7CiAgICAgICAgICAgICAgICB4OiAxLAogICAgICAgICAgICAgICAgeTogMSwKICAgICAgICAgICAgICAgIHo6IDEKICAgICAgICAgICAgICB9LCB0aGlzLm9yaWdpbiA9IHsKICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgIH0sIHRoaXMuc2l6ZSA9IHsKICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgIH0sIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoW10pLCB0aGlzLm1hdHJpeCA9IG51bGwsIHRoaXMuaW52ZXJzZW1hdHJpeCA9IG51bGwsIHRoaXMuaXNiaW5hcnkgPSBuZXcgU2V0KFsiY2NwNCIsICJDQ1A0Il0pLCB0aGlzLmdldENvb3JkaW5hdGVzID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZSAvICh0aGlzLnNpemUueSAqIHRoaXMuc2l6ZS56KSwKICAgICAgICAgICAgICAgICAgciA9IGUgJSAodGhpcy5zaXplLnkgKiB0aGlzLnNpemUueiksCiAgICAgICAgICAgICAgICAgIHMgPSBlICUgdGhpcy5zaXplLno7CiAgICAgICAgICAgICAgICByZXR1cm4gdCAqPSB0aGlzLnVuaXQueCwgciAqPSB0aGlzLnVuaXQueSwgcyAqPSB0aGlzLnVuaXQueiwgewogICAgICAgICAgICAgICAgICB4OiB0ICs9IHRoaXMub3JpZ2luLngsCiAgICAgICAgICAgICAgICAgIHk6IHIgKz0gdGhpcy5vcmlnaW4ueSwKICAgICAgICAgICAgICAgICAgejogcyArPSB0aGlzLm9yaWdpbi56CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sIHRoaXMudmFzcCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGUucmVwbGFjZSgvXlxzKy8sICIiKS5zcGxpdCgvW1xuXHJdLyksCiAgICAgICAgICAgICAgICAgIHIgPSAoMCwgbi5WQVNQKShlKVswXS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAoMCA9PSByKSByZXR1cm4gY29uc29sZS5sb2coIk5vIGdvb2QgZm9ybWF0aW5nIG9mIENIRyBvciBDSEdDQVIgZmlsZSwgbm90IGF0b21pYyBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGUgZmlsZS4iKSwgdm9pZCAodGhpcy5kYXRhID0gW10pOwogICAgICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgICAgIG8gPSAxLjg4OTcyNTk5MiwKICAgICAgICAgICAgICAgICAgbCA9IHBhcnNlRmxvYXQodFsxXSk7CiAgICAgICAgICAgICAgICBzID0gdFsyXS5yZXBsYWNlKC9eXHMrLywgIiIpLnNwbGl0KC9ccysvKTsKICAgICAgICAgICAgICAgIHZhciBoID0gbmV3IGEuVmVjdG9yMyhwYXJzZUZsb2F0KHNbMF0pLCBwYXJzZUZsb2F0KHNbMV0pLCBwYXJzZUZsb2F0KHNbMl0pKS5tdWx0aXBseVNjYWxhcihsICogbyk7CiAgICAgICAgICAgICAgICBzID0gdFszXS5yZXBsYWNlKC9eXHMrLywgIiIpLnNwbGl0KC9ccysvKTsKICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IGEuVmVjdG9yMyhwYXJzZUZsb2F0KHNbMF0pLCBwYXJzZUZsb2F0KHNbMV0pLCBwYXJzZUZsb2F0KHNbMl0pKS5tdWx0aXBseVNjYWxhcihsICogbyk7CiAgICAgICAgICAgICAgICBzID0gdFs0XS5yZXBsYWNlKC9eXHMrLywgIiIpLnNwbGl0KC9ccysvKTsKICAgICAgICAgICAgICAgIHZhciB1ID0gbmV3IGEuVmVjdG9yMyhwYXJzZUZsb2F0KHNbMF0pLCBwYXJzZUZsb2F0KHNbMV0pLCBwYXJzZUZsb2F0KHNbMl0pKS5tdWx0aXBseVNjYWxhcihsICogbyksCiAgICAgICAgICAgICAgICAgIGYgPSBoLnggKiAoYy55ICogdS56IC0gdS55ICogYy56KSAtIGMueCAqIChoLnkgKiB1LnogLSB1LnkgKiBoLnopICsgdS54ICogKGgueSAqIGMueiAtIGMueSAqIGgueiksCiAgICAgICAgICAgICAgICAgIHAgPSAxIC8gKGYgPSBNYXRoLmFicyhmKSAvIE1hdGgucG93KG8sIDMpKTsKICAgICAgICAgICAgICAgIHQuc3BsaWNlKDAsIDggKyByICsgMSk7CiAgICAgICAgICAgICAgICB2YXIgZyA9IHRbMF0ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpLAogICAgICAgICAgICAgICAgICB2ID0gTWF0aC5hYnMoZ1swXSksCiAgICAgICAgICAgICAgICAgIF8gPSBNYXRoLmFicyhnWzFdKSwKICAgICAgICAgICAgICAgICAgeSA9IE1hdGguYWJzKGdbMl0pLAogICAgICAgICAgICAgICAgICBiID0gdGhpcy5vcmlnaW4gPSBuZXcgYS5WZWN0b3IzKDAsIDAsIDApOwogICAgICAgICAgICAgICAgdGhpcy5zaXplID0gewogICAgICAgICAgICAgICAgICB4OiB2LAogICAgICAgICAgICAgICAgICB5OiBfLAogICAgICAgICAgICAgICAgICB6OiB5CiAgICAgICAgICAgICAgICB9LCB0aGlzLnVuaXQgPSBuZXcgYS5WZWN0b3IzKGgueCwgYy55LCB1LnopLCBoID0gaC5tdWx0aXBseVNjYWxhcigxIC8gKG8gKiB2KSksIGMgPSBjLm11bHRpcGx5U2NhbGFyKDEgLyAobyAqIF8pKSwgdSA9IHUubXVsdGlwbHlTY2FsYXIoMSAvIChvICogeSkpLCAwID09IGgueSAmJiAwID09IGgueiAmJiAwID09IGMueCAmJiAwID09IGMueiAmJiAwID09IHUueCAmJiAwID09IHUueSB8fCAodGhpcy5tYXRyaXggPSBuZXcgYS5NYXRyaXg0KGgueCwgYy54LCB1LngsIDAsIGgueSwgYy55LCB1LnksIDAsIGgueiwgYy56LCB1LnosIDAsIDAsIDAsIDAsIDEpLCB0aGlzLm1hdHJpeCA9IHRoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXModGhpcy5tYXRyaXgsIG5ldyBhLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oYi54LCBiLnksIGIueikpLCB0aGlzLm9yaWdpbiA9IG5ldyBhLlZlY3RvcjMoMCwgMCwgMCksIHRoaXMudW5pdCA9IG5ldyBhLlZlY3RvcjMoMSwgMSwgMSkpLCB0LnNwbGljZSgwLCAxKTsKICAgICAgICAgICAgICAgIHZhciB3ID0gdC5qb2luKCIgIik7CiAgICAgICAgICAgICAgICAodyA9ICh3ID0gdy5yZXBsYWNlKC9eXHMrLywgIiIpKS5zcGxpdCgvW1xzXHJdKy8pKS5zcGxpY2UodiAqIF8gKiB5ICsgMSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gbmV3IEZsb2F0MzJBcnJheSh3KSwgQSA9IDA7IEEgPCB4Lmxlbmd0aDsgQSsrKSB4W0FdID0geFtBXSAqIHAgKiAuMDM2NzQ5MzA5OwogICAgICAgICAgICAgICAgdGhpcy5kYXRhID0geDsKICAgICAgICAgICAgICB9LCB0aGlzLmR4ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgICByID0gZS5zcGxpdCgvW1xuXHJdKy8pLAogICAgICAgICAgICAgICAgICBzID0gL2dyaWRwb3NpdGlvbnNccytjb3VudHNccysoXGQrKVxzKyhcZCspXHMrKFxkKykvLAogICAgICAgICAgICAgICAgICBuID0gL15vcmlnaW5ccysoXFMrKVxzKyhcUyspXHMrKFxTKykvLAogICAgICAgICAgICAgICAgICBvID0gL15kZWx0YVxzKyhcUyspXHMrKFxTKylccysoXFMrKS8sCiAgICAgICAgICAgICAgICAgIGwgPSAvZGF0YSBmb2xsb3dzLywKICAgICAgICAgICAgICAgICAgaCA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKGggPSAwOyBoIDwgci5sZW5ndGg7IGgrKykgewogICAgICAgICAgICAgICAgICB2YXIgYyA9IHJbaF07CiAgICAgICAgICAgICAgICAgIGlmICh0ID0gcy5leGVjKGMpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBwYXJzZUludCh0WzFdKSwKICAgICAgICAgICAgICAgICAgICAgIGYgPSBwYXJzZUludCh0WzJdKSwKICAgICAgICAgICAgICAgICAgICAgIHAgPSBwYXJzZUludCh0WzNdKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSB7CiAgICAgICAgICAgICAgICAgICAgICB4OiB1LAogICAgICAgICAgICAgICAgICAgICAgeTogZiwKICAgICAgICAgICAgICAgICAgICAgIHo6IHAKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPSBvLmV4ZWMoYykpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IHBhcnNlRmxvYXQodFsxXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gcGFyc2VGbG9hdCh0WzJdKSAmJiAwID09IHBhcnNlRmxvYXQodFszXSkgfHwgY29uc29sZS5sb2coIk5vbi1vcnRob2dvbmFsIGRlbHRhIG1hdHJpeCBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBkeCBmb3JtYXQiKSwgYyA9IHJbaCArPSAxXSwgbnVsbCA9PSAodCA9IG8uZXhlYyhjKSkpIHJldHVybiB2b2lkIGNvbnNvbGUubG9nKCJQYXJzZSBlcnJvciBpbiBkeCBkZWx0YSBtYXRyaXgiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHBhcnNlRmxvYXQodFsyXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gcGFyc2VGbG9hdCh0WzFdKSAmJiAwID09IHBhcnNlRmxvYXQodFszXSkgfHwgY29uc29sZS5sb2coIk5vbi1vcnRob2dvbmFsIGRlbHRhIG1hdHJpeCBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBkeCBmb3JtYXQiKSwgYyA9IHJbaCArPSAxXSwgbnVsbCA9PSAodCA9IG8uZXhlYyhjKSkpIHJldHVybiB2b2lkIGNvbnNvbGUubG9nKCJQYXJzZSBlcnJvciBpbiBkeCBkZWx0YSBtYXRyaXgiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgXyA9IHBhcnNlRmxvYXQodFszXSk7CiAgICAgICAgICAgICAgICAgICAgMCA9PSBwYXJzZUZsb2F0KHRbMV0pICYmIDAgPT0gcGFyc2VGbG9hdCh0WzJdKSB8fCBjb25zb2xlLmxvZygiTm9uLW9ydGhvZ29uYWwgZGVsdGEgbWF0cml4IG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIGR4IGZvcm1hdCIpLCB0aGlzLnVuaXQgPSBuZXcgYS5WZWN0b3IzKGcsIHYsIF8pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPSBuLmV4ZWMoYykpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHBhcnNlRmxvYXQodFsxXSksCiAgICAgICAgICAgICAgICAgICAgICBiID0gcGFyc2VGbG9hdCh0WzJdKSwKICAgICAgICAgICAgICAgICAgICAgIHcgPSBwYXJzZUZsb2F0KHRbM10pOwogICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luID0gbmV3IGEuVmVjdG9yMyh5LCBiLCB3KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ID0gbC5leGVjKGMpKSBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChoICs9IDEsIHRoaXMuc2l6ZSAmJiB0aGlzLm9yaWdpbiAmJiB0aGlzLnVuaXQgJiYgdGhpcy5zaXplKSB7CiAgICAgICAgICAgICAgICAgIHZhciB4ID0gci5zcGxpY2UoaCkuam9pbigiICIpOwogICAgICAgICAgICAgICAgICB4ID0geC5zcGxpdCgvW1xzXHJdKy8pLCB0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGNvbnNvbGUubG9nKCJFcnJvciBwYXJzaW5nIGR4IGZvcm1hdCIpOwogICAgICAgICAgICAgIH0sIHQgPSB0LnRvTG93ZXJDYXNlKCksIC9cLmd6JC8udGVzdCh0KSkgewogICAgICAgICAgICAgICAgdCA9IHQucmVwbGFjZSgvXC5neiQvLCAiIik7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB0aGlzW3RdICYmIHRoaXMuaXNiaW5hcnkuaGFzKHQpID8gKCJzdHJpbmciID09IHR5cGVvZiBlICYmIChlID0gKDAsIHMuYmFzZTY0VG9BcnJheSkoZSkpLCBlID0gKDAsIGwuaW5mbGF0ZSkoZSkpIDogZSA9IG5ldyBUZXh0RGVjb2RlcigidXRmLTgiKS5kZWNvZGUoKDAsIGwuaW5mbGF0ZSkoZSkpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHRoaXNbdF0gJiYgKHRoaXMuaXNiaW5hcnkuaGFzKHQpICYmICJzdHJpbmciID09IHR5cGVvZiBlICYmIChlID0gKDAsIHMuYmFzZTY0VG9BcnJheSkoZSkpLCB0aGlzW3RdKGUpKSwgcikgewogICAgICAgICAgICAgICAgaWYgKHIubmVnYXRlKSBmb3IgKHZhciBfZTkwID0gMCwgX3Q4MyA9IHRoaXMuZGF0YS5sZW5ndGg7IF9lOTAgPCBfdDgzOyBfZTkwKyspIHRoaXMuZGF0YVtfZTkwXSA9IC10aGlzLmRhdGFbX2U5MF07CiAgICAgICAgICAgICAgICBpZiAoci5ub3JtYWxpemUpIHsKICAgICAgICAgICAgICAgICAgdmFyIG8gPSAwOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTkxID0gMCwgX3Q4NCA9IHRoaXMuZGF0YS5sZW5ndGg7IF9lOTEgPCBfdDg0OyBfZTkxKyspIG8gKz0gdGhpcy5kYXRhW19lOTFdOwogICAgICAgICAgICAgICAgICB2YXIgaCA9IG8gLyB0aGlzLmRhdGEubGVuZ3RoOwogICAgICAgICAgICAgICAgICBvID0gMDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U5MiA9IDAsIF90ODUgPSB0aGlzLmRhdGEubGVuZ3RoOyBfZTkyIDwgX3Q4NTsgX2U5MisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmRhdGFbX2U5Ml0gLSBoOwogICAgICAgICAgICAgICAgICAgIG8gKz0gYyAqIGM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdmFyIHUgPSBvIC8gdGhpcy5kYXRhLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2U5MyA9IDAsIF90ODYgPSB0aGlzLmRhdGEubGVuZ3RoOyBfZTkzIDwgX3Q4NjsgX2U5MysrKSB0aGlzLmRhdGFbX2U5M10gPSAodGhpcy5kYXRhW19lOTNdIC0gaCkgLyB1OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1ZvbHVtZURhdGEsIFt7CiAgICAgICAgICAgICAga2V5OiAiZ2V0SW5kZXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmRleChlLCB0LCByKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRyaXgpIHsKICAgICAgICAgICAgICAgICAgbnVsbCA9PSB0aGlzLmludmVyc2VtYXRyaXggJiYgKHRoaXMuaW52ZXJzZW1hdHJpeCA9IG5ldyBhLk1hdHJpeDQoKS5nZXRJbnZlcnNlKHRoaXMubWF0cml4KSk7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IGEuVmVjdG9yMyhlLCB0LCByKTsKICAgICAgICAgICAgICAgICAgZSA9IChzID0gcy5hcHBseU1hdHJpeDQodGhpcy5pbnZlcnNlbWF0cml4KSkueCwgdCA9IHMueSwgciA9IHMuejsKICAgICAgICAgICAgICAgIH0gZWxzZSBlIC09IHRoaXMub3JpZ2luLngsIHQgLT0gdGhpcy5vcmlnaW4ueSwgciAtPSB0aGlzLm9yaWdpbi56LCBlIC89IHRoaXMudW5pdC54LCB0IC89IHRoaXMudW5pdC55LCByIC89IHRoaXMudW5pdC56OwogICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBNYXRoLnJvdW5kKGUpLCB0ID0gTWF0aC5yb3VuZCh0KSwgciA9IE1hdGgucm91bmQociksIGUgPCAwIHx8IGUgPj0gdGhpcy5zaXplLnggfHwgdCA8IDAgfHwgdCA+PSB0aGlzLnNpemUueSB8fCByIDwgMCB8fCByID49IHRoaXMuc2l6ZS56ID8gLTEgOiBlICogdGhpcy5zaXplLnkgKiB0aGlzLnNpemUueiArIHQgKiB0aGlzLnNpemUueiArIHI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0VmFsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5nZXRJbmRleChlLCB0LCByKTsKICAgICAgICAgICAgICAgIHJldHVybiBzIDwgMCA/IDAgOiB0aGlzLmRhdGFbc107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY3ViZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGN1YmUoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLnNwbGl0KC9ccj9cbi8pOwogICAgICAgICAgICAgICAgaWYgKCEodC5sZW5ndGggPCA2KSkgewogICAgICAgICAgICAgICAgICB2YXIgciA9ICgwLCBvLkNVQkUpKGUsIHt9KS5tb2RlbERhdGFbMF0uY3J5c3QsCiAgICAgICAgICAgICAgICAgICAgcyA9IHRbMl0ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpLAogICAgICAgICAgICAgICAgICAgIGEgPSBwYXJzZUZsb2F0KHNbMF0pLAogICAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLmFicyhhKTsKICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSByLm9yaWdpbiwgdGhpcy5zaXplID0gci5zaXplLCB0aGlzLnVuaXQgPSByLnVuaXQsIHRoaXMubWF0cml4ID0gci5tYXRyaXg0OwogICAgICAgICAgICAgICAgICB2YXIgbCA9IDY7CiAgICAgICAgICAgICAgICAgIGEgPCAwICYmIGwrKzsKICAgICAgICAgICAgICAgICAgdmFyIGggPSB0LnNwbGljZShuICsgbCkuam9pbigiICIpOwogICAgICAgICAgICAgICAgICBoID0gKGggPSBoLnJlcGxhY2UoL15ccysvLCAiIikpLnNwbGl0KC9bXHNccl0rLyksIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoaCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY2NwNCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNjcDQoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB7fTsKICAgICAgICAgICAgICAgIGUgPSBuZXcgSW50OEFycmF5KGUpOwogICAgICAgICAgICAgICAgdmFyIHIgPSBuZXcgSW50MzJBcnJheShlLmJ1ZmZlciwgMCwgNTYpLAogICAgICAgICAgICAgICAgICBzID0gbmV3IEZsb2F0MzJBcnJheShlLmJ1ZmZlciwgMCwgNTYpLAogICAgICAgICAgICAgICAgICBuID0gbmV3IERhdGFWaWV3KGUuYnVmZmVyKTsKICAgICAgICAgICAgICAgIGlmICh0Lk1BUCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobi5nZXRVaW50OCgyMDgpLCBuLmdldFVpbnQ4KDIwOSksIG4uZ2V0VWludDgoMjEwKSwgbi5nZXRVaW50OCgyMTEpKSwgdC5NQUNIU1QgPSBbbi5nZXRVaW50OCgyMTIpLCBuLmdldFVpbnQ4KDIxMyldLCAxNyA9PT0gdC5NQUNIU1RbMF0gJiYgMTcgPT09IHQuTUFDSFNUWzFdKSBmb3IgKHZhciBvID0gZS5ieXRlTGVuZ3RoLCBsID0gMDsgbCA8IG87IGwgKz0gNCkgbi5zZXRGbG9hdDMyKGwsIG4uZ2V0RmxvYXQzMihsKSwgITApOwogICAgICAgICAgICAgICAgdC5OWCA9IHJbMF0sIHQuTlkgPSByWzFdLCB0Lk5aID0gclsyXSwgdC5NT0RFID0gclszXSwgdC5OWFNUQVJUID0gcls0XSwgdC5OWVNUQVJUID0gcls1XSwgdC5OWlNUQVJUID0gcls2XSwgdC5NWCA9IHJbN10sIHQuTVkgPSByWzhdLCB0Lk1aID0gcls5XSwgdC54bGVuID0gc1sxMF0sIHQueWxlbiA9IHNbMTFdLCB0LnpsZW4gPSBzWzEyXSwgdC5hbHBoYSA9IHNbMTNdLCB0LmJldGEgPSBzWzE0XSwgdC5nYW1tYSA9IHNbMTVdLCB0Lk1BUEMgPSByWzE2XSwgdC5NQVBSID0gclsxN10sIHQuTUFQUyA9IHJbMThdLCB0LkRNSU4gPSBzWzE5XSwgdC5ETUFYID0gc1syMF0sIHQuRE1FQU4gPSBzWzIxXSwgdC5JU1BHID0gclsyMl0sIHQuTlNZTUJUID0gclsyM10sIHQuTFNLRkxHID0gclsyNF0sIHQub3JpZ2luWCA9IHNbNDldLCB0Lm9yaWdpblkgPSBzWzUwXSwgdC5vcmlnaW5aID0gc1s1MV0sIHQuQVJNUyA9IHNbNTRdOwogICAgICAgICAgICAgICAgdmFyIGggPSB0LAogICAgICAgICAgICAgICAgICBjID0gW2gueGxlbiwgMCwgMF0sCiAgICAgICAgICAgICAgICAgIHUgPSBbaC55bGVuICogTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGguZ2FtbWEpLCBoLnlsZW4gKiBNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogaC5nYW1tYSksIDBdLAogICAgICAgICAgICAgICAgICBmID0gW2guemxlbiAqIE1hdGguY29zKE1hdGguUEkgLyAxODAgKiBoLmJldGEpLCBoLnpsZW4gKiAoTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGguYWxwaGEpIC0gTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGguZ2FtbWEpICogTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGguYmV0YSkpIC8gTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGguZ2FtbWEpLCAwXTsKICAgICAgICAgICAgICAgIGZbMl0gPSBNYXRoLnNxcnQoaC56bGVuICogaC56bGVuICogTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGguYmV0YSkgKiBNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogaC5iZXRhKSAtIGZbMV0gKiBmWzFdKTsKICAgICAgICAgICAgICAgIHZhciBwID0gWzAsIGMsIHUsIGZdLAogICAgICAgICAgICAgICAgICBnID0gWzAsIGguTVgsIGguTVksIGguTVpdLAogICAgICAgICAgICAgICAgICB2ID0gWzAsIGguTUFQQywgaC5NQVBSLCBoLk1BUFNdOwogICAgICAgICAgICAgICAgdGhpcy5tYXRyaXggPSBuZXcgYS5NYXRyaXg0KCksIHRoaXMubWF0cml4LnNldChwW3ZbMV1dWzBdIC8gZ1t2WzFdXSwgcFt2WzJdXVswXSAvIGdbdlsyXV0sIHBbdlszXV1bMF0gLyBnW3ZbM11dLCAwLCBwW3ZbMV1dWzFdIC8gZ1t2WzFdXSwgcFt2WzJdXVsxXSAvIGdbdlsyXV0sIHBbdlszXV1bMV0gLyBnW3ZbM11dLCAwLCBwW3ZbMV1dWzJdIC8gZ1t2WzFdXSwgcFt2WzJdXVsyXSAvIGdbdlsyXV0sIHBbdlszXV1bMl0gLyBnW3ZbM11dLCAwLCAwLCAwLCAwLCAxKSwgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKHRoaXMubWF0cml4LCBuZXcgYS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKGguTlhTVEFSVCArIGgub3JpZ2luWCwgaC5OWVNUQVJUICsgaC5vcmlnaW5ZLCBoLk5aU1RBUlQgKyBoLm9yaWdpblopKSwgdGhpcy5vcmlnaW4gPSBuZXcgYS5WZWN0b3IzKDAsIDAsIDApLCB0aGlzLnVuaXQgPSBuZXcgYS5WZWN0b3IzKDEsIDEsIDEpLCB0aGlzLnNpemUgPSB7CiAgICAgICAgICAgICAgICAgIHg6IHQuTlgsCiAgICAgICAgICAgICAgICAgIHk6IHQuTlksCiAgICAgICAgICAgICAgICAgIHo6IHQuTloKICAgICAgICAgICAgICAgIH0sIHRoaXMuZGltZW5zaW9ub3JkZXIgPSBbdC5NQVBDLCB0Lk1BUFIsIHQuTUFQU107CiAgICAgICAgICAgICAgICB2YXIgXyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5idWZmZXIsIDEwMjQgKyB0Lk5TWU1CVCksCiAgICAgICAgICAgICAgICAgIHkgPSB0Lk5YLAogICAgICAgICAgICAgICAgICBiID0gdC5OWSwKICAgICAgICAgICAgICAgICAgdyA9IHQuTlo7CiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHkgKiBiICogdyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTk0ID0gMDsgX2U5NCA8IHk7IF9lOTQrKykgZm9yICh2YXIgX3Q4NyA9IDA7IF90ODcgPCBiOyBfdDg3KyspIGZvciAodmFyIF9yNTAgPSAwOyBfcjUwIDwgdzsgX3I1MCsrKSB0aGlzLmRhdGFbKF9lOTQgKiBiICsgX3Q4NykgKiB3ICsgX3I1MF0gPSBfWyhfcjUwICogYiArIF90ODcpICogeSArIF9lOTRdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1ZvbHVtZURhdGE7CiAgICAgICAgICB9KCk7CiAgICAgICAgfSwKICAgICAgICAxNDk2OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIEdMVm9sdW1ldHJpY1JlbmRlcjogZnVuY3Rpb24gR0xWb2x1bWV0cmljUmVuZGVyKCkgewogICAgICAgICAgICAgIHJldHVybiBfR0xWb2x1bWV0cmljUmVuZGVyOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcigzMzUxKSwKICAgICAgICAgICAgYSA9IHIoOTY1MiksCiAgICAgICAgICAgIG4gPSByKDc2OTMpLAogICAgICAgICAgICBvID0gcigyNTUwKSwKICAgICAgICAgICAgbCA9IHIoODc4Myk7CiAgICAgICAgICB2YXIgX0dMVm9sdW1ldHJpY1JlbmRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9HTFZvbHVtZXRyaWNSZW5kZXIoZSwgdCkgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfR0xWb2x1bWV0cmljUmVuZGVyKTsKICAgICAgICAgICAgICB0aGlzLmhpZGRlbiA9ICExLCB0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IHMuU3BoZXJlKCksIHRoaXMucmVuZGVyZWRTaGFwZU9iaiA9IG51bGwsIHRoaXMuc2hhcGVPYmogPSBudWxsLCB0aGlzLnN1YnNhbXBsZXMgPSA1LCB0aGlzLmRhdGEgPSBudWxsLCB0aGlzLnRyYW5zZmVyZnVuY3Rpb25idWZmZXIgPSBbXSwgdGhpcy5taW4gPSAwLCB0aGlzLm1heCA9IDAsIHQgPSB0IHx8IHt9OwogICAgICAgICAgICAgIHZhciByID0gT2JqZWN0LmFzc2lnbihbXSwgdC50cmFuc2ZlcmZuKTsKICAgICAgICAgICAgICB0aGlzLnN1YnNhbXBsZXMgPSB0LnN1YnNhbXBsZXMgfHwgNTsKICAgICAgICAgICAgICB2YXIgbiwgaCwgYywgdSwgZiwgcCwgZywgdiwgXywgeTsKICAgICAgICAgICAgICByLmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGUudmFsdWUgPSBwYXJzZUZsb2F0KGUudmFsdWUpOwogICAgICAgICAgICAgIH0pLCByLnNvcnQoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLnZhbHVlIC0gdC52YWx1ZTsKICAgICAgICAgICAgICB9KSwgdGhpcy5taW4gPSByWzBdLnZhbHVlLCAwID09IHIubGVuZ3RoICYmIHIucHVzaChyWzBdKSwgdGhpcy5tYXggPSByW3IubGVuZ3RoIC0gMV0udmFsdWU7CiAgICAgICAgICAgICAgZm9yICh2YXIgX2U5NSA9IDA7IF9lOTUgPCByLmxlbmd0aCAtIDE7IF9lOTUrKykgaWYgKGMgPSBvLkNDLmNvbG9yKHJbX2U5NV0uY29sb3IpLCB1ID0gby5DQy5jb2xvcihyW19lOTUgKyAxXS5jb2xvciksIF8gPSByW19lOTVdLm9wYWNpdHksIHkgPSByW19lOTUgKyAxXS5vcGFjaXR5LCAobiA9IE1hdGguZmxvb3IoMjU2ICogKHJbX2U5NV0udmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbikpKSAhPSAoaCA9IE1hdGguZmxvb3IoMjU2ICogKHJbX2U5NSArIDFdLnZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKSkpIHsKICAgICAgICAgICAgICAgIGYgPSBfR0xWb2x1bWV0cmljUmVuZGVyLmludGVycG9sYXRlQXJyYXkoWzI1NSAqIGMuciwgMjU1ICogdS5yXSwgaCAtIG4pLCBwID0gX0dMVm9sdW1ldHJpY1JlbmRlci5pbnRlcnBvbGF0ZUFycmF5KFsyNTUgKiBjLmcsIDI1NSAqIHUuZ10sIGggLSBuKSwgZyA9IF9HTFZvbHVtZXRyaWNSZW5kZXIuaW50ZXJwb2xhdGVBcnJheShbMjU1ICogYy5iLCAyNTUgKiB1LmJdLCBoIC0gbiksIHYgPSBfR0xWb2x1bWV0cmljUmVuZGVyLmludGVycG9sYXRlQXJyYXkoWzI1NSAqIF8sIDI1NSAqIHldLCBoIC0gbik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTk2ID0gMDsgX2U5NiA8IGYubGVuZ3RoOyBfZTk2KyspIHRoaXMudHJhbnNmZXJmdW5jdGlvbmJ1ZmZlci5wdXNoKGZbX2U5Nl0pLCB0aGlzLnRyYW5zZmVyZnVuY3Rpb25idWZmZXIucHVzaChwW19lOTZdKSwgdGhpcy50cmFuc2ZlcmZ1bmN0aW9uYnVmZmVyLnB1c2goZ1tfZTk2XSksIHRoaXMudHJhbnNmZXJmdW5jdGlvbmJ1ZmZlci5wdXNoKHZbX2U5Nl0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc2ZlcmZ1bmN0aW9uYnVmZmVyID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMudHJhbnNmZXJmdW5jdGlvbmJ1ZmZlciksIGUubWF0cml4KSB7CiAgICAgICAgICAgICAgICB2YXIgX3Q4OCA9IG5ldyBhLlZlY3RvcjMoMCwgMCwgMCksCiAgICAgICAgICAgICAgICAgIF9yNTEgPSBuZXcgYS5WZWN0b3IzKGUuc2l6ZS54LCBlLnNpemUueSwgZS5zaXplLnopLAogICAgICAgICAgICAgICAgICBfczQwID0gbmV3IGEuVmVjdG9yMygxLCAxLCAxKTsKICAgICAgICAgICAgICAgIF90ODguYXBwbHlNYXRyaXg0KGUubWF0cml4KSwgX3I1MS5hcHBseU1hdHJpeDQoZS5tYXRyaXgpLCBfczQwLmFwcGx5TWF0cml4NChlLm1hdHJpeCkuc3ViKF90ODgpLCB0aGlzLmV4dGVudCA9IFtbX3Q4OC54LCBfdDg4LnksIF90ODguel0sIFtfcjUxLngsIF9yNTEueSwgX3I1MS56XV07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDg5ID0gMTsgX3Q4OSA8IDc7IF90ODkrKykgX3I1MS54ID0gMSAmIF90ODkgPyBlLnNpemUueCA6IDAsIF9yNTEueSA9IDIgJiBfdDg5ID8gZS5zaXplLnkgOiAwLCBfcjUxLnogPSA0ICYgX3Q4OSA/IGUuc2l6ZS56IDogMCwgX3I1MS5hcHBseU1hdHJpeDQoZS5tYXRyaXgpLCB0aGlzLmV4dGVudFswXVswXSA9IE1hdGgubWluKHRoaXMuZXh0ZW50WzBdWzBdLCBfcjUxLngpLCB0aGlzLmV4dGVudFswXVsxXSA9IE1hdGgubWluKHRoaXMuZXh0ZW50WzBdWzFdLCBfcjUxLnkpLCB0aGlzLmV4dGVudFswXVsyXSA9IE1hdGgubWluKHRoaXMuZXh0ZW50WzBdWzJdLCBfcjUxLnopLCB0aGlzLmV4dGVudFsxXVswXSA9IE1hdGgubWF4KHRoaXMuZXh0ZW50WzFdWzBdLCBfcjUxLngpLCB0aGlzLmV4dGVudFsxXVsxXSA9IE1hdGgubWF4KHRoaXMuZXh0ZW50WzFdWzFdLCBfcjUxLnkpLCB0aGlzLmV4dGVudFsxXVsyXSA9IE1hdGgubWF4KHRoaXMuZXh0ZW50WzFdWzJdLCBfcjUxLnopOwogICAgICAgICAgICAgICAgdmFyIF9uMjEgPSBfcjUxLnggLSBfdDg4LngsCiAgICAgICAgICAgICAgICAgIF9vMjEgPSBfcjUxLnkgLSBfdDg4LnksCiAgICAgICAgICAgICAgICAgIF9sMTAgPSBfcjUxLnogLSBfdDg4Lno7CiAgICAgICAgICAgICAgICB0aGlzLm1heGRlcHRoID0gTWF0aC5zcXJ0KF9uMjEgKiBfbjIxICsgX28yMSAqIF9vMjEgKyBfbDEwICogX2wxMCksIHRoaXMubWludW5pdCA9IE1hdGgubWluKE1hdGgubWluKF9zNDAueCwgX3M0MC55KSwgX3M0MC56KSwgdGhpcy50ZXhtYXRyaXggPSBuZXcgYS5NYXRyaXg0KCkuaWRlbnRpdHkoKS5zY2FsZSh7CiAgICAgICAgICAgICAgICAgIHg6IGUuc2l6ZS54LAogICAgICAgICAgICAgICAgICB5OiBlLnNpemUueSwKICAgICAgICAgICAgICAgICAgejogZS5zaXplLnoKICAgICAgICAgICAgICAgIH0pLCB0aGlzLnRleG1hdHJpeCA9IHRoaXMudGV4bWF0cml4Lm11bHRpcGx5TWF0cmljZXMoZS5tYXRyaXgsIHRoaXMudGV4bWF0cml4KSwgdGhpcy50ZXhtYXRyaXggPSB0aGlzLnRleG1hdHJpeC5nZXRJbnZlcnNlKHRoaXMudGV4bWF0cml4KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy50ZXhtYXRyaXggPSBuZXcgYS5NYXRyaXg0KCkuaWRlbnRpdHkoKTsKICAgICAgICAgICAgICAgIHZhciBfdDkwID0gZS51bml0LnggKiBlLnNpemUueCwKICAgICAgICAgICAgICAgICAgX3I1MiA9IGUudW5pdC55ICogZS5zaXplLnksCiAgICAgICAgICAgICAgICAgIF9zNDEgPSBlLnVuaXQueiAqIGUuc2l6ZS56OwogICAgICAgICAgICAgICAgdGhpcy50ZXhtYXRyaXgubWFrZVRyYW5zbGF0aW9uKC1lLm9yaWdpbi54IC8gX3Q5MCwgLWUub3JpZ2luLnkgLyBfcjUyLCAtZS5vcmlnaW4ueiAvIF9zNDEpLCB0aGlzLnRleG1hdHJpeC5zY2FsZSh7CiAgICAgICAgICAgICAgICAgIHg6IDEgLyBfdDkwLAogICAgICAgICAgICAgICAgICB5OiAxIC8gX3I1MiwKICAgICAgICAgICAgICAgICAgejogMSAvIF9zNDEKICAgICAgICAgICAgICAgIH0pLCB0aGlzLm1pbnVuaXQgPSBNYXRoLm1pbihNYXRoLm1pbihlLnVuaXQueCwgZS51bml0LnkpLCBlLnVuaXQueiksIHRoaXMuZXh0ZW50ID0gW1tlLm9yaWdpbi54LCBlLm9yaWdpbi55LCBlLm9yaWdpbi56XSwgW2Uub3JpZ2luLnggKyBfdDkwLCBlLm9yaWdpbi55ICsgX3I1MiwgZS5vcmlnaW4ueiArIF9zNDFdXSwgdGhpcy5tYXhkZXB0aCA9IE1hdGguc3FydChfdDkwICogX3Q5MCArIF9yNTIgKiBfcjUyICsgX3M0MSAqIF9zNDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBsLkdMU2hhcGUoe30pOwogICAgICAgICAgICAgIGlmIChiLmFkZEJveCh7CiAgICAgICAgICAgICAgICBjb3JuZXI6IHsKICAgICAgICAgICAgICAgICAgeDogdGhpcy5leHRlbnRbMF1bMF0sCiAgICAgICAgICAgICAgICAgIHk6IHRoaXMuZXh0ZW50WzBdWzFdLAogICAgICAgICAgICAgICAgICB6OiB0aGlzLmV4dGVudFswXVsyXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IHsKICAgICAgICAgICAgICAgICAgdzogdGhpcy5leHRlbnRbMV1bMF0gLSB0aGlzLmV4dGVudFswXVswXSwKICAgICAgICAgICAgICAgICAgaDogdGhpcy5leHRlbnRbMV1bMV0gLSB0aGlzLmV4dGVudFswXVsxXSwKICAgICAgICAgICAgICAgICAgZDogdGhpcy5leHRlbnRbMV1bMl0gLSB0aGlzLmV4dGVudFswXVsyXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLCB0aGlzLmdlbyA9IGIuZmluYWxpemUoKSwgdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIgPSBuZXcgYS5WZWN0b3IzKCh0aGlzLmV4dGVudFswXVswXSArIHRoaXMuZXh0ZW50WzFdWzBdKSAvIDIsICh0aGlzLmV4dGVudFswXVsxXSArIHRoaXMuZXh0ZW50WzFdWzFdKSAvIDIsICh0aGlzLmV4dGVudFswXVsyXSArIHRoaXMuZXh0ZW50WzFdWzJdKSAvIDIpLCB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IHRoaXMubWF4ZGVwdGggLyAyLCB2b2lkIDAgIT09IHQuY29vcmRzICYmIHZvaWQgMCAhPT0gdC5zZWxkaXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgX3I1MyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5sZW5ndGgpLAogICAgICAgICAgICAgICAgICBfczQyID0gdC5zZWxkaXN0LAogICAgICAgICAgICAgICAgICBfYTI2ID0gX3M0MiAqIF9zNDI7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfbjIyID0gMCwgX28yMiA9IHQuY29vcmRzLmxlbmd0aDsgX24yMiA8IF9vMjI7IF9uMjIrKykgewogICAgICAgICAgICAgICAgICB2YXIgX28yMyA9IHQuY29vcmRzW19uMjJdLAogICAgICAgICAgICAgICAgICAgIF9sMTEgPSBfbzIzLnggLSBfczQyLAogICAgICAgICAgICAgICAgICAgIF9oMTQgPSBfbzIzLnkgLSBfczQyLAogICAgICAgICAgICAgICAgICAgIF9jMTAgPSBfbzIzLnogLSBfczQyLAogICAgICAgICAgICAgICAgICAgIF91NiA9IF9vMjMueCArIF9zNDIsCiAgICAgICAgICAgICAgICAgICAgX2Y1ID0gX28yMy55ICsgX3M0MiwKICAgICAgICAgICAgICAgICAgICBfcDUgPSBfbzIzLnogKyBfczQyOwogICAgICAgICAgICAgICAgICBpZiAoZS5nZXRJbmRleChfbDExLCBfaDE0LCBfYzEwKSA+PSAwIHx8IGUuZ2V0SW5kZXgoX3U2LCBfZjUsIF9wNSkgPj0gMCkgZm9yICh2YXIgX3Q5MSA9IF9sMTE7IF90OTEgPCBfdTY7IF90OTEgKz0gdGhpcy5taW51bml0KSBmb3IgKHZhciBfczQzID0gX2gxNDsgX3M0MyA8IF9mNTsgX3M0MyArPSB0aGlzLm1pbnVuaXQpIGZvciAodmFyIF9uMjMgPSBfYzEwOyBfbjIzIDwgX3A1OyBfbjIzICs9IHRoaXMubWludW5pdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBfbDEyID0gZS5nZXRJbmRleChfdDkxLCBfczQzLCBfbjIzKTsKICAgICAgICAgICAgICAgICAgICBpZiAoX2wxMiA+PSAwICYmICFfcjUzW19sMTJdKSB7CiAgICAgICAgICAgICAgICAgICAgICAoX3Q5MSAtIF9vMjMueCkgKiAoX3Q5MSAtIF9vMjMueCkgKyAoX3M0MyAtIF9vMjMueSkgKiAoX3M0MyAtIF9vMjMueSkgKyAoX24yMyAtIF9vMjMueikgKiAoX24yMyAtIF9vMjMueikgPCBfYTI2ICYmIChfcjUzW19sMTJdID0gMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDkyID0gMCwgX3M0NCA9IGUuZGF0YS5sZW5ndGg7IF90OTIgPCBfczQ0OyBfdDkyKyspIDAgPT0gX3I1M1tfdDkyXSAmJiAoZS5kYXRhW190OTJdID0gMSAvIDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfR0xWb2x1bWV0cmljUmVuZGVyLCBbewogICAgICAgICAgICAgIGtleTogImdsb2JqIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2xvYmooZSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRTaGFwZU9iaiAmJiAoZS5yZW1vdmUodGhpcy5yZW5kZXJlZFNoYXBlT2JqKSwgdGhpcy5yZW5kZXJlZFNoYXBlT2JqID0gbnVsbCksICF0aGlzLmhpZGRlbikgewogICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlT2JqID0gbmV3IG4uT2JqZWN0M0QoKTsKICAgICAgICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBuLlRleHR1cmUodGhpcy5kYXRhLCAhMCksCiAgICAgICAgICAgICAgICAgICAgcyA9IG5ldyBuLlRleHR1cmUodGhpcy50cmFuc2ZlcmZ1bmN0aW9uYnVmZmVyLCAhMSk7CiAgICAgICAgICAgICAgICAgIHIubmVlZHNVcGRhdGUgPSAhMCwgcy5uZWVkc1VwZGF0ZSA9ICEwLCBzLmZsaXBZID0gITEsIHQgPSBuZXcgbi5Wb2x1bWV0cmljTWF0ZXJpYWwoewogICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyZm46IHMsCiAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJtaW46IHRoaXMubWluLAogICAgICAgICAgICAgICAgICAgIHRyYW5zZmVybWF4OiB0aGlzLm1heCwKICAgICAgICAgICAgICAgICAgICBtYXA6IHIsCiAgICAgICAgICAgICAgICAgICAgZXh0ZW50OiB0aGlzLmV4dGVudCwKICAgICAgICAgICAgICAgICAgICBtYXhkZXB0aDogdGhpcy5tYXhkZXB0aCwKICAgICAgICAgICAgICAgICAgICB0ZXhtYXRyaXg6IHRoaXMudGV4bWF0cml4LAogICAgICAgICAgICAgICAgICAgIHVuaXQ6IHRoaXMubWludW5pdCwKICAgICAgICAgICAgICAgICAgICBzdWJzYW1wbGVzOiB0aGlzLnN1YnNhbXBsZXMKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHZhciBhID0gbmV3IG4uTWVzaCh0aGlzLmdlbywgdCk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVPYmouYWRkKGEpLCB0aGlzLnJlbmRlcmVkU2hhcGVPYmogPSB0aGlzLnNoYXBlT2JqLmNsb25lKCksIGUuYWRkKHRoaXMucmVuZGVyZWRTaGFwZU9iaik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlZ2wiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVnbChlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkU2hhcGVPYmogJiYgKHZvaWQgMCAhPT0gdGhpcy5yZW5kZXJlZFNoYXBlT2JqLmdlb21ldHJ5ICYmIHRoaXMucmVuZGVyZWRTaGFwZU9iai5nZW9tZXRyeS5kaXNwb3NlKCksIHZvaWQgMCAhPT0gdGhpcy5yZW5kZXJlZFNoYXBlT2JqLm1hdGVyaWFsICYmIHRoaXMucmVuZGVyZWRTaGFwZU9iai5tYXRlcmlhbC5kaXNwb3NlKCksIGUucmVtb3ZlKHRoaXMucmVuZGVyZWRTaGFwZU9iaiksIHRoaXMucmVuZGVyZWRTaGFwZU9iaiA9IG51bGwpLCB0aGlzLnNoYXBlT2JqID0gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwb3NpdGlvbiIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAieCIsCiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIueDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ5IiwKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlci55OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInoiLAogICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSwgW3sKICAgICAgICAgICAgICBrZXk6ICJpbnRlcnBvbGF0ZUFycmF5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZXJwb2xhdGVBcnJheShlLCB0KSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgKyAodCAtIGUpICogcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBzID0gW10sCiAgICAgICAgICAgICAgICAgIGEgPSAoZS5sZW5ndGggLSAxKSAvICh0IC0gMSk7CiAgICAgICAgICAgICAgICBzWzBdID0gZVswXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAxOyBuIDwgdCAtIDE7IG4rKykgewogICAgICAgICAgICAgICAgICB2YXIgbyA9IG4gKiBhLAogICAgICAgICAgICAgICAgICAgIGwgPSBNYXRoLmZsb29yKG8pLAogICAgICAgICAgICAgICAgICAgIGggPSBNYXRoLmNlaWwobyksCiAgICAgICAgICAgICAgICAgICAgYyA9IG8gLSBsOwogICAgICAgICAgICAgICAgICBzW25dID0gcihlW2xdLCBlW2hdLCBjKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBzW3QgLSAxXSA9IGVbZS5sZW5ndGggLSAxXSwgczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9HTFZvbHVtZXRyaWNSZW5kZXI7CiAgICAgICAgICB9KCk7CiAgICAgICAgfSwKICAgICAgICA3NjkzOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICB2YXIgczsKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgQmFja1NpZGU6IGZ1bmN0aW9uIEJhY2tTaWRlKCkgewogICAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgICB9LAogICAgICAgICAgICBDYW1lcmE6IGZ1bmN0aW9uIENhbWVyYSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0NhbWVyYTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQ2xhbXBUb0VkZ2VXcmFwcGluZzogZnVuY3Rpb24gQ2xhbXBUb0VkZ2VXcmFwcGluZygpIHsKICAgICAgICAgICAgICByZXR1cm4gdTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQ29sb3Jpbmc6IGZ1bmN0aW9uIENvbG9yaW5nKCkgewogICAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBDeWxpbmRlcjogZnVuY3Rpb24gQ3lsaW5kZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEUuQ3lsaW5kZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIERvdWJsZVNpZGU6IGZ1bmN0aW9uIERvdWJsZVNpZGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEV2ZW50RGlzcGF0Y2hlcjogZnVuY3Rpb24gRXZlbnREaXNwYXRjaGVyKCkgewogICAgICAgICAgICAgIHJldHVybiBfRXZlbnREaXNwYXRjaGVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBGbG9hdFR5cGU6IGZ1bmN0aW9uIEZsb2F0VHlwZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gXzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRm9nOiBmdW5jdGlvbiBGb2coKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9Gb2c7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEZyb250U2lkZTogZnVuY3Rpb24gRnJvbnRTaWRlKCkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHZW9tZXRyeTogZnVuY3Rpb24gR2VvbWV0cnkoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9HZW9tZXRyeTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR2VvbWV0cnlHcm91cDogZnVuY3Rpb24gR2VvbWV0cnlHcm91cCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0dlb21ldHJ5R3JvdXA7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEdlb21ldHJ5SURDb3VudDogZnVuY3Rpb24gR2VvbWV0cnlJRENvdW50KCkgewogICAgICAgICAgICAgIHJldHVybiBNOwogICAgICAgICAgICB9LAogICAgICAgICAgICBJbXBvc3Rlck1hdGVyaWFsOiBmdW5jdGlvbiBJbXBvc3Rlck1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfSW1wb3N0ZXJNYXRlcmlhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgSW5zdGFuY2VkTWF0ZXJpYWw6IGZ1bmN0aW9uIEluc3RhbmNlZE1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfSW5zdGFuY2VkTWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIExpZ2h0OiBmdW5jdGlvbiBMaWdodCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX0xpZ2h0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBMaW5lOiBmdW5jdGlvbiBMaW5lKCkgewogICAgICAgICAgICAgIHJldHVybiBfTGluZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTGluZUJhc2ljTWF0ZXJpYWw6IGZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfTGluZUJhc2ljTWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIExpbmVTdHlsZTogZnVuY3Rpb24gTGluZVN0eWxlKCkgewogICAgICAgICAgICAgIHJldHVybiBqOwogICAgICAgICAgICB9LAogICAgICAgICAgICBMaW5lYXJGaWx0ZXI6IGZ1bmN0aW9uIExpbmVhckZpbHRlcigpIHsKICAgICAgICAgICAgICByZXR1cm4gZjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyOiBmdW5jdGlvbiBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGc7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1hdGVyaWFsOiBmdW5jdGlvbiBNYXRlcmlhbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX01hdGVyaWFsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBNYXRlcmlhbElkQ291bnQ6IGZ1bmN0aW9uIE1hdGVyaWFsSWRDb3VudCgpIHsKICAgICAgICAgICAgICByZXR1cm4gQzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTWF0cml4MzogZnVuY3Rpb24gTWF0cml4MygpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5NYXRyaXgzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBNYXRyaXg0OiBmdW5jdGlvbiBNYXRyaXg0KCkgewogICAgICAgICAgICAgIHJldHVybiBoLk1hdHJpeDQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1lc2g6IGZ1bmN0aW9uIE1lc2goKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9NZXNoOwogICAgICAgICAgICB9LAogICAgICAgICAgICBNZXNoRG91YmxlTGFtYmVydE1hdGVyaWFsOiBmdW5jdGlvbiBNZXNoRG91YmxlTGFtYmVydE1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTWVzaExhbWJlcnRNYXRlcmlhbDogZnVuY3Rpb24gTWVzaExhbWJlcnRNYXRlcmlhbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX01lc2hMYW1iZXJ0TWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1lc2hPdXRsaW5lTWF0ZXJpYWw6IGZ1bmN0aW9uIE1lc2hPdXRsaW5lTWF0ZXJpYWwoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9NZXNoT3V0bGluZU1hdGVyaWFsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBOZWFyZXN0RmlsdGVyOiBmdW5jdGlvbiBOZWFyZXN0RmlsdGVyKCkgewogICAgICAgICAgICAgIHJldHVybiBwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBPYmplY3QzRDogZnVuY3Rpb24gT2JqZWN0M0QoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9PYmplY3QzRDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgT2JqZWN0M0RJRENvdW50OiBmdW5jdGlvbiBPYmplY3QzRElEQ291bnQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHo7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFByb2plY3RvcjogZnVuY3Rpb24gUHJvamVjdG9yKCkgewogICAgICAgICAgICAgIHJldHVybiBfUHJvamVjdG9yOwogICAgICAgICAgICB9LAogICAgICAgICAgICBRdWF0ZXJuaW9uOiBmdW5jdGlvbiBRdWF0ZXJuaW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBoLlF1YXRlcm5pb247CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFIzMkZvcm1hdDogZnVuY3Rpb24gUjMyRm9ybWF0KCkgewogICAgICAgICAgICAgIHJldHVybiB3OwogICAgICAgICAgICB9LAogICAgICAgICAgICBSRm9ybWF0OiBmdW5jdGlvbiBSRm9ybWF0KCkgewogICAgICAgICAgICAgIHJldHVybiBiOwogICAgICAgICAgICB9LAogICAgICAgICAgICBSR0JBRm9ybWF0OiBmdW5jdGlvbiBSR0JBRm9ybWF0KCkgewogICAgICAgICAgICAgIHJldHVybiB5OwogICAgICAgICAgICB9LAogICAgICAgICAgICBSYXk6IGZ1bmN0aW9uIFJheSgpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5SYXk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFJheWNhc3RlcjogZnVuY3Rpb24gUmF5Y2FzdGVyKCkgewogICAgICAgICAgICAgIHJldHVybiBfUmF5Y2FzdGVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBSZW5kZXJlcjogZnVuY3Rpb24gUmVuZGVyZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9SZW5kZXJlcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU2NlbmU6IGZ1bmN0aW9uIFNjZW5lKCkgewogICAgICAgICAgICAgIHJldHVybiBfU2NlbmU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNoYWRlckxpYjogZnVuY3Rpb24gU2hhZGVyTGliKCkgewogICAgICAgICAgICAgIHJldHVybiBwZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU2hhZGVyVXRpbHM6IGZ1bmN0aW9uIFNoYWRlclV0aWxzKCkgewogICAgICAgICAgICAgIHJldHVybiBnZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU2hhZGluZzogZnVuY3Rpb24gU2hhZGluZygpIHsKICAgICAgICAgICAgICByZXR1cm4gbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU3BoZXJlOiBmdW5jdGlvbiBTcGhlcmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEUuU3BoZXJlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTcGhlcmVJbXBvc3Rlck1hdGVyaWFsOiBmdW5jdGlvbiBTcGhlcmVJbXBvc3Rlck1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfU3BoZXJlSW1wb3N0ZXJNYXRlcmlhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU3BoZXJlSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWw6IGZ1bmN0aW9uIFNwaGVyZUltcG9zdGVyT3V0bGluZU1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfU3BoZXJlSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNwcml0ZTogZnVuY3Rpb24gU3ByaXRlKCkgewogICAgICAgICAgICAgIHJldHVybiBfU3ByaXRlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTcHJpdGVBbGlnbm1lbnQ6IGZ1bmN0aW9uIFNwcml0ZUFsaWdubWVudCgpIHsKICAgICAgICAgICAgICByZXR1cm4gYzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU3ByaXRlTWF0ZXJpYWw6IGZ1bmN0aW9uIFNwcml0ZU1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfU3ByaXRlTWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNwcml0ZVBsdWdpbjogZnVuY3Rpb24gU3ByaXRlUGx1Z2luKCkgewogICAgICAgICAgICAgIHJldHVybiBfU3ByaXRlUGx1Z2luOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTdGlja0ltcG9zdGVyTWF0ZXJpYWw6IGZ1bmN0aW9uIFN0aWNrSW1wb3N0ZXJNYXRlcmlhbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX1N0aWNrSW1wb3N0ZXJNYXRlcmlhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU3RpY2tJbXBvc3Rlck91dGxpbmVNYXRlcmlhbDogZnVuY3Rpb24gU3RpY2tJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFRleHR1cmU6IGZ1bmN0aW9uIFRleHR1cmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9UZXh0dXJlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBUZXh0dXJlSWRDb3VudDogZnVuY3Rpb24gVGV4dHVyZUlkQ291bnQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFY7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFRleHR1cmVPcGVyYXRpb25zOiBmdW5jdGlvbiBUZXh0dXJlT3BlcmF0aW9ucygpIHsKICAgICAgICAgICAgICByZXR1cm4geDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVHJpYW5nbGU6IGZ1bmN0aW9uIFRyaWFuZ2xlKCkgewogICAgICAgICAgICAgIHJldHVybiBFLlRyaWFuZ2xlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBVVk1hcHBpbmc6IGZ1bmN0aW9uIFVWTWFwcGluZygpIHsKICAgICAgICAgICAgICByZXR1cm4gX1VWTWFwcGluZzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVW5zaWduZWRCeXRlVHlwZTogZnVuY3Rpb24gVW5zaWduZWRCeXRlVHlwZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gdjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVmVjdG9yMjogZnVuY3Rpb24gVmVjdG9yMigpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5WZWN0b3IyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBWZWN0b3IzOiBmdW5jdGlvbiBWZWN0b3IzKCkgewogICAgICAgICAgICAgIHJldHVybiBoLlZlY3RvcjM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFZvbHVtZXRyaWNNYXRlcmlhbDogZnVuY3Rpb24gVm9sdW1ldHJpY01hdGVyaWFsKCkgewogICAgICAgICAgICAgIHJldHVybiBfVm9sdW1ldHJpY01hdGVyaWFsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBiYXNpYzogZnVuY3Rpb24gYmFzaWMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFc7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCgpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5jbGFtcDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgIHJldHVybiBtZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29udmVyc2lvbk1hdHJpeDM6IGZ1bmN0aW9uIGNvbnZlcnNpb25NYXRyaXgzKCkgewogICAgICAgICAgICAgIHJldHVybiBoLmNvbnZlcnNpb25NYXRyaXgzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWdUb1JhZDogZnVuY3Rpb24gZGVnVG9SYWQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGguZGVnVG9SYWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluc3RhbmNlZDogZnVuY3Rpb24gaW5zdGFuY2VkKCkgewogICAgICAgICAgICAgIHJldHVybiBZOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uIGludGVyc2VjdE9iamVjdCgpIHsKICAgICAgICAgICAgICByZXR1cm4gTjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGFtYmVydDogZnVuY3Rpb24gbGFtYmVydCgpIHsKICAgICAgICAgICAgICByZXR1cm4gWDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGFtYmVydGRvdWJsZTogZnVuY3Rpb24gbGFtYmVydGRvdWJsZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gJDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3V0bGluZTogZnVuY3Rpb24gb3V0bGluZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gSjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NyZWVuOiBmdW5jdGlvbiBzY3JlZW4oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzY3JlZW5hYTogZnVuY3Rpb24gc2NyZWVuYWEoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzcGhlcmVpbXBvc3RlcjogZnVuY3Rpb24gc3BoZXJlaW1wb3N0ZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGllOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzcGhlcmVpbXBvc3Rlcm91dGxpbmU6IGZ1bmN0aW9uIHNwaGVyZWltcG9zdGVyb3V0bGluZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gYWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNwcml0ZTogZnVuY3Rpb24gc3ByaXRlKCkgewogICAgICAgICAgICAgIHJldHVybiBuZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3RpY2tpbXBvc3RlcjogZnVuY3Rpb24gc3RpY2tpbXBvc3RlcigpIHsKICAgICAgICAgICAgICByZXR1cm4gaGU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN0aWNraW1wb3N0ZXJvdXRsaW5lOiBmdW5jdGlvbiBzdGlja2ltcG9zdGVyb3V0bGluZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gZGU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZvbHVtZXRyaWM6IGZ1bmN0aW9uIHZvbHVtZXRyaWMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZVtlLk5vQ29sb3JzID0gMF0gPSAiTm9Db2xvcnMiLCBlW2UuRmFjZUNvbG9ycyA9IDFdID0gIkZhY2VDb2xvcnMiLCBlW2UuVmVydGV4Q29sb3JzID0gMl0gPSAiVmVydGV4Q29sb3JzIjsKICAgICAgICAgIH0ocyB8fCAocyA9IHt9KSk7CiAgICAgICAgICB2YXIgYSA9IDAsCiAgICAgICAgICAgIG4gPSAxLAogICAgICAgICAgICBvID0gMjsKICAgICAgICAgIHZhciBsOwogICAgICAgICAgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGVbZS5Ob1NoYWRpbmcgPSAwXSA9ICJOb1NoYWRpbmciLCBlW2UuRmxhdFNoYWRpbmcgPSAxXSA9ICJGbGF0U2hhZGluZyIsIGVbZS5TbW9vdGhTaGFkaW5nID0gMl0gPSAiU21vb3RoU2hhZGluZyI7CiAgICAgICAgICB9KGwgfHwgKGwgPSB7fSkpOwogICAgICAgICAgdmFyIGggPSByKDk2NTIpOwogICAgICAgICAgdmFyIGMgPSB7CiAgICAgICAgICAgICAgdG9wTGVmdDogbmV3IGguVmVjdG9yMigxLCAtMSksCiAgICAgICAgICAgICAgdG9wQ2VudGVyOiBuZXcgaC5WZWN0b3IyKDAsIC0xKSwKICAgICAgICAgICAgICB0b3BSaWdodDogbmV3IGguVmVjdG9yMigtMSwgLTEpLAogICAgICAgICAgICAgIGNlbnRlckxlZnQ6IG5ldyBoLlZlY3RvcjIoMSwgMCksCiAgICAgICAgICAgICAgY2VudGVyOiBuZXcgaC5WZWN0b3IyKDAsIDApLAogICAgICAgICAgICAgIGNlbnRlclJpZ2h0OiBuZXcgaC5WZWN0b3IyKC0xLCAwKSwKICAgICAgICAgICAgICBib3R0b21MZWZ0OiBuZXcgaC5WZWN0b3IyKDEsIDEpLAogICAgICAgICAgICAgIGJvdHRvbUNlbnRlcjogbmV3IGguVmVjdG9yMigwLCAxKSwKICAgICAgICAgICAgICBib3R0b21SaWdodDogbmV3IGguVmVjdG9yMigtMSwgMSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdSA9IDEwMDEsCiAgICAgICAgICAgIGYgPSAxMDA2LAogICAgICAgICAgICBwID0gMTAwNywKICAgICAgICAgICAgZyA9IDEwMDgsCiAgICAgICAgICAgIHYgPSAxMDA5LAogICAgICAgICAgICBfID0gMTAxMCwKICAgICAgICAgICAgeSA9IDEwMjEsCiAgICAgICAgICAgIGIgPSAxMDIyLAogICAgICAgICAgICB3ID0gMTAyMzsKICAgICAgICAgIHZhciB4OwogICAgICAgICAgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGVbZS5NdWx0aXBseU9wZXJhdGlvbiA9IDBdID0gIk11bHRpcGx5T3BlcmF0aW9uIiwgZVtlLk1peE9wZXJhdGlvbiA9IDFdID0gIk1peE9wZXJhdGlvbiIsIGVbZS5BZGRPcGVyYXRpb24gPSAyXSA9ICJBZGRPcGVyYXRpb24iOwogICAgICAgICAgfSh4IHx8ICh4ID0ge30pKTsKICAgICAgICAgIHZhciBfRXZlbnREaXNwYXRjaGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX0V2ZW50RGlzcGF0Y2hlcigpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0V2ZW50RGlzcGF0Y2hlcik7CiAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0V2ZW50RGlzcGF0Y2hlciwgW3sKICAgICAgICAgICAgICBrZXk6ICJkaXNwYXRjaEV2ZW50IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMubGlzdGVuZXJzW2UudHlwZV07CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0KSB7CiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIHMgPSB0Lmxlbmd0aDsgciA8IHM7IHIrKykgdFtyXS5jYWxsKHRoaXMsIGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZUV2ZW50TGlzdGVuZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5saXN0ZW5lcnNbZV0uaW5kZXhPZih0KTsKICAgICAgICAgICAgICAgICAgLTEgIT09IHIgJiYgdGhpcy5saXN0ZW5lcnNbZV0uc3BsaWNlKHIsIDEpOwogICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMubGlzdGVuZXJzW2VdID0gW107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkRXZlbnRMaXN0ZW5lciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZSwgdCkgewogICAgICAgICAgICAgICAgdm9pZCAwID09PSB0aGlzLmxpc3RlbmVyc1tlXSAmJiAodGhpcy5saXN0ZW5lcnNbZV0gPSBbXSksIC0xID09PSB0aGlzLmxpc3RlbmVyc1tlXS5pbmRleE9mKHQpICYmIHRoaXMubGlzdGVuZXJzW2VdLnB1c2godCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfRXZlbnREaXNwYXRjaGVyOwogICAgICAgICAgfSgpOwogICAgICAgICAgdmFyIEEgPSByKDI1NTApOwogICAgICAgICAgdmFyIF9NYXRlcmlhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50RGlzcGF0Y2hlcjIpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9NYXRlcmlhbCwgX0V2ZW50RGlzcGF0Y2hlcjIpOwogICAgICAgICAgICB2YXIgX3N1cGVyNiA9IF9jcmVhdGVTdXBlcihfTWF0ZXJpYWwpOwogICAgICAgICAgICBmdW5jdGlvbiBfTWF0ZXJpYWwoKSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzNjsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01hdGVyaWFsKTsKICAgICAgICAgICAgICBfdGhpczYgPSBfc3VwZXI2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIF90aGlzNi5pZCA9IEMrKywgX3RoaXM2Lm5hbWUgPSAiIiwgX3RoaXM2LnNpZGUgPSBhLCBfdGhpczYub3BhY2l0eSA9IDEsIF90aGlzNi50cmFuc3BhcmVudCA9ICExLCBfdGhpczYuZGVwdGhUZXN0ID0gITAsIF90aGlzNi5kZXB0aFdyaXRlID0gITAsIF90aGlzNi5zdGVuY2lsVGVzdCA9ICEwLCBfdGhpczYucG9seWdvbk9mZnNldCA9ICExLCBfdGhpczYucG9seWdvbk9mZnNldEZhY3RvciA9IDAsIF90aGlzNi5wb2x5Z29uT2Zmc2V0VW5pdHMgPSAwLCBfdGhpczYuYWxwaGFUZXN0ID0gMCwgX3RoaXM2LnZpc2libGUgPSAhMCwgX3RoaXM2Lm5lZWRzVXBkYXRlID0gITAsIF90aGlzNi5vdXRsaW5lID0gITE7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX01hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogInNldFZhbHVlcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlcygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUpIGZvciAodmFyIHQgaW4gZSkgewogICAgICAgICAgICAgICAgICB2YXIgciA9IGVbdF07CiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodCBpbiB0aGlzKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXNbdF07CiAgICAgICAgICAgICAgICAgICAgICBzIGluc3RhbmNlb2YgQS5Db2xvciAmJiByIGluc3RhbmNlb2YgQS5Db2xvciA/IHMuY29weShyKSA6IHMgaW5zdGFuY2VvZiBBLkNvbG9yID8gcy5zZXQocikgOiBzIGluc3RhbmNlb2YgaC5WZWN0b3IzICYmIHIgaW5zdGFuY2VvZiBoLlZlY3RvcjMgPyBzLmNvcHkocikgOiB0aGlzW3RdID0gcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLndhcm4oIiQzRG1vbC5NYXRlcmlhbDogJyIgKyB0ICsgIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBfTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBlLm5hbWUgPSB0aGlzLm5hbWUsIGUuc2lkZSA9IHRoaXMuc2lkZSwgZS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5LCBlLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudCwgZS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdCwgZS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlLCBlLnN0ZW5jaWxUZXN0ID0gdGhpcy5zdGVuY2lsVGVzdCwgZS5wb2x5Z29uT2Zmc2V0ID0gdGhpcy5wb2x5Z29uT2Zmc2V0LCBlLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IsIGUucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMsIGUuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3QsIGUub3ZlcmRyYXcgPSB0aGlzLm92ZXJkcmF3LCBlLnZpc2libGUgPSB0aGlzLnZpc2libGUsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzcG9zZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoewogICAgICAgICAgICAgICAgICB0eXBlOiAiZGlzcG9zZSIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX01hdGVyaWFsOwogICAgICAgICAgfShfRXZlbnREaXNwYXRjaGVyKTsKICAgICAgICAgIHZhciBDID0gMDsKICAgICAgICAgIHZhciBfTGluZUJhc2ljTWF0ZXJpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXRlcmlhbDIpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9MaW5lQmFzaWNNYXRlcmlhbCwgX01hdGVyaWFsMik7CiAgICAgICAgICAgIHZhciBfc3VwZXI3ID0gX2NyZWF0ZVN1cGVyKF9MaW5lQmFzaWNNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9MaW5lQmFzaWNNYXRlcmlhbChlKSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzNzsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0xpbmVCYXNpY01hdGVyaWFsKTsKICAgICAgICAgICAgICBfdGhpczcgPSBfc3VwZXI3LmNhbGwodGhpcyksIF90aGlzNy5jb2xvciA9IG5ldyBBLkNvbG9yKDE2Nzc3MjE1KSwgX3RoaXM3LmxpbmV3aWR0aCA9IDEsIF90aGlzNy5saW5lY2FwID0gInJvdW5kIiwgX3RoaXM3LmxpbmVqb2luID0gInJvdW5kIiwgX3RoaXM3LnZlcnRleENvbG9ycyA9ICExLCBfdGhpczcuZm9nID0gITAsIF90aGlzNy5zaGFkZXJJRCA9ICJiYXNpYyIsIF90aGlzNy5zZXRWYWx1ZXMoZSk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNzsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0xpbmVCYXNpY01hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9MaW5lQmFzaWNNYXRlcmlhbCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKF9MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUpLCAiY2xvbmUiLCB0aGlzKS5jYWxsKHRoaXMsIGUpLCBlLmNvbG9yLmNvcHkodGhpcy5jb2xvciksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfTGluZUJhc2ljTWF0ZXJpYWw7CiAgICAgICAgICB9KF9NYXRlcmlhbCk7CiAgICAgICAgICB2YXIgUyA9IDY1NTM1OwogICAgICAgICAgdmFyIF9HZW9tZXRyeUdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX0dlb21ldHJ5R3JvdXAoKSB7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9HZW9tZXRyeUdyb3VwKTsKICAgICAgICAgICAgICB0aGlzLnZlcnRleEFycmF5ID0gbnVsbCwgdGhpcy5jb2xvckFycmF5ID0gbnVsbCwgdGhpcy5ub3JtYWxBcnJheSA9IG51bGwsIHRoaXMucmFkaXVzQXJyYXkgPSBudWxsLCB0aGlzLmZhY2VBcnJheSA9IG51bGwsIHRoaXMubGluZUFycmF5ID0gbnVsbCwgdGhpcy52ZXJ0aWNlcyA9IDAsIHRoaXMuZmFjZWlkeCA9IDAsIHRoaXMubGluZWlkeCA9IDAsIHRoaXMuX19pbml0dGVkQXJyYXlzID0gITEsIHRoaXMuaWQgPSBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfR2VvbWV0cnlHcm91cCwgW3sKICAgICAgICAgICAgICBrZXk6ICJzZXRDb2xvcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb2xvcnMoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnZlcnRleEFycmF5LAogICAgICAgICAgICAgICAgICByID0gdGhpcy5jb2xvckFycmF5OwogICAgICAgICAgICAgICAgaWYgKCF0KSB0aHJvdyBuZXcgRXJyb3IoInZlcnRleCBhcnJheSBub3QgaW5pdGlhbGl6ZWQiKTsKICAgICAgICAgICAgICAgIGlmICghcikgdGhyb3cgbmV3IEVycm9yKCJjb2xvciBhcnJheSBub3QgaW5pdGlhbGl6ZWQiKTsKICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PSByLmxlbmd0aCkgZm9yICh2YXIgcyA9IDA7IHMgPCB0Lmxlbmd0aDsgcyArPSAzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhID0gZSh0W3NdLCB0W3MgKyAxXSwgdFtzICsgMl0pOwogICAgICAgICAgICAgICAgICBhIGluc3RhbmNlb2YgQS5Db2xvciB8fCAoYSA9IEEuQ0MuY29sb3IoYSkpLCByW3NdID0gYS5yLCByW3MgKyAxXSA9IGEuZywgcltzICsgMl0gPSBhLmI7CiAgICAgICAgICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coIkNhbm5vdCByZS1jb2xvciBnZW9tZXRyeSBncm91cCBkdWUgdG8gbWlzbWF0Y2hlZCBsZW5ndGhzLiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE51bVZlcnRpY2VzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtVmVydGljZXMoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRWZXJ0aWNlcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZlcnRpY2VzKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmVydGV4QXJyYXk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0Q2VudHJvaWQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDZW50cm9pZCgpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy52ZXJ0ZXhBcnJheSkgdGhyb3cgbmV3IEVycm9yKCJ2ZXJ0ZXggYXJyYXkgbm90IGluaXRpYWxpemVkIik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlLCB0LCByLCBzLCBhID0gbmV3IGguVmVjdG9yMygpLCBuID0gMDsgbiA8IHRoaXMudmVydGljZXM7ICsrbikgZSA9IDMgKiBuLCB0ID0gdGhpcy52ZXJ0ZXhBcnJheVtlXSwgciA9IHRoaXMudmVydGV4QXJyYXlbZSArIDFdLCBzID0gdGhpcy52ZXJ0ZXhBcnJheVtlICsgMl0sIGEueCArPSB0LCBhLnkgKz0gciwgYS56ICs9IHM7CiAgICAgICAgICAgICAgICByZXR1cm4gYS5kaXZpZGVTY2FsYXIodGhpcy52ZXJ0aWNlcyksIGE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Tm9ybWFscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldE5vcm1hbHMoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZmFjZUFycmF5LAogICAgICAgICAgICAgICAgICB0ID0gdGhpcy52ZXJ0ZXhBcnJheSwKICAgICAgICAgICAgICAgICAgciA9IHRoaXMubm9ybWFsQXJyYXk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNlcyAmJiB0aGlzLmZhY2VpZHgpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyBuZXcgRXJyb3IoImZhY2UgYXJyYXkgbm90IGluaXRpYWxpemVkIik7CiAgICAgICAgICAgICAgICAgIGlmICghdCkgdGhyb3cgbmV3IEVycm9yKCJ2ZXJ0ZXggYXJyYXkgbm90IGluaXRpYWxpemVkIik7CiAgICAgICAgICAgICAgICAgIGlmICghcikgdGhyb3cgbmV3IEVycm9yKCJub3JtYWwgYXJyYXkgbm90IGluaXRpYWxpemVkIik7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMsIGEsIG4sIG8sIGwsIGMsIHUsIGYgPSAwOyBmIDwgZS5sZW5ndGggLyAzOyArK2YpIHMgPSAzICogZVszICogZl0sIGEgPSAzICogZVszICogZiArIDFdLCBuID0gMyAqIGVbMyAqIGYgKyAyXSwgbyA9IG5ldyBoLlZlY3RvcjModFtzXSwgdFtzICsgMV0sIHRbcyArIDJdKSwgbCA9IG5ldyBoLlZlY3RvcjModFthXSwgdFthICsgMV0sIHRbYSArIDJdKSwgYyA9IG5ldyBoLlZlY3RvcjModFtuXSwgdFtuICsgMV0sIHRbbiArIDJdKSwgby5zdWJWZWN0b3JzKG8sIGwpLCBjLnN1YlZlY3RvcnMoYywgbCksIGMuY3Jvc3MobyksICh1ID0gYykubm9ybWFsaXplKCksIHJbc10gKz0gdS54LCByW2FdICs9IHUueCwgcltuXSArPSB1LngsIHJbcyArIDFdICs9IHUueSwgclthICsgMV0gKz0gdS55LCByW24gKyAxXSArPSB1LnksIHJbcyArIDJdICs9IHUueiwgclthICsgMl0gKz0gdS56LCByW24gKyAyXSArPSB1Lno7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0TGluZUluZGljZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMaW5lSW5kaWNlcygpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmZhY2VpZHggJiYgKCF0aGlzLmxpbmVBcnJheSB8fCB0aGlzLmxpbmVBcnJheS5sZW5ndGggIT0gMiAqIHRoaXMuZmFjZWlkeCB8fCB0aGlzLmxpbmVpZHggIT0gMiAqIHRoaXMuZmFjZWlkeCkpIHsKICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmZhY2VBcnJheSwKICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5saW5lQXJyYXkgPSBuZXcgVWludDE2QXJyYXkoMiAqIHRoaXMuZmFjZWlkeCk7CiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVpZHggPSAyICogdGhpcy5mYWNlaWR4LCAhZSkgdGhyb3cgbmV3IEVycm9yKCJmYWNlIGFycmF5IG5vdCBpbml0aWFsaXplZCIpOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHRoaXMuZmFjZWlkeCAvIDM7ICsrcikgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gMyAqIHIsCiAgICAgICAgICAgICAgICAgICAgICBhID0gMiAqIHMsCiAgICAgICAgICAgICAgICAgICAgICBuID0gZVtzXSwKICAgICAgICAgICAgICAgICAgICAgIG8gPSBlW3MgKyAxXSwKICAgICAgICAgICAgICAgICAgICAgIGwgPSBlW3MgKyAyXTsKICAgICAgICAgICAgICAgICAgICB0W2FdID0gbiwgdFthICsgMV0gPSBvLCB0W2EgKyAyXSA9IG4sIHRbYSArIDNdID0gbCwgdFthICsgNF0gPSBvLCB0W2EgKyA1XSA9IGw7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ2cm1sIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdnJtbChlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgbCwKICAgICAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgeSwKICAgICAgICAgICAgICAgICAgYiA9ICIiOwogICAgICAgICAgICAgICAgYiArPSBlICsgIlNoYXBlIHtcbiIgKyBlICsgIiBhcHBlYXJhbmNlIEFwcGVhcmFuY2Uge1xuIiArIGUgKyAiICBtYXRlcmlhbCBNYXRlcmlhbCB7XG4iICsgZSArICIgICBkaWZmdXNlQ29sb3IgIiArIChudWxsID09PSAociA9IG51bGwgPT0gdCA/IHZvaWQgMCA6IHQuY29sb3IpIHx8IHZvaWQgMCA9PT0gciA/IHZvaWQgMCA6IHIucikgKyAiICIgKyAobnVsbCA9PT0gKHMgPSBudWxsID09IHQgPyB2b2lkIDAgOiB0LmNvbG9yKSB8fCB2b2lkIDAgPT09IHMgPyB2b2lkIDAgOiBzLmcpICsgIiAiICsgKG51bGwgPT09IChhID0gbnVsbCA9PSB0ID8gdm9pZCAwIDogdC5jb2xvcikgfHwgdm9pZCAwID09PSBhID8gdm9pZCAwIDogYS5iKSArICJcbiIsIChudWxsID09IHQgPyB2b2lkIDAgOiB0LnRyYW5zcGFyZW50KSAmJiAoYiArPSBlICsgIiAgIHRyYW5zcGFyZW5jeSAiICsgKDEgLSB0Lm9wYWNpdHkpICsgIlxuIiksIGIgKz0gZSArICIgIH1cbiIsIGIgKz0gZSArICIgfVxuIjsKICAgICAgICAgICAgICAgIHZhciB3ID0gZTsKICAgICAgICAgICAgICAgIGlmIChlICs9ICIgIiwgdCBpbnN0YW5jZW9mIF9MaW5lQmFzaWNNYXRlcmlhbCkgewogICAgICAgICAgICAgICAgICB2YXIgX3Q5MywgX3I1NCwgX3M0NTsKICAgICAgICAgICAgICAgICAgYiArPSBlICsgImdlb21ldHJ5IEluZGV4ZWRMaW5lU2V0IHtcbiIgKyBlICsgIiBjb2xvclBlclZlcnRleCBUUlVFXG4iICsgZSArICIgY29vcmQgQ29vcmRpbmF0ZSB7XG4iICsgZSArICIgIHBvaW50IFtcbiI7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9hMjcgPSAwOyBfYTI3IDwgdGhpcy52ZXJ0aWNlczsgKytfYTI3KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9oMTUgPSAzICogX2EyNzsKICAgICAgICAgICAgICAgICAgICBfdDkzID0gbnVsbCA9PT0gKG4gPSB0aGlzLnZlcnRleEFycmF5KSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuW19oMTVdLCBfcjU0ID0gbnVsbCA9PT0gKG8gPSB0aGlzLnZlcnRleEFycmF5KSB8fCB2b2lkIDAgPT09IG8gPyB2b2lkIDAgOiBvW19oMTUgKyAxXSwgX3M0NSA9IG51bGwgPT09IChsID0gdGhpcy52ZXJ0ZXhBcnJheSkgfHwgdm9pZCAwID09PSBsID8gdm9pZCAwIDogbFtfaDE1ICsgMl0sIGIgKz0gZSArICIgICAiICsgX3Q5MyArICIgIiArIF9yNTQgKyAiICIgKyBfczQ1ICsgIixcbiI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGIgKz0gZSArICIgIF1cbiIsIGIgKz0gZSArICIgfVxuIiwgdGhpcy5jb2xvckFycmF5KSB7CiAgICAgICAgICAgICAgICAgICAgYiArPSBlICsgIiBjb2xvciBDb2xvciB7XG4iICsgZSArICIgIGNvbG9yIFtcbiI7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2EyOCA9IDA7IF9hMjggPCB0aGlzLnZlcnRpY2VzOyArK19hMjgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfbjI0ID0gMyAqIF9hMjg7CiAgICAgICAgICAgICAgICAgICAgICBfdDkzID0gdGhpcy5jb2xvckFycmF5W19uMjRdLCBfcjU0ID0gdGhpcy5jb2xvckFycmF5W19uMjQgKyAxXSwgX3M0NSA9IHRoaXMuY29sb3JBcnJheVtfbjI0ICsgMl0sIGIgKz0gZSArICIgICAiICsgX3Q5MyArICIgIiArIF9yNTQgKyAiICIgKyBfczQ1ICsgIixcbiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGIgKz0gZSArICIgIF1cbiIsIGIgKz0gZSArICIgfVxuIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBiICs9IGUgKyAiIGNvb3JkSW5kZXggW1xuIjsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3Q5NCA9IDA7IF90OTQgPCB0aGlzLnZlcnRpY2VzOyBfdDk0ICs9IDIpIGIgKz0gZSArICIgICIgKyBfdDk0ICsgIiwgIiArIChfdDk0ICsgMSkgKyAiLCAtMSxcbiI7CiAgICAgICAgICAgICAgICAgIGIgKz0gZSArICIgXVxuIiwgYiArPSBlICsgIn1cbiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgX3Q5NSwgX3I1NSwgX3M0NjsKICAgICAgICAgICAgICAgICAgYiArPSBlICsgImdlb21ldHJ5IEluZGV4ZWRGYWNlU2V0IHtcbiIgKyBlICsgIiBjb2xvclBlclZlcnRleCBUUlVFXG4iICsgZSArICIgbm9ybWFsUGVyVmVydGV4IFRSVUVcbiIgKyBlICsgIiBzb2xpZCBGQUxTRVxuIiwgYiArPSBlICsgIiBjb29yZCBDb29yZGluYXRlIHtcbiIgKyBlICsgIiAgcG9pbnQgW1xuIjsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2EyOSA9IDA7IF9hMjkgPCB0aGlzLnZlcnRpY2VzOyArK19hMjkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX24yNSA9IDMgKiBfYTI5OwogICAgICAgICAgICAgICAgICAgIF90OTUgPSBudWxsID09PSAoaCA9IHRoaXMudmVydGV4QXJyYXkpIHx8IHZvaWQgMCA9PT0gaCA/IHZvaWQgMCA6IGhbX24yNV0sIF9yNTUgPSBudWxsID09PSAoYyA9IHRoaXMudmVydGV4QXJyYXkpIHx8IHZvaWQgMCA9PT0gYyA/IHZvaWQgMCA6IGNbX24yNSArIDFdLCBfczQ2ID0gbnVsbCA9PT0gKHUgPSB0aGlzLnZlcnRleEFycmF5KSB8fCB2b2lkIDAgPT09IHUgPyB2b2lkIDAgOiB1W19uMjUgKyAyXSwgYiArPSBlICsgIiAgICIgKyBfdDk1ICsgIiAiICsgX3I1NSArICIgIiArIF9zNDYgKyAiLFxuIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBiICs9IGUgKyAiICBdXG4iLCBiICs9IGUgKyAiIH1cbiIsIGIgKz0gZSArICIgbm9ybWFsIE5vcm1hbCB7XG4iICsgZSArICIgIHZlY3RvciBbXG4iOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYTMwID0gMDsgX2EzMCA8IHRoaXMudmVydGljZXM7ICsrX2EzMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBfbjI2ID0gMyAqIF9hMzA7CiAgICAgICAgICAgICAgICAgICAgX3Q5NSA9IG51bGwgPT09IChmID0gdGhpcy5ub3JtYWxBcnJheSkgfHwgdm9pZCAwID09PSBmID8gdm9pZCAwIDogZltfbjI2XSwgX3I1NSA9IG51bGwgPT09IChwID0gdGhpcy5ub3JtYWxBcnJheSkgfHwgdm9pZCAwID09PSBwID8gdm9pZCAwIDogcFtfbjI2ICsgMV0sIF9zNDYgPSBudWxsID09PSAoZyA9IHRoaXMubm9ybWFsQXJyYXkpIHx8IHZvaWQgMCA9PT0gZyA/IHZvaWQgMCA6IGdbX24yNiArIDJdLCBiICs9IGUgKyAiICAgIiArIF90OTUgKyAiICIgKyBfcjU1ICsgIiAiICsgX3M0NiArICIsXG4iOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiICs9IGUgKyAiICBdXG4iLCBiICs9IGUgKyAiIH1cbiIsIHRoaXMuY29sb3JBcnJheSkgewogICAgICAgICAgICAgICAgICAgIGIgKz0gZSArICIgY29sb3IgQ29sb3Ige1xuIiArIGUgKyAiICBjb2xvciBbXG4iOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9hMzEgPSAwOyBfYTMxIDwgdGhpcy52ZXJ0aWNlczsgKytfYTMxKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX24yNyA9IDMgKiBfYTMxOwogICAgICAgICAgICAgICAgICAgICAgX3Q5NSA9IHRoaXMuY29sb3JBcnJheVtfbjI3XSwgX3I1NSA9IHRoaXMuY29sb3JBcnJheVtfbjI3ICsgMV0sIF9zNDYgPSB0aGlzLmNvbG9yQXJyYXlbX24yNyArIDJdLCBiICs9IGUgKyAiICAgIiArIF90OTUgKyAiICIgKyBfcjU1ICsgIiAiICsgX3M0NiArICIsXG4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBiICs9IGUgKyAiICBdXG4iLCBiICs9IGUgKyAiIH1cbiI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYiArPSBlICsgIiBjb29yZEluZGV4IFtcbiI7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5mYWNlaWR4OyB4ICs9IDMpIF90OTUgPSBudWxsID09PSAodiA9IHRoaXMuZmFjZUFycmF5KSB8fCB2b2lkIDAgPT09IHYgPyB2b2lkIDAgOiB2W3hdLCBfcjU1ID0gbnVsbCA9PT0gKF8gPSB0aGlzLmZhY2VBcnJheSkgfHwgdm9pZCAwID09PSBfID8gdm9pZCAwIDogX1t4ICsgMV0sIF9zNDYgPSBudWxsID09PSAoeSA9IHRoaXMuZmFjZUFycmF5KSB8fCB2b2lkIDAgPT09IHkgPyB2b2lkIDAgOiB5W3ggKyAyXSwgYiArPSBlICsgIiAgIiArIF90OTUgKyAiLCAiICsgX3I1NSArICIsICIgKyBfczQ2ICsgIiwgLTEsXG4iOwogICAgICAgICAgICAgICAgICBiICs9IGUgKyAiIF1cbiIsIGIgKz0gZSArICJ9XG4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGIgKz0gdyArICJ9IjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ0cnVuY2F0ZUFycmF5QnVmZmVycyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRydW5jYXRlQXJyYXlCdWZmZXJzKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICEwOwogICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICExOwogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnZlcnRleEFycmF5LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy5jb2xvckFycmF5LAogICAgICAgICAgICAgICAgICBhID0gdGhpcy5ub3JtYWxBcnJheSwKICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZmFjZUFycmF5LAogICAgICAgICAgICAgICAgICBvID0gdGhpcy5saW5lQXJyYXksCiAgICAgICAgICAgICAgICAgIGwgPSB0aGlzLnJhZGl1c0FycmF5OwogICAgICAgICAgICAgICAgdGhpcy52ZXJ0ZXhBcnJheSA9IChudWxsID09IHIgPyB2b2lkIDAgOiByLnN1YmFycmF5KDAsIDMgKiB0aGlzLnZlcnRpY2VzKSkgfHwgbnVsbCwgdGhpcy5jb2xvckFycmF5ID0gKG51bGwgPT0gcyA/IHZvaWQgMCA6IHMuc3ViYXJyYXkoMCwgMyAqIHRoaXMudmVydGljZXMpKSB8fCBudWxsLCBlID8gKHRoaXMubm9ybWFsQXJyYXkgPSAobnVsbCA9PSBhID8gdm9pZCAwIDogYS5zdWJhcnJheSgwLCAzICogdGhpcy52ZXJ0aWNlcykpIHx8IG51bGwsIHRoaXMuZmFjZUFycmF5ID0gKG51bGwgPT0gbiA/IHZvaWQgMCA6IG4uc3ViYXJyYXkoMCwgdGhpcy5mYWNlaWR4KSkgfHwgbnVsbCwgdGhpcy5saW5laWR4ID4gMCA/IHRoaXMubGluZUFycmF5ID0gKG51bGwgPT0gbyA/IHZvaWQgMCA6IG8uc3ViYXJyYXkoMCwgdGhpcy5saW5laWR4KSkgfHwgbnVsbCA6IHRoaXMubGluZUFycmF5ID0gbmV3IFVpbnQxNkFycmF5KDApKSA6ICh0aGlzLm5vcm1hbEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgwKSwgdGhpcy5mYWNlQXJyYXkgPSBuZXcgVWludDE2QXJyYXkoMCksIHRoaXMubGluZUFycmF5ID0gbmV3IFVpbnQxNkFycmF5KDApKSwgbCAmJiAodGhpcy5yYWRpdXNBcnJheSA9IGwuc3ViYXJyYXkoMCwgdGhpcy52ZXJ0aWNlcykpLCB0ICYmICh0aGlzLm5vcm1hbEFycmF5ICYmICh0aGlzLm5vcm1hbEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm5vcm1hbEFycmF5KSksIHRoaXMuZmFjZUFycmF5ICYmICh0aGlzLmZhY2VBcnJheSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLmZhY2VBcnJheSkpLCB0aGlzLmxpbmVBcnJheSAmJiAodGhpcy5saW5lQXJyYXkgPSBuZXcgVWludDE2QXJyYXkodGhpcy5saW5lQXJyYXkpKSwgdGhpcy52ZXJ0ZXhBcnJheSAmJiAodGhpcy52ZXJ0ZXhBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy52ZXJ0ZXhBcnJheSkpLCB0aGlzLmNvbG9yQXJyYXkgJiYgKHRoaXMuY29sb3JBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5jb2xvckFycmF5KSksIHRoaXMucmFkaXVzQXJyYXkgJiYgKHRoaXMucmFkaXVzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMucmFkaXVzQXJyYXkpKSksIHRoaXMuX19pbml0dGVkQXJyYXlzID0gITA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfR2VvbWV0cnlHcm91cDsKICAgICAgICAgIH0oKTsKICAgICAgICAgIHZhciBfR2VvbWV0cnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudERpc3BhdGNoZXIzKSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfR2VvbWV0cnksIF9FdmVudERpc3BhdGNoZXIzKTsKICAgICAgICAgICAgdmFyIF9zdXBlcjggPSBfY3JlYXRlU3VwZXIoX0dlb21ldHJ5KTsKICAgICAgICAgICAgZnVuY3Rpb24gX0dlb21ldHJ5KCkgewogICAgICAgICAgICAgIHZhciBfdGhpczg7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICExOwogICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAhMTsKICAgICAgICAgICAgICB2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogITE7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9HZW9tZXRyeSk7CiAgICAgICAgICAgICAgX3RoaXM4ID0gX3N1cGVyOC5jYWxsKHRoaXMpLCBfdGhpczgubmFtZSA9ICIiLCBfdGhpczguaGFzVGFuZ2VudHMgPSAhMSwgX3RoaXM4LmR5bmFtaWMgPSAhMCwgX3RoaXM4LnZlcnRpY2VzTmVlZFVwZGF0ZSA9ICExLCBfdGhpczguZWxlbWVudHNOZWVkVXBkYXRlID0gITEsIF90aGlzOC5ub3JtYWxzTmVlZFVwZGF0ZSA9ICExLCBfdGhpczguY29sb3JzTmVlZFVwZGF0ZSA9ICExLCBfdGhpczguYnVmZmVyc05lZWRVcGRhdGUgPSAhMSwgX3RoaXM4LmltcG9zdGVyID0gITEsIF90aGlzOC5pbnN0YW5jZWQgPSAhMSwgX3RoaXM4Lmdlb21ldHJ5R3JvdXBzID0gW10sIF90aGlzOC5ncm91cHMgPSAwLCBfdGhpczguaWQgPSBNKyssIF90aGlzOC5tZXNoID0gZSwgX3RoaXM4LnJhZGlpID0gdCwgX3RoaXM4Lm9mZnNldCA9IHI7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzODsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0dlb21ldHJ5LCBbewogICAgICAgICAgICAgIGtleTogInVwZGF0ZUdlb0dyb3VwIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlR2VvR3JvdXAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDsKICAgICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgICByID0gdGhpcy5ncm91cHMgPiAwID8gdGhpcy5nZW9tZXRyeUdyb3Vwc1t0aGlzLmdyb3VwcyAtIDFdIDogbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiAoIXIgfHwgci52ZXJ0aWNlcyArIGUgPiAoKG51bGwgPT09ICh0ID0gbnVsbCA9PSByID8gdm9pZCAwIDogci52ZXJ0ZXhBcnJheSkgfHwgdm9pZCAwID09PSB0ID8gdm9pZCAwIDogdC5sZW5ndGgpIHx8IDApIC8gMykgJiYgKHIgPSB0aGlzLmFkZEdlb0dyb3VwKCkpLCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInZybWwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2cm1sKGUsIHQpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAiIiwgcyA9IHRoaXMuZ2VvbWV0cnlHcm91cHMubGVuZ3RoLCBhID0gMDsgYSA8IHM7IGErKykgewogICAgICAgICAgICAgICAgICByICs9IHRoaXMuZ2VvbWV0cnlHcm91cHNbYV0udnJtbChlLCB0KSArICIsXG4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkR2VvR3JvdXAiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRHZW9Hcm91cCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IF9HZW9tZXRyeUdyb3VwKHRoaXMuZ2VvbWV0cnlHcm91cHMubGVuZ3RoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5R3JvdXBzLnB1c2goZSksIHRoaXMuZ3JvdXBzID0gdGhpcy5nZW9tZXRyeUdyb3Vwcy5sZW5ndGgsIGUudmVydGV4QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDE5NjYwNSksIGUuY29sb3JBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoMTk2NjA1KSwgdGhpcy5tZXNoICYmIChlLm5vcm1hbEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxOTY2MDUpLCBlLmZhY2VBcnJheSA9IG5ldyBVaW50MTZBcnJheSgzOTMyMTApLCBlLmxpbmVBcnJheSA9IG5ldyBVaW50MTZBcnJheSgzOTMyMTApKSwgdGhpcy5yYWRpaSAmJiAoZS5yYWRpdXNBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoUykpLCBlLnVzZU9mZnNldCA9IHRoaXMub2Zmc2V0LCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFVwTm9ybWFscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVwTm9ybWFscygpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5ncm91cHM7IHQrKykgewogICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkZ2VvbWV0cnlHcm91cHMkOwogICAgICAgICAgICAgICAgICAoX3RoaXMkZ2VvbWV0cnlHcm91cHMkID0gdGhpcy5nZW9tZXRyeUdyb3Vwc1t0XSkuc2V0Tm9ybWFscy5hcHBseShfdGhpcyRnZW9tZXRyeUdyb3VwcyQsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Q29sb3JzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29sb3JzKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMuZ2VvbWV0cnlHcm91cHMubGVuZ3RoLCByID0gMDsgciA8IHQ7IHIrKykgewogICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkZ2VvbWV0cnlHcm91cHMkMjsKICAgICAgICAgICAgICAgICAgKF90aGlzJGdlb21ldHJ5R3JvdXBzJDIgPSB0aGlzLmdlb21ldHJ5R3JvdXBzW3JdKS5zZXRDb2xvcnMuYXBwbHkoX3RoaXMkZ2VvbWV0cnlHcm91cHMkMiwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRVcFdpcmVmcmFtZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVwV2lyZWZyYW1lKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmdyb3VwczsgdCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyRnZW9tZXRyeUdyb3VwcyQzOwogICAgICAgICAgICAgICAgICAoX3RoaXMkZ2VvbWV0cnlHcm91cHMkMyA9IHRoaXMuZ2VvbWV0cnlHcm91cHNbdF0pLnNldExpbmVJbmRpY2VzLmFwcGx5KF90aGlzJGdlb21ldHJ5R3JvdXBzJDMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaW5pdFR5cGVkQXJyYXlzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFR5cGVkQXJyYXlzKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0aGlzLmdyb3VwczsgZSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZW9tZXRyeUdyb3Vwc1tlXTsKICAgICAgICAgICAgICAgICAgITAgIT09IHQuX19pbml0dGVkQXJyYXlzICYmIHQudHJ1bmNhdGVBcnJheUJ1ZmZlcnModGhpcy5tZXNoLCAhMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzcG9zZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoewogICAgICAgICAgICAgICAgICB0eXBlOiAiZGlzcG9zZSIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInZlcnRpY2VzIiwKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCB0ID0gMDsgdCA8IHRoaXMuZ3JvdXBzOyB0KyspIGUgKz0gdGhpcy5nZW9tZXRyeUdyb3Vwc1t0XS52ZXJ0aWNlczsKICAgICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX0dlb21ldHJ5OwogICAgICAgICAgfShfRXZlbnREaXNwYXRjaGVyKTsKICAgICAgICAgIHZhciBNID0gMCwKICAgICAgICAgICAgeiA9IDA7CiAgICAgICAgICB2YXIgX09iamVjdDNEID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX09iamVjdDNEKCkgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfT2JqZWN0M0QpOwogICAgICAgICAgICAgIHRoaXMuaWQgPSB6KyssIHRoaXMubmFtZSA9ICIiLCB0aGlzLmNoaWxkcmVuID0gW10sIHRoaXMucG9zaXRpb24gPSBuZXcgaC5WZWN0b3IzKCksIHRoaXMucm90YXRpb24gPSBuZXcgaC5WZWN0b3IzKCksIHRoaXMubWF0cml4ID0gbmV3IGguTWF0cml4NCgpLCB0aGlzLm1hdHJpeFdvcmxkID0gbmV3IGguTWF0cml4NCgpLCB0aGlzLnF1YXRlcm5pb24gPSBuZXcgaC5RdWF0ZXJuaW9uKCksIHRoaXMuZXVsZXJPcmRlciA9ICJYWVoiLCB0aGlzLnVwID0gbmV3IGguVmVjdG9yMygwLCAxLCAwKSwgdGhpcy5zY2FsZSA9IG5ldyBoLlZlY3RvcjMoMSwgMSwgMSksIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9ICEwLCB0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSAhMCwgdGhpcy5yb3RhdGlvbkF1dG9VcGRhdGUgPSAhMCwgdGhpcy51c2VRdWF0ZXJuaW9uID0gITEsIHRoaXMudmlzaWJsZSA9ICEwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfT2JqZWN0M0QsIFt7CiAgICAgICAgICAgICAga2V5OiAibG9va0F0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9va0F0KGUpIHsKICAgICAgICAgICAgICAgIHRoaXMubWF0cml4Lmxvb2tBdChlLCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwKSwgdGhpcy5yb3RhdGlvbkF1dG9VcGRhdGUgJiYgKCEwID09PSB0aGlzLnVzZVF1YXRlcm5pb24gPyBjb25zb2xlLmVycm9yKCJVbmltcGxlbWVudGVkIG1hdGggb3BlcmF0aW9uLiIpIDogdGhpcy5yb3RhdGlvbiBpbnN0YW5jZW9mIGguVmVjdG9yMyAmJiB0aGlzLnJvdGF0aW9uLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KHRoaXMubWF0cml4LCB0aGlzLmV1bGVyT3JkZXIpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoZSkgewogICAgICAgICAgICAgICAgaWYgKGUgIT09IHRoaXMpIHsKICAgICAgICAgICAgICAgICAgZS5wYXJlbnQgPSB0aGlzLCB0aGlzLmNoaWxkcmVuLnB1c2goZSk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSB0aGlzOyB2b2lkIDAgIT09IHQucGFyZW50OykgdCA9IHQucGFyZW50OwogICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQgJiYgdCBpbnN0YW5jZW9mIF9TY2VuZSAmJiB0Ll9fYWRkT2JqZWN0KGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGNvbnNvbGUuZXJyb3IoIkNhbid0IGFkZCAkM0Rtb2wuT2JqZWN0M0QgdG8gaXRzZWxmIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGUpOwogICAgICAgICAgICAgICAgaWYgKC0xICE9PSB0KSB7CiAgICAgICAgICAgICAgICAgIGUucGFyZW50ID0gdm9pZCAwLCB0aGlzLmNoaWxkcmVuLnNwbGljZSh0LCAxKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IHRoaXM7IHZvaWQgMCAhPT0gci5wYXJlbnQ7KSByID0gci5wYXJlbnQ7CiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gciAmJiByIGluc3RhbmNlb2YgX1NjZW5lICYmIHIuX19yZW1vdmVPYmplY3QoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidnJtbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZybWwoZSkgewogICAgICAgICAgICAgICAgZSB8fCAoZSA9ICIgIik7CiAgICAgICAgICAgICAgICB2YXIgdCA9IDIgKiBNYXRoLmF0YW4yKHRoaXMucXVhdGVybmlvbi5sZW5ndGh4eXooKSwgdGhpcy5xdWF0ZXJuaW9uLncpLAogICAgICAgICAgICAgICAgICByID0gMCwKICAgICAgICAgICAgICAgICAgcyA9IDAsCiAgICAgICAgICAgICAgICAgIGEgPSAwOwogICAgICAgICAgICAgICAgaWYgKDAgIT0gdCkgewogICAgICAgICAgICAgICAgICB2YXIgX2U5NyA9IE1hdGguc2luKHQgLyAyKTsKICAgICAgICAgICAgICAgICAgciA9IHRoaXMucXVhdGVybmlvbi54IC8gX2U5NywgcyA9IHRoaXMucXVhdGVybmlvbi55IC8gX2U5NywgYSA9IHRoaXMucXVhdGVybmlvbi56IC8gX2U5NzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBuID0gZSArICJUcmFuc2Zvcm0ge1xuIiArIGUgKyAiIGNlbnRlciAiICsgdGhpcy5wb3NpdGlvbi54ICsgIiAiICsgdGhpcy5wb3NpdGlvbi55ICsgIiAiICsgdGhpcy5wb3NpdGlvbi56ICsgIlxuIiArIGUgKyAiIHJvdGF0aW9uICIgKyByICsgIiAiICsgcyArICIgIiArIGEgKyAiICIgKyB0ICsgIlxuIiArIGUgKyAiIGNoaWxkcmVuIFtcbiI7CiAgICAgICAgICAgICAgICB0aGlzLmdlb21ldHJ5ICYmIChuICs9IHRoaXMuZ2VvbWV0cnkudnJtbChlLCB0aGlzLm1hdGVyaWFsKSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBvKyspIG4gKz0gdGhpcy5jaGlsZHJlbltvXS52cm1sKGUgKyAiICIpICsgIixcbiI7CiAgICAgICAgICAgICAgICByZXR1cm4gbiArPSAiIF1cbiIsIG4gKz0gIn0iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInVwZGF0ZU1hdHJpeCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU1hdHJpeCgpIHsKICAgICAgICAgICAgICAgIHRoaXMubWF0cml4LnNldFBvc2l0aW9uKHRoaXMucG9zaXRpb24pLCAhMSA9PT0gdGhpcy51c2VRdWF0ZXJuaW9uICYmIHRoaXMucm90YXRpb24gaW5zdGFuY2VvZiBoLlZlY3RvcjMgPyB0aGlzLm1hdHJpeC5zZXRSb3RhdGlvbkZyb21FdWxlcih0aGlzLnJvdGF0aW9uLCB0aGlzLmV1bGVyT3JkZXIpIDogdGhpcy5tYXRyaXguc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pLCAxID09PSB0aGlzLnNjYWxlLnggJiYgMSA9PT0gdGhpcy5zY2FsZS55ICYmIDEgPT09IHRoaXMuc2NhbGUueiB8fCB0aGlzLm1hdHJpeC5zY2FsZSh0aGlzLnNjYWxlKSwgdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gITA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidXBkYXRlTWF0cml4V29ybGQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZChlKSB7CiAgICAgICAgICAgICAgICAhMCA9PT0gdGhpcy5tYXRyaXhBdXRvVXBkYXRlICYmIHRoaXMudXBkYXRlTWF0cml4KCksICEwICE9PSB0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgJiYgITAgIT09IGUgfHwgKHZvaWQgMCA9PT0gdGhpcy5wYXJlbnQgPyB0aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpIDogdGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCkpLCB0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSAhMTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IHQrKykgdGhpcy5jaGlsZHJlblt0XS51cGRhdGVNYXRyaXhXb3JsZCghMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZShlKSB7CiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBuZXcgX09iamVjdDNEKCkpLCBlLm5hbWUgPSB0aGlzLm5hbWUsIGUudXAuY29weSh0aGlzLnVwKSwgZS5wb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pLCBlLnJvdGF0aW9uIGluc3RhbmNlb2YgaC5WZWN0b3IzICYmIHRoaXMucm90YXRpb24gaW5zdGFuY2VvZiBoLlZlY3RvcjMgPyBlLnJvdGF0aW9uLmNvcHkodGhpcy5yb3RhdGlvbikgOiBlLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbiwgZS5ldWxlck9yZGVyID0gdGhpcy5ldWxlck9yZGVyLCBlLnNjYWxlLmNvcHkodGhpcy5zY2FsZSksIGUucm90YXRpb25BdXRvVXBkYXRlID0gdGhpcy5yb3RhdGlvbkF1dG9VcGRhdGUsIGUubWF0cml4LmNvcHkodGhpcy5tYXRyaXgpLCBlLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXhXb3JsZCksIGUucXVhdGVybmlvbi5jb3B5KHRoaXMucXVhdGVybmlvbiksIGUubWF0cml4QXV0b1VwZGF0ZSA9IHRoaXMubWF0cml4QXV0b1VwZGF0ZSwgZS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlLCBlLnVzZVF1YXRlcm5pb24gPSB0aGlzLnVzZVF1YXRlcm5pb24sIGUudmlzaWJsZSA9IHRoaXMudmlzaWJsZTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IHQrKykgewogICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuY2hpbGRyZW5bdF07CiAgICAgICAgICAgICAgICAgIGUuYWRkKHIuY2xvbmUoKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRWaXNpYmxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VmlzaWJsZShlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGUgPSBlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5bdF0uc2V0VmlzaWJsZShlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9PYmplY3QzRDsKICAgICAgICAgIH0oKTsKICAgICAgICAgIHZhciBfU2NlbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9PYmplY3QzRDIpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9TY2VuZSwgX09iamVjdDNEMik7CiAgICAgICAgICAgIHZhciBfc3VwZXI5ID0gX2NyZWF0ZVN1cGVyKF9TY2VuZSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TY2VuZSgpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXM5OwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfU2NlbmUpOwogICAgICAgICAgICAgIF90aGlzOSA9IF9zdXBlcjkuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgX3RoaXM5LmZvZyA9IG51bGwsIF90aGlzOS5vdmVycmlkZU1hdGVyaWFsID0gbnVsbCwgX3RoaXM5Lm1hdHJpeEF1dG9VcGRhdGUgPSAhMSwgX3RoaXM5Ll9fb2JqZWN0cyA9IFtdLCBfdGhpczkuX19saWdodHMgPSBbXSwgX3RoaXM5Ll9fb2JqZWN0c0FkZGVkID0gW10sIF90aGlzOS5fX29iamVjdHNSZW1vdmVkID0gW107CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1NjZW5lLCBbewogICAgICAgICAgICAgIGtleTogIl9fYWRkT2JqZWN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX19hZGRPYmplY3QoZSkgewogICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBfTGlnaHQpIC0xID09PSB0aGlzLl9fbGlnaHRzLmluZGV4T2YoZSkgJiYgdGhpcy5fX2xpZ2h0cy5wdXNoKGUpLCBlLnRhcmdldCAmJiB2b2lkIDAgPT09IGUudGFyZ2V0LnBhcmVudCAmJiB0aGlzLmFkZChlLnRhcmdldCk7ZWxzZSBpZiAoLTEgPT09IHRoaXMuX19vYmplY3RzLmluZGV4T2YoZSkpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5fX29iamVjdHMucHVzaChlKSwgdGhpcy5fX29iamVjdHNBZGRlZC5wdXNoKGUpOwogICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX19vYmplY3RzUmVtb3ZlZC5pbmRleE9mKGUpOwogICAgICAgICAgICAgICAgICAtMSAhPT0gdCAmJiB0aGlzLl9fb2JqZWN0c1JlbW92ZWQuc3BsaWNlKHQsIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBlLmNoaWxkcmVuLmxlbmd0aDsgcisrKSB0aGlzLl9fYWRkT2JqZWN0KGUuY2hpbGRyZW5bcl0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIl9fcmVtb3ZlT2JqZWN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX19yZW1vdmVPYmplY3QoZSkgewogICAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgICBlIGluc3RhbmNlb2YgX0xpZ2h0ID8gLTEgIT09ICh0ID0gdGhpcy5fX2xpZ2h0cy5pbmRleE9mKGUpKSAmJiB0aGlzLl9fbGlnaHRzLnNwbGljZSh0LCAxKSA6IC0xICE9PSAodCA9IHRoaXMuX19vYmplY3RzLmluZGV4T2YoZSkpICYmICh0aGlzLl9fb2JqZWN0cy5zcGxpY2UodCwgMSksIHRoaXMuX19vYmplY3RzUmVtb3ZlZC5wdXNoKGUpLCAtMSAhPT0gdGhpcy5fX29iamVjdHNBZGRlZC5pbmRleE9mKGUpICYmIHRoaXMuX19vYmplY3RzQWRkZWQuc3BsaWNlKHQsIDEpKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZS5jaGlsZHJlbi5sZW5ndGg7IHIrKykgdGhpcy5fX3JlbW92ZU9iamVjdChlLmNoaWxkcmVuW3JdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9TY2VuZTsKICAgICAgICAgIH0oX09iamVjdDNEKTsKICAgICAgICAgIHZhciBfTGlnaHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9PYmplY3QzRDMpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9MaWdodCwgX09iamVjdDNEMyk7CiAgICAgICAgICAgIHZhciBfc3VwZXIxMCA9IF9jcmVhdGVTdXBlcihfTGlnaHQpOwogICAgICAgICAgICBmdW5jdGlvbiBfTGlnaHQoZSkgewogICAgICAgICAgICAgIHZhciBfdGhpczEwOwogICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfTGlnaHQpOwogICAgICAgICAgICAgIF90aGlzMTAgPSBfc3VwZXIxMC5jYWxsKHRoaXMpLCBfdGhpczEwLnBvc2l0aW9uID0gbmV3IGguVmVjdG9yMygwLCAxLCAwKSwgX3RoaXMxMC50YXJnZXQgPSBuZXcgX09iamVjdDNEKCksIF90aGlzMTAuY2FzdFNoYWRvdyA9ICExLCBfdGhpczEwLm9ubHlTaGFkb3cgPSAhMSwgX3RoaXMxMC5jb2xvciA9IG5ldyBBLkNvbG9yKGUpLCBfdGhpczEwLmludGVuc2l0eSA9IHQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhfTGlnaHQpOwogICAgICAgICAgfShfT2JqZWN0M0QpOwogICAgICAgICAgdmFyIEwgPSBuZXcgaC5NYXRyaXg0KCk7CiAgICAgICAgICB2YXIgX1Byb2plY3RvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9Qcm9qZWN0b3IoKSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9Qcm9qZWN0b3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfUHJvamVjdG9yLCBbewogICAgICAgICAgICAgIGtleTogInByb2plY3RWZWN0b3IiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9qZWN0VmVjdG9yKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfUHJvamVjdG9yLnByb2plY3RWZWN0b3IoZSwgdCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidW5wcm9qZWN0VmVjdG9yIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5wcm9qZWN0VmVjdG9yKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfUHJvamVjdG9yLnVucHJvamVjdFZlY3RvcihlLCB0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dLCBbewogICAgICAgICAgICAgIGtleTogInVucHJvamVjdFZlY3RvciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVucHJvamVjdFZlY3RvcihlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdC5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHQucHJvamVjdGlvbk1hdHJpeCksIEwubXVsdGlwbHlNYXRyaWNlcyh0Lm1hdHJpeFdvcmxkLCB0LnByb2plY3Rpb25NYXRyaXhJbnZlcnNlKSwgZS5hcHBseVByb2plY3Rpb24oTCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicHJvamVjdFZlY3RvciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByb2plY3RWZWN0b3IoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UodC5tYXRyaXhXb3JsZCksIEwubXVsdGlwbHlNYXRyaWNlcyh0LnByb2plY3Rpb25NYXRyaXgsIHQubWF0cml4V29ybGRJbnZlcnNlKSwgZS5hcHBseVByb2plY3Rpb24oTCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfUHJvamVjdG9yOwogICAgICAgICAgfSgpOwogICAgICAgICAgdmFyIEUgPSByKDMzNTEpOwogICAgICAgICAgdmFyIFQgPSBmdW5jdGlvbiBUKGUsIHQpIHsKICAgICAgICAgICAgICByZXR1cm4gZS5kaXN0YW5jZSAtIHQuZGlzdGFuY2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGsgPSBuZXcgaC5NYXRyaXg0KCk7CiAgICAgICAgICB2YXIgX1JheWNhc3RlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9SYXljYXN0ZXIoZSwgdCwgciwgcykgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfUmF5Y2FzdGVyKTsKICAgICAgICAgICAgICB0aGlzLnByZWNpc2lvbiA9IDFlLTQsIHRoaXMubGluZVByZWNpc2lvbiA9IC4yLCB0aGlzLnJheSA9IG5ldyBoLlJheShlLCB0KSwgdGhpcy5yYXkuZGlyZWN0aW9uLmxlbmd0aFNxKCkgPiAwICYmIHRoaXMucmF5LmRpcmVjdGlvbi5ub3JtYWxpemUoKSwgdGhpcy5uZWFyID0gcyB8fCAwLCB0aGlzLmZhciA9IHIgfHwgMSAvIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9SYXljYXN0ZXIsIFt7CiAgICAgICAgICAgICAga2V5OiAic2V0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGUsIHQpIHsKICAgICAgICAgICAgICAgIHRoaXMucmF5LnNldChlLCB0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRGcm9tQ2FtZXJhIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RnJvbUNhbWVyYShlLCB0KSB7CiAgICAgICAgICAgICAgICB0Lm9ydGhvID8gKHRoaXMucmF5Lm9yaWdpbi5zZXQoZS54LCBlLnksICh0Lm5lYXIgKyB0LmZhcikgLyAodC5uZWFyIC0gdC5mYXIpKS51bnByb2plY3QodCksIHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoMCwgMCwgLTEpLnRyYW5zZm9ybURpcmVjdGlvbih0Lm1hdHJpeFdvcmxkKSkgOiAodGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbih0Lm1hdHJpeFdvcmxkKSwgdGhpcy5yYXkuZGlyZWN0aW9uLnNldChlLngsIGUueSwgZS56KSwgdC5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHQucHJvamVjdGlvbk1hdHJpeCksIGsubXVsdGlwbHlNYXRyaWNlcyh0Lm1hdHJpeFdvcmxkLCB0LnByb2plY3Rpb25NYXRyaXhJbnZlcnNlKSwgdGhpcy5yYXkuZGlyZWN0aW9uLmFwcGx5UHJvamVjdGlvbihrKSwgdGhpcy5yYXkuZGlyZWN0aW9uLnN1Yih0aGlzLnJheS5vcmlnaW4pLm5vcm1hbGl6ZSgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbnRlcnNlY3RPYmplY3RzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZXJzZWN0T2JqZWN0cyhlLCB0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gW10sIHMgPSAwLCBhID0gdC5sZW5ndGg7IHMgPCBhOyBzKyspIE4oZSwgdFtzXSwgdGhpcywgcik7CiAgICAgICAgICAgICAgICByZXR1cm4gci5zb3J0KFQpLCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1JheWNhc3RlcjsKICAgICAgICAgIH0oKTsKICAgICAgICAgIHZhciBJID0gZnVuY3Rpb24gSShlKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChlLCAtMSksIDEpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBPID0gbmV3IEUuU3BoZXJlKCksCiAgICAgICAgICAgIEQgPSBuZXcgRS5DeWxpbmRlcigpLAogICAgICAgICAgICBGID0gbmV3IEUuVHJpYW5nbGUoKSwKICAgICAgICAgICAgUiA9IG5ldyBoLlZlY3RvcjMoKSwKICAgICAgICAgICAgUCA9IG5ldyBoLlZlY3RvcjMoKSwKICAgICAgICAgICAgRyA9IG5ldyBoLlZlY3RvcjMoKSwKICAgICAgICAgICAgQiA9IG5ldyBoLlZlY3RvcjMoKSwKICAgICAgICAgICAgVSA9IG5ldyBoLlZlY3RvcjMoKTsKICAgICAgICAgIGZ1bmN0aW9uIE4oZSwgdCwgciwgcykgewogICAgICAgICAgICBpZiAoVS5nZXRQb3NpdGlvbkZyb21NYXRyaXgoZS5tYXRyaXhXb3JsZCksIHZvaWQgMCA9PT0gdC5pbnRlcnNlY3Rpb25TaGFwZSkgcmV0dXJuIHM7CiAgICAgICAgICAgIHZhciBhLAogICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgIGgsCiAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICBnLAogICAgICAgICAgICAgIHYsCiAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICB5LAogICAgICAgICAgICAgIGIsCiAgICAgICAgICAgICAgdyA9IHQuaW50ZXJzZWN0aW9uU2hhcGUsCiAgICAgICAgICAgICAgeCA9IHIubGluZVByZWNpc2lvbiwKICAgICAgICAgICAgICBBID0gKHggKj0gZS5tYXRyaXhXb3JsZC5nZXRNYXhTY2FsZU9uQXhpcygpKSAqIHg7CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQuYm91bmRpbmdTcGhlcmUgJiYgdC5ib3VuZGluZ1NwaGVyZSBpbnN0YW5jZW9mIEUuU3BoZXJlICYmIChPLmNvcHkodC5ib3VuZGluZ1NwaGVyZSksIE8uYXBwbHlNYXRyaXg0KGUubWF0cml4V29ybGQpLCAhci5yYXkuaXNJbnRlcnNlY3Rpb25TcGhlcmUoTykpKSByZXR1cm4gczsKICAgICAgICAgICAgZm9yIChhID0gMCwgbiA9IHcudHJpYW5nbGUubGVuZ3RoOyBhIDwgbjsgYSsrKSBpZiAody50cmlhbmdsZVthXSBpbnN0YW5jZW9mIEUuVHJpYW5nbGUpIHsKICAgICAgICAgICAgICBpZiAoRi5jb3B5KHcudHJpYW5nbGVbYV0pLCBGLmFwcGx5TWF0cml4NChlLm1hdHJpeFdvcmxkKSwgbyA9IEYuZ2V0Tm9ybWFsKCksIChsID0gci5yYXkuZGlyZWN0aW9uLmRvdChvKSkgPj0gMCkgY29udGludWU7CiAgICAgICAgICAgICAgaWYgKFIuc3ViVmVjdG9ycyhGLmEsIHIucmF5Lm9yaWdpbiksICh1ID0gby5kb3QoUikgLyBsKSA8IDApIGNvbnRpbnVlOwogICAgICAgICAgICAgIFAuY29weShyLnJheS5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKHUpLmFkZChyLnJheS5vcmlnaW4pLCBQLnN1YihGLmEpLCBHLmNvcHkoRi5iKS5zdWIoRi5hKSwgQi5jb3B5KEYuYykuc3ViKEYuYSk7CiAgICAgICAgICAgICAgdmFyIEMgPSBHLmRvdChCKSwKICAgICAgICAgICAgICAgIFMgPSBHLmxlbmd0aFNxKCksCiAgICAgICAgICAgICAgICBNID0gQi5sZW5ndGhTcSgpOwogICAgICAgICAgICAgIGlmICgoXyA9IChTICogUC5kb3QoQikgLSBDICogUC5kb3QoRykpIC8gKFMgKiBNIC0gQyAqIEMpKSA8IDAgfHwgXyA+IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgIGlmICgodiA9IChQLmRvdChHKSAtIF8gKiBDKSAvIFMpIDwgMCB8fCB2ID4gMSB8fCB2ICsgXyA+IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgIHMucHVzaCh7CiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHQsCiAgICAgICAgICAgICAgICBkaXN0YW5jZTogdQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoYSA9IDAsIG4gPSB3LmN5bGluZGVyLmxlbmd0aDsgYSA8IG47IGErKykgaWYgKHcuY3lsaW5kZXJbYV0gaW5zdGFuY2VvZiBFLkN5bGluZGVyKSB7CiAgICAgICAgICAgICAgaWYgKEQuY29weSh3LmN5bGluZGVyW2FdKSwgRC5hcHBseU1hdHJpeDQoZS5tYXRyaXhXb3JsZCksIFIuc3ViVmVjdG9ycyhELmMxLCByLnJheS5vcmlnaW4pLCBoID0gUi5kb3QoRC5kaXJlY3Rpb24pLCBjID0gUi5kb3Qoci5yYXkuZGlyZWN0aW9uKSwgMCA9PT0gKHAgPSAxIC0gKGwgPSBJKHIucmF5LmRpcmVjdGlvbi5kb3QoRC5kaXJlY3Rpb24pKSkgKiBsKSkgY29udGludWU7CiAgICAgICAgICAgICAgeSA9IChsICogYyAtIGgpIC8gcCwgYiA9IChjIC0gbCAqIGgpIC8gcCwgUC5jb3B5KEQuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcih5KS5hZGQoRC5jMSksIEcuY29weShyLnJheS5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGIpLmFkZChyLnJheS5vcmlnaW4pLCBmID0gQi5zdWJWZWN0b3JzKFAsIEcpLmxlbmd0aFNxKCk7CiAgICAgICAgICAgICAgdmFyIHogPSBELnJhZGl1cyAqIEQucmFkaXVzOwogICAgICAgICAgICAgIGlmIChmIDw9IHopIHsKICAgICAgICAgICAgICAgIGlmICgodiA9IGwgKiAoXyA9IHUgPSAoZyA9IChsICogaCAtIGMpICogKGwgKiBoIC0gYykgLSBwICogKFIubGVuZ3RoU3EoKSAtIGggKiBoIC0geikpIDw9IDAgPyBNYXRoLnNxcnQoZikgOiAoYyAtIGwgKiBoIC0gTWF0aC5zcXJ0KGcpKSAvIHApIC0gaCkgPCAwIHx8IHYgKiB2ID4gRC5sZW5ndGhTcSgpIHx8IF8gPCAwKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIHMucHVzaCh7CiAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdCwKICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IHUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGEgPSAwLCBuID0gdy5saW5lLmxlbmd0aDsgYSA8IG47IGEgKz0gMikgewogICAgICAgICAgICAgIFAuY29weSh3LmxpbmVbYV0pLCBQLmFwcGx5TWF0cml4NChlLm1hdHJpeFdvcmxkKSwgRy5jb3B5KHcubGluZVthICsgMV0pLCBHLmFwcGx5TWF0cml4NChlLm1hdHJpeFdvcmxkKSwgQi5zdWJWZWN0b3JzKEcsIFApOwogICAgICAgICAgICAgIHZhciBMID0gQi5sZW5ndGhTcSgpOwogICAgICAgICAgICAgIEIubm9ybWFsaXplKCksIFIuc3ViVmVjdG9ycyhQLCByLnJheS5vcmlnaW4pOwogICAgICAgICAgICAgIHZhciBUID0gUi5kb3QoQik7CiAgICAgICAgICAgICAgYyA9IFIuZG90KHIucmF5LmRpcmVjdGlvbiksIDAgIT09IChwID0gMSAtIChsID0gSShyLnJheS5kaXJlY3Rpb24uZG90KEIpKSkgKiBsKSAmJiAoeSA9IChsICogYyAtIFQpIC8gcCwgYiA9IChjIC0gbCAqIFQpIC8gcCwgUC5hZGQoQi5tdWx0aXBseVNjYWxhcih5KSksIEcuY29weShyLnJheS5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGIpLmFkZChyLnJheS5vcmlnaW4pLCAoZiA9IEIuc3ViVmVjdG9ycyhHLCBQKS5sZW5ndGhTcSgpKSA8IEEgJiYgeSAqIHkgPCBMICYmIHMucHVzaCh7CiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHQsCiAgICAgICAgICAgICAgICBkaXN0YW5jZTogYgogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGEgPSAwLCBuID0gdy5zcGhlcmUubGVuZ3RoOyBhIDwgbjsgYSsrKSBpZiAody5zcGhlcmVbYV0gaW5zdGFuY2VvZiBFLlNwaGVyZSAmJiAoTy5jb3B5KHcuc3BoZXJlW2FdKSwgTy5hcHBseU1hdHJpeDQoZS5tYXRyaXhXb3JsZCksIHIucmF5LmlzSW50ZXJzZWN0aW9uU3BoZXJlKE8pKSkgewogICAgICAgICAgICAgIFAuc3ViVmVjdG9ycyhPLmNlbnRlciwgci5yYXkub3JpZ2luKTsKICAgICAgICAgICAgICB2YXIgayA9IFAuZG90KHIucmF5LmRpcmVjdGlvbik7CiAgICAgICAgICAgICAgaWYgKGcgPSBrICogayAtIChQLmxlbmd0aFNxKCkgLSBPLnJhZGl1cyAqIE8ucmFkaXVzKSwgayA8IDApIHJldHVybiBzOwogICAgICAgICAgICAgIHUgPSBnIDw9IDAgPyBrIDogayAtIE1hdGguc3FydChnKSwgcy5wdXNoKHsKICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdCwKICAgICAgICAgICAgICAgIGRpc3RhbmNlOiB1CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHM7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgX1VWTWFwcGluZyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gX1VWTWFwcGluZygpIHsKICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9VVk1hcHBpbmcpOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgX1RleHR1cmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudERpc3BhdGNoZXI0KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfVGV4dHVyZSwgX0V2ZW50RGlzcGF0Y2hlcjQpOwogICAgICAgICAgICB2YXIgX3N1cGVyMTEgPSBfY3JlYXRlU3VwZXIoX1RleHR1cmUpOwogICAgICAgICAgICBmdW5jdGlvbiBfVGV4dHVyZShlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzMTE7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9UZXh0dXJlKTsKICAgICAgICAgICAgICBfdGhpczExID0gX3N1cGVyMTEuY2FsbCh0aGlzKSwgX3RoaXMxMS5pZCA9IFYrKywgX3RoaXMxMS5uYW1lID0gIiIsIF90aGlzMTEuaW1hZ2UgPSBlLCBfdGhpczExLm1hcHBpbmcgPSBuZXcgX1VWTWFwcGluZygpLCBfdGhpczExLndyYXBTID0gdSwgX3RoaXMxMS53cmFwVCA9IHUsIF90aGlzMTEuYW5pc290cm9weSA9IDEsIHQgPyAoX3RoaXMxMS5mb3JtYXQgPSBiLCBfdGhpczExLnR5cGUgPSBfLCBfdGhpczExLnByZW11bHRpcGx5QWxwaGEgPSAhMSwgX3RoaXMxMS5mbGlwWSA9ICExLCBfdGhpczExLnVucGFja0FsaWdubWVudCA9IDEsIF90aGlzMTEubWFnRmlsdGVyID0gcCwgX3RoaXMxMS5taW5GaWx0ZXIgPSBwKSA6IChfdGhpczExLmZvcm1hdCA9IHksIF90aGlzMTEudHlwZSA9IHYsIF90aGlzMTEub2Zmc2V0ID0gbmV3IGguVmVjdG9yMigwLCAwKSwgX3RoaXMxMS5yZXBlYXQgPSBuZXcgaC5WZWN0b3IyKDEsIDEpLCBfdGhpczExLnByZW11bHRpcGx5QWxwaGEgPSAhMSwgX3RoaXMxMS5mbGlwWSA9ICEwLCBfdGhpczExLnVucGFja0FsaWdubWVudCA9IDQsIF90aGlzMTEubWFnRmlsdGVyID0gZiwgX3RoaXMxMS5taW5GaWx0ZXIgPSBnKSwgX3RoaXMxMS5uZWVkc1VwZGF0ZSA9ICExLCBfdGhpczExLm9uVXBkYXRlID0gbnVsbDsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1RleHR1cmUsIFt7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgX1RleHR1cmUoKTsKICAgICAgICAgICAgICAgIHJldHVybiBlLmltYWdlID0gdGhpcy5pbWFnZSwgZS5tYXBwaW5nID0gdGhpcy5tYXBwaW5nLCBlLndyYXBTID0gdGhpcy53cmFwUywgZS53cmFwVCA9IHRoaXMud3JhcFQsIGUubWFnRmlsdGVyID0gdGhpcy5tYWdGaWx0ZXIsIGUubWluRmlsdGVyID0gdGhpcy5taW5GaWx0ZXIsIGUuYW5pc290cm9weSA9IHRoaXMuYW5pc290cm9weSwgZS5mb3JtYXQgPSB0aGlzLmZvcm1hdCwgZS50eXBlID0gdGhpcy50eXBlLCBlLm9mZnNldC5jb3B5KHRoaXMub2Zmc2V0KSwgZS5yZXBlYXQuY29weSh0aGlzLnJlcGVhdCksIGUucHJlbXVsdGlwbHlBbHBoYSA9IHRoaXMucHJlbXVsdGlwbHlBbHBoYSwgZS5mbGlwWSA9IHRoaXMuZmxpcFksIGUudW5wYWNrQWxpZ25tZW50ID0gdGhpcy51bnBhY2tBbGlnbm1lbnQsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzcG9zZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoewogICAgICAgICAgICAgICAgICB0eXBlOiAiZGlzcG9zZSIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1RleHR1cmU7CiAgICAgICAgICB9KF9FdmVudERpc3BhdGNoZXIpOwogICAgICAgICAgdmFyIFYgPSAwOwogICAgICAgICAgdmFyIF9JbXBvc3Rlck1hdGVyaWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWF0ZXJpYWwzKSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfSW1wb3N0ZXJNYXRlcmlhbCwgX01hdGVyaWFsMyk7CiAgICAgICAgICAgIHZhciBfc3VwZXIxMiA9IF9jcmVhdGVTdXBlcihfSW1wb3N0ZXJNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9JbXBvc3Rlck1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMxMjsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0ltcG9zdGVyTWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMTIgPSBfc3VwZXIxMi5jYWxsKHRoaXMpLCBfdGhpczEyLmNvbG9yID0gbmV3IEEuQ29sb3IoMTY3NzcyMTUpLCBfdGhpczEyLmFtYmllbnQgPSBuZXcgQS5Db2xvcigxMDQ4NTc1KSwgX3RoaXMxMi5lbWlzc2l2ZSA9IG5ldyBBLkNvbG9yKDApLCBfdGhpczEyLmltcG9zdGVyID0gITAsIF90aGlzMTIud3JhcEFyb3VuZCA9ICExLCBfdGhpczEyLndyYXBSR0IgPSBuZXcgaC5WZWN0b3IzKDEsIDEsIDEpLCBfdGhpczEyLm1hcCA9IHZvaWQgMCwgX3RoaXMxMi5saWdodE1hcCA9IG51bGwsIF90aGlzMTIuc3BlY3VsYXJNYXAgPSBudWxsLCBfdGhpczEyLmVudk1hcCA9IG51bGwsIF90aGlzMTIucmVmbGVjdGl2aXR5ID0gMSwgX3RoaXMxMi5yZWZyYWN0aW9uUmF0aW8gPSAuOTgsIF90aGlzMTIuZm9nID0gITAsIF90aGlzMTIud2lyZWZyYW1lID0gITEsIF90aGlzMTIud2lyZWZyYW1lTGluZXdpZHRoID0gMSwgX3RoaXMxMi53aXJlZnJhbWVMaW5lY2FwID0gInJvdW5kIiwgX3RoaXMxMi53aXJlZnJhbWVMaW5lam9pbiA9ICJyb3VuZCIsIF90aGlzMTIuc2hhZGluZyA9IGwuU21vb3RoU2hhZGluZywgX3RoaXMxMi5zaGFkZXJJRCA9IG51bGwsIF90aGlzMTIudmVydGV4Q29sb3JzID0gcy5Ob0NvbG9ycywgX3RoaXMxMi5za2lubmluZyA9ICExLCBfdGhpczEyLnNldFZhbHVlcyhlKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0ltcG9zdGVyTWF0ZXJpYWwsIFt7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgX0ltcG9zdGVyTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfSW1wb3N0ZXJNYXRlcmlhbC5wcm90b3R5cGUpLCAiY2xvbmUiLCB0aGlzKS5jYWxsKHRoaXMsIGUpLCBlLmNvbG9yLmNvcHkodGhpcy5jb2xvciksIGUuYW1iaWVudC5jb3B5KHRoaXMuYW1iaWVudCksIGUuZW1pc3NpdmUuY29weSh0aGlzLmVtaXNzaXZlKSwgZS53cmFwQXJvdW5kID0gdGhpcy53cmFwQXJvdW5kLCBlLndyYXBSR0IuY29weSh0aGlzLndyYXBSR0IpLCBlLm1hcCA9IHRoaXMubWFwLCBlLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcCwgZS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAsIGUuZW52TWFwID0gdGhpcy5lbnZNYXAsIGUuY29tYmluZSA9IHRoaXMuY29tYmluZSwgZS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eSwgZS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbywgZS5mb2cgPSB0aGlzLmZvZywgZS5zaGFkaW5nID0gdGhpcy5zaGFkaW5nLCBlLnNoYWRlcklEID0gdGhpcy5zaGFkZXJJRCwgZS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9ycywgZS5za2lubmluZyA9IHRoaXMuc2tpbm5pbmcsIGUubW9ycGhUYXJnZXRzID0gdGhpcy5tb3JwaFRhcmdldHMsIGUubW9ycGhOb3JtYWxzID0gdGhpcy5tb3JwaE5vcm1hbHMsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfSW1wb3N0ZXJNYXRlcmlhbDsKICAgICAgICAgIH0oX01hdGVyaWFsKTsKICAgICAgICAgIHZhciBfSW5zdGFuY2VkTWF0ZXJpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXRlcmlhbDQpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9JbnN0YW5jZWRNYXRlcmlhbCwgX01hdGVyaWFsNCk7CiAgICAgICAgICAgIHZhciBfc3VwZXIxMyA9IF9jcmVhdGVTdXBlcihfSW5zdGFuY2VkTWF0ZXJpYWwpOwogICAgICAgICAgICBmdW5jdGlvbiBfSW5zdGFuY2VkTWF0ZXJpYWwoZSkgewogICAgICAgICAgICAgIHZhciBfdGhpczEzOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfSW5zdGFuY2VkTWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMTMgPSBfc3VwZXIxMy5jYWxsKHRoaXMpLCBfdGhpczEzLmNvbG9yID0gbmV3IEEuQ29sb3IoMTY3NzcyMTUpLCBfdGhpczEzLmFtYmllbnQgPSBuZXcgQS5Db2xvcigxMDQ4NTc1KSwgX3RoaXMxMy5lbWlzc2l2ZSA9IG5ldyBBLkNvbG9yKDApLCBfdGhpczEzLndyYXBBcm91bmQgPSAhMSwgX3RoaXMxMy53cmFwUkdCID0gbmV3IGguVmVjdG9yMygxLCAxLCAxKSwgX3RoaXMxMy5tYXAgPSB2b2lkIDAsIF90aGlzMTMubGlnaHRNYXAgPSBudWxsLCBfdGhpczEzLnNwZWN1bGFyTWFwID0gbnVsbCwgX3RoaXMxMy5lbnZNYXAgPSBudWxsLCBfdGhpczEzLnJlZmxlY3Rpdml0eSA9IDEsIF90aGlzMTMucmVmcmFjdGlvblJhdGlvID0gLjk4LCBfdGhpczEzLmZvZyA9ICEwLCBfdGhpczEzLndpcmVmcmFtZSA9ICExLCBfdGhpczEzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDEsIF90aGlzMTMud2lyZWZyYW1lTGluZWNhcCA9ICJyb3VuZCIsIF90aGlzMTMud2lyZWZyYW1lTGluZWpvaW4gPSAicm91bmQiLCBfdGhpczEzLnNoYWRpbmcgPSBsLlNtb290aFNoYWRpbmcsIF90aGlzMTMuc2hhZGVySUQgPSAiaW5zdGFuY2VkIiwgX3RoaXMxMy52ZXJ0ZXhDb2xvcnMgPSBzLk5vQ29sb3JzLCBfdGhpczEzLnNraW5uaW5nID0gITEsIF90aGlzMTMuc3BoZXJlID0gbnVsbCwgX3RoaXMxMy5zZXRWYWx1ZXMoZSk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9JbnN0YW5jZWRNYXRlcmlhbCwgW3sKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBfSW5zdGFuY2VkTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfSW5zdGFuY2VkTWF0ZXJpYWwucHJvdG90eXBlKSwgImNsb25lIiwgdGhpcykuY2FsbCh0aGlzLCBlKSwgZS5jb2xvci5jb3B5KHRoaXMuY29sb3IpLCBlLmFtYmllbnQuY29weSh0aGlzLmFtYmllbnQpLCBlLmVtaXNzaXZlLmNvcHkodGhpcy5lbWlzc2l2ZSksIGUud3JhcEFyb3VuZCA9IHRoaXMud3JhcEFyb3VuZCwgZS53cmFwUkdCLmNvcHkodGhpcy53cmFwUkdCKSwgZS5tYXAgPSB0aGlzLm1hcCwgZS5saWdodE1hcCA9IHRoaXMubGlnaHRNYXAsIGUuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLCBlLmVudk1hcCA9IHRoaXMuZW52TWFwLCBlLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmUsIGUucmVmbGVjdGl2aXR5ID0gdGhpcy5yZWZsZWN0aXZpdHksIGUucmVmcmFjdGlvblJhdGlvID0gdGhpcy5yZWZyYWN0aW9uUmF0aW8sIGUuZm9nID0gdGhpcy5mb2csIGUuc2hhZGluZyA9IHRoaXMuc2hhZGluZywgZS5zaGFkZXJJRCA9IHRoaXMuc2hhZGVySUQsIGUudmVydGV4Q29sb3JzID0gdGhpcy52ZXJ0ZXhDb2xvcnMsIGUuc2tpbm5pbmcgPSB0aGlzLnNraW5uaW5nLCBlLm1vcnBoVGFyZ2V0cyA9IHRoaXMubW9ycGhUYXJnZXRzLCBlLm1vcnBoTm9ybWFscyA9IHRoaXMubW9ycGhOb3JtYWxzLCBlLnNwaGVyZSA9IHRoaXMuc3BoZXJlLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX0luc3RhbmNlZE1hdGVyaWFsOwogICAgICAgICAgfShfTWF0ZXJpYWwpOwogICAgICAgICAgdmFyIF9NZXNoTGFtYmVydE1hdGVyaWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWF0ZXJpYWw1KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfTWVzaExhbWJlcnRNYXRlcmlhbCwgX01hdGVyaWFsNSk7CiAgICAgICAgICAgIHZhciBfc3VwZXIxNCA9IF9jcmVhdGVTdXBlcihfTWVzaExhbWJlcnRNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9NZXNoTGFtYmVydE1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMxNDsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01lc2hMYW1iZXJ0TWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMTQgPSBfc3VwZXIxNC5jYWxsKHRoaXMpLCBfdGhpczE0LmNvbG9yID0gbmV3IEEuQ29sb3IoMTY3NzcyMTUpLCBfdGhpczE0LmFtYmllbnQgPSBuZXcgQS5Db2xvcigxMDQ4NTc1KSwgX3RoaXMxNC5lbWlzc2l2ZSA9IG5ldyBBLkNvbG9yKDApLCBfdGhpczE0LndyYXBBcm91bmQgPSAhMSwgX3RoaXMxNC53cmFwUkdCID0gbmV3IGguVmVjdG9yMygxLCAxLCAxKSwgX3RoaXMxNC5tYXAgPSB2b2lkIDAsIF90aGlzMTQubGlnaHRNYXAgPSBudWxsLCBfdGhpczE0LnNwZWN1bGFyTWFwID0gbnVsbCwgX3RoaXMxNC5lbnZNYXAgPSBudWxsLCBfdGhpczE0LnJlZmxlY3Rpdml0eSA9IDEsIF90aGlzMTQucmVmcmFjdGlvblJhdGlvID0gLjk4LCBfdGhpczE0LmZvZyA9ICEwLCBfdGhpczE0LndpcmVmcmFtZSA9ICExLCBfdGhpczE0LndpcmVmcmFtZUxpbmV3aWR0aCA9IDEsIF90aGlzMTQud2lyZWZyYW1lTGluZWNhcCA9ICJyb3VuZCIsIF90aGlzMTQud2lyZWZyYW1lTGluZWpvaW4gPSAicm91bmQiLCBfdGhpczE0LnNoYWRpbmcgPSBsLlNtb290aFNoYWRpbmcsIF90aGlzMTQuc2hhZGVySUQgPSAibGFtYmVydCIsIF90aGlzMTQudmVydGV4Q29sb3JzID0gcy5Ob0NvbG9ycywgX3RoaXMxNC5za2lubmluZyA9ICExLCBfdGhpczE0LnNldFZhbHVlcyhlKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxNDsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX01lc2hMYW1iZXJ0TWF0ZXJpYWwsIFt7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgX01lc2hMYW1iZXJ0TWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUpLCAiY2xvbmUiLCB0aGlzKS5jYWxsKHRoaXMsIGUpLCBlLmNvbG9yLmNvcHkodGhpcy5jb2xvciksIGUuYW1iaWVudC5jb3B5KHRoaXMuYW1iaWVudCksIGUuZW1pc3NpdmUuY29weSh0aGlzLmVtaXNzaXZlKSwgZS53cmFwQXJvdW5kID0gdGhpcy53cmFwQXJvdW5kLCBlLndyYXBSR0IuY29weSh0aGlzLndyYXBSR0IpLCBlLm1hcCA9IHRoaXMubWFwLCBlLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcCwgZS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAsIGUuZW52TWFwID0gdGhpcy5lbnZNYXAsIGUuY29tYmluZSA9IHRoaXMuY29tYmluZSwgZS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eSwgZS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbywgZS5mb2cgPSB0aGlzLmZvZywgZS5zaGFkaW5nID0gdGhpcy5zaGFkaW5nLCBlLnNoYWRlcklEID0gdGhpcy5zaGFkZXJJRCwgZS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9ycywgZS5za2lubmluZyA9IHRoaXMuc2tpbm5pbmcsIGUubW9ycGhUYXJnZXRzID0gdGhpcy5tb3JwaFRhcmdldHMsIGUubW9ycGhOb3JtYWxzID0gdGhpcy5tb3JwaE5vcm1hbHMsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfTWVzaExhbWJlcnRNYXRlcmlhbDsKICAgICAgICAgIH0oX01hdGVyaWFsKTsKICAgICAgICAgIHZhciBfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01lc2hMYW1iZXJ0TWF0ZXJpYWwyKSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCwgX01lc2hMYW1iZXJ0TWF0ZXJpYWwyKTsKICAgICAgICAgICAgdmFyIF9zdXBlcjE1ID0gX2NyZWF0ZVN1cGVyKF9NZXNoRG91YmxlTGFtYmVydE1hdGVyaWFsKTsKICAgICAgICAgICAgZnVuY3Rpb24gX01lc2hEb3VibGVMYW1iZXJ0TWF0ZXJpYWwoZSkgewogICAgICAgICAgICAgIHZhciBfdGhpczE1OwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCk7CiAgICAgICAgICAgICAgX3RoaXMxNSA9IF9zdXBlcjE1LmNhbGwodGhpcywgZSksIF90aGlzMTUuc2hhZGVySUQgPSAibGFtYmVydGRvdWJsZSIsIF90aGlzMTUuc2lkZSA9IG8sIF90aGlzMTUub3V0bGluZSA9ICExOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczE1OwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCwgW3sKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKF9NZXNoRG91YmxlTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZSksICJjbG9uZSIsIHRoaXMpLmNhbGwodGhpcywgZSksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfTWVzaERvdWJsZUxhbWJlcnRNYXRlcmlhbDsKICAgICAgICAgIH0oX01lc2hMYW1iZXJ0TWF0ZXJpYWwpOwogICAgICAgICAgdmFyIF9NZXNoT3V0bGluZU1hdGVyaWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWF0ZXJpYWw2KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfTWVzaE91dGxpbmVNYXRlcmlhbCwgX01hdGVyaWFsNik7CiAgICAgICAgICAgIHZhciBfc3VwZXIxNiA9IF9jcmVhdGVTdXBlcihfTWVzaE91dGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9NZXNoT3V0bGluZU1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMxNjsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01lc2hPdXRsaW5lTWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMTYgPSBfc3VwZXIxNi5jYWxsKHRoaXMpLCBlID0gZSB8fCB7fSwgX3RoaXMxNi5mb2cgPSAhMCwgX3RoaXMxNi5zaGFkZXJJRCA9ICJvdXRsaW5lIiwgX3RoaXMxNi53aXJlZnJhbWUgPSAhMSwgX3RoaXMxNi5vdXRsaW5lQ29sb3IgPSBlLmNvbG9yIHx8IG5ldyBBLkNvbG9yKDAsIDAsIDApLCBfdGhpczE2Lm91dGxpbmVXaWR0aCA9IGUud2lkdGggfHwgLjEsIF90aGlzMTYub3V0bGluZVB1c2hiYWNrID0gZS5wdXNoYmFjayB8fCAxOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczE2OwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfTWVzaE91dGxpbmVNYXRlcmlhbCwgW3sKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBfTWVzaE91dGxpbmVNYXRlcmlhbCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKF9NZXNoT3V0bGluZU1hdGVyaWFsLnByb3RvdHlwZSksICJjbG9uZSIsIHRoaXMpLmNhbGwodGhpcywgZSksIGUuZm9nID0gdGhpcy5mb2csIGUuc2hhZGVySUQgPSB0aGlzLnNoYWRlcklELCBlLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX01lc2hPdXRsaW5lTWF0ZXJpYWw7CiAgICAgICAgICB9KF9NYXRlcmlhbCk7CiAgICAgICAgICB2YXIgX1NwaGVyZUltcG9zdGVyTWF0ZXJpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9JbXBvc3Rlck1hdGVyaWFsMikgewogICAgICAgICAgICBfaW5oZXJpdHMoX1NwaGVyZUltcG9zdGVyTWF0ZXJpYWwsIF9JbXBvc3Rlck1hdGVyaWFsMik7CiAgICAgICAgICAgIHZhciBfc3VwZXIxNyA9IF9jcmVhdGVTdXBlcihfU3BoZXJlSW1wb3N0ZXJNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TcGhlcmVJbXBvc3Rlck1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMxNzsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1NwaGVyZUltcG9zdGVyTWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMTcgPSBfc3VwZXIxNy5jYWxsKHRoaXMsIGUpLCBfdGhpczE3LnNoYWRlcklEID0gInNwaGVyZWltcG9zdGVyIiwgX3RoaXMxNy5zZXRWYWx1ZXMoZSk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9TcGhlcmVJbXBvc3Rlck1hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9TcGhlcmVJbXBvc3Rlck1hdGVyaWFsKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoX1NwaGVyZUltcG9zdGVyTWF0ZXJpYWwucHJvdG90eXBlKSwgImNsb25lIiwgdGhpcykuY2FsbCh0aGlzLCBlKSwgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9TcGhlcmVJbXBvc3Rlck1hdGVyaWFsOwogICAgICAgICAgfShfSW1wb3N0ZXJNYXRlcmlhbCk7CiAgICAgICAgICB2YXIgX1NwaGVyZUltcG9zdGVyT3V0bGluZU1hdGVyaWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfSW1wb3N0ZXJNYXRlcmlhbDMpIHsKICAgICAgICAgICAgX2luaGVyaXRzKF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCwgX0ltcG9zdGVyTWF0ZXJpYWwzKTsKICAgICAgICAgICAgdmFyIF9zdXBlcjE4ID0gX2NyZWF0ZVN1cGVyKF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbChlKSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzMTg7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgICAgX3RoaXMxOCA9IF9zdXBlcjE4LmNhbGwodGhpcywgZSksIGUgPSBlIHx8IHt9LCBfdGhpczE4LnNoYWRlcklEID0gInNwaGVyZWltcG9zdGVyb3V0bGluZSIsIF90aGlzMTgub3V0bGluZUNvbG9yID0gZS5jb2xvciB8fCBuZXcgQS5Db2xvcigwLCAwLCAwKSwgX3RoaXMxOC5vdXRsaW5lV2lkdGggPSBlLndpZHRoIHx8IC4xLCBfdGhpczE4Lm91dGxpbmVQdXNoYmFjayA9IGUucHVzaGJhY2sgfHwgMSwgX3RoaXMxOC5zZXRWYWx1ZXMoZSk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCwgW3sKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBfU3BoZXJlSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfU3BoZXJlSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwucHJvdG90eXBlKSwgImNsb25lIiwgdGhpcykuY2FsbCh0aGlzLCBlKSwgZS5vdXRsaW5lQ29sb3IgPSB0aGlzLm91dGxpbmVDb2xvciwgZS5vdXRsaW5lV2lkdGggPSB0aGlzLm91dGxpbmVXaWR0aCwgZS5vdXRsaW5lUHVzaGJhY2sgPSB0aGlzLm91dGxpbmVQdXNoYmFjaywgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9TcGhlcmVJbXBvc3Rlck91dGxpbmVNYXRlcmlhbDsKICAgICAgICAgIH0oX0ltcG9zdGVyTWF0ZXJpYWwpOwogICAgICAgICAgdmFyIF9TcHJpdGVNYXRlcmlhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hdGVyaWFsNykgewogICAgICAgICAgICBfaW5oZXJpdHMoX1Nwcml0ZU1hdGVyaWFsLCBfTWF0ZXJpYWw3KTsKICAgICAgICAgICAgdmFyIF9zdXBlcjE5ID0gX2NyZWF0ZVN1cGVyKF9TcHJpdGVNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TcHJpdGVNYXRlcmlhbChlKSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzMTk7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9TcHJpdGVNYXRlcmlhbCk7CiAgICAgICAgICAgICAgX3RoaXMxOSA9IF9zdXBlcjE5LmNhbGwodGhpcyksIF90aGlzMTkuY29sb3IgPSBuZXcgQS5Db2xvcigxNjc3NzIxNSksIF90aGlzMTkubWFwID0gbmV3IF9UZXh0dXJlKCksIF90aGlzMTkudXNlU2NyZWVuQ29vcmRpbmF0ZXMgPSAhMCwgX3RoaXMxOS5mb2cgPSAhMSwgX3RoaXMxOS51dk9mZnNldCA9IG5ldyBoLlZlY3RvcjIoMCwgMCksIF90aGlzMTkudXZTY2FsZSA9IG5ldyBoLlZlY3RvcjIoMSwgMSksIF90aGlzMTkuZGVwdGhUZXN0ID0gIV90aGlzMTkudXNlU2NyZWVuQ29vcmRpbmF0ZXMsIF90aGlzMTkuc2l6ZUF0dGVudWF0aW9uID0gIV90aGlzMTkudXNlU2NyZWVuQ29vcmRpbmF0ZXMsIF90aGlzMTkuc2NyZWVuT2Zmc2V0ID0gX3RoaXMxOS5zY3JlZW5PZmZzZXQsIF90aGlzMTkuc2NhbGVCeVZpZXdQb3J0ID0gIV90aGlzMTkuc2l6ZUF0dGVudWF0aW9uLCBfdGhpczE5LmFsaWdubWVudCA9IGMuY2VudGVyLmNsb25lKCksIF90aGlzMTkuc2V0VmFsdWVzKGUpLCB2b2lkIDAgPT09IChlID0gZSB8fCB7fSkuZGVwdGhUZXN0ICYmIChfdGhpczE5LmRlcHRoVGVzdCA9ICFfdGhpczE5LnVzZVNjcmVlbkNvb3JkaW5hdGVzKSwgdm9pZCAwID09PSBlLnNpemVBdHRlbnVhdGlvbiAmJiAoX3RoaXMxOS5zaXplQXR0ZW51YXRpb24gPSAhX3RoaXMxOS51c2VTY3JlZW5Db29yZGluYXRlcyksIHZvaWQgMCA9PT0gZS5zY2FsZUJ5Vmlld1BvcnQgJiYgKF90aGlzMTkuc2NhbGVCeVZpZXdQb3J0ID0gIV90aGlzMTkuc2l6ZUF0dGVudWF0aW9uKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxOTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1Nwcml0ZU1hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9TcHJpdGVNYXRlcmlhbCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKF9TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUpLCAiY2xvbmUiLCB0aGlzKS5jYWxsKHRoaXMsIGUpLCBlLmNvbG9yLmNvcHkodGhpcy5jb2xvciksIGUubWFwID0gdGhpcy5tYXAsIGUudXNlU2NyZWVuQ29vcmRpbmF0ZXMgPSB0aGlzLnVzZVNjcmVlbkNvb3JkaW5hdGVzLCBlLnNjcmVlbk9mZnNldCA9IHRoaXMuc2NyZWVuT2Zmc2V0LCBlLnNpemVBdHRlbnVhdGlvbiA9IHRoaXMuc2l6ZUF0dGVudWF0aW9uLCBlLnNjYWxlQnlWaWV3cG9ydCA9IHRoaXMuc2NhbGVCeVZpZXdQb3J0LCBlLmFsaWdubWVudC5jb3B5KHRoaXMuYWxpZ25tZW50KSwgZS51dk9mZnNldC5jb3B5KHRoaXMudXZPZmZzZXQpLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1Nwcml0ZU1hdGVyaWFsOwogICAgICAgICAgfShfTWF0ZXJpYWwpOwogICAgICAgICAgdmFyIF9TdGlja0ltcG9zdGVyTWF0ZXJpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9JbXBvc3Rlck1hdGVyaWFsNCkgewogICAgICAgICAgICBfaW5oZXJpdHMoX1N0aWNrSW1wb3N0ZXJNYXRlcmlhbCwgX0ltcG9zdGVyTWF0ZXJpYWw0KTsKICAgICAgICAgICAgdmFyIF9zdXBlcjIwID0gX2NyZWF0ZVN1cGVyKF9TdGlja0ltcG9zdGVyTWF0ZXJpYWwpOwogICAgICAgICAgICBmdW5jdGlvbiBfU3RpY2tJbXBvc3Rlck1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMyMDsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1N0aWNrSW1wb3N0ZXJNYXRlcmlhbCk7CiAgICAgICAgICAgICAgX3RoaXMyMCA9IF9zdXBlcjIwLmNhbGwodGhpcywgZSksIF90aGlzMjAuc2hhZGVySUQgPSAic3RpY2tpbXBvc3RlciIsIF90aGlzMjAuc2V0VmFsdWVzKGUpOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczIwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfU3RpY2tJbXBvc3Rlck1hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9TdGlja0ltcG9zdGVyTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfU3RpY2tJbXBvc3Rlck1hdGVyaWFsLnByb3RvdHlwZSksICJjbG9uZSIsIHRoaXMpLmNhbGwodGhpcywgZSksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfU3RpY2tJbXBvc3Rlck1hdGVyaWFsOwogICAgICAgICAgfShfSW1wb3N0ZXJNYXRlcmlhbCk7CiAgICAgICAgICB2YXIgX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9JbXBvc3Rlck1hdGVyaWFsNSkgewogICAgICAgICAgICBfaW5oZXJpdHMoX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwsIF9JbXBvc3Rlck1hdGVyaWFsNSk7CiAgICAgICAgICAgIHZhciBfc3VwZXIyMSA9IF9jcmVhdGVTdXBlcihfU3RpY2tJbXBvc3Rlck91dGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TdGlja0ltcG9zdGVyT3V0bGluZU1hdGVyaWFsKCkgewogICAgICAgICAgICAgIHZhciBfdGhpczIxOwogICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwpOwogICAgICAgICAgICAgIF90aGlzMjEgPSBfc3VwZXIyMS5jYWxsKHRoaXMsIGUpLCBfdGhpczIxLnNoYWRlcklEID0gInN0aWNraW1wb3N0ZXJvdXRsaW5lIiwgX3RoaXMyMS5vdXRsaW5lQ29sb3IgPSBuZXcgQS5Db2xvcigwLCAwLCAwKSwgX3RoaXMyMS5vdXRsaW5lV2lkdGggPSAuMSwgX3RoaXMyMS5vdXRsaW5lUHVzaGJhY2sgPSAxLCBlLmNvbG9yICYmIChfdGhpczIxLm91dGxpbmVDb2xvciA9IGUuY29sb3IpLCBlLndpZHRoICYmIChfdGhpczIxLm91dGxpbmVXaWR0aCA9IGUud2lkdGgpLCBlLnB1c2hiYWNrICYmIChfdGhpczIxLm91dGxpbmVQdXNoYmFjayA9IGUucHVzaGJhY2spLCBfdGhpczIxLnNldFZhbHVlcyhlKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwsIFt7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfU3RpY2tJbXBvc3Rlck91dGxpbmVNYXRlcmlhbC5wcm90b3R5cGUpLCAiY2xvbmUiLCB0aGlzKS5jYWxsKHRoaXMsIGUpLCBlLm91dGxpbmVDb2xvciA9IHRoaXMub3V0bGluZUNvbG9yLCBlLm91dGxpbmVXaWR0aCA9IHRoaXMub3V0bGluZVdpZHRoLCBlLm91dGxpbmVQdXNoYmFjayA9IHRoaXMub3V0bGluZVB1c2hiYWNrLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWw7CiAgICAgICAgICB9KF9JbXBvc3Rlck1hdGVyaWFsKTsKICAgICAgICAgIHZhciBfVm9sdW1ldHJpY01hdGVyaWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWF0ZXJpYWw4KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfVm9sdW1ldHJpY01hdGVyaWFsLCBfTWF0ZXJpYWw4KTsKICAgICAgICAgICAgdmFyIF9zdXBlcjIyID0gX2NyZWF0ZVN1cGVyKF9Wb2x1bWV0cmljTWF0ZXJpYWwpOwogICAgICAgICAgICBmdW5jdGlvbiBfVm9sdW1ldHJpY01hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMyMjsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1ZvbHVtZXRyaWNNYXRlcmlhbCk7CiAgICAgICAgICAgICAgX3RoaXMyMiA9IF9zdXBlcjIyLmNhbGwodGhpcyksIF90aGlzMjIudHJhbnNwYXJlbnQgPSAhMSwgX3RoaXMyMi52b2x1bWV0cmljID0gITAsIF90aGlzMjIuY29sb3IgPSBuZXcgQS5Db2xvcigxNjc3NzIxNSksIF90aGlzMjIudHJhbnNmZXJmbiA9IG51bGwsIF90aGlzMjIubWFwID0gdm9pZCAwLCBfdGhpczIyLmV4dGVudCA9IFtdLCBfdGhpczIyLm1heGRlcHRoID0gMTAwLCBfdGhpczIyLnVuaXQgPSAwLCBfdGhpczIyLnRleG1hdHJpeCA9IG51bGwsIF90aGlzMjIudHJhbnNmZXJtaW4gPSAtMSwgX3RoaXMyMi50cmFuc2Zlcm1heCA9IDEsIF90aGlzMjIuc3Vic2FtcGxlcyA9IDUsIF90aGlzMjIuc2hhZGVySUQgPSAidm9sdW1ldHJpYyIsIF90aGlzMjIuc2lkZSA9IGEsIF90aGlzMjIuc2V0VmFsdWVzKGUpOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczIyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfVm9sdW1ldHJpY01hdGVyaWFsLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9Wb2x1bWV0cmljTWF0ZXJpYWwoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihfVm9sdW1ldHJpY01hdGVyaWFsLnByb3RvdHlwZSksICJjbG9uZSIsIHRoaXMpLmNhbGwodGhpcywgZSksIGUudHJhbnNwYXJlbnQgPSB0aGlzLnRyYW5zcGFyZW50LCBlLnZvbHVtZXRyaWMgPSB0aGlzLnZvbHVtZXRyaWMsIGUuY29sb3IgPSB0aGlzLmNvbG9yLCBlLnRyYW5zZmVyZm4gPSB0aGlzLnRyYW5zZmVyZm4sIGUubWFwID0gdGhpcy5tYXAsIGUuZXh0ZW50ID0gdGhpcy5leHRlbnQsIGUubWF4ZGVwdGggPSB0aGlzLm1heGRlcHRoLCBlLnVuaXQgPSB0aGlzLnVuaXQsIGUudGV4bWF0cml4ID0gdGhpcy50ZXhtYXRyaXgsIGUudHJhbnNmZXJtaW4gPSB0aGlzLnRyYW5zZmVybWluLCBlLnRyYW5zZmVybWF4ID0gdGhpcy50cmFuc2Zlcm1heCwgZS5zdWJzYW1wbGVzID0gdGhpcy5zdWJzYW1wbGVzLCBlLnNoYWRlcklEID0gdGhpcy5zaGFkZXJJRCwgZS5zaWRlID0gdGhpcy5zaWRlLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1ZvbHVtZXRyaWNNYXRlcmlhbDsKICAgICAgICAgIH0oX01hdGVyaWFsKTsKICAgICAgICAgIHZhciBqOwogICAgICAgICAgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGVbZS5MaW5lU3RyaXAgPSAwXSA9ICJMaW5lU3RyaXAiLCBlW2UuTGluZVBpZWNlcyA9IDFdID0gIkxpbmVQaWVjZXMiOwogICAgICAgICAgfShqIHx8IChqID0ge30pKTsKICAgICAgICAgIHZhciBfTGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX09iamVjdDNENCkgewogICAgICAgICAgICBfaW5oZXJpdHMoX0xpbmUsIF9PYmplY3QzRDQpOwogICAgICAgICAgICB2YXIgX3N1cGVyMjMgPSBfY3JlYXRlU3VwZXIoX0xpbmUpOwogICAgICAgICAgICBmdW5jdGlvbiBfTGluZShlKSB7CiAgICAgICAgICAgICAgdmFyIF90aGlzMjM7CiAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5ldyBfTGluZUJhc2ljTWF0ZXJpYWwoewogICAgICAgICAgICAgICAgY29sb3I6IDE2Nzc3MjE1ICogTWF0aC5yYW5kb20oKQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBqLkxpbmVTdHJpcDsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0xpbmUpOwogICAgICAgICAgICAgIF90aGlzMjMgPSBfc3VwZXIyMy5jYWxsKHRoaXMpLCBfdGhpczIzLmdlb21ldHJ5ID0gZSwgX3RoaXMyMy5tYXRlcmlhbCA9IHQsIF90aGlzMjMudHlwZSA9IHI7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMjM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9MaW5lLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9MaW5lKHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwsIHRoaXMudHlwZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoX0xpbmUucHJvdG90eXBlKSwgImNsb25lIiwgdGhpcykuY2FsbCh0aGlzLCBlKSwgZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9MaW5lOwogICAgICAgICAgfShfT2JqZWN0M0QpOwogICAgICAgICAgdmFyIF9NZXNoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfT2JqZWN0M0Q1KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfTWVzaCwgX09iamVjdDNENSk7CiAgICAgICAgICAgIHZhciBfc3VwZXIyNCA9IF9jcmVhdGVTdXBlcihfTWVzaCk7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9NZXNoKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgX3RoaXMyNDsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX01lc2gpOwogICAgICAgICAgICAgIF90aGlzMjQgPSBfc3VwZXIyNC5jYWxsKHRoaXMpLCBfdGhpczI0Lmdlb21ldHJ5ID0gZSwgX3RoaXMyNC5tYXRlcmlhbCA9IHQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMjQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9NZXNoLCBbewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG5ldyBfTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKSksIF9nZXQoX2dldFByb3RvdHlwZU9mKF9NZXNoLnByb3RvdHlwZSksICJjbG9uZSIsIHRoaXMpLmNhbGwodGhpcywgZSksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfTWVzaDsKICAgICAgICAgIH0oX09iamVjdDNEKTsKICAgICAgICAgIHZhciBfU3ByaXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfT2JqZWN0M0Q2KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfU3ByaXRlLCBfT2JqZWN0M0Q2KTsKICAgICAgICAgICAgdmFyIF9zdXBlcjI1ID0gX2NyZWF0ZVN1cGVyKF9TcHJpdGUpOwogICAgICAgICAgICBmdW5jdGlvbiBfU3ByaXRlKCkgewogICAgICAgICAgICAgIHZhciBfdGhpczI1OwogICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgX1Nwcml0ZU1hdGVyaWFsKCk7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9TcHJpdGUpOwogICAgICAgICAgICAgIF90aGlzMjUgPSBfc3VwZXIyNS5jYWxsKHRoaXMpLCBfdGhpczI1Lm1hdGVyaWFsID0gZSwgX3RoaXMyNS5yb3RhdGlvbjNkID0gX3RoaXMyNS5yb3RhdGlvbiwgX3RoaXMyNS5yb3RhdGlvbiA9IDA7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMjU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9TcHJpdGUsIFt7CiAgICAgICAgICAgICAga2V5OiAidXBkYXRlTWF0cml4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlTWF0cml4KCkgewogICAgICAgICAgICAgICAgdGhpcy5tYXRyaXguc2V0UG9zaXRpb24odGhpcy5wb3NpdGlvbiksIHRoaXMucm90YXRpb24zZC5zZXQoMCwgMCwgdGhpcy5yb3RhdGlvbiksIHRoaXMubWF0cml4LnNldFJvdGF0aW9uRnJvbUV1bGVyKHRoaXMucm90YXRpb24zZCksIDEgPT09IHRoaXMuc2NhbGUueCAmJiAxID09PSB0aGlzLnNjYWxlLnkgfHwgdGhpcy5tYXRyaXguc2NhbGUodGhpcy5zY2FsZSksIHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9ICEwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IF9TcHJpdGUodGhpcy5tYXRlcmlhbCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX09iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsIGUpLCBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1Nwcml0ZTsKICAgICAgICAgIH0oX09iamVjdDNEKTsKICAgICAgICAgIHZhciBIID0gewogICAgICAgICAgICAgIG9wYWNpdHk6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImMiLAogICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBBLkNvbG9yKDEsIDEsIDEpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dOZWFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nRmFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMmUzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBXID0gewogICAgICAgICAgICAgIHZlcnRleFNoYWRlcjogInVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcblxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcblxudmFyeWluZyB2ZWMzIHZDb2xvcjtcblxudm9pZCBtYWluKCkge1xuXG4gICAgdkNvbG9yID0gY29sb3I7XG4gICAgdmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5cbn0iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiAidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcbnZhcnlpbmcgdmVjMyB2Q29sb3I7XG4vL0RFRklORUZSQUdDT0xPUlxudm9pZCBtYWluKCkge1xuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZDb2xvciwgb3BhY2l0eSApO1xuICAgIGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLnogLyBnbF9GcmFnQ29vcmQudztcbiAgICBmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGRlcHRoICk7XG4gICAgZ2xfRnJhZ0NvbG9yID0gbWl4KCBnbF9GcmFnQ29sb3IsIHZlYzQoIGZvZ0NvbG9yLCBnbF9GcmFnQ29sb3IudyApLCBmb2dGYWN0b3IgKTtcbn0iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBICiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHEgPSB7CiAgICAgICAgICAgICAgb3BhY2l0eTogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0NvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiYyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEEuQ29sb3IoMSwgMSwgMSkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ05lYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dGYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAyZTMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHRDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImZ2IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBbXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvbjogewogICAgICAgICAgICAgICAgdHlwZTogImZ2IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBbXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogInVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcblxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xudmFyeWluZyB2ZWMzIHZDb2xvcjtcbi8vREVGSU5FRlJBR0NPTE9SXG5cbnZvaWQgbWFpbigpIHtcblxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMgKCAxLjAgKSwgb3BhY2l0eSApO1xuXG4gICAgI2lmbmRlZiBXSVJFRlJBTUVcbiAgICBnbF9GcmFnQ29sb3IueHl6ICo9IHZMaWdodEZyb250O1xuICAgICNlbmRpZlxuXG4gICAgZ2xfRnJhZ0NvbG9yID0gZ2xfRnJhZ0NvbG9yICogdmVjNCggdkNvbG9yLCBvcGFjaXR5ICk7XG4gICAgZmxvYXQgZGVwdGggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53O1xuXG4gICAgZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBkZXB0aCApO1xuXG4gICAgZ2xfRnJhZ0NvbG9yID0gbWl4KCBnbF9GcmFnQ29sb3IsIHZlYzQoIGZvZ0NvbG9yLCBnbF9GcmFnQ29sb3IudyApLCBmb2dGYWN0b3IgKTtcblxufVxuXG5cbiIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAiXG5cbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIDEgXTtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyAxIF07XG5cbmF0dHJpYnV0ZSB2ZWMzIG9mZnNldDtcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xuYXR0cmlidXRlIHZlYzMgY29sb3I7XG5hdHRyaWJ1dGUgZmxvYXQgcmFkaXVzO1xuXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xuXG52b2lkIG1haW4oKSB7XG5cbiAgICB2Q29sb3IgPSBjb2xvcjtcblxuICAgIHZlYzMgb2JqZWN0Tm9ybWFsID0gbm9ybWFsO1xuICAgIHZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiBvYmplY3ROb3JtYWw7XG4gICAgdmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24gKiByYWRpdXMgKyBvZmZzZXQsIDEuMCApO1xuXG4gICAgdkxpZ2h0RnJvbnQgPSB2ZWMzKCAwLjAgKTtcblxuICAgIHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xuXG4gICAgdmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIDAgXSwgMC4wICk7XG4gICAgdmVjMyBkaXJWZWN0b3IgPSBub3JtYWxpemUoIGxEaXJlY3Rpb24ueHl6ICk7XG4gICAgZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggdHJhbnNmb3JtZWROb3JtYWwsIGRpclZlY3RvciApO1xuICAgIHZlYzMgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcblxuICAgIHZMaWdodEZyb250ICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgMCBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZztcblxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG59XG5cbiIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdW5pZm9ybXM6IHEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWiA9IHsKICAgICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nQ29sb3I6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJjIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQS5Db2xvcigxLCAxLCAxKQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nTmVhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0ZhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDJlMwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodENvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZnYiLAogICAgICAgICAgICAgICAgdmFsdWU6IFtdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZnYiLAogICAgICAgICAgICAgICAgdmFsdWU6IFtdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBYID0gewogICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiAidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG5cbnVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcbnVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcbnVuaWZvcm0gZmxvYXQgZm9nRmFyO1xuXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xuLy9ERUZJTkVGUkFHQ09MT1Jcblxudm9pZCBtYWluKCkge1xuXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyAoIDEuMCApLCBvcGFjaXR5ICk7XG5cbiAgICAjaWZuZGVmIFdJUkVGUkFNRVxuICAgIGdsX0ZyYWdDb2xvci54eXogKj0gdkxpZ2h0RnJvbnQ7XG4gICAgI2VuZGlmXG5cbiAgICBnbF9GcmFnQ29sb3IgPSBnbF9GcmFnQ29sb3IgKiB2ZWM0KCB2Q29sb3IsIG9wYWNpdHkgKTtcbiAgICBmbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XG5cbiAgICBmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGRlcHRoICk7XG5cbiAgICBnbF9GcmFnQ29sb3IgPSBtaXgoIGdsX0ZyYWdDb2xvciwgdmVjNCggZm9nQ29sb3IsIGdsX0ZyYWdDb2xvci53ICksIGZvZ0ZhY3RvciApO1xuXG59Ii5yZXBsYWNlKCIjZGVmaW5lIEdMU0xJRlkgMSIsICIiKSwKICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICJcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIDEgXTtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyAxIF07XG5cbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xuYXR0cmlidXRlIHZlYzMgY29sb3I7XG5cbnZhcnlpbmcgdmVjMyB2Q29sb3I7XG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XG5cbnZvaWQgbWFpbigpIHtcblxuICAgIHZDb2xvciA9IGNvbG9yO1xuXG4gICAgdmVjMyBvYmplY3ROb3JtYWwgPSBub3JtYWw7XG4gICAgdmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdE5vcm1hbDtcbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cbiAgICB2TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xuXG4gICAgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XG5cbiAgICB2ZWM0IGxEaXJlY3Rpb24gPSB2aWV3TWF0cml4ICogdmVjNCggZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgMCBdLCAwLjAgKTtcbiAgICB2ZWMzIGRpclZlY3RvciA9IG5vcm1hbGl6ZSggbERpcmVjdGlvbi54eXogKTtcbiAgICBmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCB0cmFuc2Zvcm1lZE5vcm1hbCwgZGlyVmVjdG9yICk7XG4gICAgdmVjMyBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1xuXG4gICAgdkxpZ2h0RnJvbnQgKz0gZGlyZWN0aW9uYWxMaWdodENvbG9yWyAwIF0gKiBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nO1xuXG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcbn0iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBaCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEsgPSB7CiAgICAgICAgICAgICAgb3BhY2l0eTogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0NvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiYyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEEuQ29sb3IoMSwgMSwgMSkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ05lYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dGYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAyZTMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHRDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImZ2IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBbXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvbjogewogICAgICAgICAgICAgICAgdHlwZTogImZ2IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBbXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgJCA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogIlxuXG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcblxudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xudW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xudW5pZm9ybSBmbG9hdCBmb2dGYXI7XG5cbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcbnZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xuXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xuLy9ERUZJTkVGUkFHQ09MT1Jcblxudm9pZCBtYWluKCkge1xuXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyAoIDEuMCApLCBvcGFjaXR5ICk7XG5cbiAgICAjaWZuZGVmIFdJUkVGUkFNRVxuICAgIGlmICggZ2xfRnJvbnRGYWNpbmcgKVxuICAgICAgIGdsX0ZyYWdDb2xvci54eXogKj0gdkxpZ2h0RnJvbnQ7XG4gICAgZWxzZVxuICAgICAgIGdsX0ZyYWdDb2xvci54eXogKj0gdkxpZ2h0QmFjaztcbiAgICAjZW5kaWZcblxuICAgIGdsX0ZyYWdDb2xvciA9IGdsX0ZyYWdDb2xvciAqIHZlYzQoIHZDb2xvciwgb3BhY2l0eSApO1xuICAgIGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLnogLyBnbF9GcmFnQ29vcmQudztcblxuICAgIGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcblxuICAgIGdsX0ZyYWdDb2xvciA9IG1peCggZ2xfRnJhZ0NvbG9yLCB2ZWM0KCBmb2dDb2xvciwgZ2xfRnJhZ0NvbG9yLncgKSwgZm9nRmFjdG9yICk7XG5cbn1cblxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHZlcnRleFNoYWRlcjogIlxuXG51bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcbnVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XG51bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodENvbG9yWyAxIF07XG51bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgMSBdO1xuXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcbmF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcbmF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xuXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xudmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XG5cbnZvaWQgbWFpbigpIHtcblxuICAgIHZDb2xvciA9IGNvbG9yO1xuXG4gICAgdmVjMyBvYmplY3ROb3JtYWwgPSBub3JtYWw7XG4gICAgdmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdE5vcm1hbDtcbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cbiAgICB2TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xuICAgIHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcblxuICAgIHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xuXG4gICAgdmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIDAgXSwgMC4wICk7XG4gICAgdmVjMyBkaXJWZWN0b3IgPSBub3JtYWxpemUoIGxEaXJlY3Rpb24ueHl6ICk7XG4gICAgZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggdHJhbnNmb3JtZWROb3JtYWwsIGRpclZlY3RvciApO1xuICAgIHZlYzMgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcbiAgICB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdCYWNrID0gdmVjMyggbWF4KCAtZG90UHJvZHVjdCwgMC4wICkgKTtcblxuICAgIHZMaWdodEZyb250ICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgMCBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZztcbiAgICB2TGlnaHRCYWNrICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgMCBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0JhY2s7XG5cbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xufVxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBLCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFEgPSB7CiAgICAgICAgICAgICAgb3BhY2l0eTogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG91dGxpbmVDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImMiLAogICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBBLkNvbG9yKDAsIDAsIDApCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImMiLAogICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBBLkNvbG9yKDEsIDEsIDEpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dOZWFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nRmFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMmUzCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvdXRsaW5lV2lkdGg6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAuMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb3V0bGluZVB1c2hiYWNrOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgSiA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogIlxuXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIHZlYzMgb3V0bGluZUNvbG9yO1xudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xudW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xudW5pZm9ybSBmbG9hdCBmb2dGYXI7XG4vL0RFRklORUZSQUdDT0xPUlxuXG52b2lkIG1haW4oKSB7XG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0bGluZUNvbG9yLCAxICk7XG59XG5cblxuIi5yZXBsYWNlKCIjZGVmaW5lIEdMU0xJRlkgMSIsICIiKSwKICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICJcblxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xudW5pZm9ybSBmbG9hdCBvdXRsaW5lV2lkdGg7XG51bmlmb3JtIGZsb2F0IG91dGxpbmVQdXNoYmFjaztcblxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcblxudm9pZCBtYWluKCkge1xuXG4gICAgdmVjNCBub3JtID0gbW9kZWxWaWV3TWF0cml4KnZlYzQobm9ybWFsaXplKG5vcm1hbCksMC4wKTtcbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG4gICAgbXZQb3NpdGlvbi54eSArPSBub3JtLnh5Km91dGxpbmVXaWR0aDtcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xuICAgIG12UG9zaXRpb24ueiAtPSBvdXRsaW5lUHVzaGJhY2s7IC8vZ28gYmFja3dhcmRzIGluIG1vZGVsIHNwYWNlXG4gICAgdmVjNCBwdXNocG9zID0gcHJvamVjdGlvbk1hdHJpeCptdlBvc2l0aW9uOyAvL3Byb2plY3QgdG8gZ2V0IHogaW4gcHJvamVjdGlvbiBzcGFjZSwgSSdtIHByb2JhYmx5IG1pc3Npbmcgc29tZSBzaW1wbGUgbWF0aCB0byBkbyB0aGUgc2FtZSB0aGluZy4uXG4gICAgZ2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLncqcHVzaHBvcy56L3B1c2hwb3Mudztcbn1cblxuIi5yZXBsYWNlKCIjZGVmaW5lIEdMU0xJRlkgMSIsICIiKSwKICAgICAgICAgICAgICB1bmlmb3JtczogUQogICAgICAgICAgICB9LAogICAgICAgICAgICBlZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogInVuaWZvcm0gc2FtcGxlcjJEIGNvbG9ybWFwO1xudmFyeWluZyBoaWdocCB2ZWMyIHZUZXhDb29yZHM7XG51bmlmb3JtIHZlYzIgZGltZW5zaW9ucztcbi8vREVGSU5FRlJBR0NPTE9SXG52b2lkIG1haW4gKHZvaWQpIHtcbiAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChjb2xvcm1hcCwgdlRleENvb3Jkcyk7XG59XG4gICAgICAgICIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAiYXR0cmlidXRlIHZlYzIgdmVydGV4UG9zaXRpb247XG52YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleENvb3JkcztcbmNvbnN0IHZlYzIgc2NhbGUgPSB2ZWMyKDAuNSwgMC41KTtcblxudm9pZCBtYWluKCkge1xuICAgdlRleENvb3JkcyAgPSB2ZXJ0ZXhQb3NpdGlvbiAqIHNjYWxlICsgc2NhbGU7IC8vIHNjYWxlIHZlcnRleCBhdHRyaWJ1dGUgdG8gWzAsMV0gcmFuZ2VcbiAgIGdsX1Bvc2l0aW9uID0gdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMC4wLCAxLjApO1xufVxuICAgICAgICAiLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiB7fQogICAgICAgICAgICB9LAogICAgICAgICAgICB0ZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogInVuaWZvcm0gc2FtcGxlcjJEIGNvbG9ybWFwO1xudmFyeWluZyBoaWdocCB2ZWMyIHZUZXhDb29yZHM7XG51bmlmb3JtIHZlYzIgZGltZW5zaW9ucztcblxuLy8gQmFzaWMgRlhBQSBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiB0aGUgY29kZSBvbiBnZWVrczNkLmNvbSBcbiNkZWZpbmUgRlhBQV9SRURVQ0VfTUlOICgxLjAvIDEyOC4wKVxuI2RlZmluZSBGWEFBX1JFRFVDRV9NVUwgKDEuMCAvIDguMClcbiNkZWZpbmUgRlhBQV9TUEFOX01BWCA4LjBcblxudmVjNCBhcHBseUZYQUEodmVjMiBmcmFnQ29vcmQsIHNhbXBsZXIyRCB0ZXgpXG57XG4gICAgdmVjNCBjb2xvcjtcbiAgICB2ZWMyIGludmVyc2VWUCA9IHZlYzIoMS4wIC8gZGltZW5zaW9ucy54LCAxLjAgLyBkaW1lbnNpb25zLnkpO1xuICAgIHZlYzMgcmdiTlcgPSB0ZXh0dXJlMkQodGV4LCBmcmFnQ29vcmQgKyB2ZWMyKC0xLjAsIC0xLjApICogaW52ZXJzZVZQKS54eXo7XG4gICAgdmVjMyByZ2JORSA9IHRleHR1cmUyRCh0ZXgsIGZyYWdDb29yZCArIHZlYzIoMS4wLCAtMS4wKSAqIGludmVyc2VWUCkueHl6O1xuICAgIHZlYzMgcmdiU1cgPSB0ZXh0dXJlMkQodGV4LCBmcmFnQ29vcmQgKyB2ZWMyKC0xLjAsIDEuMCkgKiBpbnZlcnNlVlApLnh5ejtcbiAgICB2ZWMzIHJnYlNFID0gdGV4dHVyZTJEKHRleCwgZnJhZ0Nvb3JkICsgdmVjMigxLjAsIDEuMCkgKiBpbnZlcnNlVlApLnh5ejtcbiAgICB2ZWMzIHJnYk0gID0gdGV4dHVyZTJEKHRleCwgZnJhZ0Nvb3JkICAqIGludmVyc2VWUCkueHl6O1xuICAgIHZlYzMgbHVtYSA9IHZlYzMoMC4yOTksIDAuNTg3LCAwLjExNCk7XG4gICAgZmxvYXQgbHVtYU5XID0gZG90KHJnYk5XLCBsdW1hKTtcbiAgICBmbG9hdCBsdW1hTkUgPSBkb3QocmdiTkUsIGx1bWEpO1xuICAgIGZsb2F0IGx1bWFTVyA9IGRvdChyZ2JTVywgbHVtYSk7XG4gICAgZmxvYXQgbHVtYVNFID0gZG90KHJnYlNFLCBsdW1hKTtcbiAgICBmbG9hdCBsdW1hTSAgPSBkb3QocmdiTSwgIGx1bWEpO1xuICAgIGZsb2F0IGx1bWFNaW4gPSBtaW4obHVtYU0sIG1pbihtaW4obHVtYU5XLCBsdW1hTkUpLCBtaW4obHVtYVNXLCBsdW1hU0UpKSk7XG4gICAgZmxvYXQgbHVtYU1heCA9IG1heChsdW1hTSwgbWF4KG1heChsdW1hTlcsIGx1bWFORSksIG1heChsdW1hU1csIGx1bWFTRSkpKTtcblxuICAgIHZlYzIgZGlyO1xuICAgIGRpci54ID0gLSgobHVtYU5XICsgbHVtYU5FKSAtIChsdW1hU1cgKyBsdW1hU0UpKTtcbiAgICBkaXIueSA9ICAoKGx1bWFOVyArIGx1bWFTVykgLSAobHVtYU5FICsgbHVtYVNFKSk7XG5cbiAgICBmbG9hdCBkaXJSZWR1Y2UgPSBtYXgoKGx1bWFOVyArIGx1bWFORSArIGx1bWFTVyArIGx1bWFTRSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKDAuMjUgKiBGWEFBX1JFRFVDRV9NVUwpLCBGWEFBX1JFRFVDRV9NSU4pO1xuXG4gICAgZmxvYXQgcmNwRGlyTWluID0gMS4wIC8gKG1pbihhYnMoZGlyLngpLCBhYnMoZGlyLnkpKSArIGRpclJlZHVjZSk7XG4gICAgZGlyID0gbWluKHZlYzIoRlhBQV9TUEFOX01BWCwgRlhBQV9TUEFOX01BWCksXG4gICAgICAgICAgICBtYXgodmVjMigtRlhBQV9TUEFOX01BWCwgLUZYQUFfU1BBTl9NQVgpLFxuICAgICAgICAgICAgZGlyICogcmNwRGlyTWluKSkgKiBpbnZlcnNlVlA7XG5cbiAgICB2ZWMzIHJnYkEgPSAwLjUgKiAoXG4gICAgICAgIHRleHR1cmUyRCh0ZXgsIGZyYWdDb29yZCArIGRpciAqICgxLjAgLyAzLjAgLSAwLjUpKS54eXogK1xuICAgICAgICB0ZXh0dXJlMkQodGV4LCBmcmFnQ29vcmQgICsgZGlyICogKDIuMCAvIDMuMCAtIDAuNSkpLnh5eik7XG4gICAgdmVjMyByZ2JCID0gcmdiQSAqIDAuNSArIDAuMjUgKiAoXG4gICAgICAgIHRleHR1cmUyRCh0ZXgsIGZyYWdDb29yZCAgKyBkaXIgKiAtMC41KS54eXogK1xuICAgICAgICB0ZXh0dXJlMkQodGV4LCBmcmFnQ29vcmQgICsgZGlyICogMC41KS54eXopO1xuXG4gICAgZmxvYXQgbHVtYUIgPSBkb3QocmdiQiwgbHVtYSk7XG4gICAgaWYgKChsdW1hQiA8IGx1bWFNaW4pIHx8IChsdW1hQiA+IGx1bWFNYXgpKVxuICAgICAgICBjb2xvciA9IHZlYzQocmdiQSwgMS4wKTtcbiAgICBlbHNlXG4gICAgICAgIGNvbG9yID0gdmVjNChyZ2JCLCAxLjApO1xuICAgIHJldHVybiBjb2xvcjtcbn1cbi8vREVGSU5FRlJBR0NPTE9SXG52b2lkIG1haW4gKHZvaWQpIHtcbiAgIGdsX0ZyYWdDb2xvciA9IGFwcGx5RlhBQSh2VGV4Q29vcmRzLCBjb2xvcm1hcCk7XG59XG4gICAgICAgICIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAiYXR0cmlidXRlIHZlYzIgdmVydGV4UG9zaXRpb247XG52YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleENvb3JkcztcbmNvbnN0IHZlYzIgc2NhbGUgPSB2ZWMyKDAuNSwgMC41KTtcblxudm9pZCBtYWluKCkge1xuICAgdlRleENvb3JkcyAgPSB2ZXJ0ZXhQb3NpdGlvbiAqIHNjYWxlICsgc2NhbGU7IC8vIHNjYWxlIHZlcnRleCBhdHRyaWJ1dGUgdG8gWzAsMV0gcmFuZ2VcbiAgIGdsX1Bvc2l0aW9uID0gdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMC4wLCAxLjApO1xufVxuICAgICAgICAiLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiB7fQogICAgICAgICAgICB9LAogICAgICAgICAgICByZSA9IHsKICAgICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nQ29sb3I6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJjIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQS5Db2xvcigxLCAxLCAxKQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nTmVhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0ZhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDJlMwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodENvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZnYiLAogICAgICAgICAgICAgICAgdmFsdWU6IFtdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZnYiLAogICAgICAgICAgICAgICAgdmFsdWU6IFtdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBpZSA9IHsKICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICJ1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcbnVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XG51bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodENvbG9yWyAxIF07XG51bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgMSBdO1xuXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcbmF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcbmF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xuXG52YXJ5aW5nIHZlYzIgbWFwcGluZztcbnZhcnlpbmcgdmVjMyB2Q29sb3I7XG52YXJ5aW5nIGZsb2F0IHJ2YWw7XG52YXJ5aW5nIHZlYzMgdkxpZ2h0O1xudmFyeWluZyB2ZWMzIGNlbnRlcjtcblxudm9pZCBtYWluKCkge1xuXG4gICAgdkNvbG9yID0gY29sb3I7XG4gICAgdmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuICAgIGNlbnRlciA9IG12UG9zaXRpb24ueHl6O1xuICAgIHZlYzQgcHJvalBvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG4gICAgdmVjNCBhZGp1c3QgPSBwcm9qZWN0aW9uTWF0cml4KiB2ZWM0KG5vcm1hbCwwLjApOyBhZGp1c3QueiA9IDAuMDsgYWRqdXN0LncgPSAwLjA7XG4gICAgdmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIDAgXSwgMC4wICk7XG4gICAgdkxpZ2h0ID0gbm9ybWFsaXplKCBsRGlyZWN0aW9uLnh5eiApO1xuICAgIG1hcHBpbmcgPSBub3JtYWwueHk7XG4gICAgcnZhbCA9IGFicyhub3JtYWwueCk7XG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qUG9zaXRpb24rYWRqdXN0O1xuXG59XG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiAiXG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xuXG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcbnVuaWZvcm0gZmxvYXQgdURlcHRoO1xudW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgMSBdO1xuXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xudmFyeWluZyB2ZWMyIG1hcHBpbmc7XG52YXJ5aW5nIGZsb2F0IHJ2YWw7XG52YXJ5aW5nIHZlYzMgdkxpZ2h0O1xudmFyeWluZyB2ZWMzIGNlbnRlcjtcblxuLy9ERUZJTkVGUkFHQ09MT1Jcblxudm9pZCBtYWluKCkge1xuICAgIGZsb2F0IGxlbnNxciA9IGRvdChtYXBwaW5nLG1hcHBpbmcpO1xuICAgIGZsb2F0IHJzcXIgPSBydmFsKnJ2YWw7XG4gICAgaWYobGVuc3FyID4gcnNxcilcbiAgICAgICBkaXNjYXJkO1xuICAgIGZsb2F0IHogPSBzcXJ0KHJzcXItbGVuc3FyKTtcbiAgICB2ZWMzIGNhbWVyYVBvcyA9IGNlbnRlcisgdmVjMyhtYXBwaW5nLngsbWFwcGluZy55LHopO1xuICAgIHZlYzQgY2xpcFBvcyA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KGNhbWVyYVBvcywgMS4wKTtcbiAgICBmbG9hdCBuZGNEZXB0aCA9IGNsaXBQb3MueiAvIGNsaXBQb3MudztcbiAgICBnbF9GcmFnRGVwdGhFWFQgPSAoKGdsX0RlcHRoUmFuZ2UuZGlmZiAqIG5kY0RlcHRoKSArIGdsX0RlcHRoUmFuZ2UubmVhciArIGdsX0RlcHRoUmFuZ2UuZmFyKSAvIDIuMDtcbiAgICB2ZWMzIG5vcm0gPSBub3JtYWxpemUodmVjMyhtYXBwaW5nLngsbWFwcGluZy55LHopKTtcbiAgICBmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtLCB2TGlnaHQgKTtcbiAgICB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XG4gICAgdmVjMyB2TGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIDAgXSAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmc7XG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh2TGlnaHQqdkNvbG9yLCBvcGFjaXR5Km9wYWNpdHkgKTtcbiAgICBmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGdsX0ZyYWdEZXB0aEVYVC9nbF9GcmFnQ29vcmQudyApO1xuICAgIGdsX0ZyYWdDb2xvciA9IG1peCggZ2xfRnJhZ0NvbG9yLCB2ZWM0KCBmb2dDb2xvciwgZ2xfRnJhZ0NvbG9yLncgKSwgZm9nRmFjdG9yICk7XG5cblxufVxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiByZQogICAgICAgICAgICB9LAogICAgICAgICAgICBzZSA9IHsKICAgICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb3V0bGluZUNvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiYyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEEuQ29sb3IoMCwgMCwgMCkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0NvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiYyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEEuQ29sb3IoMSwgMSwgMSkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ05lYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dGYXI6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAyZTMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG91dGxpbmVXaWR0aDogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IC4xCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvdXRsaW5lUHVzaGJhY2s6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBhZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogIlxuXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIHZlYzMgb3V0bGluZUNvbG9yO1xudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xudW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xudW5pZm9ybSBmbG9hdCBmb2dGYXI7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnZhcnlpbmcgdmVjMiBtYXBwaW5nO1xudmFyeWluZyBmbG9hdCBydmFsO1xudmFyeWluZyB2ZWMzIGNlbnRlcjtcblxudW5pZm9ybSBmbG9hdCBvdXRsaW5lUHVzaGJhY2s7XG5cbi8vREVGSU5FRlJBR0NPTE9SXG5cbnZvaWQgbWFpbigpIHtcbiAgICBmbG9hdCBsZW5zcXIgPSBkb3QobWFwcGluZyxtYXBwaW5nKTtcbiAgICBmbG9hdCByc3FyID0gcnZhbCpydmFsO1xuICAgIGlmKGxlbnNxciA+IHJzcXIpXG4gICAgICAgZGlzY2FyZDtcbiAgICBmbG9hdCB6ID0gc3FydChyc3FyLWxlbnNxcik7XG4gICAgdmVjMyBjYW1lcmFQb3MgPSBjZW50ZXIrIHZlYzMobWFwcGluZy54LG1hcHBpbmcueSx6LW91dGxpbmVQdXNoYmFjayk7XG4gICAgdmVjNCBjbGlwUG9zID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQoY2FtZXJhUG9zLCAxLjApO1xuICAgIGZsb2F0IG5kY0RlcHRoID0gY2xpcFBvcy56IC8gY2xpcFBvcy53O1xuICAgIGdsX0ZyYWdEZXB0aEVYVCA9ICgoZ2xfRGVwdGhSYW5nZS5kaWZmICogbmRjRGVwdGgpICsgZ2xfRGVwdGhSYW5nZS5uZWFyICsgZ2xfRGVwdGhSYW5nZS5mYXIpIC8gMi4wO1xuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQob3V0bGluZUNvbG9yLCAxICk7XG59XG5cblxuIi5yZXBsYWNlKCIjZGVmaW5lIEdMU0xJRlkgMSIsICIiKSwKICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICJcblxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xudW5pZm9ybSBmbG9hdCBvdXRsaW5lV2lkdGg7XG51bmlmb3JtIGZsb2F0IG91dGxpbmVQdXNoYmFjaztcblxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcblxudmFyeWluZyB2ZWMyIG1hcHBpbmc7XG52YXJ5aW5nIGZsb2F0IHJ2YWw7XG52YXJ5aW5nIHZlYzMgY2VudGVyO1xuXG52b2lkIG1haW4oKSB7XG5cbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG4gICAgY2VudGVyID0gbXZQb3NpdGlvbi54eXo7XG4gICAgdmVjNCBwcm9qUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcbiAgICB2ZWMyIG5vcm0gPSBub3JtYWwueHkgKyB2ZWMyKHNpZ24obm9ybWFsLngpKm91dGxpbmVXaWR0aCxzaWduKG5vcm1hbC55KSpvdXRsaW5lV2lkdGgpO1xuICAgIHZlYzQgYWRqdXN0ID0gcHJvamVjdGlvbk1hdHJpeCogdmVjNChub3JtLG5vcm1hbC56LDAuMCk7IGFkanVzdC56ID0gMC4wOyBhZGp1c3QudyA9IDAuMDtcbiAgICBtYXBwaW5nID0gbm9ybS54eTtcbiAgICBydmFsID0gYWJzKG5vcm0ueCk7XG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qUG9zaXRpb24rYWRqdXN0O1xufVxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBuZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogIlxuXG51bmlmb3JtIHZlYzMgY29sb3I7XG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG5cbnVuaWZvcm0gaW50IGZvZ1R5cGU7XG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG51bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcbnVuaWZvcm0gZmxvYXQgYWxwaGFUZXN0O1xuXG52YXJ5aW5nIHZlYzIgdlVWO1xuLy9ERUZJTkVGUkFHQ09MT1Jcblxudm9pZCBtYWluKCkge1xuXG4gICAgdmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKG1hcCwgdlVWKTtcblxuICAgIGlmICh0ZXh0dXJlLmEgPCBhbHBoYVRlc3QpIGRpc2NhcmQ7XG5cbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yICogdGV4dHVyZS54eXosIHRleHR1cmUuYSAqIG9wYWNpdHkpO1xuXG4gICAgaWYgKGZvZ1R5cGUgPiAwKSB7XG5cbiAgICAgICAgZmxvYXQgZGVwdGggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53O1xuICAgICAgICBmbG9hdCBmb2dGYWN0b3IgPSAwLjA7XG5cbiAgICAgICAgaWYgKGZvZ1R5cGUgPT0gMSkge1xuICAgICAgICAgICAgZm9nRmFjdG9yID0gc21vb3Roc3RlcChmb2dOZWFyLCBmb2dGYXIsIGRlcHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmxvYXQgTE9HMiA9IDEuNDQyNjk1O1xuICAgICAgICAgICAgZmxvYXQgZm9nRmFjdG9yID0gZXhwMigtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZGVwdGggKiBkZXB0aCAqIExPRzIpO1xuICAgICAgICAgICAgZm9nRmFjdG9yID0gMS4wIC0gY2xhbXAoZm9nRmFjdG9yLCAwLjAsIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBnbF9GcmFnQ29sb3IgPSBtaXgoZ2xfRnJhZ0NvbG9yLCB2ZWM0KGZvZ0NvbG9yLCBnbF9GcmFnQ29sb3IudyksIGZvZ0ZhY3Rvcik7XG5cbiAgICB9XG59XG5cbiIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAiXG5cbnVuaWZvcm0gaW50IHVzZVNjcmVlbkNvb3JkaW5hdGVzO1xudW5pZm9ybSB2ZWMzIHNjcmVlblBvc2l0aW9uO1xudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcbnVuaWZvcm0gdmVjMiBzY2FsZTtcbnVuaWZvcm0gdmVjMiBhbGlnbm1lbnQ7XG51bmlmb3JtIHZlYzIgdXZPZmZzZXQ7XG51bmlmb3JtIHZlYzIgdXZTY2FsZTtcblxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XG5hdHRyaWJ1dGUgdmVjMiB1djtcblxudmFyeWluZyB2ZWMyIHZVVjtcblxudm9pZCBtYWluKCkge1xuXG4gICAgdlVWID0gdXZPZmZzZXQgKyB1diAqIHV2U2NhbGU7XG5cbiAgICB2ZWMyIGFsaWduZWRQb3NpdGlvbiA9IHBvc2l0aW9uICsgYWxpZ25tZW50O1xuXG4gICAgdmVjMiByb3RhdGVkUG9zaXRpb247XG4gICAgcm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyhyb3RhdGlvbikgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbihyb3RhdGlvbikgKiBhbGlnbmVkUG9zaXRpb24ueSApICogc2NhbGUueDtcbiAgICByb3RhdGVkUG9zaXRpb24ueSA9ICggc2luKHJvdGF0aW9uKSAqIGFsaWduZWRQb3NpdGlvbi54ICsgY29zKHJvdGF0aW9uKSAqIGFsaWduZWRQb3NpdGlvbi55ICkgKiBzY2FsZS55O1xuXG4gICAgdmVjNCBmaW5hbFBvc2l0aW9uO1xuXG4gICAgaWYodXNlU2NyZWVuQ29vcmRpbmF0ZXMgIT0gMCkge1xuICAgICAgICBmaW5hbFBvc2l0aW9uID0gdmVjNChzY3JlZW5Qb3NpdGlvbi54eSArIHJvdGF0ZWRQb3NpdGlvbiwgc2NyZWVuUG9zaXRpb24ueiwgMS4wKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxQb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCk7IGZpbmFsUG9zaXRpb24gLz0gZmluYWxQb3NpdGlvbi53O1xuICAgICAgICBmaW5hbFBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjsgXG4gICAgfVxuXG4gICAgZ2xfUG9zaXRpb24gPSBmaW5hbFBvc2l0aW9uO1xuXG59XG5cbiIucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdW5pZm9ybXM6IHt9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9lID0gewogICAgICAgICAgICAgIG9wYWNpdHk6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dDb2xvcjogewogICAgICAgICAgICAgICAgdHlwZTogImMiLAogICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBBLkNvbG9yKDEsIDEsIDEpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb2dOZWFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nRmFyOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMmUzCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0Q29sb3I6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmdiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogW10KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb246IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmdiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogW10KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxlID0gInVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xuXG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcblxudmFyeWluZyB2ZWMzIHZMaWdodDtcbnZhcnlpbmcgdmVjMyB2Q29sb3I7XG52YXJ5aW5nIHZlYzMgY3Bvc2l0aW9uO1xudmFyeWluZyB2ZWMzIHAxO1xudmFyeWluZyB2ZWMzIHAyO1xudmFyeWluZyBmbG9hdCByO1xuXG4vL0RFRklORUZSQUdDT0xPUlxuXG4vL2N5bGluZGVyLXJheSBpbnRlcnNlY3Rpb24gdGVzdGluZyB0YWtlbiBmcm9tIGh0dHA6Ly9tcmwubnl1LmVkdS9+ZHpvcmluL2NnMDUvbGVjdHVyZTEyLnBkZlxuLy9hbHNvIHVzZWZ1bDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NTk1MzAwL2N5bGluZGVyLWltcG9zdG9yLWluLWdsc2xcbi8vd2l0aCBhIGJpdCBtb3JlIGNhcmUgKGNhcHMpIHRoaXMgY291bGQgYmUgYSBnZW5lcmFsIGN5bGluZGVyIGltcG9zdGVyIChzZWUgYWxzbyBvdXRsaW5lKVxudm9pZCBtYWluKCkge1xuICAgIHZlYzMgY29sb3IgPSBhYnModkNvbG9yKTtcbiAgICB2ZWMzIHBvcyA9IGNwb3NpdGlvbjtcbiAgICB2ZWMzIHAgPSBwb3M7IC8vcmF5IHBvaW50XG4gICAgdmVjMyB2ID0gdmVjMygwLjAsMC4wLC0xLjApOyAvL3JheSBub3JtYWwgLSBvcnRob2dyYXBoaWNcbiAgICBpZihwcm9qZWN0aW9uTWF0cml4WzNdWzNdID09IDAuMCkgdiA9IG5vcm1hbGl6ZShwb3MpOyAvL3JheSBub3JtYWwgLSBwZXJzcGVjdGl2ZVxuICAgIHZlYzMgcGEgPSBwMTsgLy9jeWwgc3RhcnRcbiAgICB2ZWMzIHZhID0gbm9ybWFsaXplKHAyLXAxKTsgLy9jeWwgbm9ybVxuICAgIHZlYzMgdG1wMSA9IHYtKGRvdCh2LHZhKSp2YSk7XG4gICAgdmVjMyBkZWx0YXAgPSBwLXBhO1xuICAgIGZsb2F0IEEgPSBkb3QodG1wMSx0bXAxKTtcbiAgICBpZihBID09IDAuMCkgZGlzY2FyZDtcbiAgICB2ZWMzIHRtcDIgPSBkZWx0YXAtKGRvdChkZWx0YXAsdmEpKnZhKTtcbiAgICBmbG9hdCBCID0gMi4wKmRvdCh0bXAxLCB0bXAyKTtcbiAgICBmbG9hdCBDID0gZG90KHRtcDIsdG1wMiktcipyO1xuLy9xdWFkcmF0aWMgZXF1YXRpb24hXG4gICAgZmxvYXQgZGV0ID0gKEIqQikgLSAoNC4wKkEqQyk7XG4gICAgaWYoZGV0IDwgMC4wKSBkaXNjYXJkO1xuICAgIGZsb2F0IHNxcnREZXQgPSBzcXJ0KGRldCk7XG4gICAgZmxvYXQgcG9zVCA9ICgtQitzcXJ0RGV0KS8oMi4wKkEpO1xuICAgIGZsb2F0IG5lZ1QgPSAoLUItc3FydERldCkvKDIuMCpBKTtcbiAgICBmbG9hdCBpbnRlcnNlY3Rpb25UID0gbWluKHBvc1QsbmVnVCk7XG4gICAgdmVjMyBxaSA9IHArdippbnRlcnNlY3Rpb25UO1xuICAgIGZsb2F0IGRvdHAxID0gZG90KHZhLHFpLXAxKTtcbiAgICBmbG9hdCBkb3RwMiA9IGRvdCh2YSxxaS1wMik7XG4gICAgdmVjMyBub3JtO1xuICAgIGlmKCBkb3RwMSA8IDAuMCB8fCBkb3RwMiA+IDAuMCkgeyAvLyhwLWMpXjIgKyAyKHAtYyl2dCArdl4yK3ReMiAtIHJeMiA9IDBcbiAgICAgICB2ZWMzIGNwO1xuICAgICAgIGlmKCBkb3RwMSA8IDAuMCkgeyAgXG4vLyAgICAgICAgaWYodkNvbG9yLnggPCAwLjAgKSBkaXNjYXJkOyAvL2NvbG9yIHNpZ24gYml0IGluZGljYXRlcyBpZiB3ZSBzaG91bGQgY2FwIG9yIG5vdFxuICAgICAgICBjcCA9IHAxO1xuICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICBpZih2Q29sb3IueSA8IDAuMCApIGRpc2NhcmQ7XG4gICAgICAgICAgY3AgPSBwMjtcbiAgICAgICB9XG4gICAgICAgdmVjMyBkaWZmID0gcC1jcDtcbiAgICAgICBBID0gZG90KHYsdik7XG4gICAgICAgQiA9IGRvdChkaWZmLHYpKjIuMDtcbiAgICAgICBDID0gZG90KGRpZmYsZGlmZiktcipyO1xuICAgICAgIGRldCA9IChCKkIpIC0gKDQuMCpDKTtcbiAgICAgICBpZihkZXQgPCAwLjApIGRpc2NhcmQ7XG4gICAgICAgc3FydERldCA9IHNxcnQoZGV0KTtcbiAgICAgICBwb3NUID0gKC1CK3NxcnREZXQpLygyLjApO1xuICAgICAgIG5lZ1QgPSAoLUItc3FydERldCkvKDIuMCk7XG4gICAgICAgZmxvYXQgdCA9IG1pbihwb3NULG5lZ1QpO1xuICAgICAgIHFpID0gcCt2KnQ7IFxuICAgICAgIG5vcm0gPSBub3JtYWxpemUocWktY3ApOyBcbiAgICB9IGVsc2Uge1xuICAgICAgIG5vcm0gPSBub3JtYWxpemUocWktKGRvdHAxKnZhICsgcDEpKTtcbiAgICB9XG4gICAgdmVjNCBjbGlwUG9zID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQocWksIDEuMCk7XG4gICAgZmxvYXQgbmRjRGVwdGggPSBjbGlwUG9zLnogLyBjbGlwUG9zLnc7XG4gICAgZmxvYXQgZGVwdGggPSAoKGdsX0RlcHRoUmFuZ2UuZGlmZiAqIG5kY0RlcHRoKSArIGdsX0RlcHRoUmFuZ2UubmVhciArIGdsX0RlcHRoUmFuZ2UuZmFyKSAvIDIuMDtcbiAgICBnbF9GcmFnRGVwdGhFWFQgPSBkZXB0aDsiLAogICAgICAgICAgICBoZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogW2xlLCAiICAgIGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm0sIHZMaWdodCApO1xuICAgIHZlYzMgbGlnaHQgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChsaWdodCpjb2xvciwgb3BhY2l0eSpvcGFjaXR5ICk7XG4gICAgZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBkZXB0aCApO1xuICAgIGdsX0ZyYWdDb2xvciA9IG1peCggZ2xfRnJhZ0NvbG9yLCB2ZWM0KCBmb2dDb2xvciwgZ2xfRnJhZ0NvbG9yLncgKSwgZm9nRmFjdG9yICk7XG59Il0uam9pbigiXG4iKS5yZXBsYWNlKCIjZGVmaW5lIEdMU0xJRlkgMSIsICIiKSwKICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICJcblxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xudW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1xudW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgMSBdO1xudW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIDEgXTtcblxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcbmF0dHJpYnV0ZSBmbG9hdCByYWRpdXM7XG5cbnZhcnlpbmcgdmVjMyB2Q29sb3I7XG52YXJ5aW5nIHZlYzMgdkxpZ2h0O1xudmFyeWluZyB2ZWMzIGNwb3NpdGlvbjtcbnZhcnlpbmcgdmVjMyBwMTtcbnZhcnlpbmcgdmVjMyBwMjtcbnZhcnlpbmcgZmxvYXQgcjtcblxudm9pZCBtYWluKCkge1xuXG4gICAgdkNvbG9yID0gY29sb3I7IHZDb2xvci56ID0gYWJzKHZDb2xvci56KTsgLy96IGluZGljYXRlcyB3aGljaCB2ZXJ0ZXggYW5kIHNvIHdvdWxkIHZhcnlcbiAgICByID0gYWJzKHJhZGl1cyk7XG4gICAgdmVjNCB0byA9IG1vZGVsVmlld01hdHJpeCp2ZWM0KG5vcm1hbCwgMS4wKTsgLy9ub3JtYWwgaXMgb3RoZXIgcG9pbnQgb2YgY3lsaW5kZXJcbiAgICB2ZWM0IHB0ID0gbW9kZWxWaWV3TWF0cml4KnZlYzQocG9zaXRpb24sIDEuMCk7XG4gICAgdmVjNCBtdlBvc2l0aW9uID0gcHQ7XG4gICAgcDEgPSBwdC54eXo7IHAyID0gdG8ueHl6O1xuICAgIHZlYzMgbm9ybSA9IHRvLnh5ei1wdC54eXo7XG4gICAgZmxvYXQgbXVsdCA9IDEuMTsgLy9zbG9wIHRvIGFjY291bnQgZm9yIHBlcnNwZWN0aXZlIG9mIHNwaGVyZVxuICAgIGlmKGxlbmd0aChwMSkgPiBsZW5ndGgocDIpKSB7IC8vYmlsbGJvYXJkIGF0IGxldmVsIG9mIGNsb3Nlc3QgcG9pbnRcbiAgICAgICBtdlBvc2l0aW9uID0gdG87XG4gICAgfVxuICAgIHZlYzMgbiA9IG5vcm1hbGl6ZShtdlBvc2l0aW9uLnh5eik7XG4vL2ludGVyc2VjdCB3aXRoIHRoZSBwbGFuZSBkZWZpbmVkIGJ5IHRoZSBjYW1lcmEgbG9va2luZyBhdCB0aGUgYmlsbGJvYXJkIHBvaW50XG4gICAgaWYoY29sb3IueiA+PSAwLjApIHsgLy9wMVxuICAgICAgIGlmKHByb2plY3Rpb25NYXRyaXhbM11bM10gPT0gMC4wKSB7IC8vcGVyc3BlY3RpdmVcbiAgICAgICAgIHZlYzMgcG5vcm0gPSBub3JtYWxpemUocDEpO1xuICAgICAgICAgZmxvYXQgdCA9IGRvdChtdlBvc2l0aW9uLnh5ei1wMSxuKS9kb3QocG5vcm0sbik7XG4gICAgICAgICBtdlBvc2l0aW9uLnh5eiA9IHAxK3QqcG5vcm07IFxuICAgICAgIH0gZWxzZSB7IC8vb3J0aG9ncmFwaGljXG4gICAgICAgICBtdlBvc2l0aW9uLnh5eiA9IHAxO1xuICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYocHJvamVjdGlvbk1hdHJpeFszXVszXSA9PSAwLjApIHsgLy9wZXJzcGVjdGl2ZVxuICAgICAgICAgdmVjMyBwbm9ybSA9IG5vcm1hbGl6ZShwMik7XG4gICAgICAgICBmbG9hdCB0ID0gZG90KG12UG9zaXRpb24ueHl6LXAyLG4pL2RvdChwbm9ybSxuKTtcbiAgICAgICAgIG12UG9zaXRpb24ueHl6ID0gcDIrdCpwbm9ybTtcbiAgICAgICB9IGVsc2UgeyAvL29ydGhvZ3JhcGhpY1xuICAgICAgICAgbXZQb3NpdGlvbi54eXogPSBwMjtcbiAgICAgICB9IFxuICAgICAgIG11bHQgKj0gLTEuMDtcbiAgICB9XG4gICAgdmVjMyBjciA9IG5vcm1hbGl6ZShjcm9zcyhtdlBvc2l0aW9uLnh5eixub3JtKSkqcmFkaXVzO1xuICAgIHZlYzMgZG91YmxlY3IgPSBub3JtYWxpemUoY3Jvc3MobXZQb3NpdGlvbi54eXosY3IpKSpyYWRpdXM7XG4gICAgbXZQb3NpdGlvbi54eXogKz0gIG11bHQqKGNyICsgZG91YmxlY3IpLnh5ejtcbiAgICBjcG9zaXRpb24gPSBtdlBvc2l0aW9uLnh5ejtcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xuICAgIHZlYzQgbERpcmVjdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyAwIF0sIDAuMCApO1xuICAgIHZMaWdodCA9IG5vcm1hbGl6ZSggbERpcmVjdGlvbi54eXogKSpkaXJlY3Rpb25hbExpZ2h0Q29sb3JbMF07IC8vbm90IHJlYWxseSBzdXJlIHRoaXMgaXMgcmlnaHQsIGJ1dCBjb2xvciBpcyBhbHdheXMgd2hpdGUgc28uLlxufVxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBvZQogICAgICAgICAgICB9LAogICAgICAgICAgICBjZSA9IHsKICAgICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nQ29sb3I6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJjIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQS5Db2xvcigxLCAxLCAxKQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nTmVhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0ZhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDJlMwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb3V0bGluZUNvbG9yOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiYyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEEuQ29sb3IoMCwgMCwgMCkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG91dGxpbmVXaWR0aDogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IC4xCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvdXRsaW5lUHVzaGJhY2s6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBkZSA9IHsKICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogKGxlICsgImdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsMS4wKTt9IikucmVwbGFjZSgiI2RlZmluZSBHTFNMSUZZIDEiLCAiIiksCiAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAiXG5cbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIDEgXTtcbnVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyAxIF07XG51bmlmb3JtIHZlYzMgb3V0bGluZUNvbG9yO1xudW5pZm9ybSBmbG9hdCBvdXRsaW5lV2lkdGg7XG51bmlmb3JtIGZsb2F0IG91dGxpbmVQdXNoYmFjaztcblxuXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcbmF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcbmF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xuYXR0cmlidXRlIGZsb2F0IHJhZGl1cztcblxudmFyeWluZyB2ZWMzIHZDb2xvcjtcbnZhcnlpbmcgdmVjMyB2TGlnaHQ7XG52YXJ5aW5nIHZlYzMgY3Bvc2l0aW9uO1xudmFyeWluZyB2ZWMzIHAxO1xudmFyeWluZyB2ZWMzIHAyO1xudmFyeWluZyBmbG9hdCByO1xuXG52b2lkIG1haW4oKSB7XG5cbiAgICB2Q29sb3IgPSBvdXRsaW5lQ29sb3I7XG4gICAgZmxvYXQgcmFkID0gcmFkaXVzK3NpZ24ocmFkaXVzKSpvdXRsaW5lV2lkdGg7XG4gICAgciA9IGFicyhyYWQpO1xuICAgIHZlYzQgdG8gPSBtb2RlbFZpZXdNYXRyaXgqdmVjNChub3JtYWwsIDEuMCk7IC8vbm9ybWFsIGlzIG90aGVyIHBvaW50IG9mIGN5bGluZGVyXG4gICAgdmVjNCBwdCA9IG1vZGVsVmlld01hdHJpeCp2ZWM0KHBvc2l0aW9uLCAxLjApO1xuLy9wdXNoYmFja1xuICAgIHRvLnh5eiArPSBub3JtYWxpemUodG8ueHl6KSpvdXRsaW5lUHVzaGJhY2s7XG4gICAgcHQueHl6ICs9IG5vcm1hbGl6ZShwdC54eXopKm91dGxpbmVQdXNoYmFjaztcblxuICAgIHZlYzQgbXZQb3NpdGlvbiA9IHB0O1xuICAgIHAxID0gcHQueHl6OyBwMiA9IHRvLnh5ejtcbiAgICB2ZWMzIG5vcm0gPSB0by54eXotcHQueHl6O1xuICAgIGZsb2F0IG11bHQgPSAxLjE7IC8vc2xvcCB0byBhY2NvdW50IGZvciBwZXJzcGVjdGl2ZSBvZiBzcGhlcmVcbiAgICBpZihsZW5ndGgocDEpID4gbGVuZ3RoKHAyKSkgeyAvL2JpbGxib2FyZCBhdCBsZXZlbCBvZiBjbG9zZXN0IHBvaW50XG4gICAgICAgbXZQb3NpdGlvbiA9IHRvO1xuICAgIH1cbiAgICB2ZWMzIG4gPSBub3JtYWxpemUobXZQb3NpdGlvbi54eXopO1xuLy9pbnRlcnNlY3Qgd2l0aCB0aGUgcGxhbmUgZGVmaW5lZCBieSB0aGUgY2FtZXJhIGxvb2tpbmcgYXQgdGhlIGJpbGxib2FyZCBwb2ludFxuICAgIGlmKGNvbG9yLnogPj0gMC4wKSB7IC8vcDFcbiAgICAgICB2ZWMzIHBub3JtID0gbm9ybWFsaXplKHAxKTtcbiAgICAgICBmbG9hdCB0ID0gZG90KG12UG9zaXRpb24ueHl6LXAxLG4pL2RvdChwbm9ybSxuKTtcbiAgICAgICBtdlBvc2l0aW9uLnh5eiA9IHAxK3QqcG5vcm07XG4gICAgfSBlbHNlIHtcbiAgICAgICB2ZWMzIHBub3JtID0gbm9ybWFsaXplKHAyKTtcbiAgICAgICBmbG9hdCB0ID0gZG90KG12UG9zaXRpb24ueHl6LXAyLG4pL2RvdChwbm9ybSxuKTtcbiAgICAgICBtdlBvc2l0aW9uLnh5eiA9IHAyK3QqcG5vcm07XG4gICAgICAgbXVsdCAqPSAtMS4wO1xuICAgIH1cbiAgICB2ZWMzIGNyID0gbm9ybWFsaXplKGNyb3NzKG12UG9zaXRpb24ueHl6LG5vcm0pKSpyYWQ7XG4gICAgdmVjMyBkb3VibGVjciA9IG5vcm1hbGl6ZShjcm9zcyhtdlBvc2l0aW9uLnh5eixjcikpKnJhZDtcbiAgICBtdlBvc2l0aW9uLnh5ICs9ICBtdWx0KihjciArIGRvdWJsZWNyKS54eTtcbiAgICBjcG9zaXRpb24gPSBtdlBvc2l0aW9uLnh5ejtcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xuICAgIHZMaWdodCA9IHZlYzMoMS4wLDEuMCwxLjApO1xufVxuXG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiBjZQogICAgICAgICAgICB9LAogICAgICAgICAgICB1ZSA9IHsKICAgICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nQ29sb3I6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJjIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQS5Db2xvcigxLCAxLCAxKQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZm9nTmVhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZvZ0ZhcjogewogICAgICAgICAgICAgICAgdHlwZTogImYiLAogICAgICAgICAgICAgICAgdmFsdWU6IDJlMwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgdHlwZTogImkiLAogICAgICAgICAgICAgICAgdmFsdWU6IDMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNvbG9ybWFwOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiaSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogNAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGVwdGhtYXA6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJpIiwKICAgICAgICAgICAgICAgIHZhbHVlOiA1CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzdGVwOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbWF4ZGVwdGg6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAxMDAKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHN1YnNhbXBsZXM6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiA1CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB0ZXh0bWF0OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAibWF0NCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogW10KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHByb2ppbnY6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJtYXQ0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBbXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgdHJhbnNmZXJtaW46IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJmIiwKICAgICAgICAgICAgICAgIHZhbHVlOiAtLjIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHRyYW5zZmVybWF4OiB7CiAgICAgICAgICAgICAgICB0eXBlOiAiZiIsCiAgICAgICAgICAgICAgICB2YWx1ZTogLjIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZlID0gewogICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiAiXG51bmlmb3JtIGhpZ2hwIHNhbXBsZXIzRCBkYXRhO1xudW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgY29sb3JtYXA7XG51bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBkZXB0aG1hcDtcblxuXG51bmlmb3JtIG1hdDQgdGV4dG1hdDtcbnVuaWZvcm0gbWF0NCBwcm9qaW52O1xudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG5cbnVuaWZvcm0gZmxvYXQgc3RlcDtcbnVuaWZvcm0gZmxvYXQgc3Vic2FtcGxlcztcbnVuaWZvcm0gZmxvYXQgbWF4ZGVwdGg7XG51bmlmb3JtIGZsb2F0IHRyYW5zZmVybWluO1xudW5pZm9ybSBmbG9hdCB0cmFuc2Zlcm1heDtcbmluICB2ZWM0IG12UG9zaXRpb247XG5vdXQgdmVjNCBjb2xvcjtcbnZvaWQgbWFpbih2b2lkKSB7XG5cbiAgIHZlYzQgcG9zID0gbXZQb3NpdGlvbjtcbiAgIGJvb2wgc2Vlbmdvb2QgPSBmYWxzZTtcbiAgIGZsb2F0IGkgPSAwLjA7XG4gICBjb2xvciA9IHZlYzQoMSwxLDEsMCk7XG4gICBmbG9hdCBpbmNyZW1lbnQgPSAxLjAvc3Vic2FtcGxlcztcbiAgIGZsb2F0IG1heHN0ZXBzID0gKG1heGRlcHRoKnN1YnNhbXBsZXMvc3RlcCk7XG4vL3RoZXJlJ3MgcHJvYmFibHkgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuLlxuLy9jYWxjdWxhdGUgZmFydGhlc3QgcG9zc2libGUgcG9pbnQgaW4gbW9kZWwgY29vcmRpbmF0ZXNcbiAgIHZlYzQgbWF4cG9zID0gdmVjNChwb3MueCxwb3MueSxwb3Muei1tYXhkZXB0aCwxLjApO1xuLy8gY29udmVydCB0byBwcm9qZWN0aW9uXG4gICBtYXhwb3MgPSBwcm9qZWN0aW9uTWF0cml4Km1heHBvcztcbiAgIHZlYzQgc3RhcnRwID0gcHJvamVjdGlvbk1hdHJpeCpwb3M7XG4vLyBob21vZ29uaXplXG4gICBtYXhwb3MgLz0gbWF4cG9zLnc7XG4gICBzdGFydHAgLz0gc3RhcnRwLnc7XG4vL3Rha2UgeCx5IGZyb20gc3RhcnQgYW5kIHogZnJvbSBtYXhcbiAgIG1heHBvcyA9IHZlYzQoc3RhcnRwLngsc3RhcnRwLnksbWF4cG9zLnosMS4wKTtcbi8vY29udmVydCBiYWNrIHRvIG1vZGVsIHNwYWNlXG4gICBtYXhwb3MgPSBwcm9qaW52Km1heHBvcztcbiAgIG1heHBvcyAvPSBtYXhwb3MudztcbiAgIGZsb2F0IGluY3IgPSBzdGVwL3N1YnNhbXBsZXM7XG4vL2dldCBkZXB0aCBmcm9tIGRlcHRobWFwXG4vL3N0YXJ0cCBpcyBhcHBhcmVudGx5IFstMSwxXVxuICAgdmVjMiB0cG9zID0gc3RhcnRwLnh5LzIuMCswLjU7XG4gICBmbG9hdCBkZXB0aCA9IHRleHR1cmUoZGVwdGhtYXAsIHRwb3MpLnI7XG4vL2NvbXB1dGUgdmVjdG9yIGJldHdlZW4gc3RhcnQgYW5kIGVuZFxuICAgdmVjNCBkaXJlY3Rpb24gPSBtYXhwb3MtcG9zO1xuICAgZm9yKCBpID0gMC4wOyBpIDw9IG1heHN0ZXBzOyBpKyspIHtcbiAgICAgIHZlYzQgcHQgPSAocG9zKyhpL21heHN0ZXBzKSpkaXJlY3Rpb24pO1xuICAgICAgdmVjNCBwcHQgPSBwcm9qZWN0aW9uTWF0cml4KnB0O1xuICAgICAgZmxvYXQgcHRkZXB0aCA9IHBwdC56L3BwdC53O1xuICAgICAgcHRkZXB0aCA9ICgoZ2xfRGVwdGhSYW5nZS5kaWZmICogcHRkZXB0aCkgKyBnbF9EZXB0aFJhbmdlLm5lYXIgKyBnbF9EZXB0aFJhbmdlLmZhcikgLyAyLjA7XG4gICAgICBpZihwdGRlcHRoID4gZGVwdGgpIGJyZWFrO1xuICAgICAgcHQgPSB0ZXh0bWF0KnB0O1xuLy8gICAgICAgcHQgLz0gcHQudztcbiAgICAgIGlmKHB0LnggPj0gLTAuMDEgJiYgcHQueSA+PSAtMC4wMSAmJiBwdC56ID49IC0wLjAxICYmIHB0LnggPD0gMS4wMSAmJiBwdC55IDw9IDEuMDEgJiYgcHQueiA8PSAxLjAxKSB7XG4gICAgICAgICBzZWVuZ29vZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYoc2Vlbmdvb2QpIHtcbiAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYoIHB0LnggPCAtMC4wMSB8fCBwdC54ID4gMS4wMSB8fCBwdC55IDwgLTAuMDEgfHwgcHQueSA+IDEuMDEgfHwgcHQueiA8IC0wLjAxIHx8IHB0LnogPiAxLjAxICApe1xuICAgICAgICAgIGNvbG9yLmEgPSAwLjA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIGZsb2F0IHZhbCA9IHRleHR1cmUoZGF0YSwgcHQuenl4KS5yO1xuICAgICAgICAgaWYoaXNpbmYodmFsKSkgY29udGludWU7IC8vbWFza2VkIG91dFxuICAgICAgICAgZmxvYXQgY3ZhbCA9ICh2YWwtdHJhbnNmZXJtaW4pLyh0cmFuc2Zlcm1heC10cmFuc2Zlcm1pbik7IC8vc2NhbGUgdG8gdGV4dHVyZSAwLTEgcmFuZ2VcbiAgICAgICAgIHZlYzQgdmFsX2NvbG9yID0gdGV4dHVyZShjb2xvcm1hcCwgdmVjMihjdmFsLDAuNSkpO1xuICAgICAgICAgY29sb3IucmdiID0gY29sb3IucmdiKmNvbG9yLmEgKyAoMS4wLWNvbG9yLmEpKnZhbF9jb2xvci5hKnZhbF9jb2xvci5yZ2I7XG4gICAgICAgICBjb2xvci5hICs9ICgxLjAgLSBjb2xvci5hKSAqIHZhbF9jb2xvci5hOyBcbiAgICAgICAgIGlmKGNvbG9yLmEgPiAwLjApIGNvbG9yLnJnYiAvPSBjb2xvci5hO1xuLy8gICAgICAgICAgY29sb3IgPSB2ZWM0KHB0LngsIHB0LnksIHB0LnosIDEuMCk7XG4gICAgICB9XG4vLyAgICAgICBjb2xvciA9IHZlYzQocHQueCwgcHQueSwgcHQueiwgMC4wKVxuICAgIH1cbn1cblxuICAgICAgICAiLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHZlcnRleFNoYWRlcjogInVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xuXG5pbiB2ZWMzIHBvc2l0aW9uO1xub3V0IHZlYzQgbXZQb3NpdGlvbjtcbnZvaWQgbWFpbigpIHtcblxuICAgIG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4Km12UG9zaXRpb247XG59XG4iLnJlcGxhY2UoIiNkZWZpbmUgR0xTTElGWSAxIiwgIiIpLAogICAgICAgICAgICAgIHVuaWZvcm1zOiB1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICBwZSA9IHsKICAgICAgICAgICAgICBiYXNpYzogVywKICAgICAgICAgICAgICBpbnN0YW5jZWQ6IFksCiAgICAgICAgICAgICAgbGFtYmVydDogWCwKICAgICAgICAgICAgICBsYW1iZXJ0ZG91YmxlOiAkLAogICAgICAgICAgICAgIG91dGxpbmU6IEosCiAgICAgICAgICAgICAgc2NyZWVuOiBlZSwKICAgICAgICAgICAgICBzY3JlZW5hYTogdGUsCiAgICAgICAgICAgICAgc3BoZXJlaW1wb3N0ZXI6IGllLAogICAgICAgICAgICAgIHNwaGVyZWltcG9zdGVyb3V0bGluZTogYWUsCiAgICAgICAgICAgICAgc3ByaXRlOiBuZSwKICAgICAgICAgICAgICBzdGlja2ltcG9zdGVyOiBoZSwKICAgICAgICAgICAgICBzdGlja2ltcG9zdGVyb3V0bGluZTogZGUsCiAgICAgICAgICAgICAgdm9sdW1ldHJpYzogZmUKICAgICAgICAgICAgfTsKICAgICAgICAgIGZ1bmN0aW9uIG1lKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSB7fTsKICAgICAgICAgICAgZm9yICh2YXIgX3M0NyBpbiBlKSB7CiAgICAgICAgICAgICAgdFtfczQ3XSA9IHt9LCB0W19zNDddLnR5cGUgPSBlW19zNDddLnR5cGU7CiAgICAgICAgICAgICAgdmFyIHIgPSBlW19zNDddLnZhbHVlOwogICAgICAgICAgICAgIHIgaW5zdGFuY2VvZiBBLkNvbG9yID8gdFtfczQ3XS52YWx1ZSA9IHIuY2xvbmUoKSA6ICJudW1iZXIiID09IHR5cGVvZiByID8gdFtfczQ3XS52YWx1ZSA9IHIgOiByIGluc3RhbmNlb2YgQXJyYXkgPyB0W19zNDddLnZhbHVlID0gW10gOiBjb25zb2xlLmVycm9yKCJFcnJvciBjb3B5aW5nIHNoYWRlciB1bmlmb3JtcyBmcm9tIFNoYWRlckxpYjogdW5rbm93biB0eXBlIGZvciB1bmlmb3JtIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZ2UgPSB7CiAgICAgICAgICAgIGNsb25lOiBtZSwKICAgICAgICAgICAgc3RpY2tpbXBvc3RlckZyYWdtZW50U2hhZGVyOiBsZQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBfQ2FtZXJhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfT2JqZWN0M0Q3KSB7CiAgICAgICAgICAgIF9pbmhlcml0cyhfQ2FtZXJhLCBfT2JqZWN0M0Q3KTsKICAgICAgICAgICAgdmFyIF9zdXBlcjI2ID0gX2NyZWF0ZVN1cGVyKF9DYW1lcmEpOwogICAgICAgICAgICBmdW5jdGlvbiBfQ2FtZXJhKCkgewogICAgICAgICAgICAgIHZhciBfdGhpczI2OwogICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA1MDsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgICAgICAgICB2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogLjE7CiAgICAgICAgICAgICAgdmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDJlMzsKICAgICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogITE7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9DYW1lcmEpOwogICAgICAgICAgICAgIF90aGlzMjYgPSBfc3VwZXIyNi5jYWxsKHRoaXMpLCBfdGhpczI2LnByb2plY3Rpb25NYXRyaXggPSBuZXcgaC5NYXRyaXg0KCksIF90aGlzMjYucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgaC5NYXRyaXg0KCksIF90aGlzMjYubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IGguTWF0cml4NCgpLCBfdGhpczI2LmZvdiA9IGUsIF90aGlzMjYuYXNwZWN0ID0gdCwgX3RoaXMyNi5uZWFyID0gciwgX3RoaXMyNi5mYXIgPSBzOwogICAgICAgICAgICAgIHZhciBuID0gX3RoaXMyNi5wb3NpdGlvbi56OwogICAgICAgICAgICAgIF90aGlzMjYucmlnaHQgPSBuICogTWF0aC50YW4oTWF0aC5QSSAvIDE4MCAqIGUpLCBfdGhpczI2LmxlZnQgPSAtX3RoaXMyNi5yaWdodCwgX3RoaXMyNi50b3AgPSBfdGhpczI2LnJpZ2h0IC8gX3RoaXMyNi5hc3BlY3QsIF90aGlzMjYuYm90dG9tID0gLV90aGlzMjYudG9wLCBfdGhpczI2Lm9ydGhvID0gISFhLCBfdGhpczI2LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyNjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX0NhbWVyYSwgW3sKICAgICAgICAgICAgICBrZXk6ICJsb29rQXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb29rQXQoZSkgewogICAgICAgICAgICAgICAgdGhpcy5tYXRyaXgubG9va0F0KHRoaXMucG9zaXRpb24sIGUsIHRoaXMudXApLCB0aGlzLnJvdGF0aW9uQXV0b1VwZGF0ZSAmJiAoITEgPT09IHRoaXMudXNlUXVhdGVybmlvbiAmJiB0aGlzLnJvdGF0aW9uIGluc3RhbmNlb2YgaC5WZWN0b3IzID8gdGhpcy5yb3RhdGlvbi5zZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCh0aGlzLm1hdHJpeCwgdGhpcy5ldWxlck9yZGVyKSA6IGNvbnNvbGUuZXJyb3IoIlVuaW1wbGVtZW50ZWQgbWF0aCBvcGVyYXRpb24uIikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkgewogICAgICAgICAgICAgICAgdGhpcy5vcnRobyA/IHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKHRoaXMubGVmdCwgdGhpcy5yaWdodCwgdGhpcy50b3AsIHRoaXMuYm90dG9tLCB0aGlzLm5lYXIsIHRoaXMuZmFyKSA6IHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUodGhpcy5mb3YsIHRoaXMuYXNwZWN0LCB0aGlzLm5lYXIsIHRoaXMuZmFyKSwgdGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMucHJvamVjdGlvbk1hdHJpeCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfQ2FtZXJhOwogICAgICAgICAgfShfT2JqZWN0M0QpOwogICAgICAgICAgdmFyIF9Gb2cgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfRm9nKGUpIHsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgICAgICAgICB2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMWUzOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfRm9nKTsKICAgICAgICAgICAgICB0aGlzLm5hbWUgPSAiIiwgdGhpcy5jb2xvciA9IG5ldyBBLkNvbG9yKGUpLCB0aGlzLm5lYXIgPSB0LCB0aGlzLmZhciA9IHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9Gb2csIFt7CiAgICAgICAgICAgICAga2V5OiAiY2xvbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX0ZvZyh0aGlzLmNvbG9yLmdldEhleCgpLCB0aGlzLm5lYXIsIHRoaXMuZmFyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9Gb2c7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgX1Nwcml0ZVBsdWdpbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9TcHJpdGVQbHVnaW4oKSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9TcHJpdGVQbHVnaW4pOwogICAgICAgICAgICAgIHRoaXMuc3ByaXRlID0gewogICAgICAgICAgICAgICAgdmVydGljZXM6IG51bGwsCiAgICAgICAgICAgICAgICBmYWNlczogbnVsbCwKICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlcjogbnVsbCwKICAgICAgICAgICAgICAgIGVsZW1lbnRCdWZmZXI6IG51bGwsCiAgICAgICAgICAgICAgICBwcm9ncmFtOiBudWxsLAogICAgICAgICAgICAgICAgYXR0cmlidXRlczoge30sCiAgICAgICAgICAgICAgICB1bmlmb3JtczogbnVsbAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9TcHJpdGVQbHVnaW4sIFt7CiAgICAgICAgICAgICAga2V5OiAiaW5pdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoZSkgewogICAgICAgICAgICAgICAgdGhpcy5nbCA9IGUuY29udGV4dCwgdGhpcy5yZW5kZXJlciA9IGUsIHRoaXMucHJlY2lzaW9uID0gZS5nZXRQcmVjaXNpb24oKSwgdGhpcy5zcHJpdGUudmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KDE2KSwgdGhpcy5zcHJpdGUuZmFjZXMgPSBuZXcgVWludDE2QXJyYXkoNik7CiAgICAgICAgICAgICAgICB2YXIgdCA9IDA7CiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gLTEsIHRoaXMuc3ByaXRlLnZlcnRpY2VzW3QrK10gPSAtMSwgdGhpcy5zcHJpdGUudmVydGljZXNbdCsrXSA9IDAsIHRoaXMuc3ByaXRlLnZlcnRpY2VzW3QrK10gPSAwLCB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gMSwgdGhpcy5zcHJpdGUudmVydGljZXNbdCsrXSA9IC0xLCB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gMSwgdGhpcy5zcHJpdGUudmVydGljZXNbdCsrXSA9IDAsIHRoaXMuc3ByaXRlLnZlcnRpY2VzW3QrK10gPSAxLCB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gMSwgdGhpcy5zcHJpdGUudmVydGljZXNbdCsrXSA9IDEsIHRoaXMuc3ByaXRlLnZlcnRpY2VzW3QrK10gPSAxLCB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gLTEsIHRoaXMuc3ByaXRlLnZlcnRpY2VzW3QrK10gPSAxLCB0aGlzLnNwcml0ZS52ZXJ0aWNlc1t0KytdID0gMCwgdGhpcy5zcHJpdGUudmVydGljZXNbdCsrXSA9IDEsIHQgPSAwLCB0aGlzLnNwcml0ZS5mYWNlc1t0KytdID0gMCwgdGhpcy5zcHJpdGUuZmFjZXNbdCsrXSA9IDEsIHRoaXMuc3ByaXRlLmZhY2VzW3QrK10gPSAyLCB0aGlzLnNwcml0ZS5mYWNlc1t0KytdID0gMCwgdGhpcy5zcHJpdGUuZmFjZXNbdCsrXSA9IDIsIHRoaXMuc3ByaXRlLmZhY2VzW3QrK10gPSAzLCB0aGlzLnNwcml0ZS52ZXJ0ZXhCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpLCB0aGlzLnNwcml0ZS5lbGVtZW50QnVmZmVyID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKSwgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnNwcml0ZS52ZXJ0ZXhCdWZmZXIpLCB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMuc3ByaXRlLnZlcnRpY2VzLCB0aGlzLmdsLlNUQVRJQ19EUkFXKSwgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuc3ByaXRlLmVsZW1lbnRCdWZmZXIpLCB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5zcHJpdGUuZmFjZXMsIHRoaXMuZ2wuU1RBVElDX0RSQVcpLCB0aGlzLnNwcml0ZS5wcm9ncmFtID0gdGhpcy5jcmVhdGVQcm9ncmFtKHBlLnNwcml0ZSwgdGhpcy5wcmVjaXNpb24gfHwgMSksIHRoaXMuc3ByaXRlLmF0dHJpYnV0ZXMgPSB7fTsKICAgICAgICAgICAgICAgIHZhciByID0ge307CiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnNwcml0ZS5wcm9ncmFtLCAicG9zaXRpb24iKSwgdGhpcy5zcHJpdGUuYXR0cmlidXRlcy51diA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgInV2IiksIHIudXZPZmZzZXQgPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNwcml0ZS5wcm9ncmFtLCAidXZPZmZzZXQiKSwgci51dlNjYWxlID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgInV2U2NhbGUiKSwgci5yb3RhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc3ByaXRlLnByb2dyYW0sICJyb3RhdGlvbiIpLCByLnNjYWxlID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgInNjYWxlIiksIHIuYWxpZ25tZW50ID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgImFsaWdubWVudCIpLCByLmNvbG9yID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgImNvbG9yIiksIHIubWFwID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgIm1hcCIpLCByLm9wYWNpdHkgPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNwcml0ZS5wcm9ncmFtLCAib3BhY2l0eSIpLCByLnVzZVNjcmVlbkNvb3JkaW5hdGVzID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgInVzZVNjcmVlbkNvb3JkaW5hdGVzIiksIHIuc2NyZWVuUG9zaXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNwcml0ZS5wcm9ncmFtLCAic2NyZWVuUG9zaXRpb24iKSwgci5tb2RlbFZpZXdNYXRyaXggPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNwcml0ZS5wcm9ncmFtLCAibW9kZWxWaWV3TWF0cml4IiksIHIucHJvamVjdGlvbk1hdHJpeCA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc3ByaXRlLnByb2dyYW0sICJwcm9qZWN0aW9uTWF0cml4IiksIHIuZm9nVHlwZSA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc3ByaXRlLnByb2dyYW0sICJmb2dUeXBlIiksIHIuZm9nRGVuc2l0eSA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc3ByaXRlLnByb2dyYW0sICJmb2dEZW5zaXR5IiksIHIuZm9nTmVhciA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc3ByaXRlLnByb2dyYW0sICJmb2dOZWFyIiksIHIuZm9nRmFyID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgImZvZ0ZhciIpLCByLmZvZ0NvbG9yID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgImZvZ0NvbG9yIiksIHIuYWxwaGFUZXN0ID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zcHJpdGUucHJvZ3JhbSwgImFscGhhVGVzdCIpLCB0aGlzLnNwcml0ZS51bmlmb3JtcyA9IHI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVuZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGUsIHQsIHIsIHMsIGEpIHsKICAgICAgICAgICAgICAgIHZhciBuLCBvLCBsLCBoLCBjLCB1LCBmLCBwLCBnLCB2OwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdsKSB0aHJvdyBuZXcgRXJyb3IoIldlYkdMUmVuZGVyZXIgbm90IGluaXRpYWxpemVkIik7CiAgICAgICAgICAgICAgICB2YXIgXyA9IFtdOwogICAgICAgICAgICAgICAgbnVsbCA9PT0gKG4gPSBudWxsID09IGUgPyB2b2lkIDAgOiBlLl9fd2ViZ2xTcHJpdGVzKSB8fCB2b2lkIDAgPT09IG4gfHwgbi5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIChhICYmIDAgPT0gZS5tYXRlcmlhbC5kZXB0aFRlc3QgfHwgIWEgJiYgZS5tYXRlcmlhbC5kZXB0aFRlc3QpICYmIF8ucHVzaChlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIHkgPSBfLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmICgheSkgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLnNwcml0ZS5hdHRyaWJ1dGVzLAogICAgICAgICAgICAgICAgICB3ID0gdGhpcy5zcHJpdGUudW5pZm9ybXM7CiAgICAgICAgICAgICAgICBpZiAoIXcpIHRocm93IG5ldyBFcnJvcigiVW5pZm9ybXMgbm90IGRlZmluZWQiKTsKICAgICAgICAgICAgICAgIHZhciB4ID0gLjUgKiByLAogICAgICAgICAgICAgICAgICBBID0gLjUgKiBzOwogICAgICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHRoaXMuc3ByaXRlLnByb2dyYW0pLCB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGIucG9zaXRpb24pLCB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGIudXYpLCB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpLCB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkJMRU5EKSwgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnNwcml0ZS52ZXJ0ZXhCdWZmZXIpLCB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5wb3NpdGlvbiwgMiwgdGhpcy5nbC5GTE9BVCwgITEsIDE2LCAwKSwgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIudXYsIDIsIHRoaXMuZ2wuRkxPQVQsICExLCAxNiwgOCksIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLnNwcml0ZS5lbGVtZW50QnVmZmVyKSwgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KHcucHJvamVjdGlvbk1hdHJpeCwgITEsIHQucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cyksIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKSwgdGhpcy5nbC51bmlmb3JtMWkody5tYXAsIDApOwogICAgICAgICAgICAgICAgdmFyIEMsCiAgICAgICAgICAgICAgICAgIFMgPSAwLAogICAgICAgICAgICAgICAgICBNID0gMCwKICAgICAgICAgICAgICAgICAgeiA9IGUuZm9nOwogICAgICAgICAgICAgICAgdmFyIEwsIEUsIFQsIGs7CiAgICAgICAgICAgICAgICB6ID8gKHRoaXMuZ2wudW5pZm9ybTNmKHcuZm9nQ29sb3IsIHouY29sb3Iuciwgei5jb2xvci5nLCB6LmNvbG9yLmIpLCB0aGlzLmdsLnVuaWZvcm0xZih3LmZvZ05lYXIsIHoubmVhciksIHRoaXMuZ2wudW5pZm9ybTFmKHcuZm9nRmFyLCB6LmZhciksIHRoaXMuZ2wudW5pZm9ybTFpKHcuZm9nVHlwZSwgMSksIFMgPSAxLCBNID0gMSkgOiAodGhpcy5nbC51bmlmb3JtMWkody5mb2dUeXBlLCAwKSwgUyA9IDAsIE0gPSAwKTsKICAgICAgICAgICAgICAgIHZhciBJID0gW107CiAgICAgICAgICAgICAgICBmb3IgKEMgPSAwOyBDIDwgeTsgQysrKSBMID0gX1tDXSwgRSA9IEwubWF0ZXJpYWwsIEUgJiYgKDAgIT0gRS5kZXB0aFRlc3QgfHwgYSkgJiYgTC52aXNpYmxlICYmIDAgIT09IEUub3BhY2l0eSAmJiAoRS51c2VTY3JlZW5Db29yZGluYXRlcyA/IEwueiA9IC1MLnBvc2l0aW9uLnogOiAoTC5fbW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXModC5tYXRyaXhXb3JsZEludmVyc2UsIEwubWF0cml4V29ybGQpLCBMLnogPSAtTC5fbW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzWzE0XSkpOwogICAgICAgICAgICAgICAgZm9yIChfLnNvcnQodmUpLCBDID0gMDsgQyA8IHk7IEMrKykgaWYgKEwgPSBfW0NdLCBFID0gTC5tYXRlcmlhbCwgRSAmJiBMLnZpc2libGUgJiYgMCAhPT0gRS5vcGFjaXR5ICYmIEUubWFwICYmIEUubWFwLmltYWdlICYmIEUubWFwLmltYWdlLndpZHRoKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTFmKChudWxsID09IHcgPyB2b2lkIDAgOiB3LmFscGhhVGVzdCkgfHwgbnVsbCwgRS5hbHBoYVRlc3QpOwogICAgICAgICAgICAgICAgICB2YXIgTyA9IEUubWFwLmltYWdlLndpZHRoLAogICAgICAgICAgICAgICAgICAgIEQgPSBFLm1hcC5pbWFnZS5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgIElbMF0gPSBPICogdGhpcy5yZW5kZXJlci5kZXZpY2VQaXhlbFJhdGlvIC8gciwgSVsxXSA9IEQgKiB0aGlzLnJlbmRlcmVyLmRldmljZVBpeGVsUmF0aW8gLyBzLCAhMCA9PT0gRS51c2VTY3JlZW5Db29yZGluYXRlcyA/ICh0aGlzLmdsLnVuaWZvcm0xaSh3LnVzZVNjcmVlbkNvb3JkaW5hdGVzLCAxKSwgdGhpcy5nbC51bmlmb3JtM2Yody5zY3JlZW5Qb3NpdGlvbiwgKEwucG9zaXRpb24ueCAqIHRoaXMucmVuZGVyZXIuZGV2aWNlUGl4ZWxSYXRpbyAtIHgpIC8geCwgKEEgLSBMLnBvc2l0aW9uLnkgKiB0aGlzLnJlbmRlcmVyLmRldmljZVBpeGVsUmF0aW8pIC8gQSwgTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgTC5wb3NpdGlvbi56KSkpKSA6ICh0aGlzLmdsLnVuaWZvcm0xaSh3LnVzZVNjcmVlbkNvb3JkaW5hdGVzLCAwKSwgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KHcubW9kZWxWaWV3TWF0cml4LCAhMSwgTC5fbW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzKSksIGsgPSBlLmZvZyAmJiBFLmZvZyA/IE0gOiAwLCBTICE9PSBrICYmICh0aGlzLmdsLnVuaWZvcm0xaSh3LmZvZ1R5cGUsIGspLCBTID0gayksIFQgPSAxIC8gKEUuc2NhbGVCeVZpZXdwb3J0ID8gcyA6IDEpLCBJWzBdICo9IFQgKiBMLnNjYWxlLngsIElbMV0gKj0gVCAqIEwuc2NhbGUueTsKICAgICAgICAgICAgICAgICAgdmFyIF90OTYgPSBudWxsID09PSAobyA9IG51bGwgPT0gRSA/IHZvaWQgMCA6IEUuYWxpZ25tZW50KSB8fCB2b2lkIDAgPT09IG8gPyB2b2lkIDAgOiBvLngsCiAgICAgICAgICAgICAgICAgICAgX2EzMiA9IG51bGwgPT09IChsID0gbnVsbCA9PSBFID8gdm9pZCAwIDogRS5hbGlnbm1lbnQpIHx8IHZvaWQgMCA9PT0gbCA/IHZvaWQgMCA6IGwueTsKICAgICAgICAgICAgICAgICAgRS5zY3JlZW5PZmZzZXQgJiYgKF90OTYgPSAoX3Q5NiB8fCAwKSArIDIgKiBFLnNjcmVlbk9mZnNldC54IC8gTywgX2EzMiA9IChfYTMyIHx8IDApICsgMiAqIEUuc2NyZWVuT2Zmc2V0LnkgLyBEKSwgdGhpcy5nbC51bmlmb3JtMmYody51dlNjYWxlLCAobnVsbCA9PT0gKGggPSBudWxsID09IEUgPyB2b2lkIDAgOiBFLnV2U2NhbGUpIHx8IHZvaWQgMCA9PT0gaCA/IHZvaWQgMCA6IGgueCkgfHwgMSwgKG51bGwgPT09IChjID0gbnVsbCA9PSBFID8gdm9pZCAwIDogRS51dlNjYWxlKSB8fCB2b2lkIDAgPT09IGMgPyB2b2lkIDAgOiBjLnkpIHx8IDEpLCB0aGlzLmdsLnVuaWZvcm0yZih3LnV2T2Zmc2V0LCAobnVsbCA9PT0gKHUgPSBudWxsID09IEUgPyB2b2lkIDAgOiBFLnV2T2Zmc2V0KSB8fCB2b2lkIDAgPT09IHUgPyB2b2lkIDAgOiB1LngpIHx8IDAsIChudWxsID09PSAoZiA9IG51bGwgPT0gRSA/IHZvaWQgMCA6IEUudXZPZmZzZXQpIHx8IHZvaWQgMCA9PT0gZiA/IHZvaWQgMCA6IGYueSkgfHwgMCksIHRoaXMuZ2wudW5pZm9ybTJmKHcuYWxpZ25tZW50LCBfdDk2IHx8IDAsIF9hMzIgfHwgMCksIHRoaXMuZ2wudW5pZm9ybTFmKHcub3BhY2l0eSwgRS5vcGFjaXR5KSwgdGhpcy5nbC51bmlmb3JtM2Yody5jb2xvciwgKG51bGwgPT09IChwID0gbnVsbCA9PSBFID8gdm9pZCAwIDogRS5jb2xvcikgfHwgdm9pZCAwID09PSBwID8gdm9pZCAwIDogcC5yKSB8fCAwLCAobnVsbCA9PT0gKGcgPSBudWxsID09IEUgPyB2b2lkIDAgOiBFLmNvbG9yKSB8fCB2b2lkIDAgPT09IGcgPyB2b2lkIDAgOiBnLmcpIHx8IDAsIChudWxsID09PSAodiA9IG51bGwgPT0gRSA/IHZvaWQgMCA6IEUuY29sb3IpIHx8IHZvaWQgMCA9PT0gdiA/IHZvaWQgMCA6IHYuYikgfHwgMCksIHRoaXMuZ2wudW5pZm9ybTFmKHcucm90YXRpb24sIEwucm90YXRpb24pLCB0aGlzLmdsLnVuaWZvcm0yZnYody5zY2FsZSwgSSksIHRoaXMucmVuZGVyZXIuc2V0RGVwdGhUZXN0KEUuZGVwdGhUZXN0KSwgdGhpcy5yZW5kZXJlci5zZXREZXB0aFdyaXRlKEUuZGVwdGhXcml0ZSksIHRoaXMucmVuZGVyZXIuc2V0VGV4dHVyZShFLm1hcCwgMCksIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKHRoaXMuZ2wuVFJJQU5HTEVTLCA2LCB0aGlzLmdsLlVOU0lHTkVEX1NIT1JULCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjcmVhdGVQcm9ncmFtIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbShlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2wpIHRocm93IG5ldyBFcnJvcigiV2ViR0wgUmVuZGVyaW5nIGNvbnRleHQgbm90IGZvdW5kIik7CiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuZ2wuY3JlYXRlUHJvZ3JhbSgpOwogICAgICAgICAgICAgICAgaWYgKCFyKSB0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGNyZWF0aW5nIHdlYmdsIHByb2dyYW0iKTsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5GUkFHTUVOVF9TSEFERVIpLAogICAgICAgICAgICAgICAgICBhID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5WRVJURVhfU0hBREVSKTsKICAgICAgICAgICAgICAgIGlmICghcykgdGhyb3cgbmV3IEVycm9yKCJVbmFibGUgdG8gY3JlYXRlIGZyYWdtZW50IHNoYWRlciBTcHJpdGVQbHVnaW4uY3JlYXRlUHJvZ3JhbSIpOwogICAgICAgICAgICAgICAgaWYgKCFhKSB0aHJvdyBuZXcgRXJyb3IoIlVuYWJsZSB0byBjcmVhdGUgdmVydGV4IHNoYWRlciBTcHJpdGVQbHVnaW4uY3JlYXRlUHJvZ3JhbSIpOwogICAgICAgICAgICAgICAgdmFyIG4gPSAicHJlY2lzaW9uICIgKyB0ICsgIiBmbG9hdDtcbiI7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5nbC5zaGFkZXJTb3VyY2UocywgbiArIGUuZnJhZ21lbnRTaGFkZXIpLCB0aGlzLmdsLnNoYWRlclNvdXJjZShhLCBuICsgZS52ZXJ0ZXhTaGFkZXIpLCB0aGlzLmdsLmNvbXBpbGVTaGFkZXIocyksIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihhKSwgIXRoaXMuZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHMsIHRoaXMuZ2wuQ09NUElMRV9TVEFUVVMpIHx8ICF0aGlzLmdsLmdldFNoYWRlclBhcmFtZXRlcihhLCB0aGlzLmdsLkNPTVBJTEVfU1RBVFVTKSkgdGhyb3cgbmV3IEVycm9yKCJFcnJvciBjb21waWxpbmcgc2hhZGVyOiBcbiAgICAgICIuY29uY2F0KHRoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyhzKSwgIiBcbiAgICAgICIpLmNvbmNhdCh0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coYSkpKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdsLmF0dGFjaFNoYWRlcihyLCBzKSwgdGhpcy5nbC5hdHRhY2hTaGFkZXIociwgYSksIHRoaXMuZ2wubGlua1Byb2dyYW0ociksIHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihyLCB0aGlzLmdsLkxJTktfU1RBVFVTKSB8fCBjb25zb2xlLmVycm9yKCJDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaGFkZXIiKSwgcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9TcHJpdGVQbHVnaW47CiAgICAgICAgICB9KCk7CiAgICAgICAgICBmdW5jdGlvbiB2ZShlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiBlLnogIT09IHQueiA/IHQueiAtIGUueiA6IHQuaWQgLSBlLmlkOwogICAgICAgICAgfQogICAgICAgICAgdmFyIF9SZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9SZW5kZXJlcihlKSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9SZW5kZXJlcik7CiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbCwgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gMSwgdGhpcy5hdXRvQ2xlYXIgPSAhMCwgdGhpcy5hdXRvQ2xlYXJDb2xvciA9ICEwLCB0aGlzLmF1dG9DbGVhckRlcHRoID0gITAsIHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9ICEwLCB0aGlzLnNvcnRPYmplY3RzID0gITAsIHRoaXMuYXV0b1VwZGF0ZU9iamVjdHMgPSAhMCwgdGhpcy5hdXRvVXBkYXRlU2NlbmUgPSAhMCwgdGhpcy5pbmZvID0gewogICAgICAgICAgICAgICAgbWVtb3J5OiB7CiAgICAgICAgICAgICAgICAgIHByb2dyYW1zOiAwLAogICAgICAgICAgICAgICAgICBnZW9tZXRyaWVzOiAwLAogICAgICAgICAgICAgICAgICB0ZXh0dXJlczogMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbmRlcjogewogICAgICAgICAgICAgICAgICBjYWxsczogMCwKICAgICAgICAgICAgICAgICAgdmVydGljZXM6IDAsCiAgICAgICAgICAgICAgICAgIGZhY2VzOiAwLAogICAgICAgICAgICAgICAgICBwb2ludHM6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCB0aGlzLl9wcm9ncmFtcyA9IFtdLCB0aGlzLl9wcm9ncmFtc19jb3VudGVyID0gMCwgdGhpcy5fd2ViZ2x2ZXJzaW9uID0gMSwgdGhpcy5fY3VycmVudFByb2dyYW0gPSBudWxsLCB0aGlzLl9jdXJyZW50TWF0ZXJpYWxJZCA9IC0xLCB0aGlzLl9jdXJyZW50R2VvbWV0cnlHcm91cEhhc2ggPSBudWxsLCB0aGlzLl9jdXJyZW50Q2FtZXJhID0gbnVsbCwgdGhpcy5fZ2VvbWV0cnlHcm91cENvdW50ZXIgPSAwLCB0aGlzLl9vbGREb3VibGVTaWRlZCA9IC0xLCB0aGlzLl9vbGRGbGlwU2lkZWQgPSAtMSwgdGhpcy5fb2xkQmxlbmRpbmcgPSAtMSwgdGhpcy5fb2xkRGVwdGhUZXN0ID0gLTEsIHRoaXMuX29sZERlcHRoV3JpdGUgPSAtMSwgdGhpcy5fb2xkUG9seWdvbk9mZnNldCA9IG51bGwsIHRoaXMuX29sZExpbmVXaWR0aCA9IG51bGwsIHRoaXMuX3ZpZXdwb3J0V2lkdGggPSAwLCB0aGlzLl92aWV3cG9ydEhlaWdodCA9IDAsIHRoaXMuX2N1cnJlbnRXaWR0aCA9IDAsIHRoaXMuX2N1cnJlbnRIZWlnaHQgPSAwLCB0aGlzLl9lbmFibGVkQXR0cmlidXRlcyA9IHt9LCB0aGlzLl9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IGguTWF0cml4NCgpLCB0aGlzLl92ZWN0b3IzID0gbmV3IGguVmVjdG9yMygpLCB0aGlzLl93b3JsZEludmVyc2UgPSBuZXcgaC5NYXRyaXg0KCksIHRoaXMuX3Byb2pJbnZlcnNlID0gbmV3IGguTWF0cml4NCgpLCB0aGlzLl90ZXh0dXJlTWF0cml4ID0gbmV3IGguTWF0cml4NCgpLCB0aGlzLl9kaXJlY3Rpb24gPSBuZXcgaC5WZWN0b3IzKCksIHRoaXMuX2xpZ2h0c05lZWRVcGRhdGUgPSAhMCwgdGhpcy5fbGlnaHRzID0gewogICAgICAgICAgICAgICAgYW1iaWVudDogWzAsIDAsIDBdLAogICAgICAgICAgICAgICAgZGlyZWN0aW9uYWw6IHsKICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAwLAogICAgICAgICAgICAgICAgICBjb2xvcnM6IFtdLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcG9pbnQ6IHsKICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAwLAogICAgICAgICAgICAgICAgICBjb2xvcnM6IFtdLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtdLAogICAgICAgICAgICAgICAgICBkaXN0YW5jZXM6IFtdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3BvdDogewogICAgICAgICAgICAgICAgICBsZW5ndGg6IDAsCiAgICAgICAgICAgICAgICAgIGNvbG9yczogW10sCiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW10sCiAgICAgICAgICAgICAgICAgIGRpc3RhbmNlczogW10sCiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnM6IFtdLAogICAgICAgICAgICAgICAgICBhbmdsZXNDb3M6IFtdLAogICAgICAgICAgICAgICAgICBleHBvbmVudHM6IFtdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaGVtaTogewogICAgICAgICAgICAgICAgICBsZW5ndGg6IDAsCiAgICAgICAgICAgICAgICAgIHNreUNvbG9yczogW10sCiAgICAgICAgICAgICAgICAgIGdyb3VuZENvbG9yczogW10sCiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczogW10KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCB0aGlzLnNwcml0ZXMgPSBuZXcgX1Nwcml0ZVBsdWdpbigpLCB0aGlzLl9zY3JlZW5zaGFkZXIgPSBudWxsLCB0aGlzLl92ZXJ0ZXhhdHRyaWJwb3MgPSBudWxsLCB0aGlzLl9zY3JlZW5RdWFkVkJPID0gbnVsbCwgdGhpcy5fZmIgPSBudWxsLCB0aGlzLl90YXJnZXRUZXh0dXJlID0gbnVsbCwgdGhpcy5fZGVwdGhUZXh0dXJlID0gbnVsbCwgZSA9IGUgfHwge30sIHRoaXMucm93ID0gZS5yb3csIHRoaXMuY29sID0gZS5jb2wsIHRoaXMucm93cyA9IGUucm93cywgdGhpcy5jb2xzID0gZS5jb2xzLCB0aGlzLl9jYW52YXMgPSB2b2lkIDAgIT09IGUuY2FudmFzID8gZS5jYW52YXMgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKSwgdGhpcy5fcHJlY2lzaW9uID0gdm9pZCAwICE9PSBlLnByZWNpc2lvbiA/IGUucHJlY2lzaW9uIDogImhpZ2hwIiwgdGhpcy5fYWxwaGEgPSB2b2lkIDAgPT09IGUuYWxwaGEgfHwgZS5hbHBoYSwgdGhpcy5fcHJlbXVsdGlwbGllZEFscGhhID0gdm9pZCAwID09PSBlLnByZW11bHRpcGxpZWRBbHBoYSB8fCBlLnByZW11bHRpcGxpZWRBbHBoYSwgdGhpcy5fYW50aWFsaWFzID0gdm9pZCAwICE9PSBlLmFudGlhbGlhcyAmJiBlLmFudGlhbGlhcywgdGhpcy5fc3RlbmNpbCA9IHZvaWQgMCA9PT0gZS5zdGVuY2lsIHx8IGUuc3RlbmNpbCwgdGhpcy5fcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gdm9pZCAwICE9PSBlLnByZXNlcnZlRHJhd2luZ0J1ZmZlciAmJiBlLnByZXNlcnZlRHJhd2luZ0J1ZmZlciwgdGhpcy5fY2xlYXJDb2xvciA9IHZvaWQgMCAhPT0gZS5jbGVhckNvbG9yID8gbmV3IEEuQ29sb3IoZS5jbGVhckNvbG9yKSA6IG5ldyBBLkNvbG9yKDApLCB0aGlzLl9jbGVhckFscGhhID0gdm9pZCAwICE9PSBlLmNsZWFyQWxwaGEgPyBlLmNsZWFyQWxwaGEgOiAwLCB0aGlzLl9vdXRsaW5lTWF0ZXJpYWwgPSBuZXcgX01lc2hPdXRsaW5lTWF0ZXJpYWwoZS5vdXRsaW5lKSwgdGhpcy5fb3V0bGluZVNwaGVyZUltcG9zdGVyTWF0ZXJpYWwgPSBuZXcgX1NwaGVyZUltcG9zdGVyT3V0bGluZU1hdGVyaWFsKGUub3V0bGluZSksIHRoaXMuX291dGxpbmVTdGlja0ltcG9zdGVyTWF0ZXJpYWwgPSBuZXcgX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwoZS5vdXRsaW5lKSwgdGhpcy5fb3V0bGluZUVuYWJsZWQgPSAhIWUub3V0bGluZSwgdGhpcy5kb21FbGVtZW50ID0gdGhpcy5fY2FudmFzLCB0aGlzLl9jYW52YXMuaWQgPSBlLmlkLCB0aGlzLmluaXRHTCgpLCB0aGlzLnNldERlZmF1bHRHTFN0YXRlKCksIHRoaXMuY29udGV4dCA9IHRoaXMuX2dsLCB0aGlzLmlzV2ViR0wxKCkgPyB0aGlzLl9leHRJbnN0YW5jZWQgPSB0aGlzLl9nbC5nZXRFeHRlbnNpb24oIkFOR0xFX2luc3RhbmNlZF9hcnJheXMiKSA6IHRoaXMuX2V4dEluc3RhbmNlZCA9IHsKICAgICAgICAgICAgICAgIHZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRTogdGhpcy5fZ2wudmVydGV4QXR0cmliRGl2aXNvci5iaW5kKHRoaXMuX2dsKSwKICAgICAgICAgICAgICAgIGRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFOiB0aGlzLl9nbC5kcmF3RWxlbWVudHNJbnN0YW5jZWQuYmluZCh0aGlzLl9nbCkKICAgICAgICAgICAgICB9LCB0aGlzLl9leHRGcmFnRGVwdGggPSB0aGlzLl9nbC5nZXRFeHRlbnNpb24oIkVYVF9mcmFnX2RlcHRoIiksIHRoaXMuX2V4dEZsb2F0TGluZWFyID0gdGhpcy5fZ2wuZ2V0RXh0ZW5zaW9uKCJPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXIiKSwgdGhpcy5fZXh0Q29sb3JCdWZmZXJGbG9hdCA9IHRoaXMuX2dsLmdldEV4dGVuc2lvbigiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCIpLCB0aGlzLnNwcml0ZXMuaW5pdCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1JlbmRlcmVyLCBbewogICAgICAgICAgICAgIGtleTogInN1cHBvcnRlZEV4dGVuc2lvbnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdXBwb3J0ZWRFeHRlbnNpb25zKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgc3VwcG9ydHNBSUE6IEJvb2xlYW4odGhpcy5fZXh0SW5zdGFuY2VkKSwKICAgICAgICAgICAgICAgICAgc3VwcG9ydHNJbXBvc3RlcnM6IEJvb2xlYW4odGhpcy5fZXh0RnJhZ0RlcHRoKSB8fCAhdGhpcy5pc1dlYkdMMSgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldENvbnRleHQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250ZXh0KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlzTG9zdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTG9zdCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nbC5pc0NvbnRleHRMb3N0KCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0UHJlY2lzaW9uIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJlY2lzaW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZWNpc2lvbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRDbGVhckNvbG9ySGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2xlYXJDb2xvckhleChlLCB0KSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yLnNldEhleChlKSwgdGhpcy5fY2xlYXJBbHBoYSA9IHQsIHRoaXMuX2dsLmNsZWFyQ29sb3IodGhpcy5fY2xlYXJDb2xvci5yLCB0aGlzLl9jbGVhckNvbG9yLmcsIHRoaXMuX2NsZWFyQ29sb3IuYiwgdGhpcy5fY2xlYXJBbHBoYSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZW5hYmxlT3V0bGluZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZU91dGxpbmUoZSkgewogICAgICAgICAgICAgICAgdGhpcy5fb3V0bGluZU1hdGVyaWFsID0gbmV3IF9NZXNoT3V0bGluZU1hdGVyaWFsKGUpLCB0aGlzLl9vdXRsaW5lU3BoZXJlSW1wb3N0ZXJNYXRlcmlhbCA9IG5ldyBfU3BoZXJlSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwoZSksIHRoaXMuX291dGxpbmVTdGlja0ltcG9zdGVyTWF0ZXJpYWwgPSBuZXcgX1N0aWNrSW1wb3N0ZXJPdXRsaW5lTWF0ZXJpYWwoZSksIHRoaXMuX291dGxpbmVFbmFibGVkID0gITA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzYWJsZU91dGxpbmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlT3V0bGluZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuX291dGxpbmVFbmFibGVkID0gITE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Vmlld3BvcnQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaWV3cG9ydCgpIHsKICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHRoaXMucm93cyAmJiBudWxsICE9IHRoaXMuY29scyAmJiBudWxsICE9IHRoaXMucm93ICYmIG51bGwgIT0gdGhpcy5jb2wpIHsKICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9jYW52YXMud2lkdGggLyB0aGlzLmNvbHMsCiAgICAgICAgICAgICAgICAgICAgdCA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgLyB0aGlzLnJvd3M7CiAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdwb3J0V2lkdGggPSBlLCB0aGlzLl92aWV3cG9ydEhlaWdodCA9IHQsIHRoaXMuX2dsLmVuYWJsZSh0aGlzLl9nbC5TQ0lTU09SX1RFU1QpLCB0aGlzLl9nbC5zY2lzc29yKGUgKiB0aGlzLmNvbCwgdCAqIHRoaXMucm93LCBlLCB0KSwgdGhpcy5fZ2wudmlld3BvcnQoZSAqIHRoaXMuY29sLCB0ICogdGhpcy5yb3csIGUsIHQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFNpemUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTaXplKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmRldmljZVBpeGVsUmF0aW8gPSB2b2lkIDAgIT09IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiAxLCB0aGlzLl9hbnRpYWxpYXMgJiYgdGhpcy5kZXZpY2VQaXhlbFJhdGlvIDwgMiAmJiAodGhpcy5kZXZpY2VQaXhlbFJhdGlvICo9IDIpLCBudWxsICE9IHRoaXMucm93cyAmJiBudWxsICE9IHRoaXMuY29scyAmJiBudWxsICE9IHRoaXMucm93ICYmIG51bGwgIT0gdGhpcy5jb2wpIHsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlIC8gdGhpcy5jb2xzLAogICAgICAgICAgICAgICAgICAgIHMgPSB0IC8gdGhpcy5yb3dzOwogICAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMud2lkdGggPSBlICogdGhpcy5kZXZpY2VQaXhlbFJhdGlvLCB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gdCAqIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbywgdGhpcy5fdmlld3BvcnRXaWR0aCA9IHIgKiB0aGlzLmRldmljZVBpeGVsUmF0aW8sIHRoaXMuX3ZpZXdwb3J0SGVpZ2h0ID0gcyAqIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbywgdGhpcy5fY2FudmFzLnN0eWxlLndpZHRoID0gZSArICJweCIsIHRoaXMuX2NhbnZhcy5zdHlsZS5oZWlnaHQgPSB0ICsgInB4IiwgdGhpcy5zZXRWaWV3cG9ydCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuX3ZpZXdwb3J0V2lkdGggPSB0aGlzLl9jYW52YXMud2lkdGggPSBlICogdGhpcy5kZXZpY2VQaXhlbFJhdGlvLCB0aGlzLl92aWV3cG9ydEhlaWdodCA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgPSB0ICogdGhpcy5kZXZpY2VQaXhlbFJhdGlvLCB0aGlzLl9jYW52YXMuc3R5bGUud2lkdGggPSBlICsgInB4IiwgdGhpcy5fY2FudmFzLnN0eWxlLmhlaWdodCA9IHQgKyAicHgiLCB0aGlzLl9nbC52aWV3cG9ydCgwLCAwLCB0aGlzLl9nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuX2dsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgICAgICAgICAgICAgdGhpcy5pbml0RnJhbWVCdWZmZXIoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbGVhciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gMDsKICAgICAgICAgICAgICAgICh2b2lkIDAgPT09IGUgfHwgZSkgJiYgKHMgfD0gdGhpcy5fZ2wuQ09MT1JfQlVGRkVSX0JJVCksICh2b2lkIDAgPT09IHQgfHwgdCkgJiYgKHMgfD0gdGhpcy5fZ2wuREVQVEhfQlVGRkVSX0JJVCksICh2b2lkIDAgPT09IHIgfHwgcikgJiYgKHMgfD0gdGhpcy5fZ2wuU1RFTkNJTF9CVUZGRVJfQklUKSwgdGhpcy5fZ2wuY2xlYXIocyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY2xlYXJUYXJnZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclRhcmdldChlLCB0LCByKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKGUsIHQsIHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldE1hdGVyaWFsRmFjZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNYXRlcmlhbEZhY2VzKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gZS5zaWRlID09PSBvLAogICAgICAgICAgICAgICAgICBzID0gZS5zaWRlID09PSBuOwogICAgICAgICAgICAgICAgZS5pbXBvc3RlciB8fCAocyA9IHQgPyAhcyA6IHMpLCB0aGlzLl9vbGREb3VibGVTaWRlZCAhPT0gciAmJiAociA/IHRoaXMuX2dsLmRpc2FibGUodGhpcy5fZ2wuQ1VMTF9GQUNFKSA6IHRoaXMuX2dsLmVuYWJsZSh0aGlzLl9nbC5DVUxMX0ZBQ0UpLCB0aGlzLl9vbGREb3VibGVTaWRlZCA9IHIpLCB0aGlzLl9vbGRGbGlwU2lkZWQgIT09IHMgJiYgKHMgPyB0aGlzLl9nbC5mcm9udEZhY2UodGhpcy5fZ2wuQ1cpIDogdGhpcy5fZ2wuZnJvbnRGYWNlKHRoaXMuX2dsLkNDVyksIHRoaXMuX29sZEZsaXBTaWRlZCA9IHMpLCB0aGlzLl9nbC5jdWxsRmFjZSh0aGlzLl9nbC5CQUNLKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXREZXB0aFRlc3QiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZXB0aFRlc3QoZSkgewogICAgICAgICAgICAgICAgdGhpcy5fb2xkRGVwdGhUZXN0ICE9PSBlICYmIChlID8gdGhpcy5fZ2wuZW5hYmxlKHRoaXMuX2dsLkRFUFRIX1RFU1QpIDogdGhpcy5fZ2wuZGlzYWJsZSh0aGlzLl9nbC5ERVBUSF9URVNUKSwgdGhpcy5fb2xkRGVwdGhUZXN0ID0gZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0RGVwdGhXcml0ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlcHRoV3JpdGUoZSkgewogICAgICAgICAgICAgICAgdGhpcy5fb2xkRGVwdGhXcml0ZSAhPT0gZSAmJiAodGhpcy5fZ2wuZGVwdGhNYXNrKGUpLCB0aGlzLl9vbGREZXB0aFdyaXRlID0gZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0QmxlbmRpbmciLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCbGVuZGluZyhlKSB7CiAgICAgICAgICAgICAgICBlID8gKHRoaXMuX2dsLmVuYWJsZSh0aGlzLl9nbC5CTEVORCksIHRoaXMuX2dsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSh0aGlzLl9nbC5GVU5DX0FERCwgdGhpcy5fZ2wuRlVOQ19BREQpLCB0aGlzLl9nbC5ibGVuZEZ1bmNTZXBhcmF0ZSh0aGlzLl9nbC5TUkNfQUxQSEEsIHRoaXMuX2dsLk9ORV9NSU5VU19TUkNfQUxQSEEsIHRoaXMuX2dsLk9ORSwgdGhpcy5fZ2wuT05FX01JTlVTX1NSQ19BTFBIQSkpIDogdGhpcy5fZ2wuZGlzYWJsZSh0aGlzLl9nbC5CTEVORCksIHRoaXMuX29sZEJsZW5kaW5nID0gZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbml0TWF0ZXJpYWwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0TWF0ZXJpYWwoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgdmFyIGEsIG47CiAgICAgICAgICAgICAgICBpZiAoZS5hZGRFdmVudExpc3RlbmVyKCJkaXNwb3NlIiwgdGhpcy5vbk1hdGVyaWFsRGlzcG9zZS5iaW5kKHRoaXMpKSwgbiA9IGUuc2hhZGVySUQpIHsKICAgICAgICAgICAgICAgICAgdmFyIG8gPSBwZVtuXTsKICAgICAgICAgICAgICAgICAgZS52ZXJ0ZXhTaGFkZXIgPSBvLnZlcnRleFNoYWRlciwgZS5mcmFnbWVudFNoYWRlciA9IG8uZnJhZ21lbnRTaGFkZXIsIGUudW5pZm9ybXMgPSBnZS5jbG9uZShvLnVuaWZvcm1zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGEgPSB7CiAgICAgICAgICAgICAgICAgIHdpcmVmcmFtZTogZS53aXJlZnJhbWUsCiAgICAgICAgICAgICAgICAgIGZyYWdkZXB0aDogZS5pbXBvc3RlciwKICAgICAgICAgICAgICAgICAgdm9sdW1ldHJpYzogZS52b2x1bWV0cmljCiAgICAgICAgICAgICAgICB9LCBlLnByb2dyYW0gPSB0aGlzLmJ1aWxkUHJvZ3JhbShlLmZyYWdtZW50U2hhZGVyLCBlLnZlcnRleFNoYWRlciwgZS51bmlmb3JtcywgYSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVuZGVyQnVmZmVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQnVmZmVyKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgICAgIGlmIChzLnZpc2libGUpIHsKICAgICAgICAgICAgICAgICAgdmFyIG8sIGw7CiAgICAgICAgICAgICAgICAgIGwgPSAobyA9IHRoaXMuc2V0UHJvZ3JhbShlLCB0LCByLCBzLCBuLCB0aGlzKSkuYXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgdmFyIGgsCiAgICAgICAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICAgICAgICB1ID0gITEsCiAgICAgICAgICAgICAgICAgICAgZiA9IHMud2lyZWZyYW1lID8gMSA6IDAsCiAgICAgICAgICAgICAgICAgICAgcCA9IDE2Nzc3MjE1ICogYS5pZCArIDIgKiBvLmlkICsgZjsKICAgICAgICAgICAgICAgICAgaWYgKHAgIT09IHRoaXMuX2N1cnJlbnRHZW9tZXRyeUdyb3VwSGFzaCAmJiAodGhpcy5fY3VycmVudEdlb21ldHJ5R3JvdXBIYXNoID0gcCwgdSA9ICEwKSwgdSAmJiAodGhpcy5kaXNhYmxlQXR0cmlidXRlcygpLCBsLnBvc2l0aW9uID49IDAgJiYgKHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIpLCB0aGlzLmVuYWJsZUF0dHJpYnV0ZShsLnBvc2l0aW9uKSwgdGhpcy5fZ2wudmVydGV4QXR0cmliUG9pbnRlcihsLnBvc2l0aW9uLCAzLCB0aGlzLl9nbC5GTE9BVCwgITEsIDAsIDApKSwgbC5jb2xvciA+PSAwICYmICh0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgYS5fX3dlYmdsQ29sb3JCdWZmZXIpLCB0aGlzLmVuYWJsZUF0dHJpYnV0ZShsLmNvbG9yKSwgdGhpcy5fZ2wudmVydGV4QXR0cmliUG9pbnRlcihsLmNvbG9yLCAzLCB0aGlzLl9nbC5GTE9BVCwgITEsIDAsIDApKSwgbC5ub3JtYWwgPj0gMCAmJiAodGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIGEuX193ZWJnbE5vcm1hbEJ1ZmZlciksIHRoaXMuZW5hYmxlQXR0cmlidXRlKGwubm9ybWFsKSwgdGhpcy5fZ2wudmVydGV4QXR0cmliUG9pbnRlcihsLm5vcm1hbCwgMywgdGhpcy5fZ2wuRkxPQVQsICExLCAwLCAwKSksIGwub2Zmc2V0ID49IDAgJiYgKHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBhLl9fd2ViZ2xPZmZzZXRCdWZmZXIpLCB0aGlzLmVuYWJsZUF0dHJpYnV0ZShsLm9mZnNldCksIHRoaXMuX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIobC5vZmZzZXQsIDMsIHRoaXMuX2dsLkZMT0FULCAhMSwgMCwgMCkpLCBsLnJhZGl1cyA+PSAwICYmICh0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgYS5fX3dlYmdsUmFkaXVzQnVmZmVyKSwgdGhpcy5lbmFibGVBdHRyaWJ1dGUobC5yYWRpdXMpLCB0aGlzLl9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwucmFkaXVzLCAxLCB0aGlzLl9nbC5GTE9BVCwgITEsIDAsIDApKSksIG4gaW5zdGFuY2VvZiBfTWVzaCkgewogICAgICAgICAgICAgICAgICAgIGlmICgiaW5zdGFuY2VkIiA9PT0gcy5zaGFkZXJJRCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBzLnNwaGVyZS5nZW9tZXRyeUdyb3Vwc1swXTsKICAgICAgICAgICAgICAgICAgICAgIHUgJiYgKHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIpLCB0aGlzLl9nbC5idWZmZXJEYXRhKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgZy52ZXJ0ZXhBcnJheSwgdGhpcy5fZ2wuU1RBVElDX0RSQVcpLCB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgYS5fX3dlYmdsTm9ybWFsQnVmZmVyKSwgdGhpcy5fZ2wuYnVmZmVyRGF0YSh0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIGcubm9ybWFsQXJyYXksIHRoaXMuX2dsLlNUQVRJQ19EUkFXKSwgdGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYS5fX3dlYmdsRmFjZUJ1ZmZlciksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGcuZmFjZUFycmF5LCB0aGlzLl9nbC5TVEFUSUNfRFJBVykpLCBoID0gZy5mYWNlaWR4LCB0aGlzLl9leHRJbnN0YW5jZWQudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGwub2Zmc2V0LCAxKSwgdGhpcy5fZXh0SW5zdGFuY2VkLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShsLnJhZGl1cywgMSksIHRoaXMuX2V4dEluc3RhbmNlZC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUobC5jb2xvciwgMSksIHRoaXMuX2V4dEluc3RhbmNlZC5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSh0aGlzLl9nbC5UUklBTkdMRVMsIGgsIHRoaXMuX2dsLlVOU0lHTkVEX1NIT1JULCAwLCBhLnJhZGl1c0FycmF5Lmxlbmd0aCksIHRoaXMuX2V4dEluc3RhbmNlZC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUobC5vZmZzZXQsIDApLCB0aGlzLl9leHRJbnN0YW5jZWQudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGwucmFkaXVzLCAwKSwgdGhpcy5fZXh0SW5zdGFuY2VkLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShsLmNvbG9yLCAwKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugcy53aXJlZnJhbWUgPyAoYyA9IGEubGluZWlkeCwgdGhpcy5zZXRMaW5lV2lkdGgocy53aXJlZnJhbWVMaW5ld2lkdGgpLCB1ICYmIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGEuX193ZWJnbExpbmVCdWZmZXIpLCB0aGlzLl9nbC5kcmF3RWxlbWVudHModGhpcy5fZ2wuTElORVMsIGMsIHRoaXMuX2dsLlVOU0lHTkVEX1NIT1JULCAwKSkgOiAoaCA9IGEuZmFjZWlkeCwgdSAmJiB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBhLl9fd2ViZ2xGYWNlQnVmZmVyKSwgdGhpcy5fZ2wuZHJhd0VsZW1lbnRzKHRoaXMuX2dsLlRSSUFOR0xFUywgaCwgdGhpcy5fZ2wuVU5TSUdORURfU0hPUlQsIDApKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmluZm8ucmVuZGVyLmNhbGxzKyssIHRoaXMuaW5mby5yZW5kZXIudmVydGljZXMgKz0gaCwgdGhpcy5pbmZvLnJlbmRlci5mYWNlcyArPSBoIC8gMzsKICAgICAgICAgICAgICAgICAgfSBlbHNlIG4gaW5zdGFuY2VvZiBfTGluZSAmJiAoYyA9IGEudmVydGljZXMsIHRoaXMuc2V0TGluZVdpZHRoKHMubGluZXdpZHRoKSwgdGhpcy5fZ2wuZHJhd0FycmF5cyh0aGlzLl9nbC5MSU5FUywgMCwgYyksIHRoaXMuaW5mby5yZW5kZXIuY2FsbHMrKyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVuZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgX0NhbWVyYSAhPSAhMSkgewogICAgICAgICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgICAgIGggPSBlLl9fbGlnaHRzLAogICAgICAgICAgICAgICAgICAgIGMgPSBlLmZvZzsKICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1hdGVyaWFsSWQgPSAtMSwgdGhpcy5fbGlnaHRzTmVlZFVwZGF0ZSA9ICEwLCB0aGlzLmF1dG9VcGRhdGVTY2VuZSAmJiBlLnVwZGF0ZU1hdHJpeFdvcmxkKCksIHZvaWQgMCA9PT0gdC5wYXJlbnQgJiYgdC51cGRhdGVNYXRyaXhXb3JsZCgpLCB0Lm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKHQubWF0cml4V29ybGQpLCB0aGlzLl9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXModC5wcm9qZWN0aW9uTWF0cml4LCB0Lm1hdHJpeFdvcmxkSW52ZXJzZSksIHRoaXMuYXV0b1VwZGF0ZU9iamVjdHMgJiYgdGhpcy5pbml0V2ViR0xPYmplY3RzKGUpLCB0aGlzLmluZm8ucmVuZGVyLmNhbGxzID0gMCwgdGhpcy5pbmZvLnJlbmRlci52ZXJ0aWNlcyA9IDAsIHRoaXMuaW5mby5yZW5kZXIuZmFjZXMgPSAwLCB0aGlzLmluZm8ucmVuZGVyLnBvaW50cyA9IDAsIHRoaXMuX2N1cnJlbnRXaWR0aCA9IHRoaXMuX3ZpZXdwb3J0V2lkdGgsIHRoaXMuX2N1cnJlbnRIZWlnaHQgPSB0aGlzLl92aWV3cG9ydEhlaWdodCwgdGhpcy5zZXRWaWV3cG9ydCgpLCB0aGlzLnNldEZyYW1lQnVmZmVyKCksICh0aGlzLmF1dG9DbGVhciB8fCByKSAmJiAodGhpcy5fZ2wuY2xlYXJDb2xvcih0aGlzLl9jbGVhckNvbG9yLnIsIHRoaXMuX2NsZWFyQ29sb3IuZywgdGhpcy5fY2xlYXJDb2xvci5iLCB0aGlzLl9jbGVhckFscGhhKSwgdGhpcy5jbGVhcih0aGlzLmF1dG9DbGVhckNvbG9yLCB0aGlzLmF1dG9DbGVhckRlcHRoLCB0aGlzLmF1dG9DbGVhclN0ZW5jaWwpKTsKICAgICAgICAgICAgICAgICAgdmFyIHUgPSAhMTsKICAgICAgICAgICAgICAgICAgZm9yIChzID0gMCwgYSA9IChsID0gZS5fX3dlYmdsT2JqZWN0cykubGVuZ3RoOyBzIDwgYTsgcysrKSBvID0gKG4gPSBsW3NdKS5vYmplY3QsIG4ucmVuZGVyID0gITEsIG8udmlzaWJsZSAmJiAodGhpcy5zZXR1cE1hdHJpY2VzKG8sIHQpLCB0aGlzLnVucm9sbEJ1ZmZlck1hdGVyaWFsKG4pLCBuLnJlbmRlciA9ICEwLCBuLnZvbHVtZXRyaWMgJiYgKHUgPSAhMCkpOwogICAgICAgICAgICAgICAgICB2YXIgZiA9IG51bGw7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QmxlbmRpbmcoITEpLCB0aGlzLnJlbmRlck9iamVjdHMoZS5fX3dlYmdsT2JqZWN0cywgITAsICJvcGFxdWUiLCB0LCBoLCBjLCAhMSwgZiksIHRoaXMucmVuZGVyU3ByaXRlcyhlLCB0LCAhMSksIHRoaXMucmVuZGVyT2JqZWN0cyhlLl9fd2ViZ2xPYmplY3RzLCAhMCwgImJsYW5rIiwgdCwgaCwgYywgITAsIGYpLCB0aGlzLnJlbmRlck9iamVjdHMoZS5fX3dlYmdsT2JqZWN0cywgITEsICJ0cmFuc3BhcmVudCIsIHQsIGgsIGMsICEwLCBmKSwgdSAmJiB0aGlzLl9mYiAmJiAodGhpcy5yZWluaXRGcmFtZUJ1ZmZlcigpLCB0aGlzLnJlbmRlck9iamVjdHMoZS5fX3dlYmdsT2JqZWN0cywgITEsICJ2b2x1bWV0cmljIiwgdCwgaCwgYywgITAsIGYpKSwgdGhpcy5yZW5kZXJGcmFtZUJ1ZmZlcnRvU2NyZWVuKCksIHRoaXMuc2V0RGVwdGhUZXN0KCEwKSwgdGhpcy5zZXREZXB0aFdyaXRlKCEwKSwgdGhpcy5yZW5kZXJTcHJpdGVzKGUsIHQsICEwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLmVycm9yKCJSZW5kZXJlci5yZW5kZXI6IGNhbWVyYSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQ2FtZXJhLiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlaW5pdEZyYW1lQnVmZmVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVpbml0RnJhbWVCdWZmZXIoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzV2ViR0wxKCkgfHwgKHRoaXMuX2ZiID0gdGhpcy5fZ2wuY3JlYXRlRnJhbWVidWZmZXIoKSwgdGhpcy5fZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuX2dsLkZSQU1FQlVGRkVSLCB0aGlzLl9mYiksIHRoaXMuX2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHRoaXMuX2dsLkZSQU1FQlVGRkVSLCB0aGlzLl9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgdGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGFyZ2V0VGV4dHVyZSwgMCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEZyYW1lQnVmZmVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RnJhbWVCdWZmZXIoKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1dlYkdMMSgpIHx8ICF0aGlzLl9mYikgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl92aWV3cG9ydFdpZHRoLAogICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fdmlld3BvcnRIZWlnaHQ7CiAgICAgICAgICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuU0NJU1NPUl9URVNUKSwgdGhpcy5fZ2wuc2Npc3NvcigwLCAwLCBlLCB0KSwgdGhpcy5fZ2wudmlld3BvcnQoMCwgMCwgZSwgdCksIHRoaXMuX2dsLmJpbmRUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX3RhcmdldFRleHR1cmUpLCB0aGlzLl9nbC50ZXhJbWFnZTJEKHRoaXMuX2dsLlRFWFRVUkVfMkQsIDAsIHRoaXMuX2dsLlJHQkEsIGUsIHQsIDAsIHRoaXMuX2dsLlJHQkEsIHRoaXMuX2dsLlVOU0lHTkVEX0JZVEUsIG51bGwpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5fZ2wuTElORUFSKSwgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl9nbC5URVhUVVJFXzJELCB0aGlzLl9nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMuX2dsLkxJTkVBUiksIHRoaXMuX2dsLnRleFBhcmFtZXRlcmkodGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZ2wuVEVYVFVSRV9XUkFQX1MsIHRoaXMuX2dsLkNMQU1QX1RPX0VER0UpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX2dsLlRFWFRVUkVfV1JBUF9ULCB0aGlzLl9nbC5DTEFNUF9UT19FREdFKSwgdGhpcy5fZ2wuYmluZFRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZGVwdGhUZXh0dXJlKSwgdGhpcy5fZ2wudGV4SW1hZ2UyRCh0aGlzLl9nbC5URVhUVVJFXzJELCAwLCB0aGlzLl9nbC5ERVBUSF9DT01QT05FTlQzMkYsIGUsIHQsIDAsIHRoaXMuX2dsLkRFUFRIX0NPTVBPTkVOVCwgdGhpcy5fZ2wuRkxPQVQsIG51bGwpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5fZ2wuTkVBUkVTVCksIHRoaXMuX2dsLnRleFBhcmFtZXRlcmkodGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCB0aGlzLl9nbC5ORUFSRVNUKSwgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl9nbC5URVhUVVJFXzJELCB0aGlzLl9nbC5URVhUVVJFX1dSQVBfUywgdGhpcy5fZ2wuQ0xBTVBfVE9fRURHRSksIHRoaXMuX2dsLnRleFBhcmFtZXRlcmkodGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZ2wuVEVYVFVSRV9XUkFQX1QsIHRoaXMuX2dsLkNMQU1QX1RPX0VER0UpLCB0aGlzLl9nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5fZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2ZiKSwgdGhpcy5fZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQodGhpcy5fZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCB0aGlzLl9nbC5URVhUVVJFXzJELCB0aGlzLl90YXJnZXRUZXh0dXJlLCAwKSwgdGhpcy5fZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQodGhpcy5fZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2dsLkRFUFRIX0FUVEFDSE1FTlQsIHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX2RlcHRoVGV4dHVyZSwgMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaW5pdEZyYW1lQnVmZmVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEZyYW1lQnVmZmVyKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNXZWJHTDEoKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl92aWV3cG9ydFdpZHRoLAogICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fdmlld3BvcnRIZWlnaHQ7CiAgICAgICAgICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuU0NJU1NPUl9URVNUKSwgdGhpcy5fZ2wuc2Npc3NvcigwLCAwLCBlLCB0KSwgdGhpcy5fZ2wudmlld3BvcnQoMCwgMCwgZSwgdCksIHRoaXMuX3RhcmdldFRleHR1cmUgPSB0aGlzLl9nbC5jcmVhdGVUZXh0dXJlKCksIHRoaXMuX2RlcHRoVGV4dHVyZSA9IHRoaXMuX2dsLmNyZWF0ZVRleHR1cmUoKSwgdGhpcy5fZmIgPSB0aGlzLl9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwogICAgICAgICAgICAgICAgdmFyIHIgPSBwZS5zY3JlZW47CiAgICAgICAgICAgICAgICB0aGlzLl9zY3JlZW5zaGFkZXIgPSB0aGlzLmJ1aWxkUHJvZ3JhbShyLmZyYWdtZW50U2hhZGVyLCByLnZlcnRleFNoYWRlciwgci51bmlmb3Jtcywge30pLCB0aGlzLl92ZXJ0ZXhhdHRyaWJwb3MgPSB0aGlzLl9nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zY3JlZW5zaGFkZXIsICJ2ZXJ0ZXhQb3NpdGlvbiIpOwogICAgICAgICAgICAgICAgdGhpcy5fc2NyZWVuUXVhZFZCTyA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpLCB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgdGhpcy5fc2NyZWVuUXVhZFZCTyksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFsxLCAxLCAtMSwgMSwgLTEsIC0xLCAtMSwgLTEsIDEsIC0xLCAxLCAxXSksIHRoaXMuX2dsLlNUQVRJQ19EUkFXKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW5kZXJGcmFtZUJ1ZmZlcnRvU2NyZWVuIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRnJhbWVCdWZmZXJ0b1NjcmVlbigpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNXZWJHTDEoKSB8fCBudWxsID09PSB0aGlzLl9mYiB8fCAodGhpcy5zZXRWaWV3cG9ydCgpLCB0aGlzLl9nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5fZ2wuRlJBTUVCVUZGRVIsIG51bGwpLCB0aGlzLl9nbC5jbGVhcih0aGlzLl9nbC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy5fZ2wuREVQVEhfQlVGRkVSX0JJVCksIHRoaXMuX2dsLmZyb250RmFjZSh0aGlzLl9nbC5DQ1cpLCB0aGlzLl9nbC5jdWxsRmFjZSh0aGlzLl9nbC5CQUNLKSwgdGhpcy5fZ2wudXNlUHJvZ3JhbSh0aGlzLl9zY3JlZW5zaGFkZXIpLCB0aGlzLl9jdXJyZW50UHJvZ3JhbSA9IHRoaXMuX3NjcmVlbnNoYWRlciwgdGhpcy5zZXREZXB0aFRlc3QoLTEpLCB0aGlzLnNldERlcHRoV3JpdGUoLTEpLCB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgdGhpcy5fc2NyZWVuUXVhZFZCTyksIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuX3ZlcnRleGF0dHJpYnBvcyksIHRoaXMuX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fdmVydGV4YXR0cmlicG9zLCAyLCB0aGlzLl9nbC5GTE9BVCwgITEsIDAsIDApLCB0aGlzLl9nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkUwKSwgdGhpcy5fZ2wuYmluZFRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGFyZ2V0VGV4dHVyZSksIHRoaXMuX2dsLmRyYXdBcnJheXModGhpcy5fZ2wuVFJJQU5HTEVTLCAwLCA2KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaW5pdFdlYkdMT2JqZWN0cyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRXZWJHTE9iamVjdHMoZSkgewogICAgICAgICAgICAgICAgaWYgKGUuX193ZWJnbE9iamVjdHMgfHwgKGUuX193ZWJnbE9iamVjdHMgPSBbXSwgZS5fX3dlYmdsT2JqZWN0c0ltbWVkaWF0ZSA9IFtdLCBlLl9fd2ViZ2xTcHJpdGVzID0gW10sIGUuX193ZWJnbEZsYXJlcyA9IFtdKSwgZS5fX29iamVjdHNBZGRlZC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgZm9yICg7IGUuX19vYmplY3RzQWRkZWQubGVuZ3RoOykgdGhpcy5hZGRPYmplY3QoZS5fX29iamVjdHNBZGRlZFswXSwgZSksIGUuX19vYmplY3RzQWRkZWQuc3BsaWNlKDAsIDEpOwogICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50R2VvbWV0cnlHcm91cEhhc2ggPSAtMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoOyBlLl9fb2JqZWN0c1JlbW92ZWQubGVuZ3RoOykgdGhpcy5yZW1vdmVPYmplY3QoZS5fX29iamVjdHNSZW1vdmVkWzBdLCBlKSwgZS5fX29iamVjdHNSZW1vdmVkLnNwbGljZSgwLCAxKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwLCByID0gZS5fX3dlYmdsT2JqZWN0cy5sZW5ndGg7IHQgPCByOyB0KyspIHRoaXMudXBkYXRlT2JqZWN0KGUuX193ZWJnbE9iamVjdHNbdF0ub2JqZWN0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRZUmF0aW8iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRZUmF0aW8oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLnJvd3MgJiYgdm9pZCAwICE9PSB0aGlzLnJvdyA/IHRoaXMucm93cyA6IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0WFJhdGlvIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0WFJhdGlvKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5jb2xzICYmIHZvaWQgMCAhPT0gdGhpcy5jb2wgPyB0aGlzLmNvbHMgOiAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldEFzcGVjdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFzcGVjdChlLCB0KSB7CiAgICAgICAgICAgICAgICBudWxsICE9IGUgJiYgbnVsbCAhPSB0IHx8IChlID0gdGhpcy5fY2FudmFzLndpZHRoLCB0ID0gdGhpcy5fY2FudmFzLmhlaWdodCk7CiAgICAgICAgICAgICAgICB2YXIgciA9IGUgLyB0OwogICAgICAgICAgICAgICAgbnVsbCAhPSB0aGlzLnJvd3MgJiYgbnVsbCAhPSB0aGlzLmNvbHMgJiYgbnVsbCAhPSB0aGlzLnJvdyAmJiBudWxsICE9IHRoaXMuY29sICYmIChyID0gZSAvIHRoaXMuY29scyAvICh0IC8gdGhpcy5yb3dzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRUZXh0dXJlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGV4dHVyZShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICBpZiAoZS5uZWVkc1VwZGF0ZSkgewogICAgICAgICAgICAgICAgICBlLl9fd2ViZ2xJbml0IHx8IChlLl9fd2ViZ2xJbml0ID0gITAsIGUuYWRkRXZlbnRMaXN0ZW5lcigiZGlzcG9zZSIsIHRoaXMub25UZXh0dXJlRGlzcG9zZS5iaW5kKHRoaXMpKSwgZS5fX3dlYmdsVGV4dHVyZSA9IHRoaXMuX2dsLmNyZWF0ZVRleHR1cmUoKSwgdGhpcy5pbmZvLm1lbW9yeS50ZXh0dXJlcysrKSwgdGhpcy5fZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLl9nbC5URVhUVVJFMCArIHQpOwogICAgICAgICAgICAgICAgICB2YXIgcyA9IHIgPyB0aGlzLl9nbC5URVhUVVJFXzNEIDogdGhpcy5fZ2wuVEVYVFVSRV8yRDsKICAgICAgICAgICAgICAgICAgdGhpcy5fZ2wuYmluZFRleHR1cmUocywgZS5fX3dlYmdsVGV4dHVyZSksIHRoaXMuX2dsLnBpeGVsU3RvcmVpKHRoaXMuX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIGUuZmxpcFkpLCB0aGlzLl9nbC5waXhlbFN0b3JlaSh0aGlzLl9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGUucHJlbXVsdGlwbHlBbHBoYSksIHRoaXMuX2dsLnBpeGVsU3RvcmVpKHRoaXMuX2dsLlVOUEFDS19BTElHTk1FTlQsIGUudW5wYWNrQWxpZ25tZW50KSwgdGhpcy5fZ2wucGl4ZWxTdG9yZWkodGhpcy5fZ2wuUEFDS19BTElHTk1FTlQsIGUudW5wYWNrQWxpZ25tZW50KTsKICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLnBhcmFtVG9HTChlLmZvcm1hdCksCiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMucGFyYW1Ub0dMKGUudHlwZSk7CiAgICAgICAgICAgICAgICAgIGlmIChyKSB0aGlzLnNldFRleHR1cmVQYXJhbWV0ZXJzKHRoaXMuX2dsLlRFWFRVUkVfM0QsIGUpLCB0aGlzLl9nbC50ZXhJbWFnZTNEKHRoaXMuX2dsLlRFWFRVUkVfM0QsIDAsIHRoaXMuX2dsLlIzMkYsIGUuaW1hZ2Uuc2l6ZS56LCBlLmltYWdlLnNpemUueSwgZS5pbWFnZS5zaXplLngsIDAsIHRoaXMuX2dsLlJFRCwgdGhpcy5fZ2wuRkxPQVQsIGUuaW1hZ2UuZGF0YSk7ZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLmltYWdlLAogICAgICAgICAgICAgICAgICAgICAgbCA9IG8ud2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICBoID0gby5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBsICYmIChsID0gby5sZW5ndGgsIGEgPT0gdGhpcy5fZ2wuUkdCQSAmJiAobCAvPSA0KSwgaCA9IDEpLCB0aGlzLnNldFRleHR1cmVQYXJhbWV0ZXJzKHRoaXMuX2dsLlRFWFRVUkVfMkQsIGUpLCB0aGlzLmlzV2ViR0wxKCkgPyB0aGlzLl9nbC50ZXhJbWFnZTJEKHRoaXMuX2dsLlRFWFRVUkVfMkQsIDAsIGEsIGEsIG4sIGUuaW1hZ2UpIDogdGhpcy5fZ2wudGV4SW1hZ2UyRCh0aGlzLl9nbC5URVhUVVJFXzJELCAwLCBhLCBsLCBoLCAwLCBhLCBuLCBlLmltYWdlKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBlLm5lZWRzVXBkYXRlID0gITEsIGUub25VcGRhdGUgJiYgZS5vblVwZGF0ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuX2dsLmFjdGl2ZVRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRTAgKyB0KSwgciA/IHRoaXMuX2dsLmJpbmRUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkVfM0QsIGUuX193ZWJnbFRleHR1cmUpIDogdGhpcy5fZ2wuYmluZFRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRV8yRCwgZS5fX3dlYmdsVGV4dHVyZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic3VwcG9ydHNWb2x1bWV0cmljIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3VwcG9ydHNWb2x1bWV0cmljKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzV2ViR0wxKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZW5hYmxlQXR0cmlidXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZWRBdHRyaWJ1dGVzW2VdIHx8ICh0aGlzLl9nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShlKSwgdGhpcy5fZW5hYmxlZEF0dHJpYnV0ZXNbZV0gPSAhMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzYWJsZUF0dHJpYnV0ZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlQXR0cmlidXRlcygpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lOTggaW4gdGhpcy5fZW5hYmxlZEF0dHJpYnV0ZXMpIHRoaXMuX2VuYWJsZWRBdHRyaWJ1dGVzW19lOThdICYmICh0aGlzLl9nbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoX2U5OCksIHRoaXMuX2VuYWJsZWRBdHRyaWJ1dGVzW19lOThdID0gITEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFBvbHlnb25PZmZzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb2x5Z29uT2Zmc2V0KGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHRoaXMuX29sZFBvbHlnb25PZmZzZXQgIT09IGUgJiYgKGUgPyB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCkgOiB0aGlzLl9nbC5kaXNhYmxlKHRoaXMuX2dsLlBPTFlHT05fT0ZGU0VUX0ZJTEwpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRMaW5lV2lkdGgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMaW5lV2lkdGgoZSkgewogICAgICAgICAgICAgICAgZSAhPT0gdGhpcy5fb2xkTGluZVdpZHRoICYmICh0aGlzLl9nbC5saW5lV2lkdGgoZSksIHRoaXMuX29sZExpbmVXaWR0aCA9IGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImRlYWxsb2NhdGVHZW9tZXRyeSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlYWxsb2NhdGVHZW9tZXRyeShlKSB7CiAgICAgICAgICAgICAgICBpZiAoZS5fX3dlYmdsSW5pdCA9IHZvaWQgMCwgdm9pZCAwICE9PSBlLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIgJiYgdGhpcy5fZ2wuZGVsZXRlQnVmZmVyKGUuX193ZWJnbFZlcnRleEJ1ZmZlciksIHZvaWQgMCAhPT0gZS5fX3dlYmdsQ29sb3JCdWZmZXIgJiYgdGhpcy5fZ2wuZGVsZXRlQnVmZmVyKGUuX193ZWJnbENvbG9yQnVmZmVyKSwgdm9pZCAwICE9PSBlLmdlb21ldHJ5R3JvdXBzKSBmb3IgKHZhciB0ID0gMCwgciA9IGUuZ3JvdXBzOyB0IDwgcjsgdCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBzID0gZS5nZW9tZXRyeUdyb3Vwc1t0XTsKICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBzLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIgJiYgdGhpcy5fZ2wuZGVsZXRlQnVmZmVyKHMuX193ZWJnbFZlcnRleEJ1ZmZlciksIHZvaWQgMCAhPT0gcy5fX3dlYmdsQ29sb3JCdWZmZXIgJiYgdGhpcy5fZ2wuZGVsZXRlQnVmZmVyKHMuX193ZWJnbENvbG9yQnVmZmVyKSwgdm9pZCAwICE9PSBzLl9fd2ViZ2xOb3JtYWxCdWZmZXIgJiYgdGhpcy5fZ2wuZGVsZXRlQnVmZmVyKHMuX193ZWJnbE5vcm1hbEJ1ZmZlciksIHZvaWQgMCAhPT0gcy5fX3dlYmdsRmFjZUJ1ZmZlciAmJiB0aGlzLl9nbC5kZWxldGVCdWZmZXIocy5fX3dlYmdsRmFjZUJ1ZmZlciksIHZvaWQgMCAhPT0gcy5fX3dlYmdsTGluZUJ1ZmZlciAmJiB0aGlzLl9nbC5kZWxldGVCdWZmZXIocy5fX3dlYmdsTGluZUJ1ZmZlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGVhbGxvY2F0ZU1hdGVyaWFsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS5wcm9ncmFtOwogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdCkgewogICAgICAgICAgICAgICAgICB2YXIgciwgcywgYTsKICAgICAgICAgICAgICAgICAgZS5wcm9ncmFtID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICB2YXIgbiA9ICExOwogICAgICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBzID0gdGhpcy5fcHJvZ3JhbXMubGVuZ3RoOyByIDwgczsgcisrKSBpZiAoKGEgPSB0aGlzLl9wcm9ncmFtc1tyXSkucHJvZ3JhbSA9PT0gdCkgewogICAgICAgICAgICAgICAgICAgIGEudXNlZFRpbWVzLS0sIDAgPT09IGEudXNlZFRpbWVzICYmIChuID0gITApOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICghMCA9PT0gbikgewogICAgICAgICAgICAgICAgICAgIHZhciBvID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChyID0gMCwgcyA9IHRoaXMuX3Byb2dyYW1zLmxlbmd0aDsgciA8IHM7IHIrKykgKGEgPSB0aGlzLl9wcm9ncmFtc1tyXSkucHJvZ3JhbSAhPT0gdCAmJiBvLnB1c2goYSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbXMgPSBvLCB0aGlzLl9nbC5kZWxldGVQcm9ncmFtKHQpLCB0aGlzLmluZm8ubWVtb3J5LnByb2dyYW1zLS07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkZWFsbG9jYXRlVGV4dHVyZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKGUpIHsKICAgICAgICAgICAgICAgIGlmIChlLmltYWdlICYmIGUuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlKSB0aGlzLl9nbC5kZWxldGVUZXh0dXJlKGUuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlKTtlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlLl9fd2ViZ2xJbml0KSByZXR1cm47CiAgICAgICAgICAgICAgICAgIGUuX193ZWJnbEluaXQgPSAhMSwgdGhpcy5fZ2wuZGVsZXRlVGV4dHVyZShlLl9fd2ViZ2xUZXh0dXJlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJvbkdlb21ldHJ5RGlzcG9zZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS50YXJnZXQ7CiAgICAgICAgICAgICAgICB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImRpc3Bvc2UiLCB0aGlzLm9uR2VvbWV0cnlEaXNwb3NlKSwgdGhpcy5kZWFsbG9jYXRlR2VvbWV0cnkodCksIHRoaXMuaW5mby5tZW1vcnkuZ2VvbWV0cmllcy0tOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm9uVGV4dHVyZURpc3Bvc2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS50YXJnZXQ7CiAgICAgICAgICAgICAgICB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImRpc3Bvc2UiLCB0aGlzLm9uVGV4dHVyZURpc3Bvc2UpLCB0aGlzLmRlYWxsb2NhdGVUZXh0dXJlKHQpLCB0aGlzLmluZm8ubWVtb3J5LnRleHR1cmVzLS07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAib25NYXRlcmlhbERpc3Bvc2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGUudGFyZ2V0OwogICAgICAgICAgICAgICAgdC5yZW1vdmVFdmVudExpc3RlbmVyKCJkaXNwb3NlIiwgdGhpcy5vbk1hdGVyaWFsRGlzcG9zZSksIHRoaXMuZGVhbGxvY2F0ZU1hdGVyaWFsKHQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldFNoYWRlciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNoYWRlcihlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgcjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzV2ViR0wxKCkgfHwgdC5zdGFydHNXaXRoKCIjdmVyc2lvbiIpIHx8ICh0ID0gdC5yZXBsYWNlKC9nbF9GcmFnRGVwdGhFWFQvZywgImdsX0ZyYWdEZXB0aCIpLCB0ID0gIiN2ZXJzaW9uIDMwMCBlc1xuIiArICh0ID0gKHQgPSAodCA9ICh0ID0gKHQgPSAiZnJhZ21lbnQiID09IGUgPyB0LnJlcGxhY2UoL3ZhcnlpbmcvZywgImluIikgOiB0LnJlcGxhY2UoL3ZhcnlpbmcvZywgIm91dCIpKS5yZXBsYWNlKC9hdHRyaWJ1dGUvZywgImluIikpLnJlcGxhY2UoL3RleHR1cmUyRC9nLCAidGV4dHVyZSIpKS5yZXBsYWNlKC9cL1wvREVGSU5FRlJBR0NPTE9SL2csICJvdXQgdmVjNCBnbEZyYWdDb2xvcjsiKSkucmVwbGFjZSgvZ2xfRnJhZ0NvbG9yL2csICJnbEZyYWdDb2xvciIpKSksICJmcmFnbWVudCIgPT09IGUgPyByID0gdGhpcy5fZ2wuY3JlYXRlU2hhZGVyKHRoaXMuX2dsLkZSQUdNRU5UX1NIQURFUikgOiAidmVydGV4IiA9PT0gZSAmJiAociA9IHRoaXMuX2dsLmNyZWF0ZVNoYWRlcih0aGlzLl9nbC5WRVJURVhfU0hBREVSKSksIHRoaXMuX2dsLnNoYWRlclNvdXJjZShyLCB0KSwgdGhpcy5fZ2wuY29tcGlsZVNoYWRlcihyKSwgdGhpcy5fZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHIsIHRoaXMuX2dsLkNPTVBJTEVfU1RBVFVTKSA/IHIgOiAoY29uc29sZS5lcnJvcih0aGlzLl9nbC5nZXRTaGFkZXJJbmZvTG9nKHIpKSwgY29uc29sZS5lcnJvcigiY291bGQgbm90IGluaXRpYWxpemUgc2hhZGVyIiksIG51bGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImJ1aWxkUHJvZ3JhbSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkUHJvZ3JhbShlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgICB2YXIgYSwKICAgICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgbCwKICAgICAgICAgICAgICAgICAgaCA9IFtdOwogICAgICAgICAgICAgICAgZm9yIChhIGluIGgucHVzaChlKSwgaC5wdXNoKHQpLCBzKSBoLnB1c2goYSksIGgucHVzaChzW2FdKTsKICAgICAgICAgICAgICAgIGZvciAobCA9IGguam9pbigpLCBhID0gMCwgbiA9IHRoaXMuX3Byb2dyYW1zLmxlbmd0aDsgYSA8IG47IGErKykgewogICAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMuX3Byb2dyYW1zW2FdOwogICAgICAgICAgICAgICAgICBpZiAoYy5jb2RlID09PSBsKSByZXR1cm4gYy51c2VkVGltZXMrKywgYy5wcm9ncmFtOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNXZWJHTDEoKSAmJiBzLnZvbHVtZXRyaWMpIHRocm93IG5ldyBFcnJvcigiVm9sdW1ldHJpYyByZW5kZXJpbmcgcmVxdWlyZXMgd2ViZ2wyIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBoYXJkd2FyZS4iKTsKICAgICAgICAgICAgICAgIG8gPSB0aGlzLl9nbC5jcmVhdGVQcm9ncmFtKCk7CiAgICAgICAgICAgICAgICB2YXIgdSwKICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgICAgZyA9ICJwcmVjaXNpb24gIiArIHRoaXMuX3ByZWNpc2lvbiArICIgZmxvYXQ7IiwKICAgICAgICAgICAgICAgICAgdiA9IFtzLnZvbHVtZXRyaWMgPyAiI3ZlcnNpb24gMzAwIGVzIiA6ICIiLCBnXS5qb2luKCJcbiIpLAogICAgICAgICAgICAgICAgICBfID0gW3Mudm9sdW1ldHJpYyA/ICIjdmVyc2lvbiAzMDAgZXMiIDogIiIsIHMuZnJhZ2RlcHRoICYmIHRoaXMuaXNXZWJHTDEoKSA/ICIjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoOiBlbmFibGUiIDogIiIsIHMud2lyZWZyYW1lID8gIiNkZWZpbmUgV0lSRUZSQU1FIDEiIDogIiIsIGddLmpvaW4oIlxuIiksCiAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLmdldFNoYWRlcigiZnJhZ21lbnQiLCBfICsgZSksCiAgICAgICAgICAgICAgICAgIGIgPSB0aGlzLmdldFNoYWRlcigidmVydGV4IiwgdiArIHQpOwogICAgICAgICAgICAgICAgZm9yIChmIGluIHRoaXMuX2dsLmF0dGFjaFNoYWRlcihvLCBiKSwgdGhpcy5fZ2wuYXR0YWNoU2hhZGVyKG8sIHkpLCB0aGlzLl9nbC5saW5rUHJvZ3JhbShvKSwgdGhpcy5fZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihvLCB0aGlzLl9nbC5MSU5LX1NUQVRVUykgfHwgY29uc29sZS5lcnJvcigiQ291bGQgbm90IGluaXRpYWxpemUgc2hhZGVyIiksIG8udW5pZm9ybXMgPSB7fSwgby5hdHRyaWJ1dGVzID0ge30sIHUgPSBbInZpZXdNYXRyaXgiLCAibW9kZWxWaWV3TWF0cml4IiwgInByb2plY3Rpb25NYXRyaXgiLCAibm9ybWFsTWF0cml4Il0sIHIpIHUucHVzaChmKTsKICAgICAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCB1Lmxlbmd0aDsgcCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciB3ID0gdVtwXTsKICAgICAgICAgICAgICAgICAgby51bmlmb3Jtc1t3XSA9IHRoaXMuX2dsLmdldFVuaWZvcm1Mb2NhdGlvbihvLCB3KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodSA9IFsicG9zaXRpb24iLCAibm9ybWFsIiwgImNvbG9yIiwgImxpbmVEaXN0YW5jZSIsICJvZmZzZXQiLCAicmFkaXVzIl0sIHAgPSAwOyBwIDwgdS5sZW5ndGg7IHArKykgewogICAgICAgICAgICAgICAgICB2YXIgeCA9IHVbcF07CiAgICAgICAgICAgICAgICAgIG8uYXR0cmlidXRlc1t4XSA9IHRoaXMuX2dsLmdldEF0dHJpYkxvY2F0aW9uKG8sIHgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG8uaWQgPSB0aGlzLl9wcm9ncmFtc19jb3VudGVyKyssIHRoaXMuX3Byb2dyYW1zLnB1c2goewogICAgICAgICAgICAgICAgICBwcm9ncmFtOiBvLAogICAgICAgICAgICAgICAgICBjb2RlOiBsLAogICAgICAgICAgICAgICAgICB1c2VkVGltZXM6IDEKICAgICAgICAgICAgICAgIH0pLCB0aGlzLmluZm8ubWVtb3J5LnByb2dyYW1zID0gdGhpcy5fcHJvZ3JhbXMubGVuZ3RoLCBvOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFByb2dyYW0iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQcm9ncmFtKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgICAgIHMubmVlZHNVcGRhdGUgJiYgKHMucHJvZ3JhbSAmJiB0aGlzLmRlYWxsb2NhdGVNYXRlcmlhbChzKSwgdGhpcy5pbml0TWF0ZXJpYWwocywgdCwgciwgYSksIHMubmVlZHNVcGRhdGUgPSAhMSk7CiAgICAgICAgICAgICAgICB2YXIgbyA9ICExLAogICAgICAgICAgICAgICAgICBsID0gcy5wcm9ncmFtLAogICAgICAgICAgICAgICAgICBoID0gbC51bmlmb3JtcywKICAgICAgICAgICAgICAgICAgYyA9IHMudW5pZm9ybXM7CiAgICAgICAgICAgICAgICBpZiAobCAhPSB0aGlzLl9jdXJyZW50UHJvZ3JhbSAmJiAodGhpcy5fZ2wudXNlUHJvZ3JhbShsKSwgdGhpcy5fY3VycmVudFByb2dyYW0gPSBsLCBvID0gITApLCBzLmlkICE9IHRoaXMuX2N1cnJlbnRNYXRlcmlhbElkICYmICh0aGlzLl9jdXJyZW50TWF0ZXJpYWxJZCA9IHMuaWQsIG8gPSAhMCksIGUgIT0gdGhpcy5fY3VycmVudENhbWVyYSAmJiAodGhpcy5fY3VycmVudENhbWVyYSA9IGUsIG8gPSAhMCksIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXg0ZnYoaC5wcm9qZWN0aW9uTWF0cml4LCAhMSwgZS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzKSwgdGhpcy5fZ2wudW5pZm9ybU1hdHJpeDRmdihoLm1vZGVsVmlld01hdHJpeCwgITEsIGEuX21vZGVsVmlld01hdHJpeC5lbGVtZW50cyksIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXgzZnYoaC5ub3JtYWxNYXRyaXgsICExLCBhLl9ub3JtYWxNYXRyaXguZWxlbWVudHMpLCBvKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjLmZvZ0NvbG9yLnZhbHVlID0gci5jb2xvciwgYy5mb2dOZWFyLnZhbHVlID0gci5uZWFyLCBjLmZvZ0Zhci52YWx1ZSA9IHIuZmFyLCBzLnNoYWRlcklELnN0YXJ0c1dpdGgoImxhbWJlcnQiKSB8fCAiaW5zdGFuY2VkIiA9PT0gcy5zaGFkZXJJRCB8fCBzLnNoYWRlcklELmVuZHNXaXRoKCJpbXBvc3RlciIpKSB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KGgudmlld01hdHJpeCwgITEsIGUubWF0cml4V29ybGRJbnZlcnNlLmVsZW1lbnRzKSwgdGhpcy5fbGlnaHRzTmVlZFVwZGF0ZSAmJiAodGhpcy5zZXR1cExpZ2h0cyhsLCB0KSwgdGhpcy5fbGlnaHRzTmVlZFVwZGF0ZSA9ICExKSwgYy5kaXJlY3Rpb25hbExpZ2h0Q29sb3IudmFsdWUgPSB0aGlzLl9saWdodHMuZGlyZWN0aW9uYWwuY29sb3JzLCBjLmRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb24udmFsdWUgPSB0aGlzLl9saWdodHMuZGlyZWN0aW9uYWwucG9zaXRpb25zO2Vsc2UgaWYgKHMuc2hhZGVySUQuZW5kc1dpdGgoIm91dGxpbmUiKSkgYy5vdXRsaW5lQ29sb3IudmFsdWUgPSBzLm91dGxpbmVDb2xvciwgYy5vdXRsaW5lV2lkdGgudmFsdWUgPSBzLm91dGxpbmVXaWR0aCwgYy5vdXRsaW5lUHVzaGJhY2sudmFsdWUgPSBzLm91dGxpbmVQdXNoYmFjaztlbHNlIGlmICgidm9sdW1ldHJpYyIgPT09IHMuc2hhZGVySUQpIHsKICAgICAgICAgICAgICAgICAgICBhLl9tb2RlbFZpZXdNYXRyaXguZ2V0U2NhbGUodGhpcy5fZGlyZWN0aW9uKSwgdGhpcy5fd29ybGRJbnZlcnNlLmdldEludmVyc2UoYS5fbW9kZWxWaWV3TWF0cml4KSwgdGhpcy5fcHJvakludmVyc2UuZ2V0SW52ZXJzZShlLnByb2plY3Rpb25NYXRyaXgpLCB0aGlzLl90ZXh0dXJlTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYS5tYXRlcmlhbC50ZXhtYXRyaXgsIHRoaXMuX3dvcmxkSW52ZXJzZSksIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXg0ZnYoaC50ZXh0bWF0LCAhMSwgdGhpcy5fdGV4dHVyZU1hdHJpeC5lbGVtZW50cyksIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXg0ZnYoaC5wcm9qaW52LCAhMSwgdGhpcy5fcHJvakludmVyc2UuZWxlbWVudHMpOwogICAgICAgICAgICAgICAgICAgIHZhciBfdDk3ID0gTWF0aC5taW4oTWF0aC5taW4odGhpcy5fZGlyZWN0aW9uLngsIHRoaXMuX2RpcmVjdGlvbi55KSwgdGhpcy5fZGlyZWN0aW9uLnopOwogICAgICAgICAgICAgICAgICAgIGMuc3RlcC52YWx1ZSA9IGEubWF0ZXJpYWwudW5pdCAqIF90OTcsIGMubWF4ZGVwdGgudmFsdWUgPSBhLm1hdGVyaWFsLm1heGRlcHRoICogX3Q5NywgYy50cmFuc2Zlcm1heC52YWx1ZSA9IGEubWF0ZXJpYWwudHJhbnNmZXJtYXgsIGMudHJhbnNmZXJtaW4udmFsdWUgPSBhLm1hdGVyaWFsLnRyYW5zZmVybWluLCBjLnN1YnNhbXBsZXMudmFsdWUgPSBhLm1hdGVyaWFsLnN1YnNhbXBsZXMsIG4uc2V0VGV4dHVyZShhLm1hdGVyaWFsLnRyYW5zZmVyZm4sIDQsICExKSwgbi5zZXRUZXh0dXJlKGEubWF0ZXJpYWwubWFwLCAzLCAhMCksIHRoaXMuX2dsLmFjdGl2ZVRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRTUpLCB0aGlzLl9nbC5iaW5kVGV4dHVyZSh0aGlzLl9nbC5URVhUVVJFXzJELCB0aGlzLl9kZXB0aFRleHR1cmUpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGMub3BhY2l0eS52YWx1ZSA9IHMub3BhY2l0eSwgdGhpcy5sb2FkTWF0ZXJpYWxVbmlmb3JtcyhoLCBjKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImxvYWRNYXRlcmlhbFVuaWZvcm1zIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZE1hdGVyaWFsVW5pZm9ybXMoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIsIHMsIGEsIG47CiAgICAgICAgICAgICAgICBmb3IgKHIgaW4gdCkgZVtyXSAmJiAocyA9IHRbcl0udHlwZSwgYSA9IHRbcl0udmFsdWUsIG4gPSBlW3JdLCAiZiIgPT09IHMgPyB0aGlzLl9nbC51bmlmb3JtMWYobiwgYSkgOiAiaSIgPT09IHMgPyB0aGlzLl9nbC51bmlmb3JtMWkobiwgYSkgOiAiZnYiID09PSBzID8gdGhpcy5fZ2wudW5pZm9ybTNmdihuLCBhKSA6ICJjIiA9PT0gcyA/IHRoaXMuX2dsLnVuaWZvcm0zZihuLCBhLnIsIGEuZywgYS5iKSA6ICJmNCIgPT09IHMgJiYgdGhpcy5fZ2wudW5pZm9ybTRmKG4sIGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRPYmplY3QiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRPYmplY3QoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIsIHMsIGEsIG47CiAgICAgICAgICAgICAgICBpZiAoIWUuX193ZWJnbEluaXQgJiYgKGUuX193ZWJnbEluaXQgPSAhMCwgZS5fbW9kZWxWaWV3TWF0cml4ID0gbmV3IGguTWF0cml4NCgpLCBlLl9ub3JtYWxNYXRyaXggPSBuZXcgaC5NYXRyaXgzKCksIHZvaWQgMCAhPT0gZS5nZW9tZXRyeSAmJiB2b2lkIDAgPT09IGUuZ2VvbWV0cnkuX193ZWJnbEluaXQgJiYgKGUuZ2VvbWV0cnkuX193ZWJnbEluaXQgPSAhMCwgZS5nZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCJkaXNwb3NlIiwgdGhpcy5vbkdlb21ldHJ5RGlzcG9zZS5iaW5kKHRoaXMpKSksIGUgaW5zdGFuY2VvZiBfTWVzaCB8fCBlIGluc3RhbmNlb2YgX0xpbmUpKSBmb3IgKGEgPSBlLmdlb21ldHJ5LCBlLm1hdGVyaWFsLCByID0gMCwgcyA9IGEuZ2VvbWV0cnlHcm91cHMubGVuZ3RoOyByIDwgczsgcisrKSAobiA9IGEuZ2VvbWV0cnlHcm91cHNbcl0pLmlkID0gdGhpcy5fZ2VvbWV0cnlHcm91cENvdW50ZXIrKywgbi5fX3dlYmdsVmVydGV4QnVmZmVyIHx8IChlIGluc3RhbmNlb2YgX01lc2ggPyAodGhpcy5jcmVhdGVNZXNoQnVmZmVycyhuKSwgYS5lbGVtZW50c05lZWRVcGRhdGUgPSAhMCwgYS5ub3JtYWxzTmVlZFVwZGF0ZSA9ICEwKSA6IGUgaW5zdGFuY2VvZiBfTGluZSAmJiB0aGlzLmNyZWF0ZUxpbmVCdWZmZXJzKG4pLCBhLnZlcnRpY2VzTmVlZFVwZGF0ZSA9ICEwLCBhLmNvbG9yc05lZWRVcGRhdGUgPSAhMCk7CiAgICAgICAgICAgICAgICBpZiAoIWUuX193ZWJnbEFjdGl2ZSkgewogICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIF9NZXNoIHx8IGUgaW5zdGFuY2VvZiBfTGluZSkgZm9yIChyID0gMCwgcyA9IChhID0gZS5nZW9tZXRyeSkuZ2VvbWV0cnlHcm91cHMubGVuZ3RoOyByIDwgczsgcisrKSBuID0gYS5nZW9tZXRyeUdyb3Vwc1tyXSwgdGhpcy5hZGRCdWZmZXIodC5fX3dlYmdsT2JqZWN0cywgbiwgZSk7ZWxzZSBlIGluc3RhbmNlb2YgX1Nwcml0ZSAmJiB0Ll9fd2ViZ2xTcHJpdGVzLnB1c2goZSk7CiAgICAgICAgICAgICAgICAgIGUuX193ZWJnbEFjdGl2ZSA9ICEwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInVwZGF0ZU9iamVjdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9iamVjdChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCwKICAgICAgICAgICAgICAgICAgciA9IGUuZ2VvbWV0cnk7CiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIF9NZXNoIHx8IGUgaW5zdGFuY2VvZiBfTGluZSkgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMCwgYSA9IHIuZ2VvbWV0cnlHcm91cHMubGVuZ3RoOyBzIDwgYTsgcysrKSB0ID0gci5nZW9tZXRyeUdyb3Vwc1tzXSwgKHIudmVydGljZXNOZWVkVXBkYXRlIHx8IHIuZWxlbWVudHNOZWVkVXBkYXRlIHx8IHIuY29sb3JzTmVlZFVwZGF0ZSB8fCByLm5vcm1hbHNOZWVkVXBkYXRlKSAmJiB0aGlzLnNldEJ1ZmZlcnModCwgdGhpcy5fZ2wuU1RBVElDX0RSQVcpOwogICAgICAgICAgICAgICAgICByLnZlcnRpY2VzTmVlZFVwZGF0ZSA9ICExLCByLmVsZW1lbnRzTmVlZFVwZGF0ZSA9ICExLCByLm5vcm1hbHNOZWVkVXBkYXRlID0gITEsIHIuY29sb3JzTmVlZFVwZGF0ZSA9ICExLCByLmJ1ZmZlcnNOZWVkVXBkYXRlID0gITE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVtb3ZlT2JqZWN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlT2JqZWN0KGUsIHQpIHsKICAgICAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBfTWVzaCB8fCBlIGluc3RhbmNlb2YgX0xpbmUgPyB0aGlzLnJlbW92ZUluc3RhbmNlcyh0Ll9fd2ViZ2xPYmplY3RzLCBlKSA6IGUgaW5zdGFuY2VvZiBfU3ByaXRlICYmIHRoaXMucmVtb3ZlSW5zdGFuY2VzRGlyZWN0KHQuX193ZWJnbFNwcml0ZXMsIGUpLCBlLl9fd2ViZ2xBY3RpdmUgPSAhMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW1vdmVJbnN0YW5jZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJbnN0YW5jZXMoZSwgdCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IGUubGVuZ3RoIC0gMTsgciA+PSAwOyAtLXIpIGVbcl0ub2JqZWN0ID09PSB0ICYmIGUuc3BsaWNlKHIsIDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbW92ZUluc3RhbmNlc0RpcmVjdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUluc3RhbmNlc0RpcmVjdChlLCB0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gZS5sZW5ndGggLSAxOyByID49IDA7IC0tcikgZVtyXSA9PT0gdCAmJiBlLnNwbGljZShyLCAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ1bnJvbGxCdWZmZXJNYXRlcmlhbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVucm9sbEJ1ZmZlck1hdGVyaWFsKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS5vYmplY3QubWF0ZXJpYWw7CiAgICAgICAgICAgICAgICBpZiAodC52b2x1bWV0cmljKSBlLm9wYXF1ZSA9IG51bGwsIGUudHJhbnNwYXJlbnQgPSBudWxsLCBlLnZvbHVtZXRyaWMgPSB0O2Vsc2UgaWYgKHQudHJhbnNwYXJlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKGUub3BhcXVlID0gbnVsbCwgZS52b2x1bWV0cmljID0gbnVsbCwgZS50cmFuc3BhcmVudCA9IHQsICF0LndpcmVmcmFtZSkgewogICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5jbG9uZSgpOwogICAgICAgICAgICAgICAgICAgIHIub3BhY2l0eSA9IDAsIGUuYmxhbmsgPSByOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgZS5vcGFxdWUgPSB0LCBlLnRyYW5zcGFyZW50ID0gbnVsbCwgZS52b2x1bWV0cmljID0gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRCdWZmZXJzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QnVmZmVycyhlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IGUudmVydGV4QXJyYXksCiAgICAgICAgICAgICAgICAgIHMgPSBlLmNvbG9yQXJyYXk7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBlLl9fd2ViZ2xPZmZzZXRCdWZmZXIgPyAodGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIGUuX193ZWJnbE9mZnNldEJ1ZmZlciksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCByLCB0KSkgOiAodGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIGUuX193ZWJnbFZlcnRleEJ1ZmZlciksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCByLCB0KSksIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBlLl9fd2ViZ2xDb2xvckJ1ZmZlciksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBzLCB0KSwgZS5ub3JtYWxBcnJheSAmJiB2b2lkIDAgIT09IGUuX193ZWJnbE5vcm1hbEJ1ZmZlcikgewogICAgICAgICAgICAgICAgICB2YXIgYSA9IGUubm9ybWFsQXJyYXk7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBlLl9fd2ViZ2xOb3JtYWxCdWZmZXIpLCB0aGlzLl9nbC5idWZmZXJEYXRhKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgYSwgdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZS5yYWRpdXNBcnJheSAmJiB2b2lkIDAgIT09IGUuX193ZWJnbFJhZGl1c0J1ZmZlciAmJiAodGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIGUuX193ZWJnbFJhZGl1c0J1ZmZlciksIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBlLnJhZGl1c0FycmF5LCB0KSksIGUuZmFjZUFycmF5ICYmIHZvaWQgMCAhPT0gZS5fX3dlYmdsRmFjZUJ1ZmZlcikgewogICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuZmFjZUFycmF5OwogICAgICAgICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBlLl9fd2ViZ2xGYWNlQnVmZmVyKSwgdGhpcy5fZ2wuYnVmZmVyRGF0YSh0aGlzLl9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbiwgdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZS5saW5lQXJyYXkgJiYgdm9pZCAwICE9PSBlLl9fd2ViZ2xMaW5lQnVmZmVyKSB7CiAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5saW5lQXJyYXk7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGUuX193ZWJnbExpbmVCdWZmZXIpLCB0aGlzLl9nbC5idWZmZXJEYXRhKHRoaXMuX2dsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBvLCB0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjcmVhdGVNZXNoQnVmZmVycyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1lc2hCdWZmZXJzKGUpIHsKICAgICAgICAgICAgICAgIGUucmFkaXVzQXJyYXkgJiYgKGUuX193ZWJnbFJhZGl1c0J1ZmZlciA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpKSwgZS51c2VPZmZzZXQgJiYgKGUuX193ZWJnbE9mZnNldEJ1ZmZlciA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpKSwgZS5fX3dlYmdsVmVydGV4QnVmZmVyID0gdGhpcy5fZ2wuY3JlYXRlQnVmZmVyKCksIGUuX193ZWJnbE5vcm1hbEJ1ZmZlciA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpLCBlLl9fd2ViZ2xDb2xvckJ1ZmZlciA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpLCBlLl9fd2ViZ2xGYWNlQnVmZmVyID0gdGhpcy5fZ2wuY3JlYXRlQnVmZmVyKCksIGUuX193ZWJnbExpbmVCdWZmZXIgPSB0aGlzLl9nbC5jcmVhdGVCdWZmZXIoKSwgdGhpcy5pbmZvLm1lbW9yeS5nZW9tZXRyaWVzKys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY3JlYXRlTGluZUJ1ZmZlcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVMaW5lQnVmZmVycyhlKSB7CiAgICAgICAgICAgICAgICBlLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIgPSB0aGlzLl9nbC5jcmVhdGVCdWZmZXIoKSwgZS5fX3dlYmdsQ29sb3JCdWZmZXIgPSB0aGlzLl9nbC5jcmVhdGVCdWZmZXIoKSwgdGhpcy5pbmZvLm1lbW9yeS5nZW9tZXRyaWVzKys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYWRkQnVmZmVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQnVmZmVyKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGUucHVzaCh7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdCwKICAgICAgICAgICAgICAgICAgb2JqZWN0OiByLAogICAgICAgICAgICAgICAgICBvcGFxdWU6IG51bGwsCiAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiBudWxsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXR1cE1hdHJpY2VzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBNYXRyaWNlcyhlLCB0KSB7CiAgICAgICAgICAgICAgICBlLl9tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyh0Lm1hdHJpeFdvcmxkSW52ZXJzZSwgZS5tYXRyaXhXb3JsZCksIGUuX25vcm1hbE1hdHJpeC5nZXRJbnZlcnNlKGUuX21vZGVsVmlld01hdHJpeCksIGUuX25vcm1hbE1hdHJpeC50cmFuc3Bvc2UoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJmaWx0ZXJGYWxsYmFjayIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlckZhbGxiYWNrKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nbC5MSU5FQVI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0VGV4dHVyZVBhcmFtZXRlcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyhlLCB0KSB7CiAgICAgICAgICAgICAgICBlID09IHRoaXMuX2dsLlRFWFRVUkVfMkQgPyAodGhpcy5fZ2wudGV4UGFyYW1ldGVyaShlLCB0aGlzLl9nbC5URVhUVVJFX1dSQVBfUywgdGhpcy5fZ2wuQ0xBTVBfVE9fRURHRSksIHRoaXMuX2dsLnRleFBhcmFtZXRlcmkoZSwgdGhpcy5fZ2wuVEVYVFVSRV9XUkFQX1QsIHRoaXMuX2dsLkNMQU1QX1RPX0VER0UpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKGUsIHRoaXMuX2dsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGhpcy5maWx0ZXJGYWxsYmFjayh0Lm1hZ0ZpbHRlcikpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKGUsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5maWx0ZXJGYWxsYmFjayh0Lm1pbkZpbHRlcikpKSA6ICh0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKGUsIHRoaXMuX2dsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLl9nbC5DTEFNUF9UT19FREdFKSwgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaShlLCB0aGlzLl9nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy5fZ2wuQ0xBTVBfVE9fRURHRSksIHRoaXMuX2dsLnRleFBhcmFtZXRlcmkoZSwgdGhpcy5fZ2wuVEVYVFVSRV9XUkFQX1IsIHRoaXMuX2dsLkNMQU1QX1RPX0VER0UpLCB0aGlzLl9leHRDb2xvckJ1ZmZlckZsb2F0ICYmIHRoaXMuX2V4dEZsb2F0TGluZWFyID8gKHRoaXMuX2dsLnRleFBhcmFtZXRlcmkoZSwgdGhpcy5fZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCB0aGlzLl9nbC5MSU5FQVIpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKGUsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5fZ2wuTElORUFSKSkgOiAodGhpcy5fZ2wudGV4UGFyYW1ldGVyaShlLCB0aGlzLl9nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMuX2dsLk5FQVJFU1QpLCB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKGUsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5fZ2wuTkVBUkVTVCkpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJwYXJhbVRvR0wiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJhbVRvR0woZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IHYgPyB0aGlzLl9nbC5VTlNJR05FRF9CWVRFIDogZSA9PT0geSA/IHRoaXMuX2dsLlJHQkEgOiBlID09PSBwID8gdGhpcy5fZ2wuTkVBUkVTVCA6IDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0dXBMaWdodHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cExpZ2h0cyhlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuX2xpZ2h0cywKICAgICAgICAgICAgICAgICAgaCA9IGwuZGlyZWN0aW9uYWwuY29sb3JzLAogICAgICAgICAgICAgICAgICBjID0gbC5kaXJlY3Rpb25hbC5wb3NpdGlvbnMsCiAgICAgICAgICAgICAgICAgIHUgPSAwLAogICAgICAgICAgICAgICAgICBmID0gMDsKICAgICAgICAgICAgICAgIGZvciAociA9IDAsIHMgPSB0Lmxlbmd0aDsgciA8IHM7IHIrKykgaWYgKG4gPSAoYSA9IHRbcl0pLmNvbG9yLCBvID0gYS5pbnRlbnNpdHksIGEuZGlzdGFuY2UsIGEgaW5zdGFuY2VvZiBfTGlnaHQpIHsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbi5nZXRQb3NpdGlvbkZyb21NYXRyaXgoYS5tYXRyaXhXb3JsZCksIHRoaXMuX3ZlY3RvcjMuZ2V0UG9zaXRpb25Gcm9tTWF0cml4KGEudGFyZ2V0Lm1hdHJpeFdvcmxkKSwgdGhpcy5fZGlyZWN0aW9uLnN1Yih0aGlzLl92ZWN0b3IzKSwgdGhpcy5fZGlyZWN0aW9uLm5vcm1hbGl6ZSgpLCAwID09PSB0aGlzLl9kaXJlY3Rpb24ueCAmJiAwID09PSB0aGlzLl9kaXJlY3Rpb24ueSAmJiAwID09PSB0aGlzLl9kaXJlY3Rpb24ueikgY29udGludWU7CiAgICAgICAgICAgICAgICAgIGNbZl0gPSB0aGlzLl9kaXJlY3Rpb24ueCwgY1tmICsgMV0gPSB0aGlzLl9kaXJlY3Rpb24ueSwgY1tmICsgMl0gPSB0aGlzLl9kaXJlY3Rpb24ueiwgaFtmXSA9IG4uciAqIG8sIGhbZiArIDFdID0gbi5nICogbywgaFtmICsgMl0gPSBuLmIgKiBvLCBmICs9IDMsIHUrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGwuYW1iaWVudFswXSA9IDAsIGwuYW1iaWVudFsxXSA9IDAsIGwuYW1iaWVudFsyXSA9IDAsIGwuZGlyZWN0aW9uYWwubGVuZ3RoID0gdTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbml0R0wiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0R0woKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLl9nbCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCJ3ZWJnbDIiLCB7CiAgICAgICAgICAgICAgICAgICAgYWxwaGE6IHRoaXMuX2FscGhhLAogICAgICAgICAgICAgICAgICAgIHByZW11bHRpcGxpZWRBbHBoYTogdGhpcy5fcHJlbXVsdGlwbGllZEFscGhhLAogICAgICAgICAgICAgICAgICAgIGFudGlhbGlhczogITEsCiAgICAgICAgICAgICAgICAgICAgc3RlbmNpbDogdGhpcy5fc3RlbmNpbCwKICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRoaXMuX3ByZXNlcnZlRHJhd2luZ0J1ZmZlcgogICAgICAgICAgICAgICAgICB9KSkgJiYgISh0aGlzLl9nbCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCJleHBlcmltZW50YWwtd2ViZ2wiLCB7CiAgICAgICAgICAgICAgICAgICAgYWxwaGE6IHRoaXMuX2FscGhhLAogICAgICAgICAgICAgICAgICAgIHByZW11bHRpcGxpZWRBbHBoYTogdGhpcy5fcHJlbXVsdGlwbGllZEFscGhhLAogICAgICAgICAgICAgICAgICAgIGFudGlhbGlhczogITEsCiAgICAgICAgICAgICAgICAgICAgc3RlbmNpbDogdGhpcy5fc3RlbmNpbCwKICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRoaXMuX3ByZXNlcnZlRHJhd2luZ0J1ZmZlcgogICAgICAgICAgICAgICAgICB9KSkgJiYgISh0aGlzLl9nbCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCJ3ZWJnbCIsIHsKICAgICAgICAgICAgICAgICAgICBhbHBoYTogdGhpcy5fYWxwaGEsCiAgICAgICAgICAgICAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiB0aGlzLl9wcmVtdWx0aXBsaWVkQWxwaGEsCiAgICAgICAgICAgICAgICAgICAgYW50aWFsaWFzOiAhMSwKICAgICAgICAgICAgICAgICAgICBzdGVuY2lsOiB0aGlzLl9zdGVuY2lsLAogICAgICAgICAgICAgICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdGhpcy5fcHJlc2VydmVEcmF3aW5nQnVmZmVyCiAgICAgICAgICAgICAgICAgIH0pKSkgdGhyb3cgIkVycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuIjsKICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9nbC5nZXRQYXJhbWV0ZXIodGhpcy5fZ2wuVkVSU0lPTik7CiAgICAgICAgICAgICAgICAgIHRoaXMuX3dlYmdsdmVyc2lvbiA9IHBhcnNlSW50KGVbNl0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlzV2ViR0wxIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNXZWJHTDEoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMSA9PSB0aGlzLl93ZWJnbHZlcnNpb247CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0RGVmYXVsdEdMU3RhdGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZWZhdWx0R0xTdGF0ZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2dsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMSksIHRoaXMuX2dsLmNsZWFyRGVwdGgoMSksIHRoaXMuX2dsLmNsZWFyU3RlbmNpbCgwKSwgdGhpcy5fZ2wuZW5hYmxlKHRoaXMuX2dsLkRFUFRIX1RFU1QpLCB0aGlzLl9nbC5kZXB0aEZ1bmModGhpcy5fZ2wuTEVRVUFMKSwgdGhpcy5fZ2wuZnJvbnRGYWNlKHRoaXMuX2dsLkNDVyksIHRoaXMuX2dsLmN1bGxGYWNlKHRoaXMuX2dsLkJBQ0spLCB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuQ1VMTF9GQUNFKSwgdGhpcy5fZ2wuZW5hYmxlKHRoaXMuX2dsLkJMRU5EKSwgdGhpcy5fZ2wuYmxlbmRFcXVhdGlvbih0aGlzLl9nbC5GVU5DX0FERCksIHRoaXMuX2dsLmJsZW5kRnVuYyh0aGlzLl9nbC5TUkNfQUxQSEEsIHRoaXMuX2dsLk9ORV9NSU5VU19TUkNfQUxQSEEpLCB0aGlzLl9nbC5jbGVhckNvbG9yKHRoaXMuX2NsZWFyQ29sb3IuciwgdGhpcy5fY2xlYXJDb2xvci5nLCB0aGlzLl9jbGVhckNvbG9yLmIsIHRoaXMuX2NsZWFyQWxwaGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJlbmRlck9iamVjdHMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJPYmplY3RzKGUsIHQsIHIsIHMsIGEsIG4sIG8sIGwpIHsKICAgICAgICAgICAgICAgIHZhciBoLCBjLCB1LCBmLCBwLCBnOwogICAgICAgICAgICAgICAgdCA/IChmID0gZS5sZW5ndGggLSAxLCBwID0gLTEsIGcgPSAtMSkgOiAoZiA9IDAsIHAgPSBlLmxlbmd0aCwgZyA9IDEpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgdiA9IGY7IHYgIT09IHA7IHYgKz0gZykgaWYgKChoID0gZVt2XSkucmVuZGVyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjID0gaC5vYmplY3QsIHUgPSBoLmJ1ZmZlciwgIShsID0gaFtyXSkpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICBvICYmIHRoaXMuc2V0QmxlbmRpbmcoITApLCB0aGlzLnNldERlcHRoVGVzdChsLmRlcHRoVGVzdCksIHRoaXMuc2V0RGVwdGhXcml0ZShsLmRlcHRoV3JpdGUpLCB0aGlzLnNldFBvbHlnb25PZmZzZXQobC5wb2x5Z29uT2Zmc2V0LCBsLnBvbHlnb25PZmZzZXRGYWN0b3IsIGwucG9seWdvbk9mZnNldFVuaXRzKTsKICAgICAgICAgICAgICAgICAgdmFyIF8gPSBjLl9tb2RlbFZpZXdNYXRyaXguaXNSZWZsZWN0ZWQoKTsKICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNYXRlcmlhbEZhY2VzKGwsIF8pLCB0aGlzLnJlbmRlckJ1ZmZlcihzLCBhLCBuLCBsLCB1LCBjKSwgKHRoaXMuX291dGxpbmVFbmFibGVkIHx8IGwub3V0bGluZSkgJiYgKCJzcGhlcmVpbXBvc3RlciIgPT0gbC5zaGFkZXJJRCA/IHRoaXMucmVuZGVyQnVmZmVyKHMsIGEsIG4sIHRoaXMuX291dGxpbmVTcGhlcmVJbXBvc3Rlck1hdGVyaWFsLCB1LCBjKSA6ICJzdGlja2ltcG9zdGVyIiA9PSBsLnNoYWRlcklEID8gdGhpcy5yZW5kZXJCdWZmZXIocywgYSwgbiwgdGhpcy5fb3V0bGluZVN0aWNrSW1wb3N0ZXJNYXRlcmlhbCwgdSwgYykgOiBsLndpcmVmcmFtZSB8fCAiYmFzaWMiID09PSBsLnNoYWRlcklEIHx8IDAgPT09IGwub3BhY2l0eSB8fCB0aGlzLnJlbmRlckJ1ZmZlcihzLCBhLCBuLCB0aGlzLl9vdXRsaW5lTWF0ZXJpYWwsIHUsIGMpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZW5kZXJTcHJpdGVzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU3ByaXRlcyhlLCB0LCByKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50R2VvbWV0cnlHcm91cEhhc2ggPSAtMSwgdGhpcy5fY3VycmVudFByb2dyYW0gPSBudWxsLCB0aGlzLl9jdXJyZW50Q2FtZXJhID0gbnVsbCwgdGhpcy5fb2xkQmxlbmRpbmcgPSAtMSwgdGhpcy5fb2xkRGVwdGhXcml0ZSA9IC0xLCB0aGlzLl9vbGREZXB0aFRlc3QgPSAtMSwgdGhpcy5fb2xkRG91YmxlU2lkZWQgPSAtMSwgdGhpcy5fY3VycmVudE1hdGVyaWFsSWQgPSAtMSwgdGhpcy5fb2xkRmxpcFNpZGVkID0gLTEsIHRoaXMuX2xpZ2h0c05lZWRVcGRhdGUgPSAhMCwgdGhpcy5zcHJpdGVzLnJlbmRlcihlLCB0LCB0aGlzLl9jdXJyZW50V2lkdGgsIHRoaXMuX2N1cnJlbnRIZWlnaHQsIHIpLCB0aGlzLl9jdXJyZW50R2VvbWV0cnlHcm91cEhhc2ggPSAtMSwgdGhpcy5fY3VycmVudFByb2dyYW0gPSBudWxsLCB0aGlzLl9jdXJyZW50Q2FtZXJhID0gbnVsbCwgdGhpcy5fb2xkQmxlbmRpbmcgPSAtMSwgdGhpcy5fb2xkRGVwdGhXcml0ZSA9IC0xLCB0aGlzLl9vbGREZXB0aFRlc3QgPSAtMSwgdGhpcy5fb2xkRG91YmxlU2lkZWQgPSAtMSwgdGhpcy5fY3VycmVudE1hdGVyaWFsSWQgPSAtMSwgdGhpcy5fb2xkRmxpcFNpZGVkID0gLTE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfUmVuZGVyZXI7CiAgICAgICAgICB9KCk7CiAgICAgICAgfSwKICAgICAgICA5NjUyOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIE1hdHJpeDM6IGZ1bmN0aW9uIE1hdHJpeDMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9NYXRyaXg7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1hdHJpeDQ6IGZ1bmN0aW9uIE1hdHJpeDQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9NYXRyaXgyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBRdWF0ZXJuaW9uOiBmdW5jdGlvbiBRdWF0ZXJuaW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBfUXVhdGVybmlvbjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUmF5OiBmdW5jdGlvbiBSYXkoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9SYXk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFZlY3RvcjI6IGZ1bmN0aW9uIFZlY3RvcjIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9WZWN0b3I7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFZlY3RvcjM6IGZ1bmN0aW9uIFZlY3RvcjMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9WZWN0b3IyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbnZlcnNpb25NYXRyaXgzOiBmdW5jdGlvbiBjb252ZXJzaW9uTWF0cml4MygpIHsKICAgICAgICAgICAgICByZXR1cm4gZjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVnVG9SYWQ6IGZ1bmN0aW9uIGRlZ1RvUmFkKCkgewogICAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBfUXVhdGVybmlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9RdWF0ZXJuaW9uKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1F1YXRlcm5pb24pOwogICAgICAgICAgICAgIHRoaXMueCA9IGUgfHwgMCwgdGhpcy55ID0gdCB8fCAwLCB0aGlzLnogPSByIHx8IDAsIHRoaXMudyA9IHZvaWQgMCAhPT0gcyA/IHMgOiAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfUXVhdGVybmlvbiwgW3sKICAgICAgICAgICAgICBrZXk6ICJzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IGUsIHRoaXMueSA9IHQsIHRoaXMueiA9IHIsIHRoaXMudyA9IHMsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY29weSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IGUueCwgdGhpcy55ID0gZS55LCB0aGlzLnogPSBlLnosIHRoaXMudyA9IGUudywgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjb25qdWdhdGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25qdWdhdGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ICo9IC0xLCB0aGlzLnkgKj0gLTEsIHRoaXMueiAqPSAtMSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpbnZlcnNlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW52ZXJzZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpLm5vcm1hbGl6ZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImxlbmd0aCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJsZW5ndGh4eXoiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsZW5ndGh4eXooKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibm9ybWFsaXplIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxlbmd0aCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IGUgPyAodGhpcy54ID0gMCwgdGhpcy55ID0gMCwgdGhpcy56ID0gMCwgdGhpcy53ID0gMSkgOiAoZSA9IDEgLyBlLCB0aGlzLnggKj0gZSwgdGhpcy55ICo9IGUsIHRoaXMueiAqPSBlLCB0aGlzLncgKj0gZSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibXVsdGlwbHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBseShlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMsIGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm11bHRpcGx5U2NhbGFyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCAqPSBlLCB0aGlzLnkgKj0gZSwgdGhpcy56ICo9IGUsIHRoaXMudyAqPSBlLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm11bHRpcGx5UXVhdGVybmlvbnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBseVF1YXRlcm5pb25zKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gZS54LAogICAgICAgICAgICAgICAgICBzID0gZS55LAogICAgICAgICAgICAgICAgICBhID0gZS56LAogICAgICAgICAgICAgICAgICBuID0gZS53LAogICAgICAgICAgICAgICAgICBvID0gdC54LAogICAgICAgICAgICAgICAgICBsID0gdC55LAogICAgICAgICAgICAgICAgICBoID0gdC56LAogICAgICAgICAgICAgICAgICBjID0gdC53OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IHIgKiBjICsgbiAqIG8gKyBzICogaCAtIGEgKiBsLCB0aGlzLnkgPSBzICogYyArIG4gKiBsICsgYSAqIG8gLSByICogaCwgdGhpcy56ID0gYSAqIGMgKyBuICogaCArIHIgKiBsIC0gcyAqIG8sIHRoaXMudyA9IG4gKiBjIC0gciAqIG8gLSBzICogbCAtIGEgKiBoLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInN1YiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54IC09IGUueCwgdGhpcy55IC09IGUueSwgdGhpcy56IC09IGUueiwgdGhpcy53IC09IGUudywgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfUXVhdGVybmlvbih0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEZyb21FdWxlciIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZyb21FdWxlcihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IE1hdGguY29zKGUueCAvIDIpLAogICAgICAgICAgICAgICAgICByID0gTWF0aC5jb3MoZS55IC8gMiksCiAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLmNvcyhlLnogLyAyKSwKICAgICAgICAgICAgICAgICAgYSA9IE1hdGguc2luKGUueCAvIDIpLAogICAgICAgICAgICAgICAgICBuID0gTWF0aC5zaW4oZS55IC8gMiksCiAgICAgICAgICAgICAgICAgIG8gPSBNYXRoLnNpbihlLnogLyAyKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBhICogciAqIHMgKyB0ICogbiAqIG8sIHRoaXMueSA9IHQgKiBuICogcyAtIGEgKiByICogbywgdGhpcy56ID0gdCAqIHIgKiBvICsgYSAqIG4gKiBzLCB0aGlzLncgPSB0ICogciAqIHMgLSBhICogbiAqIG8sIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfUXVhdGVybmlvbjsKICAgICAgICAgIH0oKTsKICAgICAgICAgIHZhciBfVmVjdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX1ZlY3RvcihlLCB0KSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9WZWN0b3IpOwogICAgICAgICAgICAgIHRoaXMueCA9IGUgfHwgMCwgdGhpcy55ID0gdCB8fCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfVmVjdG9yLCBbewogICAgICAgICAgICAgIGtleTogInNldCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldChlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID0gZSwgdGhpcy55ID0gdCwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzdWJWZWN0b3JzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3ViVmVjdG9ycyhlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID0gZS54IC0gdC54LCB0aGlzLnkgPSBlLnkgLSB0LnksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY29weSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IGUueCwgdGhpcy55ID0gZS55LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9WZWN0b3IodGhpcy54LCB0aGlzLnkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1ZlY3RvcjsKICAgICAgICAgIH0oKTsKICAgICAgICAgIGZ1bmN0aW9uIHMoZSwgdCwgcikgewogICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoZSwgdCksIHIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGEgPSBNYXRoLlBJIC8gMTgwOwogICAgICAgICAgZnVuY3Rpb24gbihlKSB7CiAgICAgICAgICAgIHJldHVybiBlICogYTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBvLCBsLCBoLCBjLCB1OwogICAgICAgICAgdmFyIF9NYXRyaXgyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX01hdHJpeDIoKSB7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7CiAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CiAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CiAgICAgICAgICAgICAgdmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7CiAgICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDA7CiAgICAgICAgICAgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7CiAgICAgICAgICAgICAgdmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IDA7CiAgICAgICAgICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IDA7CiAgICAgICAgICAgICAgdmFyIGggPSBhcmd1bWVudHMubGVuZ3RoID4gOCAmJiBhcmd1bWVudHNbOF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s4XSA6IDA7CiAgICAgICAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoID4gOSAmJiBhcmd1bWVudHNbOV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s5XSA6IDA7CiAgICAgICAgICAgICAgdmFyIHUgPSBhcmd1bWVudHMubGVuZ3RoID4gMTAgJiYgYXJndW1lbnRzWzEwXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzEwXSA6IDE7CiAgICAgICAgICAgICAgdmFyIGYgPSBhcmd1bWVudHMubGVuZ3RoID4gMTEgJiYgYXJndW1lbnRzWzExXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzExXSA6IDA7CiAgICAgICAgICAgICAgdmFyIHAgPSBhcmd1bWVudHMubGVuZ3RoID4gMTIgJiYgYXJndW1lbnRzWzEyXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzEyXSA6IDA7CiAgICAgICAgICAgICAgdmFyIGcgPSBhcmd1bWVudHMubGVuZ3RoID4gMTMgJiYgYXJndW1lbnRzWzEzXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzEzXSA6IDA7CiAgICAgICAgICAgICAgdmFyIHYgPSBhcmd1bWVudHMubGVuZ3RoID4gMTQgJiYgYXJndW1lbnRzWzE0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzE0XSA6IDA7CiAgICAgICAgICAgICAgdmFyIF8gPSBhcmd1bWVudHMubGVuZ3RoID4gMTUgJiYgYXJndW1lbnRzWzE1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzE1XSA6IDE7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9NYXRyaXgyKTsKICAgICAgICAgICAgICB2b2lkIDAgIT09IGUgJiYgIm51bWJlciIgIT0gdHlwZW9mIGUgPyB0aGlzLmVsZW1lbnRzID0gbmV3IEZsb2F0MzJBcnJheShlKSA6ICh0aGlzLmVsZW1lbnRzID0gbmV3IEZsb2F0MzJBcnJheSgxNiksIHRoaXMuZWxlbWVudHNbMF0gPSBlLCB0aGlzLmVsZW1lbnRzWzRdID0gdCwgdGhpcy5lbGVtZW50c1s4XSA9IHIsIHRoaXMuZWxlbWVudHNbMTJdID0gcywgdGhpcy5lbGVtZW50c1sxXSA9IGEsIHRoaXMuZWxlbWVudHNbNV0gPSBuLCB0aGlzLmVsZW1lbnRzWzldID0gbywgdGhpcy5lbGVtZW50c1sxM10gPSBsLCB0aGlzLmVsZW1lbnRzWzJdID0gaCwgdGhpcy5lbGVtZW50c1s2XSA9IGMsIHRoaXMuZWxlbWVudHNbMTBdID0gdSwgdGhpcy5lbGVtZW50c1sxNF0gPSBmLCB0aGlzLmVsZW1lbnRzWzNdID0gcCwgdGhpcy5lbGVtZW50c1s3XSA9IGcsIHRoaXMuZWxlbWVudHNbMTFdID0gdiwgdGhpcy5lbGVtZW50c1sxNV0gPSBfKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX01hdHJpeDIsIFt7CiAgICAgICAgICAgICAga2V5OiAibWFrZVNjYWxlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFrZVNjYWxlKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZSwgdCwgciwgcywgYSwgbiwgbywgbCwgaCwgYywgdSwgZiwgcCwgZywgdiwgXykgewogICAgICAgICAgICAgICAgdmFyIHkgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHlbMF0gPSBlLCB5WzRdID0gdCwgeVs4XSA9IHIsIHlbMTJdID0gcywgeVsxXSA9IGEsIHlbNV0gPSBuLCB5WzldID0gbywgeVsxM10gPSBsLCB5WzJdID0gaCwgeVs2XSA9IGMsIHlbMTBdID0gdSwgeVsxNF0gPSBmLCB5WzNdID0gcCwgeVs3XSA9IGcsIHlbMTFdID0gdiwgeVsxNV0gPSBfLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlkZW50aXR5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaWRlbnRpdHkoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY29weSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KHRbMF0sIHRbNF0sIHRbOF0sIHRbMTJdLCB0WzFdLCB0WzVdLCB0WzldLCB0WzEzXSwgdFsyXSwgdFs2XSwgdFsxMF0sIHRbMTRdLCB0WzNdLCB0WzddLCB0WzExXSwgdFsxNV0pLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1hdHJpeDNGcm9tVG9wTGVmdCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hdHJpeDNGcm9tVG9wTGVmdCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX01hdHJpeChlWzBdLCBlWzRdLCBlWzhdLCBlWzFdLCBlWzVdLCBlWzldLCBlWzJdLCBlWzZdLCBlWzEwXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Um90YXRpb25Gcm9tRXVsZXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSb3RhdGlvbkZyb21FdWxlcihlLCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuZWxlbWVudHMsCiAgICAgICAgICAgICAgICAgIHMgPSBlLngsCiAgICAgICAgICAgICAgICAgIGEgPSBlLnksCiAgICAgICAgICAgICAgICAgIG4gPSBlLnosCiAgICAgICAgICAgICAgICAgIG8gPSBNYXRoLmNvcyhzKSwKICAgICAgICAgICAgICAgICAgbCA9IE1hdGguc2luKHMpLAogICAgICAgICAgICAgICAgICBoID0gTWF0aC5jb3MoYSksCiAgICAgICAgICAgICAgICAgIGMgPSBNYXRoLnNpbihhKSwKICAgICAgICAgICAgICAgICAgdSA9IE1hdGguY29zKG4pLAogICAgICAgICAgICAgICAgICBmID0gTWF0aC5zaW4obik7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0IHx8ICJYWVoiID09PSB0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTk5ID0gbyAqIHUsCiAgICAgICAgICAgICAgICAgICAgX3Q5OCA9IG8gKiBmLAogICAgICAgICAgICAgICAgICAgIF9zNDggPSBsICogdSwKICAgICAgICAgICAgICAgICAgICBfYTMzID0gbCAqIGY7CiAgICAgICAgICAgICAgICAgIHJbMF0gPSBoICogdSwgcls0XSA9IC1oICogZiwgcls4XSA9IGMsIHJbMV0gPSBfdDk4ICsgX3M0OCAqIGMsIHJbNV0gPSBfZTk5IC0gX2EzMyAqIGMsIHJbOV0gPSAtbCAqIGgsIHJbMl0gPSBfYTMzIC0gX2U5OSAqIGMsIHJbNl0gPSBfczQ4ICsgX3Q5OCAqIGMsIHJbMTBdID0gbyAqIGg7CiAgICAgICAgICAgICAgICB9IGVsc2UgY29uc29sZS5lcnJvcigiRXJyb3Igd2l0aCBtYXRyaXg0IHNldFJvdGF0aW9uRnJvbUV1bGVyLiBPcmRlcjogIi5jb25jYXQodCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICByID0gZS54LAogICAgICAgICAgICAgICAgICBzID0gZS55LAogICAgICAgICAgICAgICAgICBhID0gZS56LAogICAgICAgICAgICAgICAgICBuID0gZS53LAogICAgICAgICAgICAgICAgICBvID0gciArIHIsCiAgICAgICAgICAgICAgICAgIGwgPSBzICsgcywKICAgICAgICAgICAgICAgICAgaCA9IGEgKyBhLAogICAgICAgICAgICAgICAgICBjID0gciAqIG8sCiAgICAgICAgICAgICAgICAgIHUgPSByICogbCwKICAgICAgICAgICAgICAgICAgZiA9IHIgKiBoLAogICAgICAgICAgICAgICAgICBwID0gcyAqIGwsCiAgICAgICAgICAgICAgICAgIGcgPSBzICogaCwKICAgICAgICAgICAgICAgICAgdiA9IGEgKiBoLAogICAgICAgICAgICAgICAgICBfID0gbiAqIG8sCiAgICAgICAgICAgICAgICAgIHkgPSBuICogbCwKICAgICAgICAgICAgICAgICAgYiA9IG4gKiBoOwogICAgICAgICAgICAgICAgcmV0dXJuIHRbMF0gPSAxIC0gKHAgKyB2KSwgdFs0XSA9IHUgLSBiLCB0WzhdID0gZiArIHksIHRbMV0gPSB1ICsgYiwgdFs1XSA9IDEgLSAoYyArIHYpLCB0WzldID0gZyAtIF8sIHRbMl0gPSBmIC0geSwgdFs2XSA9IGcgKyBfLCB0WzEwXSA9IDEgLSAoYyArIHApLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm11bHRpcGx5TWF0cmljZXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBseU1hdHJpY2VzKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gZS5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgcyA9IHQuZWxlbWVudHMsCiAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICBuID0gclswXSwKICAgICAgICAgICAgICAgICAgbyA9IHJbNF0sCiAgICAgICAgICAgICAgICAgIGwgPSByWzhdLAogICAgICAgICAgICAgICAgICBoID0gclsxMl0sCiAgICAgICAgICAgICAgICAgIGMgPSByWzFdLAogICAgICAgICAgICAgICAgICB1ID0gcls1XSwKICAgICAgICAgICAgICAgICAgZiA9IHJbOV0sCiAgICAgICAgICAgICAgICAgIHAgPSByWzEzXSwKICAgICAgICAgICAgICAgICAgZyA9IHJbMl0sCiAgICAgICAgICAgICAgICAgIHYgPSByWzZdLAogICAgICAgICAgICAgICAgICBfID0gclsxMF0sCiAgICAgICAgICAgICAgICAgIHkgPSByWzE0XSwKICAgICAgICAgICAgICAgICAgYiA9IHJbM10sCiAgICAgICAgICAgICAgICAgIHcgPSByWzddLAogICAgICAgICAgICAgICAgICB4ID0gclsxMV0sCiAgICAgICAgICAgICAgICAgIEEgPSByWzE1XSwKICAgICAgICAgICAgICAgICAgQyA9IHNbMF0sCiAgICAgICAgICAgICAgICAgIFMgPSBzWzRdLAogICAgICAgICAgICAgICAgICBNID0gc1s4XSwKICAgICAgICAgICAgICAgICAgeiA9IHNbMTJdLAogICAgICAgICAgICAgICAgICBMID0gc1sxXSwKICAgICAgICAgICAgICAgICAgRSA9IHNbNV0sCiAgICAgICAgICAgICAgICAgIFQgPSBzWzldLAogICAgICAgICAgICAgICAgICBrID0gc1sxM10sCiAgICAgICAgICAgICAgICAgIEkgPSBzWzJdLAogICAgICAgICAgICAgICAgICBPID0gc1s2XSwKICAgICAgICAgICAgICAgICAgRCA9IHNbMTBdLAogICAgICAgICAgICAgICAgICBGID0gc1sxNF0sCiAgICAgICAgICAgICAgICAgIFIgPSBzWzNdLAogICAgICAgICAgICAgICAgICBQID0gc1s3XSwKICAgICAgICAgICAgICAgICAgRyA9IHNbMTFdLAogICAgICAgICAgICAgICAgICBCID0gc1sxNV07CiAgICAgICAgICAgICAgICByZXR1cm4gYVswXSA9IG4gKiBDICsgbyAqIEwgKyBsICogSSArIGggKiBSLCBhWzRdID0gbiAqIFMgKyBvICogRSArIGwgKiBPICsgaCAqIFAsIGFbOF0gPSBuICogTSArIG8gKiBUICsgbCAqIEQgKyBoICogRywgYVsxMl0gPSBuICogeiArIG8gKiBrICsgbCAqIEYgKyBoICogQiwgYVsxXSA9IGMgKiBDICsgdSAqIEwgKyBmICogSSArIHAgKiBSLCBhWzVdID0gYyAqIFMgKyB1ICogRSArIGYgKiBPICsgcCAqIFAsIGFbOV0gPSBjICogTSArIHUgKiBUICsgZiAqIEQgKyBwICogRywgYVsxM10gPSBjICogeiArIHUgKiBrICsgZiAqIEYgKyBwICogQiwgYVsyXSA9IGcgKiBDICsgdiAqIEwgKyBfICogSSArIHkgKiBSLCBhWzZdID0gZyAqIFMgKyB2ICogRSArIF8gKiBPICsgeSAqIFAsIGFbMTBdID0gZyAqIE0gKyB2ICogVCArIF8gKiBEICsgeSAqIEcsIGFbMTRdID0gZyAqIHogKyB2ICogayArIF8gKiBGICsgeSAqIEIsIGFbM10gPSBiICogQyArIHcgKiBMICsgeCAqIEkgKyBBICogUiwgYVs3XSA9IGIgKiBTICsgdyAqIEUgKyB4ICogTyArIEEgKiBQLCBhWzExXSA9IGIgKiBNICsgdyAqIFQgKyB4ICogRCArIEEgKiBHLCBhWzE1XSA9IGIgKiB6ICsgdyAqIGsgKyB4ICogRiArIEEgKiBCLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm11bHRpcGx5U2NhbGFyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRbMF0gKj0gZSwgdFs0XSAqPSBlLCB0WzhdICo9IGUsIHRbMTJdICo9IGUsIHRbMV0gKj0gZSwgdFs1XSAqPSBlLCB0WzldICo9IGUsIHRbMTNdICo9IGUsIHRbMl0gKj0gZSwgdFs2XSAqPSBlLCB0WzEwXSAqPSBlLCB0WzE0XSAqPSBlLCB0WzNdICo9IGUsIHRbN10gKj0gZSwgdFsxMV0gKj0gZSwgdFsxNV0gKj0gZSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJtYWtlVHJhbnNsYXRpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlVHJhbnNsYXRpb24oZSwgdCwgcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KDEsIDAsIDAsIGUsIDAsIDEsIDAsIHQsIDAsIDAsIDEsIHIsIDAsIDAsIDAsIDEpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNuYXAiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzbmFwKGUpIHsKICAgICAgICAgICAgICAgIGUgfHwgKGUgPSA0KTsKICAgICAgICAgICAgICAgIHZhciB0ID0gTWF0aC5wb3coMTAsIDQpLAogICAgICAgICAgICAgICAgICByID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTAwID0gMDsgX2UxMDAgPCAxNjsgX2UxMDArKykgewogICAgICAgICAgICAgICAgICB2YXIgX3M0OSA9IE1hdGgucm91bmQocltfZTEwMF0pOwogICAgICAgICAgICAgICAgICBfczQ5ID09PSBNYXRoLnJvdW5kKHJbX2UxMDBdICogdCkgLyB0ICYmIChyW19lMTAwXSA9IF9zNDkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNwb3NlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNwb3NlKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9IGVbMV0sIGVbMV0gPSBlWzRdLCBlWzRdID0gdCwgdCA9IGVbMl0sIGVbMl0gPSBlWzhdLCBlWzhdID0gdCwgdCA9IGVbNl0sIGVbNl0gPSBlWzldLCBlWzldID0gdCwgdCA9IGVbM10sIGVbM10gPSBlWzEyXSwgZVsxMl0gPSB0LCB0ID0gZVs3XSwgZVs3XSA9IGVbMTNdLCBlWzEzXSA9IHQsIHQgPSBlWzExXSwgZVsxMV0gPSBlWzE0XSwgZVsxNF0gPSB0LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldFBvc2l0aW9uIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UG9zaXRpb24oZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRbMTJdID0gZS54LCB0WzEzXSA9IGUueSwgdFsxNF0gPSBlLnosIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNsYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNsYXRlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiB0WzEyXSArPSBlLngsIHRbMTNdICs9IGUueSwgdFsxNF0gKz0gZS56LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldEludmVyc2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbnZlcnNlKGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgcyA9IGUuZWxlbWVudHMsCiAgICAgICAgICAgICAgICAgIGEgPSBzWzBdLAogICAgICAgICAgICAgICAgICBuID0gc1s0XSwKICAgICAgICAgICAgICAgICAgbyA9IHNbOF0sCiAgICAgICAgICAgICAgICAgIGwgPSBzWzEyXSwKICAgICAgICAgICAgICAgICAgaCA9IHNbMV0sCiAgICAgICAgICAgICAgICAgIGMgPSBzWzVdLAogICAgICAgICAgICAgICAgICB1ID0gc1s5XSwKICAgICAgICAgICAgICAgICAgZiA9IHNbMTNdLAogICAgICAgICAgICAgICAgICBwID0gc1syXSwKICAgICAgICAgICAgICAgICAgZyA9IHNbNl0sCiAgICAgICAgICAgICAgICAgIHYgPSBzWzEwXSwKICAgICAgICAgICAgICAgICAgXyA9IHNbMTRdLAogICAgICAgICAgICAgICAgICB5ID0gc1szXSwKICAgICAgICAgICAgICAgICAgYiA9IHNbN10sCiAgICAgICAgICAgICAgICAgIHcgPSBzWzExXSwKICAgICAgICAgICAgICAgICAgeCA9IHNbMTVdOwogICAgICAgICAgICAgICAgclswXSA9IHUgKiBfICogYiAtIGYgKiB2ICogYiArIGYgKiBnICogdyAtIGMgKiBfICogdyAtIHUgKiBnICogeCArIGMgKiB2ICogeCwgcls0XSA9IGwgKiB2ICogYiAtIG8gKiBfICogYiAtIGwgKiBnICogdyArIG4gKiBfICogdyArIG8gKiBnICogeCAtIG4gKiB2ICogeCwgcls4XSA9IG8gKiBmICogYiAtIGwgKiB1ICogYiArIGwgKiBjICogdyAtIG4gKiBmICogdyAtIG8gKiBjICogeCArIG4gKiB1ICogeCwgclsxMl0gPSBsICogdSAqIGcgLSBvICogZiAqIGcgLSBsICogYyAqIHYgKyBuICogZiAqIHYgKyBvICogYyAqIF8gLSBuICogdSAqIF8sIHJbMV0gPSBmICogdiAqIHkgLSB1ICogXyAqIHkgLSBmICogcCAqIHcgKyBoICogXyAqIHcgKyB1ICogcCAqIHggLSBoICogdiAqIHgsIHJbNV0gPSBvICogXyAqIHkgLSBsICogdiAqIHkgKyBsICogcCAqIHcgLSBhICogXyAqIHcgLSBvICogcCAqIHggKyBhICogdiAqIHgsIHJbOV0gPSBsICogdSAqIHkgLSBvICogZiAqIHkgLSBsICogaCAqIHcgKyBhICogZiAqIHcgKyBvICogaCAqIHggLSBhICogdSAqIHgsIHJbMTNdID0gbyAqIGYgKiBwIC0gbCAqIHUgKiBwICsgbCAqIGggKiB2IC0gYSAqIGYgKiB2IC0gbyAqIGggKiBfICsgYSAqIHUgKiBfLCByWzJdID0gYyAqIF8gKiB5IC0gZiAqIGcgKiB5ICsgZiAqIHAgKiBiIC0gaCAqIF8gKiBiIC0gYyAqIHAgKiB4ICsgaCAqIGcgKiB4LCByWzZdID0gbCAqIGcgKiB5IC0gbiAqIF8gKiB5IC0gbCAqIHAgKiBiICsgYSAqIF8gKiBiICsgbiAqIHAgKiB4IC0gYSAqIGcgKiB4LCByWzEwXSA9IG4gKiBmICogeSAtIGwgKiBjICogeSArIGwgKiBoICogYiAtIGEgKiBmICogYiAtIG4gKiBoICogeCArIGEgKiBjICogeCwgclsxNF0gPSBsICogYyAqIHAgLSBuICogZiAqIHAgLSBsICogaCAqIGcgKyBhICogZiAqIGcgKyBuICogaCAqIF8gLSBhICogYyAqIF8sIHJbM10gPSB1ICogZyAqIHkgLSBjICogdiAqIHkgLSB1ICogcCAqIGIgKyBoICogdiAqIGIgKyBjICogcCAqIHcgLSBoICogZyAqIHcsIHJbN10gPSBuICogdiAqIHkgLSBvICogZyAqIHkgKyBvICogcCAqIGIgLSBhICogdiAqIGIgLSBuICogcCAqIHcgKyBhICogZyAqIHcsIHJbMTFdID0gbyAqIGMgKiB5IC0gbiAqIHUgKiB5IC0gbyAqIGggKiBiICsgYSAqIHUgKiBiICsgbiAqIGggKiB3IC0gYSAqIGMgKiB3LCByWzE1XSA9IG4gKiB1ICogcCAtIG8gKiBjICogcCArIG8gKiBoICogZyAtIGEgKiB1ICogZyAtIG4gKiBoICogdiArIGEgKiBjICogdjsKICAgICAgICAgICAgICAgIHZhciBBID0gYSAqIHJbMF0gKyBoICogcls0XSArIHAgKiByWzhdICsgeSAqIHJbMTJdOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IEEpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9lMTAxID0gIk1hdHJpeDQuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwIjsKICAgICAgICAgICAgICAgICAgaWYgKHQpIHRocm93IG5ldyBFcnJvcihfZTEwMSk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oX2UxMDEpLCB0aGlzLmlkZW50aXR5KCksIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxIC8gQSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaXNSZWZsZWN0ZWQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1JlZmxlY3RlZCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgdCA9IGVbMF0sCiAgICAgICAgICAgICAgICAgIHIgPSBlWzRdLAogICAgICAgICAgICAgICAgICBzID0gZVs4XSwKICAgICAgICAgICAgICAgICAgYSA9IGVbMV0sCiAgICAgICAgICAgICAgICAgIG4gPSBlWzVdLAogICAgICAgICAgICAgICAgICBvID0gZVs5XSwKICAgICAgICAgICAgICAgICAgbCA9IGVbMl0sCiAgICAgICAgICAgICAgICAgIGggPSBlWzZdLAogICAgICAgICAgICAgICAgICBjID0gZVsxMF07CiAgICAgICAgICAgICAgICByZXR1cm4gdCAqIG4gKiBjICsgYSAqIGggKiBzICsgbCAqIHIgKiBvIC0gbCAqIG4gKiBzIC0gYSAqIHIgKiBjIC0gdCAqIGggKiBvIDwgMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzY2FsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjYWxlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgciA9IGUueCwKICAgICAgICAgICAgICAgICAgcyA9IGUueSwKICAgICAgICAgICAgICAgICAgYSA9IGUuejsKICAgICAgICAgICAgICAgIHJldHVybiB0WzBdICo9IHIsIHRbNF0gKj0gcywgdFs4XSAqPSBhLCB0WzFdICo9IHIsIHRbNV0gKj0gcywgdFs5XSAqPSBhLCB0WzJdICo9IHIsIHRbNl0gKj0gcywgdFsxMF0gKj0gYSwgdFszXSAqPSByLCB0WzddICo9IHMsIHRbMTFdICo9IGEsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0TWF4U2NhbGVPbkF4aXMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXhTY2FsZU9uQXhpcygpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgdCA9IGVbMF0gKiBlWzBdICsgZVsxXSAqIGVbMV0gKyBlWzJdICogZVsyXSwKICAgICAgICAgICAgICAgICAgciA9IGVbNF0gKiBlWzRdICsgZVs1XSAqIGVbNV0gKyBlWzZdICogZVs2XSwKICAgICAgICAgICAgICAgICAgcyA9IGVbOF0gKiBlWzhdICsgZVs5XSAqIGVbOV0gKyBlWzEwXSAqIGVbMTBdOwogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLm1heCh0LCBNYXRoLm1heChyLCBzKSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1ha2VGcnVzdHVtIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFrZUZydXN0dW0oZSwgdCwgciwgcywgYSwgbikgewogICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICBsID0gMiAqIGEgLyAodCAtIGUpLAogICAgICAgICAgICAgICAgICBoID0gMiAqIGEgLyAocyAtIHIpLAogICAgICAgICAgICAgICAgICBjID0gKHQgKyBlKSAvICh0IC0gZSksCiAgICAgICAgICAgICAgICAgIHUgPSAocyArIHIpIC8gKHMgLSByKSwKICAgICAgICAgICAgICAgICAgZiA9IC0obiArIGEpIC8gKG4gLSBhKSwKICAgICAgICAgICAgICAgICAgcCA9IC0yICogbiAqIGEgLyAobiAtIGEpOwogICAgICAgICAgICAgICAgcmV0dXJuIG9bMF0gPSBsLCBvWzRdID0gMCwgb1s4XSA9IGMsIG9bMTJdID0gMCwgb1sxXSA9IDAsIG9bNV0gPSBoLCBvWzldID0gdSwgb1sxM10gPSAwLCBvWzJdID0gMCwgb1s2XSA9IDAsIG9bMTBdID0gZiwgb1sxNF0gPSBwLCBvWzNdID0gMCwgb1s3XSA9IDAsIG9bMTFdID0gLTEsIG9bMTVdID0gMCwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJtYWtlUGVyc3BlY3RpdmUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlUGVyc3BlY3RpdmUoZSwgdCwgciwgcykgewogICAgICAgICAgICAgICAgdmFyIGEgPSByICogTWF0aC50YW4obiguNSAqIGUpKSwKICAgICAgICAgICAgICAgICAgbyA9IC1hLAogICAgICAgICAgICAgICAgICBsID0gbyAqIHQsCiAgICAgICAgICAgICAgICAgIGggPSBhICogdDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VGcnVzdHVtKGwsIGgsIG8sIGEsIHIsIHMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1ha2VPcnRob2dyYXBoaWMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlT3J0aG9ncmFwaGljKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcy5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgbCA9IDEgLyAodCAtIGUpLAogICAgICAgICAgICAgICAgICBoID0gMSAvIChyIC0gcyksCiAgICAgICAgICAgICAgICAgIGMgPSAxIC8gKG4gLSBhKSwKICAgICAgICAgICAgICAgICAgdSA9ICh0ICsgZSkgKiBsLAogICAgICAgICAgICAgICAgICBmID0gKHIgKyBzKSAqIGgsCiAgICAgICAgICAgICAgICAgIHAgPSAobiArIGEpICogYzsKICAgICAgICAgICAgICAgIHJldHVybiBvWzBdID0gMiAqIGwsIG9bNF0gPSAwLCBvWzhdID0gMCwgb1sxMl0gPSAtdSwgb1sxXSA9IDAsIG9bNV0gPSAyICogaCwgb1s5XSA9IDAsIG9bMTNdID0gLWYsIG9bMl0gPSAwLCBvWzZdID0gMCwgb1sxMF0gPSAtMiAqIGMsIG9bMTRdID0gLXAsIG9bM10gPSAwLCBvWzddID0gMCwgb1sxMV0gPSAwLCBvWzE1XSA9IDEsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaXNFcXVhbCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICByID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiByWzBdID09PSB0WzBdICYmIHJbNF0gPT09IHRbNF0gJiYgcls4XSA9PT0gdFs4XSAmJiByWzEyXSA9PT0gdFsxMl0gJiYgclsxXSA9PT0gdFsxXSAmJiByWzVdID09PSB0WzVdICYmIHJbOV0gPT09IHRbOV0gJiYgclsxM10gPT09IHRbMTNdICYmIHJbMl0gPT09IHRbMl0gJiYgcls2XSA9PT0gdFs2XSAmJiByWzEwXSA9PT0gdFsxMF0gJiYgclsxNF0gPT09IHRbMTRdICYmIHJbM10gPT09IHRbM10gJiYgcls3XSA9PT0gdFs3XSAmJiByWzExXSA9PT0gdFsxMV0gJiYgclsxNV0gPT09IHRbMTVdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHM7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9NYXRyaXgyKGVbMF0sIGVbNF0sIGVbOF0sIGVbMTJdLCBlWzFdLCBlWzVdLCBlWzldLCBlWzEzXSwgZVsyXSwgZVs2XSwgZVsxMF0sIGVbMTRdLCBlWzNdLCBlWzddLCBlWzExXSwgZVsxNV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlzSWRlbnRpdHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0lkZW50aXR5KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IGVbMF0gJiYgMCA9PT0gZVs0XSAmJiAwID09PSBlWzhdICYmIDAgPT09IGVbMTJdICYmIDAgPT09IGVbMV0gJiYgMSA9PT0gZVs1XSAmJiAwID09PSBlWzldICYmIDAgPT09IGVbMTNdICYmIDAgPT09IGVbMl0gJiYgMCA9PT0gZVs2XSAmJiAxID09PSBlWzEwXSAmJiAwID09PSBlWzE0XSAmJiAwID09PSBlWzNdICYmIDAgPT09IGVbN10gJiYgMCA9PT0gZVsxMV0gJiYgMSA9PT0gZVsxNV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaXNOZWFybHlJZGVudGl0eSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTmVhcmx5SWRlbnRpdHkoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zbmFwKGUpLmlzSWRlbnRpdHkoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRTY2FsZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjYWxlKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiBlID0gZSB8fCBuZXcgX1ZlY3RvcjIoKSwgaC5zZXQodFswXSwgdFsxXSwgdFsyXSksIGMuc2V0KHRbNF0sIHRbNV0sIHRbNl0pLCB1LnNldCh0WzhdLCB0WzldLCB0WzEwXSksIGUueCA9IGgubGVuZ3RoKCksIGUueSA9IGMubGVuZ3RoKCksIGUueiA9IHUubGVuZ3RoKCksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibG9va0F0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9va0F0KGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiB1LnN1YlZlY3RvcnMoZSwgdCkubm9ybWFsaXplKCksIDAgPT09IHUubGVuZ3RoKCkgJiYgKHUueiA9IDEpLCBoLmNyb3NzVmVjdG9ycyhyLCB1KS5ub3JtYWxpemUoKSwgMCA9PT0gaC5sZW5ndGgoKSAmJiAodS54ICs9IDFlLTQsIGguY3Jvc3NWZWN0b3JzKHIsIHUpLm5vcm1hbGl6ZSgpKSwgYy5jcm9zc1ZlY3RvcnModSwgaCksIHNbMF0gPSBoLngsIHNbNF0gPSBjLngsIHNbOF0gPSB1LngsIHNbMV0gPSBoLnksIHNbNV0gPSBjLnksIHNbOV0gPSB1LnksIHNbMl0gPSBoLnosIHNbNl0gPSBjLnosIHNbMTBdID0gdS56LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNvbXBvc2UiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb3NlKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiBvLmlkZW50aXR5KCksIG8uc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbih0KSwgbC5tYWtlU2NhbGUoci54LCByLnksIHIueiksIHRoaXMubXVsdGlwbHlNYXRyaWNlcyhvLCBsKSwgc1sxMl0gPSBlLngsIHNbMTNdID0gZS55LCBzWzE0XSA9IGUueiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9NYXRyaXgyOwogICAgICAgICAgfSgpOwogICAgICAgICAgbyA9IG5ldyBfTWF0cml4MigpLCBsID0gbmV3IF9NYXRyaXgyKCk7CiAgICAgICAgICB2YXIgX1ZlY3RvcjIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfVmVjdG9yMihlLCB0LCByKSB7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9WZWN0b3IyKTsKICAgICAgICAgICAgICB0aGlzLnggPSBlIHx8IDAsIHRoaXMueSA9IHQgfHwgMCwgdGhpcy56ID0gciB8fCAwLCB0aGlzLmF0b21pZCA9IHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1ZlY3RvcjIsIFt7CiAgICAgICAgICAgICAga2V5OiAic2V0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBlLCB0aGlzLnkgPSB0LCB0aGlzLnogPSByLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNvcHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBlLngsIHRoaXMueSA9IGUueSwgdGhpcy56ID0gZS56LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFkZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ICs9IGUueCwgdGhpcy55ICs9IGUueSwgdGhpcy56ICs9IGUueiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhZGRWZWN0b3JzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVmVjdG9ycyhlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID0gZS54ICsgdC54LCB0aGlzLnkgPSBlLnkgKyB0LnksIHRoaXMueiA9IGUueiArIHQueiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJtdWx0aXBseVZlY3RvcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBseVZlY3RvcnMoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IGUueCAqIHQueCwgdGhpcy55ID0gZS55ICogdC55LCB0aGlzLnogPSBlLnogKiB0LnosIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAic3ViIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3ViKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggLT0gZS54LCB0aGlzLnkgLT0gZS55LCB0aGlzLnogLT0gZS56LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInN1YlZlY3RvcnMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJWZWN0b3JzKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBlLnggLSB0LngsIHRoaXMueSA9IGUueSAtIHQueSwgdGhpcy56ID0gZS56IC0gdC56LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm11bHRpcGx5U2NhbGFyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCAqPSBlLCB0aGlzLnkgKj0gZSwgdGhpcy56ICo9IGUsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGl2aWRlU2NhbGFyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGl2aWRlU2NhbGFyKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAwICE9PSBlID8gKHRoaXMueCAvPSBlLCB0aGlzLnkgLz0gZSwgdGhpcy56IC89IGUpIDogKHRoaXMueCA9IDAsIHRoaXMueSA9IDAsIHRoaXMueiA9IDApLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm1heCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1heChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID0gTWF0aC5tYXgodGhpcy54LCBlLngpLCB0aGlzLnkgPSBNYXRoLm1heCh0aGlzLnksIGUueSksIHRoaXMueiA9IE1hdGgubWF4KHRoaXMueiwgZS56KSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJtaW4iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtaW4oZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IE1hdGgubWluKHRoaXMueCwgZS54KSwgdGhpcy55ID0gTWF0aC5taW4odGhpcy55LCBlLnkpLCB0aGlzLnogPSBNYXRoLm1pbih0aGlzLnosIGUueiksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzdGFuY2VUbyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3RhbmNlVG8oZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKGUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJkaXN0YW5jZVRvU3F1YXJlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3RhbmNlVG9TcXVhcmVkKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy54IC0gZS54LAogICAgICAgICAgICAgICAgICByID0gdGhpcy55IC0gZS55LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy56IC0gZS56OwogICAgICAgICAgICAgICAgcmV0dXJuIHQgKiB0ICsgciAqIHIgKyBzICogczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhcHBseU1hdHJpeDMiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseU1hdHJpeDMoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLngsCiAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnksCiAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLnosCiAgICAgICAgICAgICAgICAgIGEgPSBlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IGFbMF0gKiB0ICsgYVszXSAqIHIgKyBhWzZdICogcywgdGhpcy55ID0gYVsxXSAqIHQgKyBhWzRdICogciArIGFbN10gKiBzLCB0aGlzLnogPSBhWzJdICogdCArIGFbNV0gKiByICsgYVs4XSAqIHMsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYXBwbHlNYXRyaXg0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlNYXRyaXg0KGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy54LAogICAgICAgICAgICAgICAgICByID0gdGhpcy55LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy56LAogICAgICAgICAgICAgICAgICBhID0gZS5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBhWzBdICogdCArIGFbNF0gKiByICsgYVs4XSAqIHMgKyBhWzEyXSwgdGhpcy55ID0gYVsxXSAqIHQgKyBhWzVdICogciArIGFbOV0gKiBzICsgYVsxM10sIHRoaXMueiA9IGFbMl0gKiB0ICsgYVs2XSAqIHIgKyBhWzEwXSAqIHMgKyBhWzE0XSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJhcHBseVByb2plY3Rpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseVByb2plY3Rpb24oZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLngsCiAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnksCiAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLnosCiAgICAgICAgICAgICAgICAgIGEgPSBlLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICBuID0gYVszXSAqIHQgKyBhWzddICogciArIGFbMTFdICogcyArIGFbMTVdOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IChhWzBdICogdCArIGFbNF0gKiByICsgYVs4XSAqIHMgKyBhWzEyXSkgLyBuLCB0aGlzLnkgPSAoYVsxXSAqIHQgKyBhWzVdICogciArIGFbOV0gKiBzICsgYVsxM10pIC8gbiwgdGhpcy56ID0gKGFbMl0gKiB0ICsgYVs2XSAqIHIgKyBhWzEwXSAqIHMgKyBhWzE0XSkgLyBuLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFwcGx5UXVhdGVybmlvbiIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5UXVhdGVybmlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMueCwKICAgICAgICAgICAgICAgICAgciA9IHRoaXMueSwKICAgICAgICAgICAgICAgICAgcyA9IHRoaXMueiwKICAgICAgICAgICAgICAgICAgYSA9IGUueCwKICAgICAgICAgICAgICAgICAgbiA9IGUueSwKICAgICAgICAgICAgICAgICAgbyA9IGUueiwKICAgICAgICAgICAgICAgICAgbCA9IGUudywKICAgICAgICAgICAgICAgICAgaCA9IHt9OwogICAgICAgICAgICAgICAgaC54ID0gMiAqIChyICogbyAtIHMgKiBuKSwgaC55ID0gMiAqIChzICogYSAtIHQgKiBvKSwgaC56ID0gMiAqICh0ICogbiAtIHIgKiBhKTsKICAgICAgICAgICAgICAgIHZhciBjID0ge307CiAgICAgICAgICAgICAgICByZXR1cm4gYy54ID0gaC55ICogbyAtIGgueiAqIG4sIGMueSA9IGgueiAqIGEgLSBoLnggKiBvLCBjLnogPSBoLnggKiBuIC0gaC55ICogYSwgdGhpcy54ID0gdCArIGwgKiBoLnggKyBjLngsIHRoaXMueSA9IHIgKyBsICogaC55ICsgYy55LCB0aGlzLnogPSBzICsgbCAqIGgueiArIGMueiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJuZWdhdGUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZWdhdGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigtMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZG90IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG90KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggKiBlLnggKyB0aGlzLnkgKiBlLnkgKyB0aGlzLnogKiBlLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibGVuZ3RoIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnopOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImxlbmd0aFNxIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoU3EoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogIm5vcm1hbGl6ZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjcm9zcyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyb3NzKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy54LAogICAgICAgICAgICAgICAgICByID0gdGhpcy55LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy56OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IHIgKiBlLnogLSBzICogZS55LCB0aGlzLnkgPSBzICogZS54IC0gdCAqIGUueiwgdGhpcy56ID0gdCAqIGUueSAtIHIgKiBlLngsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY3Jvc3NWZWN0b3JzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3Jvc3NWZWN0b3JzKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBlLnkgKiB0LnogLSBlLnogKiB0LnksIHRoaXMueSA9IGUueiAqIHQueCAtIGUueCAqIHQueiwgdGhpcy56ID0gZS54ICogdC55IC0gZS55ICogdC54LCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImVxdWFscyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID09IGUueCAmJiB0aGlzLnkgPT0gZS55ICYmIHRoaXMueiA9PSBlLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9zaXRpb25Gcm9tTWF0cml4KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBlLmVsZW1lbnRzWzEyXSwgdGhpcy55ID0gZS5lbGVtZW50c1sxM10sIHRoaXMueiA9IGUuZWxlbWVudHNbMTRdLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBlLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICBhID0gclswXSwKICAgICAgICAgICAgICAgICAgbiA9IHJbNF0sCiAgICAgICAgICAgICAgICAgIG8gPSByWzhdLAogICAgICAgICAgICAgICAgICBsID0gcls1XSwKICAgICAgICAgICAgICAgICAgaCA9IHJbOV0sCiAgICAgICAgICAgICAgICAgIGMgPSByWzZdLAogICAgICAgICAgICAgICAgICB1ID0gclsxMF07CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0IHx8ICJYWVoiID09PSB0ID8gKHRoaXMueSA9IE1hdGguYXNpbihzKG8sIC0xLCAxKSksIE1hdGguYWJzKG8pIDwgLjk5OTk5ID8gKHRoaXMueCA9IE1hdGguYXRhbjIoLWgsIHUpLCB0aGlzLnogPSBNYXRoLmF0YW4yKC1uLCBhKSkgOiAodGhpcy54ID0gTWF0aC5hdGFuMihjLCBsKSwgdGhpcy56ID0gMCkpIDogY29uc29sZS5lcnJvcigiRXJyb3Igd2l0aCB2ZWN0b3IncyBzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeDogVW5rbm93biBvcmRlcjogIi5jb25jYXQodCkpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInJvdGF0ZUFib3V0VmVjdG9yIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcm90YXRlQWJvdXRWZWN0b3IoZSwgdCkgewogICAgICAgICAgICAgICAgZS5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICAgIHZhciByID0gTWF0aC5jb3ModCksCiAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLnNpbih0KSwKICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihyKSwKICAgICAgICAgICAgICAgICAgbiA9IGUuY2xvbmUoKS5jcm9zcyh0aGlzKS5tdWx0aXBseVNjYWxhcihzKSwKICAgICAgICAgICAgICAgICAgbyA9IGUuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihlLmNsb25lKCkuZG90KHRoaXMpKS5tdWx0aXBseVNjYWxhcigxIC0gciksCiAgICAgICAgICAgICAgICAgIGwgPSBhLmFkZChuKS5hZGQobyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54ID0gbC54LCB0aGlzLnkgPSBsLnksIHRoaXMueiA9IGwueiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRGcm9tTWF0cml4UG9zaXRpb24iLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGcm9tTWF0cml4UG9zaXRpb24oZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9IHRbMTJdLCB0aGlzLnkgPSB0WzEzXSwgdGhpcy56ID0gdFsxNF0sIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNmb3JtRGlyZWN0aW9uIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtRGlyZWN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy54LAogICAgICAgICAgICAgICAgICByID0gdGhpcy55LAogICAgICAgICAgICAgICAgICBzID0gdGhpcy56LAogICAgICAgICAgICAgICAgICBhID0gZS5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnggPSBhWzBdICogdCArIGFbNF0gKiByICsgYVs4XSAqIHMsIHRoaXMueSA9IGFbMV0gKiB0ICsgYVs1XSAqIHIgKyBhWzldICogcywgdGhpcy56ID0gYVsyXSAqIHQgKyBhWzZdICogciArIGFbMTBdICogcywgdGhpcy5ub3JtYWxpemUoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfVmVjdG9yMih0aGlzLngsIHRoaXMueSwgdGhpcy56KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJ1bnByb2plY3QiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bnByb2plY3QoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBvOwogICAgICAgICAgICAgICAgcmV0dXJuIHQubXVsdGlwbHlNYXRyaWNlcyhlLm1hdHJpeFdvcmxkLCB0LmdldEludmVyc2UoZS5wcm9qZWN0aW9uTWF0cml4KSksIHRoaXMuYXBwbHlNYXRyaXg0KHQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0pOwogICAgICAgICAgICByZXR1cm4gX1ZlY3RvcjI7CiAgICAgICAgICB9KCk7CiAgICAgICAgICBoID0gbmV3IF9WZWN0b3IyKCksIGMgPSBuZXcgX1ZlY3RvcjIoKSwgdSA9IG5ldyBfVmVjdG9yMigpOwogICAgICAgICAgdmFyIF9NYXRyaXggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfTWF0cml4KCkgewogICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwOwogICAgICAgICAgICAgIHZhciBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwOwogICAgICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxOwogICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwOwogICAgICAgICAgICAgIHZhciBvID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAwOwogICAgICAgICAgICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiAwOwogICAgICAgICAgICAgIHZhciBoID0gYXJndW1lbnRzLmxlbmd0aCA+IDggJiYgYXJndW1lbnRzWzhdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOF0gOiAxOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfTWF0cml4KTsKICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IEZsb2F0MzJBcnJheSg5KSwgdGhpcy5zZXQoZSwgdCwgciwgcywgYSwgbiwgbywgbCwgaCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9NYXRyaXgsIFt7CiAgICAgICAgICAgICAga2V5OiAic2V0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGUsIHQsIHIsIHMsIGEsIG4sIG8sIGwsIGgpIHsKICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiBjWzBdID0gZSwgY1szXSA9IHQsIGNbNl0gPSByLCBjWzFdID0gcywgY1s0XSA9IGEsIGNbN10gPSBuLCBjWzJdID0gbywgY1s1XSA9IGwsIGNbOF0gPSBoLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImlkZW50aXR5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaWRlbnRpdHkoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiY29weSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgdGhpcy5zZXQodFswXSwgdFszXSwgdFs2XSwgdFsxXSwgdFs0XSwgdFs3XSwgdFsyXSwgdFs1XSwgdFs4XSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAibXVsdGlwbHlTY2FsYXIiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuZWxlbWVudHM7CiAgICAgICAgICAgICAgICByZXR1cm4gdFswXSAqPSBlLCB0WzNdICo9IGUsIHRbNl0gKj0gZSwgdFsxXSAqPSBlLCB0WzRdICo9IGUsIHRbN10gKj0gZSwgdFsyXSAqPSBlLCB0WzVdICo9IGUsIHRbOF0gKj0gZSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRJbnZlcnNlMyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEludmVyc2UzKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS5lbGVtZW50cywKICAgICAgICAgICAgICAgICAgciA9IHRoaXMuZWxlbWVudHM7CiAgICAgICAgICAgICAgICByWzBdID0gdFs0XSAqIHRbOF0gLSB0WzVdICogdFs3XSwgclszXSA9IHRbNl0gKiB0WzVdIC0gdFszXSAqIHRbOF0sIHJbNl0gPSB0WzNdICogdFs3XSAtIHRbNl0gKiB0WzRdLCByWzFdID0gdFs3XSAqIHRbMl0gLSB0WzFdICogdFs4XSwgcls0XSA9IHRbMF0gKiB0WzhdIC0gdFs2XSAqIHRbMl0sIHJbN10gPSB0WzFdICogdFs2XSAtIHRbMF0gKiB0WzddLCByWzJdID0gdFsxXSAqIHRbNV0gLSB0WzJdICogdFs0XSwgcls1XSA9IHRbMl0gKiB0WzNdIC0gdFswXSAqIHRbNV0sIHJbOF0gPSB0WzBdICogdFs0XSAtIHRbMV0gKiB0WzNdOwogICAgICAgICAgICAgICAgdmFyIHMgPSB0WzBdICogclswXSArIHRbM10gKiByWzFdICsgdFs2XSAqIHJbMl07CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxIC8gcyksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0SW52ZXJzZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEludmVyc2UoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSBlLmVsZW1lbnRzLAogICAgICAgICAgICAgICAgICBzID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHNbMF0gPSByWzEwXSAqIHJbNV0gLSByWzZdICogcls5XSwgc1sxXSA9IC1yWzEwXSAqIHJbMV0gKyByWzJdICogcls5XSwgc1syXSA9IHJbNl0gKiByWzFdIC0gclsyXSAqIHJbNV0sIHNbM10gPSAtclsxMF0gKiByWzRdICsgcls2XSAqIHJbOF0sIHNbNF0gPSByWzEwXSAqIHJbMF0gLSByWzJdICogcls4XSwgc1s1XSA9IC1yWzZdICogclswXSArIHJbMl0gKiByWzRdLCBzWzZdID0gcls5XSAqIHJbNF0gLSByWzVdICogcls4XSwgc1s3XSA9IC1yWzldICogclswXSArIHJbMV0gKiByWzhdLCBzWzhdID0gcls1XSAqIHJbMF0gLSByWzFdICogcls0XTsKICAgICAgICAgICAgICAgIHZhciBhID0gclswXSAqIHNbMF0gKyByWzFdICogc1szXSArIHJbMl0gKiBzWzZdOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IGEpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9lMTAyID0gIk1hdHJpeDMuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwIjsKICAgICAgICAgICAgICAgICAgaWYgKHQpIHRocm93IG5ldyBFcnJvcihfZTEwMik7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oX2UxMDIpLCB0aGlzLmlkZW50aXR5KCksIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxIC8gYSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0RGV0ZXJtaW5hbnQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXRlcm1pbmFudCgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50czsKICAgICAgICAgICAgICAgIHJldHVybiBlWzBdICogZVs0XSAqIGVbOF0gKyBlWzFdICogZVs1XSAqIGVbNl0gKyBlWzJdICogZVszXSAqIGVbN10gLSBlWzJdICogZVs0XSAqIGVbNl0gLSBlWzFdICogZVszXSAqIGVbOF0gLSBlWzBdICogZVs1XSAqIGVbN107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNwb3NlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNwb3NlKCkgewogICAgICAgICAgICAgICAgdmFyIGU7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuZWxlbWVudHM7CiAgICAgICAgICAgICAgICByZXR1cm4gZSA9IHRbMV0sIHRbMV0gPSB0WzNdLCB0WzNdID0gZSwgZSA9IHRbMl0sIHRbMl0gPSB0WzZdLCB0WzZdID0gZSwgZSA9IHRbNV0sIHRbNV0gPSB0WzddLCB0WzddID0gZSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfTWF0cml4KGVbMF0sIGVbM10sIGVbNl0sIGVbMV0sIGVbNF0sIGVbN10sIGVbMl0sIGVbNV0sIGVbOF0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImdldE1hdHJpeDQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXRyaXg0KCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfTWF0cml4MihlWzBdLCBlWzNdLCBlWzZdLCAwLCBlWzFdLCBlWzRdLCBlWzddLCAwLCBlWzJdLCBlWzVdLCBlWzhdLCAwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9NYXRyaXg7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgX1JheSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9SYXkoZSwgdCkgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfUmF5KTsKICAgICAgICAgICAgICB0aGlzLm9yaWdpbiA9IHZvaWQgMCAhPT0gZSA/IGUgOiBuZXcgX1ZlY3RvcjIoKSwgdGhpcy5kaXJlY3Rpb24gPSB2b2lkIDAgIT09IHQgPyB0IDogbmV3IF9WZWN0b3IyKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9SYXksIFt7CiAgICAgICAgICAgICAga2V5OiAic2V0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jb3B5KGUpLCB0aGlzLmRpcmVjdGlvbi5jb3B5KHQpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNvcHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jb3B5KGUub3JpZ2luKSwgdGhpcy5kaXJlY3Rpb24uY29weShlLmRpcmVjdGlvbiksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdChlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHQgfHwgbmV3IF9WZWN0b3IyKCkpLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGUpLmFkZCh0aGlzLm9yaWdpbik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAicmVjYXN0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjYXN0KGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gaDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jb3B5KHRoaXMuYXQoZSwgdCkpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNsb3Nlc3RQb2ludFRvUG9pbnQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gdCB8fCBuZXcgX1ZlY3RvcjIoKTsKICAgICAgICAgICAgICAgIHIuc3ViVmVjdG9ycyhlLCB0aGlzLm9yaWdpbik7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHIuZG90KHRoaXMuZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIHJldHVybiByLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKHMpLmFkZCh0aGlzLm9yaWdpbik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZGlzdGFuY2VUb1BvaW50IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzdGFuY2VUb1BvaW50KGUpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gaCwKICAgICAgICAgICAgICAgICAgciA9IHQuc3ViVmVjdG9ycyhlLCB0aGlzLm9yaWdpbikuZG90KHRoaXMuZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIHJldHVybiB0LmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKHIpLmFkZCh0aGlzLm9yaWdpbiksIHQuZGlzdGFuY2VUbyhlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpc0ludGVyc2VjdGlvbkN5bGluZGVyIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNJbnRlcnNlY3Rpb25DeWxpbmRlcigpIHt9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJpc0ludGVyc2VjdGlvblNwaGVyZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzSW50ZXJzZWN0aW9uU3BoZXJlKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludChlLmNlbnRlcikgPD0gZS5yYWRpdXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiaXNJbnRlcnNlY3Rpb25QbGFuZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzSW50ZXJzZWN0aW9uUGxhbmUoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIDAgIT09IGUubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbikgfHwgMCA9PT0gZS5kaXN0YW5jZVRvUG9pbnQodGhpcy5vcmlnaW4pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImRpc3RhbmNlVG9QbGFuZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3RhbmNlVG9QbGFuZShlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IGUubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbik7CiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdCkgcmV0dXJuIDAgPT09IGUuZGlzdGFuY2VUb1BvaW50KHRoaXMub3JpZ2luKSA/IDAgOiB2b2lkIDA7CiAgICAgICAgICAgICAgICByZXR1cm4gLSh0aGlzLm9yaWdpbi5kb3QoZS5ub3JtYWwpICsgZS5jb25zdGFudCkgLyB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImludGVyc2VjdFBsYW5lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZXJzZWN0UGxhbmUoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmRpc3RhbmNlVG9QbGFuZShlKTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHIpIHJldHVybiB0aGlzLmF0KHIsIHQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFwcGx5TWF0cml4NCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TWF0cml4NChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uYWRkKHRoaXMub3JpZ2luKS5hcHBseU1hdHJpeDQoZSksIHRoaXMub3JpZ2luLmFwcGx5TWF0cml4NChlKSwgdGhpcy5kaXJlY3Rpb24uc3ViKHRoaXMub3JpZ2luKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfUmF5KCkuY29weSh0aGlzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9SYXk7CiAgICAgICAgICB9KCk7CiAgICAgICAgICBmdW5jdGlvbiBmKGUsIHQsIHIsIHMsIGEsIG4pIHsKICAgICAgICAgICAgcyA9IHMgKiBNYXRoLlBJIC8gMTgwLCBhID0gYSAqIE1hdGguUEkgLyAxODAsIG4gPSBuICogTWF0aC5QSSAvIDE4MDsKICAgICAgICAgICAgdmFyIG8gPSBmdW5jdGlvbiBvKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlICogZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGwgPSBNYXRoLmNvcyhzKSwKICAgICAgICAgICAgICBoID0gTWF0aC5jb3MoYSksCiAgICAgICAgICAgICAgYyA9IE1hdGguY29zKG4pLAogICAgICAgICAgICAgIHUgPSBNYXRoLnNpbihuKTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBfTWF0cml4KGUsIHQgKiBjLCByICogaCwgMCwgdCAqIHUsIHIgKiAobCAtIGggKiBjKSAvIHUsIDAsIDAsIHIgKiBNYXRoLnNxcnQoMSAtIG8obCkgLSBvKGgpIC0gbyhjKSArIDIgKiBsICogaCAqIGMpIC8gdSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAzMzUxOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIEN5bGluZGVyOiBmdW5jdGlvbiBDeWxpbmRlcigpIHsKICAgICAgICAgICAgICByZXR1cm4gX0N5bGluZGVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTcGhlcmU6IGZ1bmN0aW9uIFNwaGVyZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX1NwaGVyZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVHJpYW5nbGU6IGZ1bmN0aW9uIFRyaWFuZ2xlKCkgewogICAgICAgICAgICAgIHJldHVybiBfVHJpYW5nbGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHMgPSByKDk2NTIpOwogICAgICAgICAgdmFyIF9TcGhlcmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfU3BoZXJlKCkgewogICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7CiAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfU3BoZXJlKTsKICAgICAgICAgICAgICB0aGlzLmNlbnRlciA9IG5ldyBzLlZlY3RvcjMoZS54LCBlLnksIGUueiksIHRoaXMucmFkaXVzID0gdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1NwaGVyZSwgW3sKICAgICAgICAgICAgICBrZXk6ICJzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyLmNvcHkoZSksIHRoaXMucmFkaXVzID0gdCwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjb3B5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29weShlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jZW50ZXIuY29weShlLmNlbnRlciksIHRoaXMucmFkaXVzID0gZS5yYWRpdXMsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiYXBwbHlNYXRyaXg0IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlNYXRyaXg0KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQoZSksIHRoaXMucmFkaXVzID0gdGhpcy5yYWRpdXMgKiBlLmdldE1heFNjYWxlT25BeGlzKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAidHJhbnNsYXRlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNsYXRlKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbnRlci5hZGQoZSksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZXF1YWxzIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLmNlbnRlci5lcXVhbHModGhpcy5jZW50ZXIpICYmIGUucmFkaXVzID09PSB0aGlzLnJhZGl1czsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjbG9uZSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfU3BoZXJlKCkuY29weSh0aGlzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgcmV0dXJuIF9TcGhlcmU7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgYSA9IG5ldyBzLlZlY3RvcjMoKTsKICAgICAgICAgIHZhciBfQ3lsaW5kZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfQ3lsaW5kZXIoKSB7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBzLlZlY3RvcjMoKTsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbmV3IHMuVmVjdG9yMygpOwogICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwOwogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfQ3lsaW5kZXIpOwogICAgICAgICAgICAgIHRoaXMuYzEgPSBlLCB0aGlzLmMyID0gdCwgdGhpcy5yYWRpdXMgPSByLCB0aGlzLmRpcmVjdGlvbiA9IG5ldyBzLlZlY3RvcjMoKS5zdWJWZWN0b3JzKHRoaXMuYzIsIHRoaXMuYzEpLm5vcm1hbGl6ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfQ3lsaW5kZXIsIFt7CiAgICAgICAgICAgICAga2V5OiAiY29weSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHkoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYzEuY29weShlLmMxKSwgdGhpcy5jMi5jb3B5KGUuYzIpLCB0aGlzLmRpcmVjdGlvbi5jb3B5KGUuZGlyZWN0aW9uKSwgdGhpcy5yYWRpdXMgPSBlLnJhZGl1cywgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJsZW5ndGhTcSIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aFNxKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuc3ViVmVjdG9ycyh0aGlzLmMyLCB0aGlzLmMxKS5sZW5ndGhTcSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFwcGx5TWF0cml4NCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TWF0cml4NChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uYWRkKHRoaXMuYzEpLmFwcGx5TWF0cml4NChlKSwgdGhpcy5jMS5hcHBseU1hdHJpeDQoZSksIHRoaXMuYzIuYXBwbHlNYXRyaXg0KGUpLCB0aGlzLmRpcmVjdGlvbi5zdWIodGhpcy5jMSkubm9ybWFsaXplKCksIHRoaXMucmFkaXVzID0gdGhpcy5yYWRpdXMgKiBlLmdldE1heFNjYWxlT25BeGlzKCksIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfQ3lsaW5kZXI7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgbiA9IG5ldyBzLlZlY3RvcjMoKTsKICAgICAgICAgIHZhciBfVHJpYW5nbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfVHJpYW5nbGUoKSB7CiAgICAgICAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBzLlZlY3RvcjMoKTsKICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbmV3IHMuVmVjdG9yMygpOwogICAgICAgICAgICAgIHZhciByID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBuZXcgcy5WZWN0b3IzKCk7CiAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9UcmlhbmdsZSk7CiAgICAgICAgICAgICAgdGhpcy5hID0gZSwgdGhpcy5iID0gdCwgdGhpcy5jID0gcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1RyaWFuZ2xlLCBbewogICAgICAgICAgICAgIGtleTogImNvcHkiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmEuY29weShlLmEpLCB0aGlzLmIuY29weShlLmIpLCB0aGlzLmMuY29weShlLmMpLCB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImFwcGx5TWF0cml4NCIsCiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TWF0cml4NChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hLmFwcGx5TWF0cml4NChlKSwgdGhpcy5iLmFwcGx5TWF0cml4NChlKSwgdGhpcy5jLmFwcGx5TWF0cml4NChlKSwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXROb3JtYWwiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb3JtYWwoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuYS5jbG9uZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIGUuc3ViKHRoaXMuYiksIG4uc3ViVmVjdG9ycyh0aGlzLmMsIHRoaXMuYiksIGUuY3Jvc3MobiksIGUubm9ybWFsaXplKCksIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfVHJpYW5nbGU7CiAgICAgICAgICB9KCk7CiAgICAgICAgfSwKICAgICAgICA5MTU4OiBmdW5jdGlvbiBfKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewogICAgICAgICAgICBhdXRvaW5pdDogZnVuY3Rpb24gYXV0b2luaXQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9hdXRvaW5pdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXV0b2xvYWQ6IGZ1bmN0aW9uIGF1dG9sb2FkKCkgewogICAgICAgICAgICAgIHJldHVybiBfYXV0b2xvYWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb2Nlc3NpbmdfYXV0b2luaXQ6IGZ1bmN0aW9uIHByb2Nlc3NpbmdfYXV0b2luaXQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9wcm9jZXNzaW5nX2F1dG9pbml0OwogICAgICAgICAgICB9LAogICAgICAgICAgICB2aWV3ZXJzOiBmdW5jdGlvbiB2aWV3ZXJzKCkgewogICAgICAgICAgICAgIHJldHVybiBfdmlld2VyczsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgX0dMVmlld2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMzApLAogICAgICAgICAgICBfUHJvdGVpblN1cmZhY2U0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxOTIpLAogICAgICAgICAgICBfdXRpbGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMDUpLAogICAgICAgICAgICBfY29sb3JzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1NTApLAogICAgICAgICAgICBfYXV0b2luaXQgPSAhMSwKICAgICAgICAgICAgX3Byb2Nlc3NpbmdfYXV0b2luaXQgPSAhMSwKICAgICAgICAgICAgX3ZpZXdlcnMgPSB7fTsKICAgICAgICAgIGZ1bmN0aW9uIF9hdXRvbG9hZCh2aWV3ZXIsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBpLCBkYXRhbmFtZSwgdHlwZTsKICAgICAgICAgICAgaWYgKG51bGwgIT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnZpZXdlcl8zRG1vbGpzIikgJiYgKF9hdXRvaW5pdCA9ICEwKSwgX2F1dG9pbml0KSB7CiAgICAgICAgICAgICAgX3Byb2Nlc3NpbmdfYXV0b2luaXQgPSAhMCwgdmlld2VyID0gbnVsbCAhPSB2aWV3ZXIgPyB2aWV3ZXIgOiBudWxsOwogICAgICAgICAgICAgIHZhciBudmlld2VycyA9IDA7CiAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLnZpZXdlcl8zRG1vbGpzIikuZm9yRWFjaChmdW5jdGlvbiAodmlld2VyZGl2KSB7CiAgICAgICAgICAgICAgICB2YXIgZGF0YXVyaSA9IFtdLAogICAgICAgICAgICAgICAgICBkYXRhdHlwZXMgPSBbXSwKICAgICAgICAgICAgICAgICAgdXJpID0gIiI7CiAgICAgICAgICAgICAgICAic3RhdGljIiA9PSB2aWV3ZXJkaXYuc3R5bGUucG9zaXRpb24gJiYgKHZpZXdlcmRpdi5zdHlsZS5wb3NpdGlvbiA9ICJyZWxhdGl2ZSIpOwogICAgICAgICAgICAgICAgdmFyIFVJID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmICh0eXBlID0gbnVsbCwgdmlld2VyZGl2LmRhdGFzZXQucGRiKSBkYXRhdXJpLnB1c2goImh0dHBzOi8vZmlsZXMucmNzYi5vcmcvdmlldy8iICsgdmlld2VyZGl2LmRhdGFzZXQucGRiICsgIi5wZGIiKSwgZGF0YXR5cGVzLnB1c2goInBkYiIpO2Vsc2UgaWYgKHZpZXdlcmRpdi5kYXRhc2V0LmNpZCkgZGF0YXR5cGVzLnB1c2goInNkZiIpLCBkYXRhdXJpLnB1c2goImh0dHBzOi8vcHViY2hlbS5uY2JpLm5sbS5uaWguZ292L3Jlc3QvcHVnL2NvbXBvdW5kL2NpZC8iICsgdmlld2VyZGl2LmRhdGFzZXQuY2lkICsgIi9TREY/cmVjb3JkX3R5cGU9M2QiKTtlbHNlIGlmICh2aWV3ZXJkaXYuZGF0YXNldC5ocmVmIHx8IHZpZXdlcmRpdi5kYXRhc2V0LnVybCkgewogICAgICAgICAgICAgICAgICB1cmkgPSB2aWV3ZXJkaXYuZGF0YXNldC5ocmVmID8gdmlld2VyZGl2LmRhdGFzZXQuaHJlZiA6IHZpZXdlcmRpdi5kYXRhc2V0LnVybCwgZGF0YXVyaS5wdXNoKHVyaSksIHR5cGUgPSB1cmkuc3Vic3RyaW5nKHVyaS5sYXN0SW5kZXhPZigiLiIpICsgMSksIGRhdGF0eXBlcy5wdXNoKHR5cGUpOwogICAgICAgICAgICAgICAgICB2YXIgbW9sTmFtZSA9IHVyaS5zdWJzdHJpbmcodXJpLmxhc3RJbmRleE9mKCIvIikgKyAxLCB1cmkubGFzdEluZGV4T2YoIi4iKSk7CiAgICAgICAgICAgICAgICAgICIvIiA9PSBtb2xOYW1lICYmIChtb2xOYW1lID0gdXJpLnN1YnN0cmluZyh1cmkubGFzdEluZGV4T2YoIi8iKSArIDEpKSwgdmlld2VyZGl2LmRhdGFzZXRbZGF0YXR5cGVzW2RhdGF0eXBlcy5sZW5ndGggLSAxXV0gPSBtb2xOYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGRpdmRhdGEgPSB2aWV3ZXJkaXYuZGF0YXNldDsKICAgICAgICAgICAgICAgIGZvciAoaSBpbiBkaXZkYXRhKSAicGRiIiA9PT0gaS5zdWJzdHJpbmcoMCwgMykgJiYgInBkYiIgIT09IGkgPyAoZGF0YXVyaS5wdXNoKCJodHRwczovL2ZpbGVzLnJjc2Iub3JnL3ZpZXcvIiArIGRpdmRhdGFbaV0gKyAiLnBkYiIpLCBkYXRhdHlwZXMucHVzaCgicGRiIikpIDogImhyZWYiID09PSBpLnN1YnN0cmluZygwLCA0KSAmJiAiaHJlZiIgIT09IGkgPyAodXJpID0gZGl2ZGF0YVtpXSwgZGF0YXVyaS5wdXNoKHVyaSksIGRhdGF0eXBlcy5wdXNoKHVyaS5zdWJzdHIodXJpLmxhc3RJbmRleE9mKCIuIikgKyAxKSkpIDogImNpZCIgPT09IGkuc3Vic3RyaW5nKDAsIDMpICYmICJjaWQiICE9PSBpICYmIChkYXRhdXJpLnB1c2goImh0dHBzOi8vcHViY2hlbS5uY2JpLm5sbS5uaWguZ292L3Jlc3QvcHVnL2NvbXBvdW5kL2NpZC8iICsgZGl2ZGF0YVtpXSArICIvU0RGP3JlY29yZF90eXBlPTNkIiksIGRhdGF0eXBlcy5wdXNoKCJzZGYiKSk7CiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHt9OwogICAgICAgICAgICAgICAgdmlld2VyZGl2LmRhdGFzZXQub3B0aW9ucyAmJiAob3B0aW9ucyA9ICgwLCBfdXRpbGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uc3BlY1N0cmluZ1RvT2JqZWN0KSh2aWV3ZXJkaXYuZGF0YXNldC5vcHRpb25zKSk7CiAgICAgICAgICAgICAgICB2YXIgYmdjb2xvciA9IF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5DQy5jb2xvcih2aWV3ZXJkaXYuZGF0YXNldC5iYWNrZ3JvdW5kY29sb3IpLAogICAgICAgICAgICAgICAgICBiZ2FscGhhID0gdmlld2VyZGl2LmRhdGFzZXQuYmFja2dyb3VuZGFscGhhOwogICAgICAgICAgICAgICAgYmdhbHBoYSA9IG51bGwgPT0gYmdhbHBoYSA/IDEgOiBwYXJzZUZsb2F0KGJnYWxwaGEpOwogICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gewogICAgICAgICAgICAgICAgICBsaW5lOiB7fQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZpZXdlcmRpdi5kYXRhc2V0LnN0eWxlICYmIChzdHlsZSA9ICgwLCBfdXRpbGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uc3BlY1N0cmluZ1RvT2JqZWN0KSh2aWV3ZXJkaXYuZGF0YXNldC5zdHlsZSkpOwogICAgICAgICAgICAgICAgdmFyIHNlbGVjdCA9IHt9OwogICAgICAgICAgICAgICAgdmlld2VyZGl2LmRhdGFzZXQuc2VsZWN0ICYmIChzZWxlY3QgPSAoMCwgX3V0aWxpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLnNwZWNTdHJpbmdUb09iamVjdCkodmlld2VyZGl2LmRhdGFzZXQuc2VsZWN0KSk7CiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0c3R5bGVsaXN0ID0gW10sCiAgICAgICAgICAgICAgICAgIHN1cmZhY2VzID0gW10sCiAgICAgICAgICAgICAgICAgIGxhYmVscyA9IFtdLAogICAgICAgICAgICAgICAgICB6b29tdG8gPSB7fSwKICAgICAgICAgICAgICAgICAgc3BpbiA9IG51bGwsCiAgICAgICAgICAgICAgICAgIGQgPSB2aWV3ZXJkaXYuZGF0YXNldCwKICAgICAgICAgICAgICAgICAgc3R5bGVyZSA9IC9zdHlsZSguKykvLAogICAgICAgICAgICAgICAgICBzdXJmcmUgPSAvc3VyZmFjZSguKikvLAogICAgICAgICAgICAgICAgICByZXNsYWJyZSA9IC9sYWJlbHJlcyguKikvLAogICAgICAgICAgICAgICAgICBrZXlzID0gW107CiAgICAgICAgICAgICAgICBmb3IgKGRhdGFuYW1lIGluIGQpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLCBkYXRhbmFtZSkgJiYga2V5cy5wdXNoKGRhdGFuYW1lKTsKICAgICAgICAgICAgICAgIGZvciAoa2V5cy5zb3J0KCksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBkYXRhbmFtZSA9IGtleXNbaV07CiAgICAgICAgICAgICAgICAgIHZhciBtID0gc3R5bGVyZS5leGVjKGRhdGFuYW1lKSwKICAgICAgICAgICAgICAgICAgICBzZWxuYW1lLAogICAgICAgICAgICAgICAgICAgIG5ld3NlbCwKICAgICAgICAgICAgICAgICAgICBzdHlsZW9iajsKICAgICAgICAgICAgICAgICAgbSAmJiAoc2VsbmFtZSA9ICJzZWxlY3QiICsgbVsxXSwgbmV3c2VsID0gKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5zcGVjU3RyaW5nVG9PYmplY3QpKGRbc2VsbmFtZV0pLCBzdHlsZW9iaiA9ICgwLCBfdXRpbGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uc3BlY1N0cmluZ1RvT2JqZWN0KShkW2RhdGFuYW1lXSksIHNlbGVjdHN0eWxlbGlzdC5wdXNoKFtuZXdzZWwsIHN0eWxlb2JqXSkpLCBtID0gc3VyZnJlLmV4ZWMoZGF0YW5hbWUpLCBtICYmIChzZWxuYW1lID0gInNlbGVjdCIgKyBtWzFdLCBuZXdzZWwgPSAoMCwgX3V0aWxpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLnNwZWNTdHJpbmdUb09iamVjdCkoZFtzZWxuYW1lXSksIHN0eWxlb2JqID0gKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5zcGVjU3RyaW5nVG9PYmplY3QpKGRbZGF0YW5hbWVdKSwgc3VyZmFjZXMucHVzaChbbmV3c2VsLCBzdHlsZW9ial0pKSwgbSA9IHJlc2xhYnJlLmV4ZWMoZGF0YW5hbWUpLCBtICYmIChzZWxuYW1lID0gInNlbGVjdCIgKyBtWzFdLCBuZXdzZWwgPSAoMCwgX3V0aWxpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLnNwZWNTdHJpbmdUb09iamVjdCkoZFtzZWxuYW1lXSksIHN0eWxlb2JqID0gKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5zcGVjU3RyaW5nVG9PYmplY3QpKGRbZGF0YW5hbWVdKSwgbGFiZWxzLnB1c2goW25ld3NlbCwgc3R5bGVvYmpdKSksICJ6b29tdG8iID09IGRhdGFuYW1lICYmICh6b29tdG8gPSAoMCwgX3V0aWxpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLnNwZWNTdHJpbmdUb09iamVjdCkoZFtkYXRhbmFtZV0pKSwgInNwaW4iID09IGRhdGFuYW1lICYmIChzcGluID0gKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5zcGVjU3RyaW5nVG9PYmplY3QpKGRbZGF0YW5hbWVdKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgYXBwbHlTdHlsZXMgPSBmdW5jdGlvbiBhcHBseVN0eWxlcyhlKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChlLnNldFN0eWxlKHNlbGVjdCwgc3R5bGUpLCBVSSAmJiBVSS5jcmVhdGVTZWxlY3Rpb25BbmRTdHlsZShzZWxlY3QsIHN0eWxlKSwgaSA9IDA7IGkgPCBzZWxlY3RzdHlsZWxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gc2VsZWN0c3R5bGVsaXN0W2ldWzBdIHx8IHt9LAogICAgICAgICAgICAgICAgICAgICAgICByID0gc2VsZWN0c3R5bGVsaXN0W2ldWzFdIHx8IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB7fQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgZS5zZXRTdHlsZSh0LCByKSwgVUkgJiYgVUkuY3JlYXRlU2VsZWN0aW9uQW5kU3R5bGUoc2VsZWN0LCBzdHlsZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHN1cmZhY2VzW2ldWzBdIHx8IHt9LAogICAgICAgICAgICAgICAgICAgICAgICByID0gc3VyZmFjZXNbaV1bMV0gfHwge307CiAgICAgICAgICAgICAgICAgICAgICBVSSA/IGUuYWRkU3VyZmFjZShfUHJvdGVpblN1cmZhY2U0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uU3VyZmFjZVR5cGUuVkRXLCByLCB0LCB0KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmxvYWRTdXJmYWNlKCJWRFciLCB0LCByLCBlKTsKICAgICAgICAgICAgICAgICAgICAgIH0pIDogZS5hZGRTdXJmYWNlKF9Qcm90ZWluU3VyZmFjZTRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5TdXJmYWNlVHlwZS5WRFcsIHIsIHQsIHQpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1cmZhY2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICBfbG9vcDIoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF90OTkgPSBsYWJlbHNbaV1bMF0gfHwge30sCiAgICAgICAgICAgICAgICAgICAgICAgIF9yNTYgPSBsYWJlbHNbaV1bMV0gfHwge307CiAgICAgICAgICAgICAgICAgICAgICBlLmFkZFJlc0xhYmVscyhfdDk5LCBfcjU2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZS5yZW5kZXIoKSwgZS56b29tVG8oem9vbXRvKSwgc3BpbiAmJiBlLnNwaW4oc3Bpbi5heGlzLCBzcGluLnNwZWVkKTsKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZ2x2aWV3ZXIgPSB2aWV3ZXI7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0gKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5zcGVjU3RyaW5nVG9PYmplY3QpKHZpZXdlcmRpdi5kYXRhc2V0LmNvbmZpZykgfHwge307CiAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gY29uZmlnLmJhY2tncm91bmRDb2xvciAmJiAoY29uZmlnLmJhY2tncm91bmRDb2xvciA9IGJnY29sb3IpLCB2b2lkIDAgPT09IGNvbmZpZy5iYWNrZ3JvdW5kQWxwaGEgJiYgKGNvbmZpZy5iYWNrZ3JvdW5kQWxwaGEgPSBiZ2FscGhhKSwgbnVsbCA9PSBnbHZpZXdlciA/IGdsdmlld2VyID0gX3ZpZXdlcnNbdmlld2VyZGl2LmlkIHx8IG52aWV3ZXJzKytdID0gKDAsIF9HTFZpZXdlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmNyZWF0ZVZpZXdlcikodmlld2VyZGl2LCBjb25maWcpIDogKGdsdmlld2VyLnNldEJhY2tncm91bmRDb2xvcihiZ2NvbG9yLCBiZ2FscGhhKSwgZ2x2aWV3ZXIuc2V0Q29uZmlnKGNvbmZpZyksIFVJICYmIFVJLmluaXRpYXRlVUkoKSksIHZpZXdlcmRpdi5kYXRhc2V0LnVpICYmICQzRG1vbC5TdGF0ZU1hbmFnZXIgJiYgKFVJID0gbmV3ICQzRG1vbC5TdGF0ZU1hbmFnZXIoZ2x2aWV3ZXIpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSksIHZpZXdlcmRpdi50ZXh0Q29udGVudCA9ICJXZWJHTCBhcHBlYXJzIHRvIGJlIGRpc2FibGVkLiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMCAhPSBkYXRhdXJpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKG1vbGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB1cmkgPSBkYXRhdXJpW2ldOwogICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdmlld2VyZGl2LmRhdGFzZXQudHlwZSB8fCB2aWV3ZXJkaXYuZGF0YXNldC5kYXRhdHlwZSB8fCBkYXRhdHlwZXNbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKGdsdmlld2VyLmFkZE1vZGVsKG1vbGRhdGEsIHR5cGUsIG9wdGlvbnMpLCBVSSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsTmFtZSA9IHZpZXdlcmRpdi5kYXRhc2V0W2RhdGF0eXBlc1tpXV07CiAgICAgICAgICAgICAgICAgICAgICBVSS5zZXRNb2RlbFRpdGxlKG1vZGVsTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChpICs9IDEsIGkgPCBkYXRhdXJpLmxlbmd0aCkgKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5nZXQpKGRhdGF1cmlbaV0pLnRoZW4ocHJvY2Vzcyk7ZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXBwbHlTdHlsZXMoZ2x2aWV3ZXIpLCB2aWV3ZXJkaXYuZGF0YXNldC5jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnVucmVzID0gZXZhbCh2aWV3ZXJkaXYuZGF0YXNldC5jYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICJmdW5jdGlvbiIgPT0gdHlwZW9mIHJ1bnJlcyAmJiBydW5yZXMoZ2x2aWV3ZXIpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NpbmdfYXV0b2luaXQgPSAhMSwgY2FsbGJhY2sgJiYgY2FsbGJhY2soZ2x2aWV3ZXIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgKDAsIF91dGlsaXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5nZXQpKGRhdGF1cmlbMF0pLnRoZW4ocHJvY2Vzcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBpZiAodmlld2VyZGl2LmRhdGFzZXQuZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgIHZhciBtb2xkYXRhaWQgPSAiIyIgKyB2aWV3ZXJkaXYuZGF0YXNldC5lbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgbW9sZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9sZGF0YWlkKSwKICAgICAgICAgICAgICAgICAgICAgIG1vbGRhdGEgPSBtb2xlbGVtID8gbW9sZWxlbS50ZXh0Q29udGVudCA6ICIiOwogICAgICAgICAgICAgICAgICAgIHR5cGUgPSB2aWV3ZXJkaXYuZGF0YXNldC50eXBlIHx8IHZpZXdlcmRpdi5kYXRhc2V0LmRhdGF0eXBlLCBnbHZpZXdlci5hZGRNb2RlbChtb2xkYXRhLCB0eXBlLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYXBwbHlTdHlsZXMoZ2x2aWV3ZXIpLCB2aWV3ZXJkaXYuZGF0YXNldC5jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgIHZhciBydW5yZXMgPSBldmFsKHZpZXdlcmRpdi5kYXRhc2V0LmNhbGxiYWNrKTsKICAgICAgICAgICAgICAgICAgICAiZnVuY3Rpb24iID09IHR5cGVvZiBydW5yZXMgJiYgcnVucmVzKGdsdmlld2VyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfcHJvY2Vzc2luZ19hdXRvaW5pdCA9ICExLCBjYWxsYmFjayAmJiBjYWxsYmFjayhnbHZpZXdlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGRvY3VtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgImNvbXBsZXRlIiA9PT0gZG9jdW1lbnQucmVhZHlTdGF0ZSAmJiBfYXV0b2xvYWQoKTsKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICAyNTUwOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIENDOiBmdW5jdGlvbiBDQygpIHsKICAgICAgICAgICAgICByZXR1cm4gX0NDOwogICAgICAgICAgICB9LAogICAgICAgICAgICBDb2xvcjogZnVuY3Rpb24gQ29sb3IoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9Db2xvcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnVpbHRpbkNvbG9yU2NoZW1lczogZnVuY3Rpb24gYnVpbHRpbkNvbG9yU2NoZW1lcygpIHsKICAgICAgICAgICAgICByZXR1cm4gYzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2hhaW5zOiBmdW5jdGlvbiBjaGFpbnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGg7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVsZW1lbnRDb2xvcnM6IGZ1bmN0aW9uIGVsZW1lbnRDb2xvcnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGh0bWxDb2xvcnM6IGZ1bmN0aW9uIGh0bWxDb2xvcnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlc2lkdWVzOiBmdW5jdGlvbiByZXNpZHVlcygpIHsKICAgICAgICAgICAgICByZXR1cm4gbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3NDb2xvcnM6IGZ1bmN0aW9uIHNzQ29sb3JzKCkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBfQ29sb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBfQ29sb3IoZSwgdCwgcikgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfQ29sb3IpOwogICAgICAgICAgICAgIHJldHVybiB0aGlzLnIgPSAwLCB0aGlzLmcgPSAwLCB0aGlzLmIgPSAwLCBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiAibnVtYmVyIiA9PSB0eXBlb2YgZSA/ICh0aGlzLnIgPSBlIHx8IDAsIHRoaXMuZyA9IHQgfHwgMCwgdGhpcy5iID0gciB8fCAwLCB0aGlzKSA6IHRoaXMuc2V0KGUgfHwgMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9Db2xvciwgW3sKICAgICAgICAgICAgICBrZXk6ICJzZXQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBfQ29sb3IgPyBlLmNsb25lKCkgOiAoIm51bWJlciIgPT0gdHlwZW9mIGUgPyB0aGlzLnNldEhleChlKSA6ICJvYmplY3QiID09IF90eXBlb2YoZSkgJiYgKHRoaXMuciA9IChudWxsID09IGUgPyB2b2lkIDAgOiBlLnIpIHx8IDAsIHRoaXMuZyA9IChudWxsID09IGUgPyB2b2lkIDAgOiBlLmcpIHx8IDAsIHRoaXMuYiA9IChudWxsID09IGUgPyB2b2lkIDAgOiBlLmIpIHx8IDApLCB0aGlzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzZXRIZXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIZXgoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBNYXRoLmZsb29yKGUpLCB0aGlzLnIgPSAoZSA+PiAxNiAmIDI1NSkgLyAyNTUsIHRoaXMuZyA9IChlID4+IDggJiAyNTUpIC8gMjU1LCB0aGlzLmIgPSAoMjU1ICYgZSkgLyAyNTUsIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAga2V5OiAiZ2V0SGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGV4KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogdGhpcy5yKSA8PCAxNiB8IE1hdGgucm91bmQoMjU1ICogdGhpcy5nKSA8PCA4IHwgTWF0aC5yb3VuZCgyNTUgKiB0aGlzLmIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogImNsb25lIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9Db2xvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJjb3B5IiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29weShlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yID0gZS5yLCB0aGlzLmcgPSBlLmcsIHRoaXMuYiA9IGUuYiwgdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJzY2FsZWQiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzY2FsZWQoKSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHt9OwogICAgICAgICAgICAgICAgcmV0dXJuIGUuciA9IE1hdGgucm91bmQoMjU1ICogdGhpcy5yKSwgZS5nID0gTWF0aC5yb3VuZCgyNTUgKiB0aGlzLmcpLCBlLmIgPSBNYXRoLnJvdW5kKDI1NSAqIHRoaXMuYiksIGUuYSA9IDEsIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfQ29sb3I7CiAgICAgICAgICB9KCk7CiAgICAgICAgICB2YXIgX0NDID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gX0NDKCkgewogICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfQ0MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhfQ0MsIG51bGwsIFt7CiAgICAgICAgICAgICAga2V5OiAiY29sb3IiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb2xvcihlKSB7CiAgICAgICAgICAgICAgICBpZiAoIWUpIHJldHVybiBfQ0MuY2FjaGVbMF07CiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIF9Db2xvcikgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICBpZiAoIm51bWJlciIgPT0gdHlwZW9mIGUgJiYgdm9pZCAwICE9PSBfQ0MuY2FjaGVbZV0pIHJldHVybiBfQ0MuY2FjaGVbZV07CiAgICAgICAgICAgICAgICBpZiAoZSAmJiBBcnJheS5pc0FycmF5KGUpKSByZXR1cm4gZS5tYXAoX0NDLmNvbG9yKTsKICAgICAgICAgICAgICAgIHZhciB0ID0gX0NDLmdldEhleChlKSwKICAgICAgICAgICAgICAgICAgciA9IG5ldyBfQ29sb3IodCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX0NDLmNhY2hlW3RdID0gciwgcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJnZXRIZXgiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIZXgoZSkgewogICAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkgcmV0dXJuIGUubWFwKF9DQy5nZXRIZXgpOwogICAgICAgICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcjU3ID0gZTsKICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChfcjU3KSkpIHJldHVybiBwYXJzZUludChfcjU3KTsKICAgICAgICAgICAgICAgICAgaWYgKF9yNTcgPSBfcjU3LnRyaW0oKSwgNCA9PSBfcjU3Lmxlbmd0aCAmJiAiIyIgPT0gX3I1N1swXSAmJiAoX3I1NyA9ICIjIiArIF9yNTdbMV0gKyBfcjU3WzFdICsgX3I1N1syXSArIF9yNTdbMl0gKyBfcjU3WzNdICsgX3I1N1szXSksIDcgPT0gX3I1Ny5sZW5ndGggJiYgIiMiID09IF9yNTdbMF0pIHJldHVybiBwYXJzZUludChfcjU3LnN1YnN0cmluZygxKSwgMTYpOwogICAgICAgICAgICAgICAgICB2YXIgX3M1MCA9IF9DQy5yZ2JSZWdFeC5leGVjKF9yNTcpOwogICAgICAgICAgICAgICAgICBpZiAoX3M1MCkgewogICAgICAgICAgICAgICAgICAgICIiICE9IF9zNTBbMV0gJiYgY29uc29sZS5sb2coIldBUk5JTkc6IE9wYWNpdHkgdmFsdWUgaW4gcmdiYSBpZ25vcmVkLiAgU3BlY2lmeSBzZXBhcmF0ZWx5IGFzIG9wYWNpdHkgYXR0cmlidXRlLiIpOwogICAgICAgICAgICAgICAgICAgIHZhciBfZTEwMyA9IDA7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3QxMDAgPSAyOyBfdDEwMCA8IDU7IF90MTAwKyspIHsKICAgICAgICAgICAgICAgICAgICAgIF9lMTAzICo9IDI1NjsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfcjU4ID0gX3M1MFtfdDEwMF0uZW5kc1dpdGgoIiUiKSA/IDI1NSAqIHBhcnNlRmxvYXQoX3M1MFtfdDEwMF0pIC8gMTAwIDogcGFyc2VGbG9hdChfczUwW190MTAwXSk7CiAgICAgICAgICAgICAgICAgICAgICBfZTEwMyArPSBNYXRoLnJvdW5kKF9yNTgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2UxMDM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIChudWxsID09PSAodCA9IG51bGwgPT09IHdpbmRvdyB8fCB2b2lkIDAgPT09IHdpbmRvdyA/IHZvaWQgMCA6IHdpbmRvdy4kM0Rtb2wpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQuaHRtbENvbG9yc1tlLnRvTG93ZXJDYXNlKCldKSB8fCAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfQ0M7CiAgICAgICAgICB9KCk7CiAgICAgICAgICBfQ0MucmdiUmVnRXggPSAvcmdiKGE/KVwoXHMqKFteICxcKVx0XSspXHMqLFxzKihbXiAsXClcdF0rKVxzKixccyooW14gLFwpXHRdKykvaSwgX0NDLmNhY2hlID0gewogICAgICAgICAgICAwOiBuZXcgX0NvbG9yKDApCiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHMgPSB7CiAgICAgICAgICAgICAgYWxpY2VibHVlOiAxNTc5MjM4MywKICAgICAgICAgICAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LAogICAgICAgICAgICAgIGFxdWE6IDY1NTM1LAogICAgICAgICAgICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsCiAgICAgICAgICAgICAgYXp1cmU6IDE1Nzk0MTc1LAogICAgICAgICAgICAgIGJlaWdlOiAxNjExOTI2MCwKICAgICAgICAgICAgICBiaXNxdWU6IDE2NzcwMjQ0LAogICAgICAgICAgICAgIGJsYWNrOiAwLAogICAgICAgICAgICAgIGJsYW5jaGVkYWxtb25kOiAxNjc3MjA0NSwKICAgICAgICAgICAgICBibHVlOiAyNTUsCiAgICAgICAgICAgICAgYmx1ZXZpb2xldDogOTA1NTIwMiwKICAgICAgICAgICAgICBicm93bjogMTA4MjQyMzQsCiAgICAgICAgICAgICAgYnVybHl3b29kOiAxNDU5NjIzMSwKICAgICAgICAgICAgICBjYWRldGJsdWU6IDYyNjY1MjgsCiAgICAgICAgICAgICAgY2hhcnRyZXVzZTogODM4ODM1MiwKICAgICAgICAgICAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLAogICAgICAgICAgICAgIGNvcmFsOiAxNjc0NDI3MiwKICAgICAgICAgICAgICBjb3JuZmxvd2VyYmx1ZTogNjU5MTk4MSwKICAgICAgICAgICAgICBjb3Juc2lsazogMTY3NzUzODgsCiAgICAgICAgICAgICAgY3JpbXNvbjogMTQ0MjMxMDAsCiAgICAgICAgICAgICAgY3lhbjogNjU1MzUsCiAgICAgICAgICAgICAgZGFya2JsdWU6IDEzOSwKICAgICAgICAgICAgICBkYXJrY3lhbjogMzU3MjMsCiAgICAgICAgICAgICAgZGFya2dvbGRlbnJvZDogMTIwOTI5MzksCiAgICAgICAgICAgICAgZGFya2dyYXk6IDExMTE5MDE3LAogICAgICAgICAgICAgIGRhcmtncmV5OiAxMTExOTAxNywKICAgICAgICAgICAgICBkYXJrZ3JlZW46IDI1NjAwLAogICAgICAgICAgICAgIGRhcmtraGFraTogMTI0MzMyNTksCiAgICAgICAgICAgICAgZGFya21hZ2VudGE6IDkxMDk2NDMsCiAgICAgICAgICAgICAgZGFya29saXZlZ3JlZW46IDU1OTc5OTksCiAgICAgICAgICAgICAgZGFya29yYW5nZTogMTY3NDc1MjAsCiAgICAgICAgICAgICAgZGFya29yY2hpZDogMTAwNDAwMTIsCiAgICAgICAgICAgICAgZGFya3JlZDogOTEwOTUwNCwKICAgICAgICAgICAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCwKICAgICAgICAgICAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksCiAgICAgICAgICAgICAgZGFya3NsYXRlYmx1ZTogNDczNDM0NywKICAgICAgICAgICAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LAogICAgICAgICAgICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsCiAgICAgICAgICAgICAgZGFya3R1cnF1b2lzZTogNTI5NDUsCiAgICAgICAgICAgICAgZGFya3Zpb2xldDogOTY5OTUzOSwKICAgICAgICAgICAgICBkZWVwcGluazogMTY3MTY5NDcsCiAgICAgICAgICAgICAgZGVlcHNreWJsdWU6IDQ5MTUxLAogICAgICAgICAgICAgIGRpbWdyYXk6IDY5MDgyNjUsCiAgICAgICAgICAgICAgZGltZ3JleTogNjkwODI2NSwKICAgICAgICAgICAgICBkb2RnZXJibHVlOiAyMDAzMTk5LAogICAgICAgICAgICAgIGZpcmVicmljazogMTE2NzQxNDYsCiAgICAgICAgICAgICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLAogICAgICAgICAgICAgIGZvcmVzdGdyZWVuOiAyMjYzODQyLAogICAgICAgICAgICAgIGZ1Y2hzaWE6IDE2NzExOTM1LAogICAgICAgICAgICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsCiAgICAgICAgICAgICAgZ2hvc3R3aGl0ZTogMTYzMTY2NzEsCiAgICAgICAgICAgICAgZ29sZDogMTY3NjY3MjAsCiAgICAgICAgICAgICAgZ29sZGVucm9kOiAxNDMyOTEyMCwKICAgICAgICAgICAgICBncmF5OiA4NDIxNTA0LAogICAgICAgICAgICAgIGdyZXk6IDg0MjE1MDQsCiAgICAgICAgICAgICAgZ3JlZW46IDMyNzY4LAogICAgICAgICAgICAgIGdyZWVueWVsbG93OiAxMTQwMzA1NSwKICAgICAgICAgICAgICBob25leWRldzogMTU3OTQxNjAsCiAgICAgICAgICAgICAgaG90cGluazogMTY3Mzg3NDAsCiAgICAgICAgICAgICAgaW5kaWFucmVkOiAxMzQ1ODUyNCwKICAgICAgICAgICAgICBpbmRpZ286IDQ5MTUzMzAsCiAgICAgICAgICAgICAgaXZvcnk6IDE2Nzc3MjAwLAogICAgICAgICAgICAgIGtoYWtpOiAxNTc4NzY2MCwKICAgICAgICAgICAgICBsYXZlbmRlcjogMTUxMzI0MTAsCiAgICAgICAgICAgICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsCiAgICAgICAgICAgICAgbGF3bmdyZWVuOiA4MTkwOTc2LAogICAgICAgICAgICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsCiAgICAgICAgICAgICAgbGlnaHRibHVlOiAxMTM5MzI1NCwKICAgICAgICAgICAgICBsaWdodGNvcmFsOiAxNTc2MTUzNiwKICAgICAgICAgICAgICBsaWdodGN5YW46IDE0NzQ1NTk5LAogICAgICAgICAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCwKICAgICAgICAgICAgICBsaWdodGdyYXk6IDEzODgyMzIzLAogICAgICAgICAgICAgIGxpZ2h0Z3JleTogMTM4ODIzMjMsCiAgICAgICAgICAgICAgbGlnaHRncmVlbjogOTQ5ODI1NiwKICAgICAgICAgICAgICBsaWdodHBpbms6IDE2NzU4NDY1LAogICAgICAgICAgICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2MiwKICAgICAgICAgICAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLAogICAgICAgICAgICAgIGxpZ2h0c2t5Ymx1ZTogODkwMDM0NiwKICAgICAgICAgICAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1MywKICAgICAgICAgICAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1MywKICAgICAgICAgICAgICBsaWdodHN0ZWVsYmx1ZTogMTE1ODQ3MzQsCiAgICAgICAgICAgICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LAogICAgICAgICAgICAgIGxpbWU6IDY1MjgwLAogICAgICAgICAgICAgIGxpbWVncmVlbjogMzMyOTMzMCwKICAgICAgICAgICAgICBsaW5lbjogMTY0NDU2NzAsCiAgICAgICAgICAgICAgbWFnZW50YTogMTY3MTE5MzUsCiAgICAgICAgICAgICAgbWFyb29uOiA4Mzg4NjA4LAogICAgICAgICAgICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsCiAgICAgICAgICAgICAgbWVkaXVtYmx1ZTogMjA1LAogICAgICAgICAgICAgIG1lZGl1bW9yY2hpZDogMTIyMTE2NjcsCiAgICAgICAgICAgICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLAogICAgICAgICAgICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LAogICAgICAgICAgICAgIG1lZGl1bXNsYXRlYmx1ZTogODA4Nzc5MCwKICAgICAgICAgICAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsCiAgICAgICAgICAgICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLAogICAgICAgICAgICAgIG1lZGl1bXZpb2xldHJlZDogMTMwNDcxNzMsCiAgICAgICAgICAgICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLAogICAgICAgICAgICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsCiAgICAgICAgICAgICAgbWlzdHlyb3NlOiAxNjc3MDI3MywKICAgICAgICAgICAgICBtb2NjYXNpbjogMTY3NzAyMjksCiAgICAgICAgICAgICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LAogICAgICAgICAgICAgIG5hdnk6IDEyOCwKICAgICAgICAgICAgICBvbGRsYWNlOiAxNjY0MzU1OCwKICAgICAgICAgICAgICBvbGl2ZTogODQyMTM3NiwKICAgICAgICAgICAgICBvbGl2ZWRyYWI6IDcwNDg3MzksCiAgICAgICAgICAgICAgb3JhbmdlOiAxNjc1MzkyMCwKICAgICAgICAgICAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LAogICAgICAgICAgICAgIG9yY2hpZDogMTQzMTU3MzQsCiAgICAgICAgICAgICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsCiAgICAgICAgICAgICAgcGFsZWdyZWVuOiAxMDAyNTg4MCwKICAgICAgICAgICAgICBwYWxldHVycXVvaXNlOiAxMTUyOTk2NiwKICAgICAgICAgICAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMywKICAgICAgICAgICAgICBwYXBheWF3aGlwOiAxNjc3MzA3NywKICAgICAgICAgICAgICBwZWFjaHB1ZmY6IDE2NzY3NjczLAogICAgICAgICAgICAgIHBlcnU6IDEzNDY4OTkxLAogICAgICAgICAgICAgIHBpbms6IDE2NzYxMDM1LAogICAgICAgICAgICAgIHBsdW06IDE0NTI0NjM3LAogICAgICAgICAgICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLAogICAgICAgICAgICAgIHB1cnBsZTogODM4ODczNiwKICAgICAgICAgICAgICByZWJlY2NhcHVycGxlOiA2Njk3ODgxLAogICAgICAgICAgICAgIHJlZDogMTY3MTE2ODAsCiAgICAgICAgICAgICAgcm9zeWJyb3duOiAxMjM1NzUxOSwKICAgICAgICAgICAgICByb3lhbGJsdWU6IDQyODY5NDUsCiAgICAgICAgICAgICAgc2FkZGxlYnJvd246IDkxMjcxODcsCiAgICAgICAgICAgICAgc2FsbW9uOiAxNjQxNjg4MiwKICAgICAgICAgICAgICBzYW5keWJyb3duOiAxNjAzMjg2NCwKICAgICAgICAgICAgICBzZWFncmVlbjogMzA1MDMyNywKICAgICAgICAgICAgICBzZWFzaGVsbDogMTY3NzQ2MzgsCiAgICAgICAgICAgICAgc2llbm5hOiAxMDUwNjc5NywKICAgICAgICAgICAgICBzaWx2ZXI6IDEyNjMyMjU2LAogICAgICAgICAgICAgIHNreWJsdWU6IDg5MDAzMzEsCiAgICAgICAgICAgICAgc2xhdGVibHVlOiA2OTcwMDYxLAogICAgICAgICAgICAgIHNsYXRlZ3JheTogNzM3Mjk0NCwKICAgICAgICAgICAgICBzbGF0ZWdyZXk6IDczNzI5NDQsCiAgICAgICAgICAgICAgc25vdzogMTY3NzU5MzAsCiAgICAgICAgICAgICAgc3ByaW5nZ3JlZW46IDY1NDA3LAogICAgICAgICAgICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCwKICAgICAgICAgICAgICB0YW46IDEzODA4NzgwLAogICAgICAgICAgICAgIHRlYWw6IDMyODk2LAogICAgICAgICAgICAgIHRoaXN0bGU6IDE0MjA0ODg4LAogICAgICAgICAgICAgIHRvbWF0bzogMTY3MzcwOTUsCiAgICAgICAgICAgICAgdHVycXVvaXNlOiA0MjUxODU2LAogICAgICAgICAgICAgIHZpb2xldDogMTU2MzEwODYsCiAgICAgICAgICAgICAgd2hlYXQ6IDE2MTEzMzMxLAogICAgICAgICAgICAgIHdoaXRlOiAxNjc3NzIxNSwKICAgICAgICAgICAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSwKICAgICAgICAgICAgICB5ZWxsb3c6IDE2Nzc2OTYwLAogICAgICAgICAgICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NAogICAgICAgICAgICB9LAogICAgICAgICAgICBhID0gewogICAgICAgICAgICAgIHB5TW9sOiB7CiAgICAgICAgICAgICAgICBoOiAxNjcxMTY4MCwKICAgICAgICAgICAgICAgIHM6IDE2Nzc2OTYwLAogICAgICAgICAgICAgICAgYzogNjUyODAKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIEptb2w6IHsKICAgICAgICAgICAgICAgIGg6IDE2NzExODA4LAogICAgICAgICAgICAgICAgczogMTY3NjI4ODAsCiAgICAgICAgICAgICAgICBjOiAxNjc3NzIxNQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbiA9IHsKICAgICAgICAgICAgICBIOiAxNjc3NzIxNSwKICAgICAgICAgICAgICBIZTogMTY3NjEwMzUsCiAgICAgICAgICAgICAgSEU6IDE2NzYxMDM1LAogICAgICAgICAgICAgIExpOiAxMTY3NDE0NiwKICAgICAgICAgICAgICBMSTogMTE2NzQxNDYsCiAgICAgICAgICAgICAgQjogNjUyODAsCiAgICAgICAgICAgICAgQzogMTMxNTg2MDAsCiAgICAgICAgICAgICAgTjogOTQwODUxMSwKICAgICAgICAgICAgICBPOiAxNTcyODY0MCwKICAgICAgICAgICAgICBGOiAxNDMyOTEyMCwKICAgICAgICAgICAgICBOYTogMjU1LAogICAgICAgICAgICAgIE5BOiAyNTUsCiAgICAgICAgICAgICAgTWc6IDIyNjM4NDIsCiAgICAgICAgICAgICAgTUc6IDIyNjM4NDIsCiAgICAgICAgICAgICAgQWw6IDg0MjE1MjAsCiAgICAgICAgICAgICAgQUw6IDg0MjE1MjAsCiAgICAgICAgICAgICAgU2k6IDE0MzI5MTIwLAogICAgICAgICAgICAgIFNJOiAxNDMyOTEyMCwKICAgICAgICAgICAgICBQOiAxNjc1MzkyMCwKICAgICAgICAgICAgICBTOiAxNjc2MjkzMCwKICAgICAgICAgICAgICBDbDogNjUyODAsCiAgICAgICAgICAgICAgQ0w6IDY1MjgwLAogICAgICAgICAgICAgIENhOiA4NDIxNTIwLAogICAgICAgICAgICAgIENBOiA4NDIxNTIwLAogICAgICAgICAgICAgIFRpOiA4NDIxNTIwLAogICAgICAgICAgICAgIFRJOiA4NDIxNTIwLAogICAgICAgICAgICAgIENyOiA4NDIxNTIwLAogICAgICAgICAgICAgIENSOiA4NDIxNTIwLAogICAgICAgICAgICAgIE1uOiA4NDIxNTIwLAogICAgICAgICAgICAgIE1OOiA4NDIxNTIwLAogICAgICAgICAgICAgIEZlOiAxNjc1MzkyMCwKICAgICAgICAgICAgICBGRTogMTY3NTM5MjAsCiAgICAgICAgICAgICAgTmk6IDEwODI0MjM0LAogICAgICAgICAgICAgIE5JOiAxMDgyNDIzNCwKICAgICAgICAgICAgICBDdTogMTA4MjQyMzQsCiAgICAgICAgICAgICAgQ1U6IDEwODI0MjM0LAogICAgICAgICAgICAgIFpuOiAxMDgyNDIzNCwKICAgICAgICAgICAgICBaTjogMTA4MjQyMzQsCiAgICAgICAgICAgICAgQnI6IDEwODI0MjM0LAogICAgICAgICAgICAgIEJSOiAxMDgyNDIzNCwKICAgICAgICAgICAgICBBZzogODQyMTUyMCwKICAgICAgICAgICAgICBBRzogODQyMTUyMCwKICAgICAgICAgICAgICBJOiAxMDQ5NDE5MiwKICAgICAgICAgICAgICBCYTogMTY3NTM5MjAsCiAgICAgICAgICAgICAgQkE6IDE2NzUzOTIwLAogICAgICAgICAgICAgIEF1OiAxNDMyOTEyMCwKICAgICAgICAgICAgICBBVTogMTQzMjkxMjAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbyA9IHsKICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6IDE2NzE2OTQ3LAogICAgICAgICAgICAgIEptb2w6IHsKICAgICAgICAgICAgICAgIEg6IDE2Nzc3MjE1LAogICAgICAgICAgICAgICAgSGU6IDE0Mjg2ODQ3LAogICAgICAgICAgICAgICAgSEU6IDE0Mjg2ODQ3LAogICAgICAgICAgICAgICAgTGk6IDEzNDAyMzY3LAogICAgICAgICAgICAgICAgTEk6IDEzNDAyMzY3LAogICAgICAgICAgICAgICAgQmU6IDEyNzc5MjY0LAogICAgICAgICAgICAgICAgQkU6IDEyNzc5MjY0LAogICAgICAgICAgICAgICAgQjogMTY3NTgxOTcsCiAgICAgICAgICAgICAgICBDOiA5NDc0MTkyLAogICAgICAgICAgICAgICAgTjogMzE2NjQ1NiwKICAgICAgICAgICAgICAgIE86IDE2NzE1MDIxLAogICAgICAgICAgICAgICAgRjogOTQ5NDYwOCwKICAgICAgICAgICAgICAgIE5lOiAxMTc4OTMwMSwKICAgICAgICAgICAgICAgIE5FOiAxMTc4OTMwMSwKICAgICAgICAgICAgICAgIE5hOiAxMTIzMDQ1MCwKICAgICAgICAgICAgICAgIE5BOiAxMTIzMDQ1MCwKICAgICAgICAgICAgICAgIE1nOiA5MTA5MjQ4LAogICAgICAgICAgICAgICAgTUc6IDkxMDkyNDgsCiAgICAgICAgICAgICAgICBBbDogMTI1NjAwMzgsCiAgICAgICAgICAgICAgICBBTDogMTI1NjAwMzgsCiAgICAgICAgICAgICAgICBTaTogMTU3OGU0LAogICAgICAgICAgICAgICAgU0k6IDE1NzhlNCwKICAgICAgICAgICAgICAgIFA6IDE2NzQ0NDQ4LAogICAgICAgICAgICAgICAgUzogMTY3NzcwMDgsCiAgICAgICAgICAgICAgICBDbDogMjA5MzA4NywKICAgICAgICAgICAgICAgIENMOiAyMDkzMDg3LAogICAgICAgICAgICAgICAgQXI6IDg0NDIzMzksCiAgICAgICAgICAgICAgICBBUjogODQ0MjMzOSwKICAgICAgICAgICAgICAgIEs6IDkzODgyNDQsCiAgICAgICAgICAgICAgICBDYTogNDA2Mjk3NiwKICAgICAgICAgICAgICAgIENBOiA0MDYyOTc2LAogICAgICAgICAgICAgICAgU2M6IDE1MTMyMzkwLAogICAgICAgICAgICAgICAgU0M6IDE1MTMyMzkwLAogICAgICAgICAgICAgICAgVGk6IDEyNTY3MjM5LAogICAgICAgICAgICAgICAgVEk6IDEyNTY3MjM5LAogICAgICAgICAgICAgICAgVjogMTA5MjE2NDMsCiAgICAgICAgICAgICAgICBDcjogOTA4MzMzNSwKICAgICAgICAgICAgICAgIENSOiA5MDgzMzM1LAogICAgICAgICAgICAgICAgTW46IDEwMjU1MDQ3LAogICAgICAgICAgICAgICAgTU46IDEwMjU1MDQ3LAogICAgICAgICAgICAgICAgRmU6IDE0NzA2MjI3LAogICAgICAgICAgICAgICAgRkU6IDE0NzA2MjI3LAogICAgICAgICAgICAgICAgQ286IDE1NzY1NjY0LAogICAgICAgICAgICAgICAgQ086IDE1NzY1NjY0LAogICAgICAgICAgICAgICAgTmk6IDUyOTYyMDgsCiAgICAgICAgICAgICAgICBOSTogNTI5NjIwOCwKICAgICAgICAgICAgICAgIEN1OiAxMzE0MDAxOSwKICAgICAgICAgICAgICAgIENVOiAxMzE0MDAxOSwKICAgICAgICAgICAgICAgIFpuOiA4MjI0OTQ0LAogICAgICAgICAgICAgICAgWk46IDgyMjQ5NDQsCiAgICAgICAgICAgICAgICBHYTogMTI3NTA3MzUsCiAgICAgICAgICAgICAgICBHQTogMTI3NTA3MzUsCiAgICAgICAgICAgICAgICBHZTogNjcyMTQyMywKICAgICAgICAgICAgICAgIEdFOiA2NzIxNDIzLAogICAgICAgICAgICAgICAgQXM6IDEyNDE5Mjk5LAogICAgICAgICAgICAgICAgQVM6IDEyNDE5Mjk5LAogICAgICAgICAgICAgICAgU2U6IDE2NzUyODk2LAogICAgICAgICAgICAgICAgU0U6IDE2NzUyODk2LAogICAgICAgICAgICAgICAgQnI6IDEwODg5NTEzLAogICAgICAgICAgICAgICAgQlI6IDEwODg5NTEzLAogICAgICAgICAgICAgICAgS3I6IDYwNzY2MjUsCiAgICAgICAgICAgICAgICBLUjogNjA3NjYyNSwKICAgICAgICAgICAgICAgIFJiOiA3MzUxOTg0LAogICAgICAgICAgICAgICAgUkI6IDczNTE5ODQsCiAgICAgICAgICAgICAgICBTcjogNjUyODAsCiAgICAgICAgICAgICAgICBTUjogNjUyODAsCiAgICAgICAgICAgICAgICBZOiA5NzY0ODYzLAogICAgICAgICAgICAgICAgWnI6IDk3NTY4OTYsCiAgICAgICAgICAgICAgICBaUjogOTc1Njg5NiwKICAgICAgICAgICAgICAgIE5iOiA3NTg2NTA1LAogICAgICAgICAgICAgICAgTkI6IDc1ODY1MDUsCiAgICAgICAgICAgICAgICBNbzogNTU1MTU0MSwKICAgICAgICAgICAgICAgIE1POiA1NTUxNTQxLAogICAgICAgICAgICAgICAgVGM6IDM5MDcyMzAsCiAgICAgICAgICAgICAgICBUQzogMzkwNzIzMCwKICAgICAgICAgICAgICAgIFJ1OiAyMzk2MDQ3LAogICAgICAgICAgICAgICAgUlU6IDIzOTYwNDcsCiAgICAgICAgICAgICAgICBSaDogNjg3NTAwLAogICAgICAgICAgICAgICAgUkg6IDY4NzUwMCwKICAgICAgICAgICAgICAgIFBkOiAyNzAxMywKICAgICAgICAgICAgICAgIFBEOiAyNzAxMywKICAgICAgICAgICAgICAgIEFnOiAxMjYzMjI1NiwKICAgICAgICAgICAgICAgIEFHOiAxMjYzMjI1NiwKICAgICAgICAgICAgICAgIENkOiAxNjc2NzM3NSwKICAgICAgICAgICAgICAgIENEOiAxNjc2NzM3NSwKICAgICAgICAgICAgICAgIEluOiAxMDkwOTA0MywKICAgICAgICAgICAgICAgIElOOiAxMDkwOTA0MywKICAgICAgICAgICAgICAgIFNuOiA2NzE3NTY4LAogICAgICAgICAgICAgICAgU046IDY3MTc1NjgsCiAgICAgICAgICAgICAgICBTYjogMTAzODAyMTMsCiAgICAgICAgICAgICAgICBTQjogMTAzODAyMTMsCiAgICAgICAgICAgICAgICBUZTogMTM5MjQ4NjQsCiAgICAgICAgICAgICAgICBURTogMTM5MjQ4NjQsCiAgICAgICAgICAgICAgICBJOiA5Njk5NDc2LAogICAgICAgICAgICAgICAgWGU6IDQzNjZlMywKICAgICAgICAgICAgICAgIFhFOiA0MzY2ZTMsCiAgICAgICAgICAgICAgICBDczogNTcwNzY2MywKICAgICAgICAgICAgICAgIENTOiA1NzA3NjYzLAogICAgICAgICAgICAgICAgQmE6IDUxNDU2LAogICAgICAgICAgICAgICAgQkE6IDUxNDU2LAogICAgICAgICAgICAgICAgTGE6IDczOTQ1NTksCiAgICAgICAgICAgICAgICBMQTogNzM5NDU1OSwKICAgICAgICAgICAgICAgIENlOiAxNjc3NzE1OSwKICAgICAgICAgICAgICAgIENFOiAxNjc3NzE1OSwKICAgICAgICAgICAgICAgIFByOiAxNDI4Njc5MSwKICAgICAgICAgICAgICAgIFBSOiAxNDI4Njc5MSwKICAgICAgICAgICAgICAgIE5kOiAxMzEwNzE0MywKICAgICAgICAgICAgICAgIE5EOiAxMzEwNzE0MywKICAgICAgICAgICAgICAgIFBtOiAxMDc0Nzg0NywKICAgICAgICAgICAgICAgIFBNOiAxMDc0Nzg0NywKICAgICAgICAgICAgICAgIFNtOiA5NDM3MTI3LAogICAgICAgICAgICAgICAgU006IDk0MzcxMjcsCiAgICAgICAgICAgICAgICBFdTogNjQyMjQ3MSwKICAgICAgICAgICAgICAgIEVVOiA2NDIyNDcxLAogICAgICAgICAgICAgICAgR2Q6IDQ1ODc0NjMsCiAgICAgICAgICAgICAgICBHRDogNDU4NzQ2MywKICAgICAgICAgICAgICAgIFRiOiAzMjExMjA3LAogICAgICAgICAgICAgICAgVEI6IDMyMTEyMDcsCiAgICAgICAgICAgICAgICBEeTogMjA5NzA5NSwKICAgICAgICAgICAgICAgIERZOiAyMDk3MDk1LAogICAgICAgICAgICAgICAgSG86IDY1NDM2LAogICAgICAgICAgICAgICAgSE86IDY1NDM2LAogICAgICAgICAgICAgICAgRXI6IDU4OTk3LAogICAgICAgICAgICAgICAgRVI6IDU4OTk3LAogICAgICAgICAgICAgICAgVG06IDU0MzU0LAogICAgICAgICAgICAgICAgVE06IDU0MzU0LAogICAgICAgICAgICAgICAgWWI6IDQ4OTUyLAogICAgICAgICAgICAgICAgWUI6IDQ4OTUyLAogICAgICAgICAgICAgICAgTHU6IDQzODEyLAogICAgICAgICAgICAgICAgTFU6IDQzODEyLAogICAgICAgICAgICAgICAgSGY6IDUwOTYxOTEsCiAgICAgICAgICAgICAgICBIRjogNTA5NjE5MSwKICAgICAgICAgICAgICAgIFRhOiA1MDg5MDIzLAogICAgICAgICAgICAgICAgVEE6IDUwODkwMjMsCiAgICAgICAgICAgICAgICBXOiAyMjAwNzkwLAogICAgICAgICAgICAgICAgUmU6IDI1MjI1MzksCiAgICAgICAgICAgICAgICBSRTogMjUyMjUzOSwKICAgICAgICAgICAgICAgIE9zOiAyNTE2NjMwLAogICAgICAgICAgICAgICAgT1M6IDI1MTY2MzAsCiAgICAgICAgICAgICAgICBJcjogMTUyODk2NywKICAgICAgICAgICAgICAgIElSOiAxNTI4OTY3LAogICAgICAgICAgICAgICAgUHQ6IDEzNjg0OTYwLAogICAgICAgICAgICAgICAgUFQ6IDEzNjg0OTYwLAogICAgICAgICAgICAgICAgQXU6IDE2NzY1MjE5LAogICAgICAgICAgICAgICAgQVU6IDE2NzY1MjE5LAogICAgICAgICAgICAgICAgSGc6IDEyMTA1OTM2LAogICAgICAgICAgICAgICAgSEc6IDEyMTA1OTM2LAogICAgICAgICAgICAgICAgVGw6IDEwOTAwNTU3LAogICAgICAgICAgICAgICAgVEw6IDEwOTAwNTU3LAogICAgICAgICAgICAgICAgUGI6IDU3MjQ1MTMsCiAgICAgICAgICAgICAgICBQQjogNTcyNDUxMywKICAgICAgICAgICAgICAgIEJpOiAxMDM3NTA5MywKICAgICAgICAgICAgICAgIEJJOiAxMDM3NTA5MywKICAgICAgICAgICAgICAgIFBvOiAxMTIzMDIwOCwKICAgICAgICAgICAgICAgIFBPOiAxMTIzMDIwOCwKICAgICAgICAgICAgICAgIEF0OiA3Njg4MDA1LAogICAgICAgICAgICAgICAgQVQ6IDc2ODgwMDUsCiAgICAgICAgICAgICAgICBSbjogNDM1ODgwNiwKICAgICAgICAgICAgICAgIFJOOiA0MzU4ODA2LAogICAgICAgICAgICAgICAgRnI6IDQzMjU0NzgsCiAgICAgICAgICAgICAgICBGUjogNDMyNTQ3OCwKICAgICAgICAgICAgICAgIFJhOiAzMmUzLAogICAgICAgICAgICAgICAgUkE6IDMyZTMsCiAgICAgICAgICAgICAgICBBYzogNzM4NDA1OCwKICAgICAgICAgICAgICAgIEFDOiA3Mzg0MDU4LAogICAgICAgICAgICAgICAgVGg6IDQ3ODcxLAogICAgICAgICAgICAgICAgVEg6IDQ3ODcxLAogICAgICAgICAgICAgICAgUGE6IDQxNDcxLAogICAgICAgICAgICAgICAgUEE6IDQxNDcxLAogICAgICAgICAgICAgICAgVTogMzY4NjMsCiAgICAgICAgICAgICAgICBOcDogMzMwMjMsCiAgICAgICAgICAgICAgICBOUDogMzMwMjMsCiAgICAgICAgICAgICAgICBQdTogMjc2NDcsCiAgICAgICAgICAgICAgICBQVTogMjc2NDcsCiAgICAgICAgICAgICAgICBBbTogNTUyODgxOCwKICAgICAgICAgICAgICAgIEFNOiA1NTI4ODE4LAogICAgICAgICAgICAgICAgQ206IDc4ODgwOTksCiAgICAgICAgICAgICAgICBDTTogNzg4ODA5OSwKICAgICAgICAgICAgICAgIEJrOiA5MDY0NDE5LAogICAgICAgICAgICAgICAgQks6IDkwNjQ0MTksCiAgICAgICAgICAgICAgICBDZjogMTA1NjUzMzIsCiAgICAgICAgICAgICAgICBDRjogMTA1NjUzMzIsCiAgICAgICAgICAgICAgICBFczogMTE3MzkwOTIsCiAgICAgICAgICAgICAgICBFUzogMTE3MzkwOTIsCiAgICAgICAgICAgICAgICBGbTogMTE3MzkwNjYsCiAgICAgICAgICAgICAgICBGTTogMTE3MzkwNjYsCiAgICAgICAgICAgICAgICBNZDogMTE3MzQ0MzgsCiAgICAgICAgICAgICAgICBNRDogMTE3MzQ0MzgsCiAgICAgICAgICAgICAgICBObzogMTIzODk3NjcsCiAgICAgICAgICAgICAgICBOTzogMTIzODk3NjcsCiAgICAgICAgICAgICAgICBMcjogMTMwNDE3NjYsCiAgICAgICAgICAgICAgICBMUjogMTMwNDE3NjYsCiAgICAgICAgICAgICAgICBSZjogMTMzNjk0MzMsCiAgICAgICAgICAgICAgICBSRjogMTMzNjk0MzMsCiAgICAgICAgICAgICAgICBEYjogMTM2OTcxMDMsCiAgICAgICAgICAgICAgICBEQjogMTM2OTcxMDMsCiAgICAgICAgICAgICAgICBTZzogMTQyMjEzODEsCiAgICAgICAgICAgICAgICBTRzogMTQyMjEzODEsCiAgICAgICAgICAgICAgICBCaDogMTQ2ODAxMjAsCiAgICAgICAgICAgICAgICBCSDogMTQ2ODAxMjAsCiAgICAgICAgICAgICAgICBIczogMTUwNzMzMjYsCiAgICAgICAgICAgICAgICBIUzogMTUwNzMzMjYsCiAgICAgICAgICAgICAgICBNdDogMTU0MDA5OTgsCiAgICAgICAgICAgICAgICBNVDogMTU0MDA5OTgKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHJhc21vbDogbiwKICAgICAgICAgICAgICBkZWZhdWx0Q29sb3JzOiBPYmplY3QuYXNzaWduKHt9LCBuKSwKICAgICAgICAgICAgICBncmVlbkNhcmJvbjogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBuKSwgewogICAgICAgICAgICAgICAgQzogNjUyODAKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBjeWFuQ2FyYm9uOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG4pLCB7CiAgICAgICAgICAgICAgICBDOiA2NTUzNQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIG1hZ2VudGFDYXJib246IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbiksIHsKICAgICAgICAgICAgICAgIEM6IDE2NzExOTM1CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgeWVsbG93Q2FyYm9uOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG4pLCB7CiAgICAgICAgICAgICAgICBDOiAxNjc3Njk2MAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIHdoaXRlQ2FyYm9uOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG4pLCB7CiAgICAgICAgICAgICAgICBDOiAxNjc3NzIxNQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIG9yYW5nZUNhcmJvbjogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBuKSwgewogICAgICAgICAgICAgICAgQzogMTY3NTM5MjAKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBwdXJwbGVDYXJib246IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbiksIHsKICAgICAgICAgICAgICAgIEM6IDgzODg3MzYKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBibHVlQ2FyYm9uOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG4pLCB7CiAgICAgICAgICAgICAgICBDOiAyNTUKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LAogICAgICAgICAgICBsID0gewogICAgICAgICAgICAgIGFtaW5vOiB7CiAgICAgICAgICAgICAgICBBTEE6IDEzMTU4NjAwLAogICAgICAgICAgICAgICAgQVJHOiAxMzM0MDE1LAogICAgICAgICAgICAgICAgQVNOOiA1NjU0MCwKICAgICAgICAgICAgICAgIEFTUDogMTUwNzU4NTAsCiAgICAgICAgICAgICAgICBDWVM6IDE1MTMyMTYwLAogICAgICAgICAgICAgICAgR0xOOiA1NjU0MCwKICAgICAgICAgICAgICAgIEdMVTogMTUwNzU4NTAsCiAgICAgICAgICAgICAgICBHTFk6IDE1NDYxMzU1LAogICAgICAgICAgICAgICAgSElTOiA4NTUzMTcwLAogICAgICAgICAgICAgICAgSUxFOiAxMDE2MzM1LAogICAgICAgICAgICAgICAgTEVVOiAxMDE2MzM1LAogICAgICAgICAgICAgICAgTFlTOiAxMzM0MDE1LAogICAgICAgICAgICAgICAgTUVUOiAxNTEzMjE2MCwKICAgICAgICAgICAgICAgIFBIRTogMzI4OTc3MCwKICAgICAgICAgICAgICAgIFBSTzogMTQ0NTY0NTAsCiAgICAgICAgICAgICAgICBTRVI6IDE2NDIyNDAwLAogICAgICAgICAgICAgICAgVEhSOiAxNjQyMjQwMCwKICAgICAgICAgICAgICAgIFRSUDogMTE4MTk3MDAsCiAgICAgICAgICAgICAgICBUWVI6IDMyODk3NzAsCiAgICAgICAgICAgICAgICBWQUw6IDEwMTYzMzUsCiAgICAgICAgICAgICAgICBBU1g6IDE2NzM4NzQwLAogICAgICAgICAgICAgICAgR0xYOiAxNjczODc0MAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgc2hhcGVseTogewogICAgICAgICAgICAgICAgQUxBOiA5MjQwNDYwLAogICAgICAgICAgICAgICAgQVJHOiAxMjQsCiAgICAgICAgICAgICAgICBBU046IDE2NzQzNTM2LAogICAgICAgICAgICAgICAgQVNQOiAxMDQ4NTgyNiwKICAgICAgICAgICAgICAgIENZUzogMTY3NzcwNzIsCiAgICAgICAgICAgICAgICBHTE46IDE2NzMxMjEyLAogICAgICAgICAgICAgICAgR0xVOiA2Njg0NjcyLAogICAgICAgICAgICAgICAgR0xZOiAxNjc3NzIxNSwKICAgICAgICAgICAgICAgIEhJUzogNzM2ODk1OSwKICAgICAgICAgICAgICAgIElMRTogMTk0NTYsCiAgICAgICAgICAgICAgICBMRVU6IDQ1NDYxMTcsCiAgICAgICAgICAgICAgICBMWVM6IDQ2NzE0MTYsCiAgICAgICAgICAgICAgICBNRVQ6IDEyMDk5NjUwLAogICAgICAgICAgICAgICAgUEhFOiA1NDU5MDI2LAogICAgICAgICAgICAgICAgUFJPOiA1Mzk1MDI2LAogICAgICAgICAgICAgICAgU0VSOiAxNjc0MDQxOCwKICAgICAgICAgICAgICAgIFRIUjogMTIwNzgwODAsCiAgICAgICAgICAgICAgICBUUlA6IDUxOTUyNjQsCiAgICAgICAgICAgICAgICBUWVI6IDkyMDM3ODgsCiAgICAgICAgICAgICAgICBWQUw6IDE2NzQ3Nzc1LAogICAgICAgICAgICAgICAgQVNYOiAxNjcxMTkzNSwKICAgICAgICAgICAgICAgIEdMWDogMTY3MTE5MzUKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG51Y2xlaWM6IHsKICAgICAgICAgICAgICAgIEE6IDEwNTI2OTc1LAogICAgICAgICAgICAgICAgRzogMTY3NDA0NjQsCiAgICAgICAgICAgICAgICBJOiA4NDU0MTQzLAogICAgICAgICAgICAgICAgQzogMTY3NDc1OTUsCiAgICAgICAgICAgICAgICBUOiAxMDU1MTIwMCwKICAgICAgICAgICAgICAgIFU6IDE2NzQ0NTc2CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBoID0gewogICAgICAgICAgICAgIGF0b206IHsKICAgICAgICAgICAgICAgIEE6IDEyNjM2NDE1LAogICAgICAgICAgICAgICAgQjogMTE1OTk3OTIsCiAgICAgICAgICAgICAgICBDOiAxNjc2MTAzMiwKICAgICAgICAgICAgICAgIEQ6IDE2Nzc3MDg4LAogICAgICAgICAgICAgICAgRTogMTY3NjEwODcsCiAgICAgICAgICAgICAgICBGOiAxMTU5NjAxNiwKICAgICAgICAgICAgICAgIEc6IDE2NzY1MDQwLAogICAgICAgICAgICAgICAgSDogMTU3NjE1MzYsCiAgICAgICAgICAgICAgICBJOiAxNjExMzMzMSwKICAgICAgICAgICAgICAgIEo6IDQ5MTUxLAogICAgICAgICAgICAgICAgSzogMTM0NTg1MjQsCiAgICAgICAgICAgICAgICBMOiA2NzM3MzIyLAogICAgICAgICAgICAgICAgTTogMTAxNDUwNzQsCiAgICAgICAgICAgICAgICBOOiAxNTYzMTA4NiwKICAgICAgICAgICAgICAgIE86IDUyOTQ1LAogICAgICAgICAgICAgICAgUDogNjU0MDcsCiAgICAgICAgICAgICAgICBROiAzOTc4MDk3LAogICAgICAgICAgICAgICAgUjogMTM5LAogICAgICAgICAgICAgICAgUzogMTI0MzMyNTksCiAgICAgICAgICAgICAgICBUOiAyNTYwMCwKICAgICAgICAgICAgICAgIFU6IDgzODg2MDgsCiAgICAgICAgICAgICAgICBWOiA4NDIxMzc2LAogICAgICAgICAgICAgICAgVzogODM4ODczNiwKICAgICAgICAgICAgICAgIFg6IDMyODk2LAogICAgICAgICAgICAgICAgWTogMTIwOTI5MzksCiAgICAgICAgICAgICAgICBaOiAxMTY3NDE0NgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaGV0YXRtOiB7CiAgICAgICAgICAgICAgICBBOiA5NDc4MzUxLAogICAgICAgICAgICAgICAgQjogODQ0MTc1MiwKICAgICAgICAgICAgICAgIEM6IDEzNjAyOTkyLAogICAgICAgICAgICAgICAgRDogMTM2MTkwNTYsCiAgICAgICAgICAgICAgICBFOiAxMzYwMzAyMywKICAgICAgICAgICAgICAgIEY6IDg0Mzc5NTIsCiAgICAgICAgICAgICAgICBHOiAxMzYwNzAwOCwKICAgICAgICAgICAgICAgIEg6IDEyNjAzNTA0LAogICAgICAgICAgICAgICAgSTogMTI5NTUyNjcsCiAgICAgICAgICAgICAgICBKOiA0Mjk1OSwKICAgICAgICAgICAgICAgIEs6IDExODgxNTQ4LAogICAgICAgICAgICAgICAgTDogNTY4MjU3OCwKICAgICAgICAgICAgICAgIE06IDkwOTAzNDYsCiAgICAgICAgICAgICAgICBOOiAxMjQ4MTIxNCwKICAgICAgICAgICAgICAgIE86IDQ2NzUzLAogICAgICAgICAgICAgICAgUDogNTMxMDMsCiAgICAgICAgICAgICAgICBROiAzNDQ3NjQ5LAogICAgICAgICAgICAgICAgUjogMTg3LAogICAgICAgICAgICAgICAgUzogMTA4NTQyMzUsCiAgICAgICAgICAgICAgICBUOiAzNzg4OCwKICAgICAgICAgICAgICAgIFU6IDExNTM0MzM2LAogICAgICAgICAgICAgICAgVjogMTE1NzkzOTIsCiAgICAgICAgICAgICAgICBXOiAxMTUzNDUxMiwKICAgICAgICAgICAgICAgIFg6IDQ1MjMyLAogICAgICAgICAgICAgICAgWTogMTUyNTA5NjMsCiAgICAgICAgICAgICAgICBaOiAxMjcyNjgzNAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYyA9IHsKICAgICAgICAgICAgICBzc1B5TW9sOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAic3MiLAogICAgICAgICAgICAgICAgbWFwOiBhLnB5TW9sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzc0ptb2w6IHsKICAgICAgICAgICAgICAgIHByb3A6ICJzcyIsCiAgICAgICAgICAgICAgICBtYXA6IGEuSm1vbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgSm1vbDogewogICAgICAgICAgICAgICAgcHJvcDogImVsZW0iLAogICAgICAgICAgICAgICAgbWFwOiBvLkptb2wKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGFtaW5vOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAicmVzbiIsCiAgICAgICAgICAgICAgICBtYXA6IGwuYW1pbm8KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHNoYXBlbHk6IHsKICAgICAgICAgICAgICAgIHByb3A6ICJyZXNuIiwKICAgICAgICAgICAgICAgIG1hcDogbC5zaGFwZWx5CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBudWNsZWljOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAicmVzbiIsCiAgICAgICAgICAgICAgICBtYXA6IGwubnVjbGVpYwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hhaW46IHsKICAgICAgICAgICAgICAgIHByb3A6ICJjaGFpbiIsCiAgICAgICAgICAgICAgICBtYXA6IGguYXRvbQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgcmFzbW9sOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAiZWxlbSIsCiAgICAgICAgICAgICAgICBtYXA6IG8ucmFzbW9sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBwcm9wOiAiZWxlbSIsCiAgICAgICAgICAgICAgICBtYXA6IG8uZGVmYXVsdENvbG9ycwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZ3JlZW5DYXJib246IHsKICAgICAgICAgICAgICAgIHByb3A6ICJlbGVtIiwKICAgICAgICAgICAgICAgIG1hcDogby5ncmVlbkNhcmJvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hhaW5IZXRhdG06IHsKICAgICAgICAgICAgICAgIHByb3A6ICJjaGFpbiIsCiAgICAgICAgICAgICAgICBtYXA6IGguaGV0YXRtCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjeWFuQ2FyYm9uOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAiZWxlbSIsCiAgICAgICAgICAgICAgICBtYXA6IG8uY3lhbkNhcmJvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbWFnZW50YUNhcmJvbjogewogICAgICAgICAgICAgICAgcHJvcDogImVsZW0iLAogICAgICAgICAgICAgICAgbWFwOiBvLm1hZ2VudGFDYXJib24KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHB1cnBsZUNhcmJvbjogewogICAgICAgICAgICAgICAgcHJvcDogImVsZW0iLAogICAgICAgICAgICAgICAgbWFwOiBvLnB1cnBsZUNhcmJvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgd2hpdGVDYXJib246IHsKICAgICAgICAgICAgICAgIHByb3A6ICJlbGVtIiwKICAgICAgICAgICAgICAgIG1hcDogby53aGl0ZUNhcmJvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb3JhbmdlQ2FyYm9uOiB7CiAgICAgICAgICAgICAgICBwcm9wOiAiZWxlbSIsCiAgICAgICAgICAgICAgICBtYXA6IG8ub3JhbmdlQ2FyYm9uCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB5ZWxsb3dDYXJib246IHsKICAgICAgICAgICAgICAgIHByb3A6ICJlbGVtIiwKICAgICAgICAgICAgICAgIG1hcDogby55ZWxsb3dDYXJib24KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGJsdWVDYXJib246IHsKICAgICAgICAgICAgICAgIHByb3A6ICJlbGVtIiwKICAgICAgICAgICAgICAgIG1hcDogby5ibHVlQ2FyYm9uCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgNjE2MzogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgci5yKHQpLCByLmQodCwgewogICAgICAgICAgICBkcmF3Q2FydG9vbjogZnVuY3Rpb24gZHJhd0NhcnRvb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1YmRpdmlkZV9zcGxpbmU6IGZ1bmN0aW9uIHN1YmRpdmlkZV9zcGxpbmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHMgPSByKDk2NTIpLAogICAgICAgICAgICBhID0gcigzMzUxKSwKICAgICAgICAgICAgbiA9IHIoNzY5MyksCiAgICAgICAgICAgIG8gPSByKDE0NjApLAogICAgICAgICAgICBsID0gcigyNTUwKSwKICAgICAgICAgICAgaCA9IHIoNDQwNiksCiAgICAgICAgICAgIGMgPSByKDkwMDUpOwogICAgICAgICAgZnVuY3Rpb24gdShlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICBjLAogICAgICAgICAgICAgIHUsCiAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICBwID0gW10sCiAgICAgICAgICAgICAgZyA9IGU7CiAgICAgICAgICAgIGZvciAoKGcgPSBbXSkucHVzaChlWzBdKSwgciA9IDEsIGEgPSBlLmxlbmd0aCAtIDE7IHIgPCBhOyByKyspIGlmIChsID0gZVtyXSwgaCA9IGVbciArIDFdLCBsLnNtb290aGVuKSB7CiAgICAgICAgICAgICAgdmFyIHYgPSBuZXcgcy5WZWN0b3IzKChsLnggKyBoLngpIC8gMiwgKGwueSArIGgueSkgLyAyLCAobC56ICsgaC56KSAvIDIpOwogICAgICAgICAgICAgIHYuYXRvbSA9IGwuYXRvbSwgZy5wdXNoKHYpOwogICAgICAgICAgICB9IGVsc2UgZy5wdXNoKGwpOwogICAgICAgICAgICBmb3IgKGcucHVzaChlW2UubGVuZ3RoIC0gMV0pLCByID0gLTEsIG4gPSBnLmxlbmd0aDsgciA8PSBuIC0gMzsgcisrKSBpZiAobyA9IGdbLTEgPT09IHIgPyAwIDogcl0sIGwgPSBnW3IgKyAxXSwgaCA9IGdbciArIDJdLCBjID0gZ1tyID09PSBuIC0gMyA/IG4gLSAxIDogciArIDNdLCB1ID0gbmV3IHMuVmVjdG9yMygpLnN1YlZlY3RvcnMoaCwgbykubXVsdGlwbHlTY2FsYXIoLjUpLCBmID0gbmV3IHMuVmVjdG9yMygpLnN1YlZlY3RvcnMoYywgbCkubXVsdGlwbHlTY2FsYXIoLjUpLCAhaC5za2lwKSBmb3IgKHZhciBfID0gMDsgXyA8IHQ7IF8rKykgewogICAgICAgICAgICAgIHZhciB5ID0gMSAvIHQgKiBfLAogICAgICAgICAgICAgICAgYiA9IGwueCArIHkgKiB1LnggKyB5ICogeSAqICgtMyAqIGwueCArIDMgKiBoLnggLSAyICogdS54IC0gZi54KSArIHkgKiB5ICogeSAqICgyICogbC54IC0gMiAqIGgueCArIHUueCArIGYueCksCiAgICAgICAgICAgICAgICB3ID0gbC55ICsgeSAqIHUueSArIHkgKiB5ICogKC0zICogbC55ICsgMyAqIGgueSAtIDIgKiB1LnkgLSBmLnkpICsgeSAqIHkgKiB5ICogKDIgKiBsLnkgLSAyICogaC55ICsgdS55ICsgZi55KSwKICAgICAgICAgICAgICAgIHggPSBsLnogKyB5ICogdS56ICsgeSAqIHkgKiAoLTMgKiBsLnogKyAzICogaC56IC0gMiAqIHUueiAtIGYueikgKyB5ICogeSAqIHkgKiAoMiAqIGwueiAtIDIgKiBoLnogKyB1LnogKyBmLnopLAogICAgICAgICAgICAgICAgQSA9IG5ldyBzLlZlY3RvcjMoYiwgdywgeCk7CiAgICAgICAgICAgICAgQS5hdG9tID0gXyA8IHQgLyAyID8gbC5hdG9tIDogaC5hdG9tLCBwLnB1c2goQSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHAucHVzaChnW2cubGVuZ3RoIC0gMV0pLCBwOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZihlLCB0LCByLCBzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGEsIG4sIG8sIGgsIGMgPSAwLCB1ID0gdC5sZW5ndGg7IGMgPCB1OyBjKyspIHsKICAgICAgICAgICAgICBoID0gTWF0aC5yb3VuZChjICogKHMubGVuZ3RoIC0gMSkgLyB1KSwgbyA9IGwuQ0MuY29sb3Ioc1toXSk7CiAgICAgICAgICAgICAgdmFyIGYgPSBlLnVwZGF0ZUdlb0dyb3VwKDIpLAogICAgICAgICAgICAgICAgcCA9IGYudmVydGV4QXJyYXksCiAgICAgICAgICAgICAgICBnID0gZi5jb2xvckFycmF5LAogICAgICAgICAgICAgICAgdiA9IGYuZmFjZUFycmF5OwogICAgICAgICAgICAgIHBbbiA9IDMgKiAoYSA9IGYudmVydGljZXMpXSA9IHRbY10ueCwgcFtuICsgMV0gPSB0W2NdLnksIHBbbiArIDJdID0gdFtjXS56LCBwW24gKyAzXSA9IHJbY10ueCwgcFtuICsgNF0gPSByW2NdLnksIHBbbiArIDVdID0gcltjXS56OwogICAgICAgICAgICAgIGZvciAodmFyIF8gPSAwOyBfIDwgNjsgKytfKSBnW24gKyAzICogX10gPSBvLnIsIGdbbiArIDEgKyAzICogX10gPSBvLmcsIGdbbiArIDIgKyAzICogX10gPSBvLmI7CiAgICAgICAgICAgICAgaWYgKGMgPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgeSA9IFthLCBhICsgMSwgYSAtIDEsIGEgLSAyXSwKICAgICAgICAgICAgICAgICAgYiA9IGYuZmFjZWlkeDsKICAgICAgICAgICAgICAgIHZbYl0gPSB5WzBdLCB2W2IgKyAxXSA9IHlbMV0sIHZbYiArIDJdID0geVszXSwgdltiICsgM10gPSB5WzFdLCB2W2IgKyA0XSA9IHlbMl0sIHZbYiArIDVdID0geVszXSwgZi5mYWNlaWR4ICs9IDY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGYudmVydGljZXMgKz0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcChlLCB0LCByLCBzLCBuLCBvLCBoKSB7CiAgICAgICAgICAgIGggJiYgImRlZmF1bHQiICE9PSBoIHx8IChoID0gInJlY3RhbmdsZSIpLCAiZWRnZWQiID09PSBoID8gZnVuY3Rpb24gKGUsIHQsIHIsIHMsIG4sIG8pIHsKICAgICAgICAgICAgICBpZiAoISh0Lmxlbmd0aCA8IDIpKSB7CiAgICAgICAgICAgICAgICB2YXIgaCwgYzsKICAgICAgICAgICAgICAgIGlmIChoID0gdFswXSwgYyA9IHRbdC5sZW5ndGggLSAxXSwgaCA9IHUoaCwgcyksIGMgPSB1KGMsIHMpLCAhbikgcmV0dXJuIGYoZSwgaCwgYywgcik7CiAgICAgICAgICAgICAgICB2YXIgcCwKICAgICAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgICAgeSwKICAgICAgICAgICAgICAgICAgYiwKICAgICAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICAgICAgeCwKICAgICAgICAgICAgICAgICAgQSwKICAgICAgICAgICAgICAgICAgQywKICAgICAgICAgICAgICAgICAgUywKICAgICAgICAgICAgICAgICAgTSwKICAgICAgICAgICAgICAgICAgeiwKICAgICAgICAgICAgICAgICAgTCwKICAgICAgICAgICAgICAgICAgRSwKICAgICAgICAgICAgICAgICAgVCwKICAgICAgICAgICAgICAgICAgaywKICAgICAgICAgICAgICAgICAgSSwKICAgICAgICAgICAgICAgICAgTywKICAgICAgICAgICAgICAgICAgRCwKICAgICAgICAgICAgICAgICAgRiwKICAgICAgICAgICAgICAgICAgUiwKICAgICAgICAgICAgICAgICAgUCA9IFtdLAogICAgICAgICAgICAgICAgICBHID0gW1swLCAyLCAtNiwgLThdLCBbLTQsIC0yLCA2LCA0XSwgWzcsIC0xLCAtNSwgM10sIFstMywgNSwgMSwgLTddXTsKICAgICAgICAgICAgICAgIGZvciAoeiA9IDAsIEwgPSBoLmxlbmd0aDsgeiA8IEw7IHorKykgewogICAgICAgICAgICAgICAgICBpZiAoQyA9IE1hdGgucm91bmQoeiAqIChyLmxlbmd0aCAtIDEpIC8gTCksIEEgPSBsLkNDLmNvbG9yKHJbQ10pLCBQLnB1c2goZyA9IGhbel0pLCBQLnB1c2goZyksIFAucHVzaCh2ID0gY1t6XSksIFAucHVzaCh2KSwgeiA8IEwgLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIEIgPSBoW3ogKyAxXS5jbG9uZSgpLnN1YihoW3pdKTsKICAgICAgICAgICAgICAgICAgICBwID0gY1t6XS5jbG9uZSgpLnN1YihoW3pdKS5jcm9zcyhCKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihuKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmb3IgKFAucHVzaChfID0gaFt6XS5jbG9uZSgpLmFkZChwKSksIFAucHVzaChfKSwgUC5wdXNoKHkgPSBjW3pdLmNsb25lKCkuYWRkKHApKSwgUC5wdXNoKHkpLCB2b2lkIDAgIT09IGcuYXRvbSAmJiAoUyA9IGcuYXRvbSksIEQgPSAoTyA9IGUudXBkYXRlR2VvR3JvdXAoOCkpLnZlcnRleEFycmF5LCBGID0gTy5jb2xvckFycmF5LCBSID0gTy5mYWNlQXJyYXksIERbdyA9IDMgKiAoYiA9IE8udmVydGljZXMpXSA9IGcueCwgRFt3ICsgMV0gPSBnLnksIERbdyArIDJdID0gZy56LCBEW3cgKyAzXSA9IGcueCwgRFt3ICsgNF0gPSBnLnksIERbdyArIDVdID0gZy56LCBEW3cgKyA2XSA9IHYueCwgRFt3ICsgN10gPSB2LnksIERbdyArIDhdID0gdi56LCBEW3cgKyA5XSA9IHYueCwgRFt3ICsgMTBdID0gdi55LCBEW3cgKyAxMV0gPSB2LnosIERbdyArIDEyXSA9IF8ueCwgRFt3ICsgMTNdID0gXy55LCBEW3cgKyAxNF0gPSBfLnosIERbdyArIDE1XSA9IF8ueCwgRFt3ICsgMTZdID0gXy55LCBEW3cgKyAxN10gPSBfLnosIERbdyArIDE4XSA9IHkueCwgRFt3ICsgMTldID0geS55LCBEW3cgKyAyMF0gPSB5LnosIERbdyArIDIxXSA9IHkueCwgRFt3ICsgMjJdID0geS55LCBEW3cgKyAyM10gPSB5LnosIEUgPSAwOyBFIDwgODsgKytFKSBGW3cgKyAzICogRV0gPSBBLnIsIEZbdyArIDEgKyAzICogRV0gPSBBLmcsIEZbdyArIDIgKyAzICogRV0gPSBBLmI7CiAgICAgICAgICAgICAgICAgIGlmICh6ID4gMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBVID0gdm9pZCAwICE9PSBNICYmIHZvaWQgMCAhPT0gUyAmJiBNLnNlcmlhbCAhPT0gUy5zZXJpYWw7CiAgICAgICAgICAgICAgICAgICAgZm9yIChFID0gMDsgRSA8IDQ7IEUrKykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIE4gPSBbYiArIEdbRV1bMF0sIGIgKyBHW0VdWzFdLCBiICsgR1tFXVsyXSwgYiArIEdbRV1bM11dOwogICAgICAgICAgICAgICAgICAgICAgaWYgKFJbeCA9IE8uZmFjZWlkeF0gPSBOWzBdLCBSW3ggKyAxXSA9IE5bMV0sIFJbeCArIDJdID0gTlszXSwgUlt4ICsgM10gPSBOWzFdLCBSW3ggKyA0XSA9IE5bMl0sIFJbeCArIDVdID0gTlszXSwgTy5mYWNlaWR4ICs9IDYsIFMuY2xpY2thYmxlIHx8IE0uY2xpY2thYmxlIHx8IFMuaG92ZXJhYmxlIHx8IE0uaG92ZXJhYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBWID0gUFtOWzNdXS5jbG9uZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGogPSBQW05bMF1dLmNsb25lKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgSCA9IFBbTlsyXV0uY2xvbmUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBXID0gUFtOWzFdXS5jbG9uZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoVi5hdG9tID0gUFtOWzNdXS5hdG9tIHx8IG51bGwsIEguYXRvbSA9IFBbTlsyXV0uYXRvbSB8fCBudWxsLCBqLmF0b20gPSBQW05bMF1dLmF0b20gfHwgbnVsbCwgVy5hdG9tID0gUFtOWzFdXS5hdG9tIHx8IG51bGwsIFUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IFYuY2xvbmUoKS5hZGQoaikubXVsdGlwbHlTY2FsYXIoLjUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWSA9IEguY2xvbmUoKS5hZGQoVykubXVsdGlwbHlTY2FsYXIoLjUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWiA9IFYuY2xvbmUoKS5hZGQoVykubXVsdGlwbHlTY2FsYXIoLjUpOwogICAgICAgICAgICAgICAgICAgICAgICAgIEUgJSAyID09IDAgPyAoKE0uY2xpY2thYmxlIHx8IE0uaG92ZXJhYmxlKSAmJiAoVCA9IG5ldyBhLlRyaWFuZ2xlKHEsIFosIFYpLCBrID0gbmV3IGEuVHJpYW5nbGUoWSwgSCwgWiksIEkgPSBuZXcgYS5UcmlhbmdsZShaLCBILCBWKSwgTS5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZS5wdXNoKFQpLCBNLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2goayksIE0uaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChJKSksIChTLmNsaWNrYWJsZSB8fCBTLmhvdmVyYWJsZSkgJiYgKFQgPSBuZXcgYS5UcmlhbmdsZShqLCBXLCBaKSwgayA9IG5ldyBhLlRyaWFuZ2xlKFcsIFksIFopLCBJID0gbmV3IGEuVHJpYW5nbGUoaiwgWiwgcSksIFMuaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChUKSwgUy5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZS5wdXNoKGspLCBTLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2goSSkpKSA6ICgoUy5jbGlja2FibGUgfHwgUy5ob3ZlcmFibGUpICYmIChUID0gbmV3IGEuVHJpYW5nbGUocSwgWiwgViksIGsgPSBuZXcgYS5UcmlhbmdsZShZLCBILCBaKSwgSSA9IG5ldyBhLlRyaWFuZ2xlKFosIEgsIFYpLCBTLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2goVCksIFMuaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChrKSwgUy5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZS5wdXNoKEkpKSwgKE0uY2xpY2thYmxlIHx8IE0uaG92ZXJhYmxlKSAmJiAoVCA9IG5ldyBhLlRyaWFuZ2xlKGosIFcsIFopLCBrID0gbmV3IGEuVHJpYW5nbGUoVywgWSwgWiksIEkgPSBuZXcgYS5UcmlhbmdsZShqLCBaLCBxKSwgTS5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZS5wdXNoKFQpLCBNLmludGVyc2VjdGlvblNoYXBlLnRyaWFuZ2xlLnB1c2goayksIE0uaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChJKSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgKFMuY2xpY2thYmxlIHx8IFMuaG92ZXJhYmxlKSAmJiAoVCA9IG5ldyBhLlRyaWFuZ2xlKGosIFcsIFYpLCBrID0gbmV3IGEuVHJpYW5nbGUoVywgSCwgViksIFMuaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChUKSwgUy5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZS5wdXNoKGspKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgTy52ZXJ0aWNlcyArPSA4LCBNID0gUzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBYID0gUC5sZW5ndGggLSA4OwogICAgICAgICAgICAgICAgZm9yIChEID0gKE8gPSBlLnVwZGF0ZUdlb0dyb3VwKDgpKS52ZXJ0ZXhBcnJheSwgRiA9IE8uY29sb3JBcnJheSwgUiA9IE8uZmFjZUFycmF5LCB3ID0gMyAqIChiID0gTy52ZXJ0aWNlcyksIHggPSBPLmZhY2VpZHgsIHogPSAwOyB6IDwgNDsgeisrKSB7CiAgICAgICAgICAgICAgICAgIFAucHVzaChQWzIgKiB6XSksIFAucHVzaChQW1ggKyAyICogel0pOwogICAgICAgICAgICAgICAgICB2YXIgSyA9IFBbMiAqIHpdLAogICAgICAgICAgICAgICAgICAgICQgPSBQW1ggKyAyICogel07CiAgICAgICAgICAgICAgICAgIERbdyArIDYgKiB6XSA9IEsueCwgRFt3ICsgMSArIDYgKiB6XSA9IEsueSwgRFt3ICsgMiArIDYgKiB6XSA9IEsueiwgRFt3ICsgMyArIDYgKiB6XSA9ICQueCwgRFt3ICsgNCArIDYgKiB6XSA9ICQueSwgRFt3ICsgNSArIDYgKiB6XSA9ICQueiwgRlt3ICsgNiAqIHpdID0gQS5yLCBGW3cgKyAxICsgNiAqIHpdID0gQS5nLCBGW3cgKyAyICsgNiAqIHpdID0gQS5iLCBGW3cgKyAzICsgNiAqIHpdID0gQS5yLCBGW3cgKyA0ICsgNiAqIHpdID0gQS5nLCBGW3cgKyA1ICsgNiAqIHpdID0gQS5iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgWCArPSA4LCBUID0gW2IsIGIgKyAyLCBiICsgNiwgYiArIDRdLCBrID0gW2IgKyAxLCBiICsgNSwgYiArIDcsIGIgKyAzXSwgUlt4XSA9IFRbMF0sIFJbeCArIDFdID0gVFsxXSwgUlt4ICsgMl0gPSBUWzNdLCBSW3ggKyAzXSA9IFRbMV0sIFJbeCArIDRdID0gVFsyXSwgUlt4ICsgNV0gPSBUWzNdLCBSW3ggKyA2XSA9IGtbMF0sIFJbeCArIDddID0ga1sxXSwgUlt4ICsgOF0gPSBrWzNdLCBSW3ggKyA5XSA9IGtbMV0sIFJbeCArIDEwXSA9IGtbMl0sIFJbeCArIDExXSA9IGtbM10sIE8uZmFjZWlkeCArPSAxMiwgTy52ZXJ0aWNlcyArPSA4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfShlLCB0LCByLCBzLCBuKSA6ICJyZWN0YW5nbGUiICE9PSBoICYmICJvdmFsIiAhPT0gaCAmJiAicGFyYWJvbGEiICE9PSBoIHx8IGZ1bmN0aW9uIChlLCB0LCByLCBzLCBuLCBvLCBoKSB7CiAgICAgICAgICAgICAgdmFyIGMsIHAsIGcsIHYsIF8sIHksIGIsIHcsIHgsIEE7CiAgICAgICAgICAgICAgaWYgKChnID0gdC5sZW5ndGgpIDwgMiB8fCB0WzBdLmxlbmd0aCA8IDIpIHJldHVybjsKICAgICAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgZzsgYysrKSB0W2NdID0gdSh0W2NdLCBzKTsKICAgICAgICAgICAgICBpZiAodiA9IHRbMF0ubGVuZ3RoLCAhbikgcmV0dXJuIGYoZSwgdFswXSwgdFtnIC0gMV0sIHIpOwogICAgICAgICAgICAgIHZhciBDID0gW10sCiAgICAgICAgICAgICAgICBTID0gW10sCiAgICAgICAgICAgICAgICBNID0gW107CiAgICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IGc7IHArKykgQy5wdXNoKC4yNSArIDEuNSAqIE1hdGguc3FydCgoZyAtIDEpICogcCAtIE1hdGgucG93KHAsIDIpKSAvIChnIC0gMSkpLCBTLnB1c2goLjUpLCBNLnB1c2goMiAqIChNYXRoLnBvdyhwIC8gZywgMikgLSBwIC8gZykgKyAuNik7CiAgICAgICAgICAgICAgdmFyIHosCiAgICAgICAgICAgICAgICBMLAogICAgICAgICAgICAgICAgRSwKICAgICAgICAgICAgICAgIFQsCiAgICAgICAgICAgICAgICBrLAogICAgICAgICAgICAgICAgSSwKICAgICAgICAgICAgICAgIE8sCiAgICAgICAgICAgICAgICBELAogICAgICAgICAgICAgICAgRiwKICAgICAgICAgICAgICAgIFIsCiAgICAgICAgICAgICAgICBQID0gW107CiAgICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IDIgKiBnIC0gMTsgcCsrKSBQW3BdID0gW3AsIHAgKyAxLCBwICsgMSAtIDIgKiBnLCBwIC0gMiAqIGddOwogICAgICAgICAgICAgIFBbMiAqIGcgLSAxXSA9IFtwLCBwICsgMSAtIDIgKiBnLCBwICsgMSAtIDQgKiBnLCBwIC0gMiAqIGddOwogICAgICAgICAgICAgIHZhciBHID0gZS51cGRhdGVHZW9Hcm91cCgpOwogICAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCB2OyBjKyspIHsKICAgICAgICAgICAgICAgIHZhciBfczUxID0gZS5ncm91cHMsCiAgICAgICAgICAgICAgICAgIF9vMjQgPSAhMTsKICAgICAgICAgICAgICAgIHZhciBCLCBVOwogICAgICAgICAgICAgICAgZm9yIChHID0gZS51cGRhdGVHZW9Hcm91cCgyICogZyksIF9zNTEgIT0gZS5ncm91cHMgJiYgYyA+IDAgJiYgKGMgLT0gMSwgX28yNCA9ICEwKSwgSSA9IE1hdGgucm91bmQoYyAqIChyLmxlbmd0aCAtIDEpIC8gdiksIGsgPSBsLkNDLmNvbG9yKHJbSV0pLCB4ID0gYiwgQSA9IHcsIGIgPSBbXSwgdyA9IFtdLCBfID0gW10sIHZvaWQgMCAhPT0gdFswXVtjXS5hdG9tICYmIChUID0gdFswXVtjXS5hdG9tLCAib3ZhbCIgPT09IGggPyB5ID0gQyA6ICJyZWN0YW5nbGUiID09PSBoID8geSA9IFMgOiAicGFyYWJvbGEiID09PSBoICYmICh5ID0gTSkpLCB5IHx8ICh5ID0gUyksIHAgPSAwOyBwIDwgZzsgcCsrKSBCID0gYyA8IHYgLSAxID8gdFtwXVtjICsgMV0uY2xvbmUoKS5zdWIodFtwXVtjXSkgOiB0W3BdW2MgLSAxXS5jbG9uZSgpLnN1Yih0W3BdW2NdKS5uZWdhdGUoKSwgVSA9IHAgPCBnIC0gMSA/IHRbcCArIDFdW2NdLmNsb25lKCkuc3ViKHRbcF1bY10pIDogdFtwIC0gMV1bY10uY2xvbmUoKS5zdWIodFtwXVtjXSkubmVnYXRlKCksIF9bcF0gPSBVLmNyb3NzKEIpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKG4gKiB5W3BdKTsKICAgICAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBnOyBwKyspIGJbcF0gPSB0W3BdW2NdLmNsb25lKCkuYWRkKF9bcF0uY2xvbmUoKS5uZWdhdGUoKSk7CiAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgZzsgcCsrKSB3W3BdID0gdFtwXVtjXS5jbG9uZSgpLmFkZChfW3BdKTsKICAgICAgICAgICAgICAgIGZvciAoTyA9IEcudmVydGV4QXJyYXksIEQgPSBHLmNvbG9yQXJyYXksIEYgPSBHLmZhY2VBcnJheSwgTCA9IDMgKiAoeiA9IEcudmVydGljZXMpLCBwID0gMDsgcCA8IGc7IHArKykgT1tMICsgMyAqIHAgKyAwXSA9IGJbcF0ueCwgT1tMICsgMyAqIHAgKyAxXSA9IGJbcF0ueSwgT1tMICsgMyAqIHAgKyAyXSA9IGJbcF0uejsKICAgICAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBnOyBwKyspIE9bTCArIDMgKiBwICsgMCArIDMgKiBnXSA9IHdbZyAtIDEgLSBwXS54LCBPW0wgKyAzICogcCArIDEgKyAzICogZ10gPSB3W2cgLSAxIC0gcF0ueSwgT1tMICsgMyAqIHAgKyAyICsgMyAqIGddID0gd1tnIC0gMSAtIHBdLno7CiAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgMiAqIGc7ICsrcCkgRFtMICsgMyAqIHAgKyAwXSA9IGsuciwgRFtMICsgMyAqIHAgKyAxXSA9IGsuZywgRFtMICsgMyAqIHAgKyAyXSA9IGsuYjsKICAgICAgICAgICAgICAgIGlmIChjID4gMCAmJiAhX28yNCkgewogICAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgMiAqIGc7IHArKykgUiA9IFt6ICsgUFtwXVswXSwgeiArIFBbcF1bMV0sIHogKyBQW3BdWzJdLCB6ICsgUFtwXVszXV0sIEZbRSA9IEcuZmFjZWlkeF0gPSBSWzBdLCBGW0UgKyAxXSA9IFJbMV0sIEZbRSArIDJdID0gUlszXSwgRltFICsgM10gPSBSWzFdLCBGW0UgKyA0XSA9IFJbMl0sIEZbRSArIDVdID0gUlszXSwgRy5mYWNlaWR4ICs9IDY7CiAgICAgICAgICAgICAgICAgIGlmIChULmNsaWNrYWJsZSB8fCBULmhvdmVyYWJsZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBOID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIE4ucHVzaChuZXcgYS5UcmlhbmdsZSh4WzBdLCBiWzBdLCBiW2cgLSAxXSkpLCBOLnB1c2gobmV3IGEuVHJpYW5nbGUoeFswXSwgYltnIC0gMV0sIHhbZyAtIDFdKSksIE4ucHVzaChuZXcgYS5UcmlhbmdsZSh4W2cgLSAxXSwgYltnIC0gMV0sIHdbZyAtIDFdKSksIE4ucHVzaChuZXcgYS5UcmlhbmdsZSh4W2cgLSAxXSwgd1tnIC0gMV0sIEFbZyAtIDFdKSksIE4ucHVzaChuZXcgYS5UcmlhbmdsZSh3WzBdLCBBWzBdLCBBW2cgLSAxXSkpLCBOLnB1c2gobmV3IGEuVHJpYW5nbGUod1tnIC0gMV0sIHdbMF0sIEFbZyAtIDFdKSksIE4ucHVzaChuZXcgYS5UcmlhbmdsZShiWzBdLCB4WzBdLCBBWzBdKSksIE4ucHVzaChuZXcgYS5UcmlhbmdsZSh3WzBdLCBiWzBdLCBBWzBdKSksIE4pIFQuaW50ZXJzZWN0aW9uU2hhcGUudHJpYW5nbGUucHVzaChOW3BdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgRy52ZXJ0aWNlcyArPSAyICogZzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yIChPID0gRy52ZXJ0ZXhBcnJheSwgRCA9IEcuY29sb3JBcnJheSwgRiA9IEcuZmFjZUFycmF5LCBMID0gMyAqICh6ID0gRy52ZXJ0aWNlcyksIEUgPSBHLmZhY2VpZHgsIGMgPSAwOyBjIDwgZyAtIDE7IGMrKykgUiA9IFtjLCBjICsgMSwgMiAqIGcgLSAyIC0gYywgMiAqIGcgLSAxIC0gY10sIEZbRSA9IEcuZmFjZWlkeF0gPSBSWzBdLCBGW0UgKyAxXSA9IFJbMV0sIEZbRSArIDJdID0gUlszXSwgRltFICsgM10gPSBSWzFdLCBGW0UgKyA0XSA9IFJbMl0sIEZbRSArIDVdID0gUlszXSwgRy5mYWNlaWR4ICs9IDY7CiAgICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8IGcgLSAxOyBjKyspIFIgPSBbeiAtIDEgLSBjLCB6IC0gMiAtIGMsIHogLSAyICogZyArIGMgKyAxLCB6IC0gMiAqIGcgKyBjXSwgRltFID0gRy5mYWNlaWR4XSA9IFJbMF0sIEZbRSArIDFdID0gUlsxXSwgRltFICsgMl0gPSBSWzNdLCBGW0UgKyAzXSA9IFJbMV0sIEZbRSArIDRdID0gUlsyXSwgRltFICsgNV0gPSBSWzNdLCBHLmZhY2VpZHggKz0gNjsKICAgICAgICAgICAgfShlLCB0LCByLCBzLCBuLCAwLCBoKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGcoZSkgewogICAgICAgICAgICByZXR1cm4gZSAmJiAiQyIgPT09IGUuZWxlbSAmJiAiQ0EiID09PSBlLmF0b207CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB2KGUsIHQpIHsKICAgICAgICAgICAgaWYgKGUgJiYgdCAmJiBlLmNoYWluID09PSB0LmNoYWluKSB7CiAgICAgICAgICAgICAgaWYgKCEoZS5oZXRmbGFnIHx8IHQuaGV0ZmxhZyB8fCBlLnJlc2NoYWluICE9PSB0LnJlc2NoYWluIHx8IGUucmVzaSAhPT0gdC5yZXNpICYmIGUucmVzaSAhPT0gdC5yZXNpIC0gMSkpIHJldHVybiAhMDsKICAgICAgICAgICAgICBpZiAoZS5yZXNpIDwgdC5yZXNpKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IGUueCAtIHQueCwKICAgICAgICAgICAgICAgICAgcyA9IGUueSAtIHQueSwKICAgICAgICAgICAgICAgICAgYSA9IGUueiAtIHQueiwKICAgICAgICAgICAgICAgICAgbiA9IHIgKiByICsgcyAqIHMgKyBhICogYTsKICAgICAgICAgICAgICAgIGlmICgiQ0EiID09IGUuYXRvbSAmJiAiQ0EiID09IHQuYXRvbSAmJiBuIDwgMTYpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgIGlmICgoIlAiID09IGUuYXRvbSB8fCAiUCIgPT0gdC5hdG9tKSAmJiBuIDwgNjQpIHJldHVybiAhMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gXyhlLCB0LCByLCBzLCBhKSB7CiAgICAgICAgICAgIGlmIChudWxsICE9IHQgJiYgMCAhPSB0LnZlcnRpY2VzKSB7CiAgICAgICAgICAgICAgYSAmJiAodC5pbml0VHlwZWRBcnJheXMoKSwgdC5zZXRVcE5vcm1hbHMoKSk7CiAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgbi5NZXNoRG91YmxlTGFtYmVydE1hdGVyaWFsKCk7CiAgICAgICAgICAgICAgby52ZXJ0ZXhDb2xvcnMgPSBuLkNvbG9yaW5nLkZhY2VDb2xvcnMsICJudW1iZXIiID09IHR5cGVvZiByICYmIHIgPj0gMCAmJiByIDwgMSAmJiAoby50cmFuc3BhcmVudCA9ICEwLCBvLm9wYWNpdHkgPSByKSwgby5vdXRsaW5lID0gczsKICAgICAgICAgICAgICB2YXIgbCA9IG5ldyBuLk1lc2godCwgbyk7CiAgICAgICAgICAgICAgZS5hZGQobCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHkoZSwgdCwgciwgYSwgbiwgbywgbCwgaCwgYykgewogICAgICAgICAgICB2YXIgdSwgZiwgcCwgZywgdiwgXzsKICAgICAgICAgICAgaWYgKGEgJiYgbiAmJiBsKSB7CiAgICAgICAgICAgICAgdmFyIHkgPSBuLnN1YihhKTsKICAgICAgICAgICAgICB5Lm5vcm1hbGl6ZSgpOwogICAgICAgICAgICAgIHZhciBiID0gaFtjXTsKICAgICAgICAgICAgICBmb3IgKGYgPSBjICsgMTsgZiA8IGgubGVuZ3RoICYmIChiID0gaFtmXSkuYXRvbSAhPSBsLmF0b207IGYrKyk7CiAgICAgICAgICAgICAgaWYgKChiID0gYiA/IG5ldyBzLlZlY3RvcjMoYi54LCBiLnksIGIueikgOiBuZXcgcy5WZWN0b3IzKDAsIDAsIDApKS5zdWIoYSksICJhcnJvdyBzdGFydCIgPT09IGwuc3MpIHsKICAgICAgICAgICAgICAgIHZhciB3ID0gYi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKC4zKS5jcm9zcyhuKTsKICAgICAgICAgICAgICAgIGEuYWRkKHcpOwogICAgICAgICAgICAgICAgdmFyIHggPSBiLmNsb25lKCkuY3Jvc3MoeSkubm9ybWFsaXplKCk7CiAgICAgICAgICAgICAgICB5LnJvdGF0ZUFib3V0VmVjdG9yKHgsIC40Myk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAobC5zdHlsZS5jYXJ0b29uLnJpYmJvbiA/IHUgPSBsLnN0eWxlLmNhcnRvb24udGhpY2tuZXNzIHx8IC40IDogbC5zdHlsZS5jYXJ0b29uLndpZHRoID8gdSA9IGwuc3R5bGUuY2FydG9vbi53aWR0aCA6ICJjIiA9PT0gbC5zcyA/IHUgPSAiUCIgPT09IGwuYXRvbSA/IC44IDogLjUgOiAiYXJyb3cgc3RhcnQiID09PSBsLnNzID8gKHUgPSAxLjMsIHYgPSAhMCkgOiB1ID0gImFycm93IGVuZCIgPT09IGwuc3MgfHwgImgiID09PSBsLnNzICYmIGwuc3R5bGUuY2FydG9vbi50dWJlcyB8fCAidHViZSBzdGFydCIgPT09IGwuc3MgPyAuNSA6IDEuMywgbnVsbCAhPSBvICYmIHkuZG90KG8pIDwgMCAmJiB5Lm5lZ2F0ZSgpLCB5Lm11bHRpcGx5U2NhbGFyKHUpLCBmID0gMDsgZiA8IHQ7IGYrKykgcCA9IDIgKiBmIC8gKHQgLSAxKSAtIDEsIChnID0gbmV3IHMuVmVjdG9yMyhhLnggKyBwICogeS54LCBhLnkgKyBwICogeS55LCBhLnogKyBwICogeS56KSkuYXRvbSA9IGwsIHIgJiYgInMiID09PSBsLnNzICYmIChnLnNtb290aGVuID0gITApLCBlW2ZdLnB1c2goZyk7CiAgICAgICAgICAgICAgaWYgKHYpIGZvciAoeS5tdWx0aXBseVNjYWxhcigyKSwgZiA9IDA7IGYgPCB0OyBmKyspIHAgPSAyICogZiAvICh0IC0gMSkgLSAxLCAoZyA9IG5ldyBzLlZlY3RvcjMoYS54ICsgcCAqIHkueCwgYS55ICsgcCAqIHkueSwgYS56ICsgcCAqIHkueikpLmF0b20gPSBsLCBnLnNtb290aGVuID0gITEsIGcuc2tpcCA9ICEwLCBlW2ZdLnB1c2goZyk7CiAgICAgICAgICAgICAgcmV0dXJuIF8gPSBsLnN0eWxlLmNhcnRvb24uc3R5bGUgfHwgImRlZmF1bHQiLCBlLnN0eWxlID8gZS5zdHlsZSAhPSBfICYmIChjb25zb2xlLmxvZygiV2FybmluZzogYSBjYXJ0b29uIGNoYWluJ3Mgc3RyYW5kLXN0eWxlIGlzIGFtYmlndW91cyIpLCBlLnN0eWxlID0gImRlZmF1bHQiKSA6IGUuc3R5bGUgPSBfLCAiYXJyb3cgc3RhcnQiICE9PSBsLnNzICYmICJhcnJvdyBlbmQiICE9PSBsLnNzIHx8IChsLnNzID0gInMiKSwgdjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdmFyIGIgPSB7CiAgICAgICAgICAgICAgQzogITAsCiAgICAgICAgICAgICAgQ0E6ICEwLAogICAgICAgICAgICAgIE86ICEwLAogICAgICAgICAgICAgIFA6ICEwLAogICAgICAgICAgICAgIE9QMjogITAsCiAgICAgICAgICAgICAgTzJQOiAhMCwKICAgICAgICAgICAgICAiTzUnIjogITAsCiAgICAgICAgICAgICAgIk8zJyI6ICEwLAogICAgICAgICAgICAgICJDNSciOiAhMCwKICAgICAgICAgICAgICAiQzInIjogITAsCiAgICAgICAgICAgICAgIk81KiI6ICEwLAogICAgICAgICAgICAgICJPMyoiOiAhMCwKICAgICAgICAgICAgICAiQzUqIjogITAsCiAgICAgICAgICAgICAgIkMyKiI6ICEwLAogICAgICAgICAgICAgIE4xOiAhMCwKICAgICAgICAgICAgICBOMzogITAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdyA9IHsKICAgICAgICAgICAgICBEQTogITAsCiAgICAgICAgICAgICAgREc6ICEwLAogICAgICAgICAgICAgIEE6ICEwLAogICAgICAgICAgICAgIEc6ICEwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHggPSB7CiAgICAgICAgICAgICAgRFQ6ICEwLAogICAgICAgICAgICAgIERDOiAhMCwKICAgICAgICAgICAgICBVOiAhMCwKICAgICAgICAgICAgICBDOiAhMCwKICAgICAgICAgICAgICBUOiAhMAogICAgICAgICAgICB9LAogICAgICAgICAgICBBID0gewogICAgICAgICAgICAgIERBOiAhMCwKICAgICAgICAgICAgICBERzogITAsCiAgICAgICAgICAgICAgQTogITAsCiAgICAgICAgICAgICAgRzogITAsCiAgICAgICAgICAgICAgRFQ6ICEwLAogICAgICAgICAgICAgIERDOiAhMCwKICAgICAgICAgICAgICBVOiAhMCwKICAgICAgICAgICAgICBDOiAhMCwKICAgICAgICAgICAgICBUOiAhMAogICAgICAgICAgICB9OwogICAgICAgICAgZnVuY3Rpb24gQyhlLCB0LCByKSB7CiAgICAgICAgICAgIHZhciB1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAxMDsKICAgICAgICAgICAgdmFyIGYgPSB1LAogICAgICAgICAgICAgIEMgPSB1OwogICAgICAgICAgICB2YXIgUywKICAgICAgICAgICAgICBNLAogICAgICAgICAgICAgIHosCiAgICAgICAgICAgICAgTCwKICAgICAgICAgICAgICBFLAogICAgICAgICAgICAgIFQsCiAgICAgICAgICAgICAgaywKICAgICAgICAgICAgICBJLAogICAgICAgICAgICAgIE8sCiAgICAgICAgICAgICAgRCwKICAgICAgICAgICAgICBGLAogICAgICAgICAgICAgIFIsCiAgICAgICAgICAgICAgUCwKICAgICAgICAgICAgICBHLAogICAgICAgICAgICAgIEIsCiAgICAgICAgICAgICAgVSwKICAgICAgICAgICAgICBOLAogICAgICAgICAgICAgIFYsCiAgICAgICAgICAgICAgaiA9IG5ldyBuLkdlb21ldHJ5KCEwKSwKICAgICAgICAgICAgICBIID0gbmV3IG4uR2VvbWV0cnkoITApLAogICAgICAgICAgICAgIFcgPSBbXSwKICAgICAgICAgICAgICBxID0gW10sCiAgICAgICAgICAgICAgWSA9IDEsCiAgICAgICAgICAgICAgWiA9ICExLAogICAgICAgICAgICAgIFggPSB7fTsKICAgICAgICAgICAgZm9yICh2YXIgSyBpbiBvLkdyYWRpZW50LmJ1aWx0aW5HcmFkaWVudHMpIG8uR3JhZGllbnQuYnVpbHRpbkdyYWRpZW50cy5oYXNPd25Qcm9wZXJ0eShLKSAmJiAoWFtLXSA9IG5ldyBvLkdyYWRpZW50LmJ1aWx0aW5HcmFkaWVudHNbS10oclsxXSwgclswXSkpOwogICAgICAgICAgICB2YXIgJCA9IGZ1bmN0aW9uICQoZSwgdCkgewogICAgICAgICAgICAgIHJldHVybiByICYmICJzcGVjdHJ1bSIgPT09IHQuY29sb3IgPyB0LmNvbG9yc2NoZW1lIGluIFggPyBYW3QuY29sb3JzY2hlbWVdLnZhbHVlVG9IZXgoZS5yZXNpKSA6IFguc2luZWJvdy52YWx1ZVRvSGV4KGUucmVzaSkgOiAoMCwgYy5nZXRDb2xvckZyb21TdHlsZSkoZSwgdCkuZ2V0SGV4KCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGZvciAoSSA9IDA7IEkgPCBmOyBJKyspIHFbSV0gPSBbXTsKICAgICAgICAgICAgdmFyIFEgPSAhMSwKICAgICAgICAgICAgICBKID0gITEsCiAgICAgICAgICAgICAgZWUgPSBbXTsKICAgICAgICAgICAgZm9yIChJIGluIHQpIHsKICAgICAgICAgICAgICBpZiAoIkMiID09PSAoTCA9IHRbSV0pLmVsZW0gJiYgIkNBIiA9PT0gTC5hdG9tKSB7CiAgICAgICAgICAgICAgICB2YXIgdGUgPSB2KHosIEwpOwogICAgICAgICAgICAgICAgdGUgJiYgInMiID09PSBMLnNzID8gUSA9ICEwIDogUSAmJiAoeiAmJiBNICYmIHouc3R5bGUuY2FydG9vbi5hcnJvd3MgJiYgTS5zdHlsZS5jYXJ0b29uLmFycm93cyAmJiAoei5zcyA9ICJhcnJvdyBlbmQiLCBNLnNzID0gImFycm93IHN0YXJ0IiksIFEgPSAhMSksIHRlICYmICgiaCIgPT09IHouc3MgfHwgInR1YmUgc3RhcnQiID09IHouc3MpICYmIHouc3R5bGUuY2FydG9vbi50dWJlcyA/ICFKICYmICJ0dWJlIHN0YXJ0IiAhPSB6LnNzICYmIEwuc3R5bGUuY2FydG9vbi50dWJlcyAmJiAoTC5zcyA9ICJ0dWJlIHN0YXJ0IiwgSiA9ICEwKSA6IEogJiYgKCJ0dWJlIHN0YXJ0IiA9PT0gei5zcyA/IHouc3MgPSAidHViZSBlbmQiIDogTSAmJiBNLnN0eWxlLmNhcnRvb24udHViZXMgJiYgKE0uc3MgPSAidHViZSBlbmQiKSwgSiA9ICExKSwgTSA9IHosIHogPSBMOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBMICYmIEwuYXRvbSBpbiBiICYmIGVlLnB1c2goTCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgSiAmJiB6LnN0eWxlLmNhcnRvb24udHViZXMgJiYgKHouc3MgPSAidHViZSBlbmQiLCBKID0gITEpOwogICAgICAgICAgICB2YXIgcmUgPSBmdW5jdGlvbiByZSh0KSB7CiAgICAgICAgICAgICAgcVswXS5sZW5ndGggPiAwICYmIHAoSCwgcSwgVywgQywgaywgMCwgcS5zdHlsZSk7CiAgICAgICAgICAgICAgdmFyIHIgPSBbXSwKICAgICAgICAgICAgICAgIHMgPSBudWxsOwogICAgICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgICAgICBmb3IgKEkgPSAwOyBJIDwgZjsgSSsrKSByW0ldID0gcVtJXVtxW0ldLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgcyA9IFdbVy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yIChxID0gW10sIEkgPSAwOyBJIDwgZjsgSSsrKSBxW0ldID0gW107CiAgICAgICAgICAgICAgaWYgKFcgPSBbXSwgdCkgewogICAgICAgICAgICAgICAgZm9yIChJID0gMDsgSSA8IGY7IEkrKykgcVtJXS5wdXNoKHJbSV0pOwogICAgICAgICAgICAgICAgVy5wdXNoKHMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBfKGUsIEgsIFksIFosICEwKSwgXyhlLCBqLCBZLCBaLCAhMSksIEggPSBuZXcgbi5HZW9tZXRyeSghMCksIGogPSBuZXcgbi5HZW9tZXRyeSghMCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHogPSB2b2lkIDA7CiAgICAgICAgICAgIGZvciAodmFyIGllID0gMDsgaWUgPCBlZS5sZW5ndGg7IGllKyspIHsKICAgICAgICAgICAgICB2YXIgc2UgPSAoTCA9IGVlW2llXSkucmVzbi50cmltKCksCiAgICAgICAgICAgICAgICBhZSA9IChzZSBpbiBBKTsKICAgICAgICAgICAgICBpZiAoWSA9IDEsIFMgPSBMLnN0eWxlLmNhcnRvb24sIHogJiYgei5zdHlsZS5jYXJ0b29uICYmIChZID0gei5zdHlsZS5jYXJ0b29uLm9wYWNpdHkpLCB6ICYmIHouc3R5bGUuY2FydG9vbiAmJiB6LnN0eWxlLmNhcnRvb24ub3V0bGluZSAmJiAoWiA9IHouc3R5bGUuY2FydG9vbi5vdXRsaW5lKSwgIXogfHwgIXouc3R5bGUuY2FydG9vbiB8fCBMLnN0eWxlLmNhcnRvb24gJiYgei5zdHlsZS5jYXJ0b29uLm9wYWNpdHkgPT0gTC5zdHlsZS5jYXJ0b29uLm9wYWNpdHkgfHwgcmUoei5jaGFpbiA9PSBMLmNoYWluKSwgInRyYWNlIiA9PT0gUy5zdHlsZSkgewogICAgICAgICAgICAgICAgaWYgKEwuaGV0ZmxhZykgO2Vsc2UgaWYgKCJDIiA9PT0gTC5lbGVtICYmICJDQSIgPT09IEwuYXRvbSB8fCBhZSAmJiAiUCIgPT09IEwuYXRvbSB8fCAiQkIiID09PSBMLmF0b20pIHsKICAgICAgICAgICAgICAgICAgaWYgKFQgPSAkKEwsIFMpLCBrID0gKDAsIGMuaXNOdW1lcmljKShTLnRoaWNrbmVzcykgPyBTLnRoaWNrbmVzcyA6IC40LCB2KHosIEwpKSBpZiAoVCA9PSBFKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5lID0gbC5DQy5jb2xvcihUKTsKICAgICAgICAgICAgICAgICAgICBoLkdMRHJhdy5kcmF3Q3lsaW5kZXIoaiwgeiwgTCwgaywgbmUsIDIsIDIpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBvZSA9IG5ldyBzLlZlY3RvcjMoKS5hZGRWZWN0b3JzKHosIEwpLm11bHRpcGx5U2NhbGFyKC41KSwKICAgICAgICAgICAgICAgICAgICAgIGxlID0gbC5DQy5jb2xvcihFKSwKICAgICAgICAgICAgICAgICAgICAgIGhlID0gbC5DQy5jb2xvcihUKTsKICAgICAgICAgICAgICAgICAgICBoLkdMRHJhdy5kcmF3Q3lsaW5kZXIoaiwgeiwgb2UsIGssIGxlLCAyLCAwKSwgaC5HTERyYXcuZHJhd0N5bGluZGVyKGosIG9lLCBMLCBrLCBoZSwgMCwgMik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCghMCA9PT0gTC5jbGlja2FibGUgfHwgTC5ob3ZlcmFibGUpICYmIHZvaWQgMCAhPT0gTC5pbnRlcnNlY3Rpb25TaGFwZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBjZSA9IG5ldyBzLlZlY3RvcjMoTC54LCBMLnksIEwueik7CiAgICAgICAgICAgICAgICAgICAgTC5pbnRlcnNlY3Rpb25TaGFwZS5zcGhlcmUucHVzaChuZXcgYS5TcGhlcmUoY2UsIGspKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB6ID0gTCwgRSA9IFQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChnKEwpIHx8IGFlICYmICgiUCIgPT09IEwuYXRvbSB8fCAwID09IEwuYXRvbS5pbmRleE9mKCJPNSIpKSkgewogICAgICAgICAgICAgICAgICBpZiAoVikgaWYgKCJ0dWJlIGVuZCIgPT09IEwuc3MpIFYgPSAhMSwgTiA9IG5ldyBzLlZlY3RvcjMoTC54LCBMLnksIEwueiksIGguR0xEcmF3LmRyYXdDeWxpbmRlcihqLCBVLCBOLCAyLCBsLkNDLmNvbG9yKEUpLCAxLCAxKSwgTC5zcyA9ICJoIjtlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoei5jaGFpbiA9PSBMLmNoYWluICYmICJ0dWJlIGVuZCIgIT09IHouc3MpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIFYgPSAhMSwgei5zcyA9ICJoIiwgTiA9IG5ldyBzLlZlY3RvcjMoei54LCB6LnksIHoueiksIGguR0xEcmF3LmRyYXdDeWxpbmRlcihqLCBVLCBOLCAyLCBsLkNDLmNvbG9yKEUpLCAxLCAxKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoeiAmJiAoIXYoeiwgTCkgfHwgInR1YmUgc3RhcnQiID09PSB6LnNzKSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoInR1YmUgc3RhcnQiID09PSB6LnNzICYmIChWID0gITAsIFUgPSBuZXcgcy5WZWN0b3IzKHoueCwgei55LCB6LnopLCB6LnNzID0gImgiKSwgQiAmJiAoRyA9IFIgPyBuZXcgcy5WZWN0b3IzKCkuYWRkVmVjdG9ycyh6LCBSKS5tdWx0aXBseVNjYWxhciguNSkgOiBuZXcgcy5WZWN0b3IzKHoueCwgei55LCB6LnopLCBoLkdMRHJhdy5kcmF3Q3lsaW5kZXIoaiwgRywgQiwgLjQsIGwuQ0MuY29sb3IoQi5jb2xvciksIDAsIDIpLCB5KHEsIGYsICEwLCBSLCBQLCBGLCB6LCBlZSwgaWUpLCBXLnB1c2goVCksIEcgPSBudWxsLCBCID0gbnVsbCksIHFbMF0ubGVuZ3RoID4gMCAmJiBwKEgsIHEsIFcsIEMsIGssIDAsIHEuc3R5bGUpLCBxID0gW10sIEkgPSAwOyBJIDwgZjsgSSsrKSBxW0ldID0gW107CiAgICAgICAgICAgICAgICAgICAgVyA9IFtdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHogfHwgei5yZXNjb2RlICE9IEwucmVzY29kZSB8fCB6LnJlc2kgIT0gTC5yZXNpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKEIpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBkZSA9IChHID0gbmV3IHMuVmVjdG9yMygpLmFkZFZlY3RvcnMoeiwgTCkubXVsdGlwbHlTY2FsYXIoLjUpKS5jbG9uZSgpLnN1YihCKS5tdWx0aXBseVNjYWxhciguMDIpOwogICAgICAgICAgICAgICAgICAgICAgRy5hZGQoZGUpLCBoLkdMRHJhdy5kcmF3Q3lsaW5kZXIoaiwgRywgQiwgLjQsIGwuQ0MuY29sb3IoQi5jb2xvciksIDAsIDIpLCBHID0gbnVsbCwgQiA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIFQgPSAkKEwsIFMpLCBXLnB1c2goVCksIGsgPSAoMCwgYy5pc051bWVyaWMpKFMudGhpY2tuZXNzKSA/IFMudGhpY2tuZXNzIDogLjQsIHogPSBMLCAoTyA9IG5ldyBzLlZlY3RvcjMoei54LCB6LnksIHoueikpLnJlc2kgPSB6LnJlc2ksIEUgPSBUOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICEwICE9PSBMLmNsaWNrYWJsZSAmJiAhMCAhPT0gTC5ob3ZlcmFibGUgfHwgdm9pZCAwICE9PSBMLmludGVyc2VjdGlvblNoYXBlICYmIHZvaWQgMCAhPT0gTC5pbnRlcnNlY3Rpb25TaGFwZS50cmlhbmdsZSB8fCAoTC5pbnRlcnNlY3Rpb25TaGFwZSA9IHsKICAgICAgICAgICAgICAgICAgICBzcGhlcmU6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgY3lsaW5kZXI6IFtdLAogICAgICAgICAgICAgICAgICAgIGxpbmU6IFtdLAogICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlOiBbXQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBnKHopICYmICJPIiA9PT0gTC5hdG9tIHx8IGFlICYmICJQIiA9PT0gei5hdG9tICYmICgiT1AyIiA9PT0gTC5hdG9tIHx8ICJPMlAiID09PSBMLmF0b20pIHx8IGFlICYmIDAgPT0gei5hdG9tLmluZGV4T2YoIk81IikgJiYgMCA9PSBMLmF0b20uaW5kZXhPZigiQzUiKSA/ICgoRCA9IG5ldyBzLlZlY3RvcjMoTC54LCBMLnksIEwueikpLnJlc2kgPSBMLnJlc2ksICJPUDIiICE9PSBMLmF0b20gJiYgIk8yUCIgIT09IEwuYXRvbSB8fCAoUCA9IG5ldyBzLlZlY3RvcjMoTC54LCBMLnksIEwueikpKSA6IGFlICYmIDAgPT0gTC5hdG9tLmluZGV4T2YoIk8zIikgPyBSID0gbmV3IHMuVmVjdG9yMyhMLngsIEwueSwgTC56KSA6ICgiTjEiID09PSBMLmF0b20gJiYgc2UgaW4gdyB8fCAiTjMiID09PSBMLmF0b20gJiYgc2UgaW4geCkgJiYgKChCID0gbmV3IHMuVmVjdG9yMyhMLngsIEwueSwgTC56KSkuY29sb3IgPSAoMCwgYy5nZXRDb2xvckZyb21TdHlsZSkoTCwgUykuZ2V0SGV4KCkpOwogICAgICAgICAgICAgICAgRCAmJiBPICYmIEQucmVzaSA9PT0gTy5yZXNpICYmICh5KHEsIGYsICEwLCBPLCBELCBGLCB6LCBlZSwgaWUpLCBGID0gRCwgTyA9IG51bGwsIEQgPSBudWxsLCBXLnB1c2goVCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBCICYmIChHID0gUiA/IG5ldyBzLlZlY3RvcjMoKS5hZGRWZWN0b3JzKHosIFIpLm11bHRpcGx5U2NhbGFyKC41KSA6IG5ldyBzLlZlY3RvcjMoei54LCB6LnksIHoueiksIGguR0xEcmF3LmRyYXdDeWxpbmRlcihqLCBHLCBCLCAuNCwgbC5DQy5jb2xvcihCLmNvbG9yKSwgMCwgMiksIHkocSwgZiwgITAsIFIsIFAsIEYsIHosIGVlLCBpZSksIFcucHVzaChUKSksIHJlKCExKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDM2Mzc6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgQ0FQOiBmdW5jdGlvbiBDQVAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHkuQ0FQOwogICAgICAgICAgICB9LAogICAgICAgICAgICBDQzogZnVuY3Rpb24gQ0MoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEuQ0M7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIENvbG9yOiBmdW5jdGlvbiBDb2xvcigpIHsKICAgICAgICAgICAgICByZXR1cm4gYS5Db2xvcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQ3VzdG9tTGluZWFyOiBmdW5jdGlvbiBDdXN0b21MaW5lYXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHMuQ3VzdG9tTGluZWFyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBDeWxpbmRlcjogZnVuY3Rpb24gQ3lsaW5kZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHUuQ3lsaW5kZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEdMRHJhdzogZnVuY3Rpb24gR0xEcmF3KCkgewogICAgICAgICAgICAgIHJldHVybiB5LkdMRHJhdzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR0xNb2RlbDogZnVuY3Rpb24gR0xNb2RlbCgpIHsKICAgICAgICAgICAgICByZXR1cm4gdy5HTE1vZGVsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHTFNoYXBlOiBmdW5jdGlvbiBHTFNoYXBlKCkgewogICAgICAgICAgICAgIHJldHVybiBfLkdMU2hhcGU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEdMVmlld2VyOiBmdW5jdGlvbiBHTFZpZXdlcigpIHsKICAgICAgICAgICAgICByZXR1cm4geC5HTFZpZXdlcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR0xWb2x1bWV0cmljUmVuZGVyOiBmdW5jdGlvbiBHTFZvbHVtZXRyaWNSZW5kZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHYuR0xWb2x1bWV0cmljUmVuZGVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHcmFkaWVudDogZnVuY3Rpb24gR3JhZGllbnQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHMuR3JhZGllbnQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEdyYWRpZW50VHlwZTogZnVuY3Rpb24gR3JhZGllbnRUeXBlKCkgewogICAgICAgICAgICAgIHJldHVybiBzLkdyYWRpZW50VHlwZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTGFiZWw6IGZ1bmN0aW9uIExhYmVsKCkgewogICAgICAgICAgICAgIHJldHVybiBuLkxhYmVsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBMYWJlbENvdW50OiBmdW5jdGlvbiBMYWJlbENvdW50KCkgewogICAgICAgICAgICAgIHJldHVybiBuLkxhYmVsQ291bnQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1hcmNoaW5nQ3ViZTogZnVuY3Rpb24gTWFyY2hpbmdDdWJlKCkgewogICAgICAgICAgICAgIHJldHVybiBwLk1hcmNoaW5nQ3ViZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTWFyY2hpbmdDdWJlSW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIE1hcmNoaW5nQ3ViZUluaXRpYWxpemVyKCkgewogICAgICAgICAgICAgIHJldHVybiBwLk1hcmNoaW5nQ3ViZUluaXRpYWxpemVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBNYXRyaXgzOiBmdW5jdGlvbiBNYXRyaXgzKCkgewogICAgICAgICAgICAgIHJldHVybiBjLk1hdHJpeDM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1hdHJpeDQ6IGZ1bmN0aW9uIE1hdHJpeDQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGMuTWF0cml4NDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUGFyc2VyczogZnVuY3Rpb24gUGFyc2VycygpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5QYXJzZXJzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBQYXVzYWJsZVRpbWVyOiBmdW5jdGlvbiBQYXVzYWJsZVRpbWVyKCkgewogICAgICAgICAgICAgIHJldHVybiBmLlBhdXNhYmxlVGltZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFBvaW50R3JpZDogZnVuY3Rpb24gUG9pbnRHcmlkKCkgewogICAgICAgICAgICAgIHJldHVybiBwLlBvaW50R3JpZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUHJvdGVpblN1cmZhY2U6IGZ1bmN0aW9uIFByb3RlaW5TdXJmYWNlKCkgewogICAgICAgICAgICAgIHJldHVybiBwLlByb3RlaW5TdXJmYWNlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBRdWF0ZXJuaW9uOiBmdW5jdGlvbiBRdWF0ZXJuaW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBjLlF1YXRlcm5pb247CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFJPWUdCOiBmdW5jdGlvbiBST1lHQigpIHsKICAgICAgICAgICAgICByZXR1cm4gcy5ST1lHQjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUldCOiBmdW5jdGlvbiBSV0IoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHMuUldCOwogICAgICAgICAgICB9LAogICAgICAgICAgICBSYXk6IGZ1bmN0aW9uIFJheSgpIHsKICAgICAgICAgICAgICByZXR1cm4gYy5SYXk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNpbmVib3c6IGZ1bmN0aW9uIFNpbmVib3coKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHMuU2luZWJvdzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU3BoZXJlOiBmdW5jdGlvbiBTcGhlcmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHUuU3BoZXJlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTdXJmYWNlVHlwZTogZnVuY3Rpb24gU3VyZmFjZVR5cGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHAuU3VyZmFjZVR5cGU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFRyaWFuZ2xlOiBmdW5jdGlvbiBUcmlhbmdsZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gdS5UcmlhbmdsZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVmVjdG9yMjogZnVuY3Rpb24gVmVjdG9yMigpIHsKICAgICAgICAgICAgICByZXR1cm4gYy5WZWN0b3IyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBWZWN0b3IzOiBmdW5jdGlvbiBWZWN0b3IzKCkgewogICAgICAgICAgICAgIHJldHVybiBjLlZlY3RvcjM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFZvbHVtZURhdGE6IGZ1bmN0aW9uIFZvbHVtZURhdGEoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGcuVm9sdW1lRGF0YTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWRqdXN0Vm9sdW1lU3R5bGU6IGZ1bmN0aW9uIGFkanVzdFZvbHVtZVN0eWxlKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmFkanVzdFZvbHVtZVN0eWxlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBhcHBseVBhcnRpYWxDaGFyZ2VzOiBmdW5jdGlvbiBhcHBseVBhcnRpYWxDaGFyZ2VzKCkgewogICAgICAgICAgICAgIHJldHVybiBsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBhdXRvaW5pdDogZnVuY3Rpb24gYXV0b2luaXQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEEuYXV0b2luaXQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF1dG9sb2FkOiBmdW5jdGlvbiBhdXRvbG9hZCgpIHsKICAgICAgICAgICAgICByZXR1cm4gQS5hdXRvbG9hZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmFzZTY0VG9BcnJheTogZnVuY3Rpb24gYmFzZTY0VG9BcnJheSgpIHsKICAgICAgICAgICAgICByZXR1cm4gZi5iYXNlNjRUb0FycmF5OwogICAgICAgICAgICB9LAogICAgICAgICAgICBib25kTGVuZ3RoOiBmdW5jdGlvbiBib25kTGVuZ3RoKCkgewogICAgICAgICAgICAgIHJldHVybiBoLmJvbmRMZW5ndGg7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJ1aWx0aW5Db2xvclNjaGVtZXM6IGZ1bmN0aW9uIGJ1aWx0aW5Db2xvclNjaGVtZXMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEuYnVpbHRpbkNvbG9yU2NoZW1lczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnVpbHRpbkdyYWRpZW50czogZnVuY3Rpb24gYnVpbHRpbkdyYWRpZW50cygpIHsKICAgICAgICAgICAgICByZXR1cm4gcy5idWlsdGluR3JhZGllbnRzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGFpbnM6IGZ1bmN0aW9uIGNoYWlucygpIHsKICAgICAgICAgICAgICByZXR1cm4gYS5jaGFpbnM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCgpIHsKICAgICAgICAgICAgICByZXR1cm4gYy5jbGFtcDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29udmVyc2lvbk1hdHJpeDM6IGZ1bmN0aW9uIGNvbnZlcnNpb25NYXRyaXgzKCkgewogICAgICAgICAgICAgIHJldHVybiBjLmNvbnZlcnNpb25NYXRyaXgzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjcmVhdGVTdGVyZW9WaWV3ZXI6IGZ1bmN0aW9uIGNyZWF0ZVN0ZXJlb1ZpZXdlcigpIHsKICAgICAgICAgICAgICByZXR1cm4geC5jcmVhdGVTdGVyZW9WaWV3ZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNyZWF0ZVZpZXdlcjogZnVuY3Rpb24gY3JlYXRlVmlld2VyKCkgewogICAgICAgICAgICAgIHJldHVybiB4LmNyZWF0ZVZpZXdlcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY3JlYXRlVmlld2VyR3JpZDogZnVuY3Rpb24gY3JlYXRlVmlld2VyR3JpZCgpIHsKICAgICAgICAgICAgICByZXR1cm4geC5jcmVhdGVWaWV3ZXJHcmlkOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWVwQ29weTogZnVuY3Rpb24gZGVlcENvcHkoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGYuZGVlcENvcHk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZ1RvUmFkOiBmdW5jdGlvbiBkZWdUb1JhZCgpIHsKICAgICAgICAgICAgICByZXR1cm4gYy5kZWdUb1JhZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZG93bmxvYWQ6IGZ1bmN0aW9uIGRvd25sb2FkKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmRvd25sb2FkOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkcmF3Q2FydG9vbjogZnVuY3Rpb24gZHJhd0NhcnRvb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGIuZHJhd0NhcnRvb247CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVsZW1lbnRDb2xvcnM6IGZ1bmN0aW9uIGVsZW1lbnRDb2xvcnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEuZWxlbWVudENvbG9yczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGYuZXh0ZW5kOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICByZXR1cm4gZi5nZXQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEF0b21Qcm9wZXJ0eTogZnVuY3Rpb24gZ2V0QXRvbVByb3BlcnR5KCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldEF0b21Qcm9wZXJ0eTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0Q29sb3JGcm9tU3R5bGU6IGZ1bmN0aW9uIGdldENvbG9yRnJvbVN0eWxlKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldENvbG9yRnJvbVN0eWxlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbiBnZXRFbGVtZW50KCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldEVsZW1lbnQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEV4dGVudDogZnVuY3Rpb24gZ2V0RXh0ZW50KCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldEV4dGVudDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0R3JhZGllbnQ6IGZ1bmN0aW9uIGdldEdyYWRpZW50KCkgewogICAgICAgICAgICAgIHJldHVybiBzLmdldEdyYWRpZW50OwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRQcm9wZXJ0eVJhbmdlOiBmdW5jdGlvbiBnZXRQcm9wZXJ0eVJhbmdlKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldFByb3BlcnR5UmFuZ2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldGJpbjogZnVuY3Rpb24gZ2V0YmluKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmdldGJpbjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaHRtbENvbG9yczogZnVuY3Rpb24gaHRtbENvbG9ycygpIHsKICAgICAgICAgICAgICByZXR1cm4gYS5odG1sQ29sb3JzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiBpc0VtcHR5T2JqZWN0KCkgewogICAgICAgICAgICAgIHJldHVybiBmLmlzRW1wdHlPYmplY3Q7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzTnVtZXJpYzogZnVuY3Rpb24gaXNOdW1lcmljKCkgewogICAgICAgICAgICAgIHJldHVybiBmLmlzTnVtZXJpYzsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWFrZUZ1bmN0aW9uOiBmdW5jdGlvbiBtYWtlRnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGYubWFrZUZ1bmN0aW9uOwogICAgICAgICAgICB9LAogICAgICAgICAgICBtZXJnZUdlb3M6IGZ1bmN0aW9uIG1lcmdlR2VvcygpIHsKICAgICAgICAgICAgICByZXR1cm4gZi5tZXJnZUdlb3M7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vcm1hbGl6ZVZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gcy5ub3JtYWxpemVWYWx1ZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGFydGlhbENoYXJnZXM6IGZ1bmN0aW9uIHBhcnRpYWxDaGFyZ2VzKCkgewogICAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9jZXNzaW5nX2F1dG9pbml0OiBmdW5jdGlvbiBwcm9jZXNzaW5nX2F1dG9pbml0KCkgewogICAgICAgICAgICAgIHJldHVybiBBLnByb2Nlc3NpbmdfYXV0b2luaXQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlc2lkdWVzOiBmdW5jdGlvbiByZXNpZHVlcygpIHsKICAgICAgICAgICAgICByZXR1cm4gYS5yZXNpZHVlczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0Qm9uZExlbmd0aDogZnVuY3Rpb24gc2V0Qm9uZExlbmd0aCgpIHsKICAgICAgICAgICAgICByZXR1cm4gaC5zZXRCb25kTGVuZ3RoOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXRTeW5jU3VyZmFjZTogZnVuY3Rpb24gc2V0U3luY1N1cmZhY2UoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHAuc2V0U3luY1N1cmZhY2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNwZWNTdHJpbmdUb09iamVjdDogZnVuY3Rpb24gc3BlY1N0cmluZ1RvT2JqZWN0KCkgewogICAgICAgICAgICAgIHJldHVybiBmLnNwZWNTdHJpbmdUb09iamVjdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3BsaXRNZXNoOiBmdW5jdGlvbiBzcGxpdE1lc2goKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF8uc3BsaXRNZXNoOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzc0NvbG9yczogZnVuY3Rpb24gc3NDb2xvcnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEuc3NDb2xvcnM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1YmRpdmlkZV9zcGxpbmU6IGZ1bmN0aW9uIHN1YmRpdmlkZV9zcGxpbmUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGIuc3ViZGl2aWRlX3NwbGluZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3luY1N1cmZhY2U6IGZ1bmN0aW9uIHN5bmNTdXJmYWNlKCkgewogICAgICAgICAgICAgIHJldHVybiBwLnN5bmNTdXJmYWNlOwogICAgICAgICAgICB9LAogICAgICAgICAgICB2aWV3ZXJzOiBmdW5jdGlvbiB2aWV3ZXJzKCkgewogICAgICAgICAgICAgIHJldHVybiBBLnZpZXdlcnM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHMgPSByKDE0NjApLAogICAgICAgICAgICBhID0gcigyNTUwKSwKICAgICAgICAgICAgbiA9IHIoNzgyNSk7CiAgICAgICAgICB2YXIgbyA9IHsKICAgICAgICAgICAgIkFMQTpOIjogLS4xNSwKICAgICAgICAgICAgIkFMQTpDQSI6IC4xLAogICAgICAgICAgICAiQUxBOkNCIjogMCwKICAgICAgICAgICAgIkFMQTpDIjogLjYsCiAgICAgICAgICAgICJBTEE6TyI6IC0uNTUsCiAgICAgICAgICAgICJBUkc6TiI6IC0uMTUsCiAgICAgICAgICAgICJBUkc6Q0EiOiAuMSwKICAgICAgICAgICAgIkFSRzpDQiI6IDAsCiAgICAgICAgICAgICJBUkc6Q0ciOiAwLAogICAgICAgICAgICAiQVJHOkNEIjogLjEsCiAgICAgICAgICAgICJBUkc6TkUiOiAtLjEsCiAgICAgICAgICAgICJBUkc6Q1oiOiAuNSwKICAgICAgICAgICAgIkFSRzpOSDEiOiAuMjUsCiAgICAgICAgICAgICJBUkc6TkgyIjogLjI1LAogICAgICAgICAgICAiQVJHOkMiOiAuNiwKICAgICAgICAgICAgIkFSRzpPIjogLS41NSwKICAgICAgICAgICAgIkFTTjpOIjogLS4xNSwKICAgICAgICAgICAgIkFTTjpDQSI6IC4xLAogICAgICAgICAgICAiQVNOOkNCIjogMCwKICAgICAgICAgICAgIkFTTjpDRyI6IC41NSwKICAgICAgICAgICAgIkFTTjpPRDEiOiAtLjU1LAogICAgICAgICAgICAiQVNOOk5EMiI6IDAsCiAgICAgICAgICAgICJBU046QyI6IC42LAogICAgICAgICAgICAiQVNOOk8iOiAtLjU1LAogICAgICAgICAgICAiQVNQOk4iOiAtLjE1LAogICAgICAgICAgICAiQVNQOkNBIjogLjEsCiAgICAgICAgICAgICJBU1A6Q0IiOiAwLAogICAgICAgICAgICAiQVNQOkNHIjogLjE0LAogICAgICAgICAgICAiQVNQOk9EMSI6IC0uNTcsCiAgICAgICAgICAgICJBU1A6T0QyIjogLS41NywKICAgICAgICAgICAgIkFTUDpDIjogLjYsCiAgICAgICAgICAgICJBU1A6TyI6IC0uNTUsCiAgICAgICAgICAgICJDWVM6TiI6IC0uMTUsCiAgICAgICAgICAgICJDWVM6Q0EiOiAuMSwKICAgICAgICAgICAgIkNZUzpDQiI6IC4xOSwKICAgICAgICAgICAgIkNZUzpTRyI6IC0uMTksCiAgICAgICAgICAgICJDWVM6QyI6IC42LAogICAgICAgICAgICAiQ1lTOk8iOiAtLjU1LAogICAgICAgICAgICAiR0xOOk4iOiAtLjE1LAogICAgICAgICAgICAiR0xOOkNBIjogLjEsCiAgICAgICAgICAgICJHTE46Q0IiOiAwLAogICAgICAgICAgICAiR0xOOkNHIjogMCwKICAgICAgICAgICAgIkdMTjpDRCI6IC41NSwKICAgICAgICAgICAgIkdMTjpPRTEiOiAtLjU1LAogICAgICAgICAgICAiR0xOOk5FMiI6IDAsCiAgICAgICAgICAgICJHTE46QyI6IC42LAogICAgICAgICAgICAiR0xOOk8iOiAtLjU1LAogICAgICAgICAgICAiR0xVOk4iOiAtLjE1LAogICAgICAgICAgICAiR0xVOkNBIjogLjEsCiAgICAgICAgICAgICJHTFU6Q0IiOiAwLAogICAgICAgICAgICAiR0xVOkNHIjogMCwKICAgICAgICAgICAgIkdMVTpDRCI6IC4xNCwKICAgICAgICAgICAgIkdMVTpPRTEiOiAtLjU3LAogICAgICAgICAgICAiR0xVOk9FMiI6IC0uNTcsCiAgICAgICAgICAgICJHTFU6QyI6IC42LAogICAgICAgICAgICAiR0xVOk8iOiAtLjU1LAogICAgICAgICAgICAiR0xZOk4iOiAtLjE1LAogICAgICAgICAgICAiR0xZOkNBIjogLjEsCiAgICAgICAgICAgICJHTFk6QyI6IC42LAogICAgICAgICAgICAiR0xZOk8iOiAtLjU1LAogICAgICAgICAgICAiSElTOk4iOiAtLjE1LAogICAgICAgICAgICAiSElTOkNBIjogLjEsCiAgICAgICAgICAgICJISVM6Q0IiOiAwLAogICAgICAgICAgICAiSElTOkNHIjogLjEsCiAgICAgICAgICAgICJISVM6TkQxIjogLS4xLAogICAgICAgICAgICAiSElTOkNEMiI6IC4xLAogICAgICAgICAgICAiSElTOk5FMiI6IC0uNCwKICAgICAgICAgICAgIkhJUzpDRTEiOiAuMywKICAgICAgICAgICAgIkhJUzpDIjogLjYsCiAgICAgICAgICAgICJISVM6TyI6IC0uNTUsCiAgICAgICAgICAgICJJTEU6TiI6IC0uMTUsCiAgICAgICAgICAgICJJTEU6Q0EiOiAuMSwKICAgICAgICAgICAgIklMRTpDQiI6IDAsCiAgICAgICAgICAgICJJTEU6Q0cyIjogMCwKICAgICAgICAgICAgIklMRTpDRzEiOiAwLAogICAgICAgICAgICAiSUxFOkNEIjogMCwKICAgICAgICAgICAgIklMRTpDIjogLjYsCiAgICAgICAgICAgICJJTEU6TyI6IC0uNTUsCiAgICAgICAgICAgICJMRVU6TiI6IC0uMTUsCiAgICAgICAgICAgICJMRVU6Q0EiOiAuMSwKICAgICAgICAgICAgIkxFVTpDQiI6IDAsCiAgICAgICAgICAgICJMRVU6Q0ciOiAwLAogICAgICAgICAgICAiTEVVOkNEMSI6IDAsCiAgICAgICAgICAgICJMRVU6Q0QyIjogMCwKICAgICAgICAgICAgIkxFVTpDIjogLjYsCiAgICAgICAgICAgICJMRVU6TyI6IC0uNTUsCiAgICAgICAgICAgICJMWVM6TiI6IC0uMTUsCiAgICAgICAgICAgICJMWVM6Q0EiOiAuMSwKICAgICAgICAgICAgIkxZUzpDQiI6IDAsCiAgICAgICAgICAgICJMWVM6Q0ciOiAwLAogICAgICAgICAgICAiTFlTOkNEIjogMCwKICAgICAgICAgICAgIkxZUzpDRSI6IC4yNSwKICAgICAgICAgICAgIkxZUzpOWiI6IC43NSwKICAgICAgICAgICAgIkxZUzpDIjogLjYsCiAgICAgICAgICAgICJMWVM6TyI6IC0uNTUsCiAgICAgICAgICAgICJNRVQ6TiI6IC0uMTUsCiAgICAgICAgICAgICJNRVQ6Q0EiOiAuMSwKICAgICAgICAgICAgIk1FVDpDQiI6IDAsCiAgICAgICAgICAgICJNRVQ6Q0ciOiAuMDYsCiAgICAgICAgICAgICJNRVQ6U0QiOiAtLjEyLAogICAgICAgICAgICAiTUVUOkNFIjogLjA2LAogICAgICAgICAgICAiTUVUOkMiOiAuNiwKICAgICAgICAgICAgIk1FVDpPIjogLS41NSwKICAgICAgICAgICAgIlBIRTpOIjogLS4xNSwKICAgICAgICAgICAgIlBIRTpDQSI6IC4xLAogICAgICAgICAgICAiUEhFOkNCIjogMCwKICAgICAgICAgICAgIlBIRTpDRyI6IDAsCiAgICAgICAgICAgICJQSEU6Q0QxIjogMCwKICAgICAgICAgICAgIlBIRTpDRDIiOiAwLAogICAgICAgICAgICAiUEhFOkNFMSI6IDAsCiAgICAgICAgICAgICJQSEU6Q0UyIjogMCwKICAgICAgICAgICAgIlBIRTpDWiI6IDAsCiAgICAgICAgICAgICJQSEU6QyI6IC42LAogICAgICAgICAgICAiUEhFOk8iOiAtLjU1LAogICAgICAgICAgICAiUFJPOk4iOiAtLjI1LAogICAgICAgICAgICAiUFJPOkNEIjogLjEsCiAgICAgICAgICAgICJQUk86Q0EiOiAuMSwKICAgICAgICAgICAgIlBSTzpDQiI6IDAsCiAgICAgICAgICAgICJQUk86Q0ciOiAwLAogICAgICAgICAgICAiUFJPOkMiOiAuNiwKICAgICAgICAgICAgIlBSTzpPIjogLS41NSwKICAgICAgICAgICAgIlNFUjpOIjogLS4xNSwKICAgICAgICAgICAgIlNFUjpDQSI6IC4xLAogICAgICAgICAgICAiU0VSOkNCIjogLjI1LAogICAgICAgICAgICAiU0VSOk9HIjogLS4yNSwKICAgICAgICAgICAgIlNFUjpDIjogLjYsCiAgICAgICAgICAgICJTRVI6TyI6IC0uNTUsCiAgICAgICAgICAgICJUSFI6TiI6IC0uMTUsCiAgICAgICAgICAgICJUSFI6Q0EiOiAuMSwKICAgICAgICAgICAgIlRIUjpDQiI6IC4yNSwKICAgICAgICAgICAgIlRIUjpPRzEiOiAtLjI1LAogICAgICAgICAgICAiVEhSOkNHMiI6IDAsCiAgICAgICAgICAgICJUSFI6QyI6IC42LAogICAgICAgICAgICAiVEhSOk8iOiAtLjU1LAogICAgICAgICAgICAiVFJQOk4iOiAtLjE1LAogICAgICAgICAgICAiVFJQOkNBIjogLjEsCiAgICAgICAgICAgICJUUlA6Q0IiOiAwLAogICAgICAgICAgICAiVFJQOkNHIjogLS4wMywKICAgICAgICAgICAgIlRSUDpDRDIiOiAuMSwKICAgICAgICAgICAgIlRSUDpDRTIiOiAtLjA0LAogICAgICAgICAgICAiVFJQOkNFMyI6IC0uMDMsCiAgICAgICAgICAgICJUUlA6Q0QxIjogLjA2LAogICAgICAgICAgICAiVFJQOk5FMSI6IC0uMDYsCiAgICAgICAgICAgICJUUlA6Q1oyIjogMCwKICAgICAgICAgICAgIlRSUDpDWjMiOiAwLAogICAgICAgICAgICAiVFJQOkNIMiI6IDAsCiAgICAgICAgICAgICJUUlA6QyI6IC42LAogICAgICAgICAgICAiVFJQOk8iOiAtLjU1LAogICAgICAgICAgICAiVFlSOk4iOiAtLjE1LAogICAgICAgICAgICAiVFlSOkNBIjogLjEsCiAgICAgICAgICAgICJUWVI6Q0IiOiAwLAogICAgICAgICAgICAiVFlSOkNHIjogMCwKICAgICAgICAgICAgIlRZUjpDRDEiOiAwLAogICAgICAgICAgICAiVFlSOkNFMSI6IDAsCiAgICAgICAgICAgICJUWVI6Q0QyIjogMCwKICAgICAgICAgICAgIlRZUjpDRTIiOiAwLAogICAgICAgICAgICAiVFlSOkNaIjogLjI1LAogICAgICAgICAgICAiVFlSOk9IIjogLS4yNSwKICAgICAgICAgICAgIlRZUjpDIjogLjYsCiAgICAgICAgICAgICJUWVI6TyI6IC0uNTUsCiAgICAgICAgICAgICJWQUw6TiI6IC0uMTUsCiAgICAgICAgICAgICJWQUw6Q0EiOiAuMSwKICAgICAgICAgICAgIlZBTDpDQiI6IDAsCiAgICAgICAgICAgICJWQUw6Q0cxIjogMCwKICAgICAgICAgICAgIlZBTDpDRzIiOiAwLAogICAgICAgICAgICAiVkFMOkMiOiAuNiwKICAgICAgICAgICAgIlZBTDpPIjogLS41NQogICAgICAgICAgfTsKICAgICAgICAgIGZ1bmN0aW9uIGwoZSwgdCkgewogICAgICAgICAgICBpZiAoKCF0IHx8IHZvaWQgMCA9PT0gZS5wYXJ0aWFsQ2hhcmdlKSAmJiBlLnJlc24gJiYgZS5hdG9tKSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBlLnJlc24gKyAiOiIgKyBlLmF0b207CiAgICAgICAgICAgICAgZS5wcm9wZXJ0aWVzLnBhcnRpYWxDaGFyZ2UgPSBvW3JdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgaCA9IHIoMjY0MCksCiAgICAgICAgICAgIGMgPSByKDk2NTIpLAogICAgICAgICAgICB1ID0gcigzMzUxKSwKICAgICAgICAgICAgZiA9IHIoOTAwNSksCiAgICAgICAgICAgIHAgPSByKDkxOTIpLAogICAgICAgICAgICBnID0gcig3MzIzKSwKICAgICAgICAgICAgdiA9IHIoMTQ5NiksCiAgICAgICAgICAgIF8gPSByKDg3ODMpLAogICAgICAgICAgICB5ID0gcig0NDA2KSwKICAgICAgICAgICAgYiA9IHIoNjE2MyksCiAgICAgICAgICAgIHcgPSByKDIxMTYpLAogICAgICAgICAgICB4ID0gcig5MjMwKSwKICAgICAgICAgICAgQSA9IHIoOTE1OCk7CiAgICAgICAgICB3aW5kb3cgJiYgKHdpbmRvdy4kM0Rtb2wgPSB0KTsKICAgICAgICB9LAogICAgICAgIDk3MjogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgci5yKHQpLCByLmQodCwgewogICAgICAgICAgICBDVUJFOiBmdW5jdGlvbiBDVUJFKCkgewogICAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig3NjkzKSwKICAgICAgICAgICAgYSA9IHIoMzkyMCk7CiAgICAgICAgICB2YXIgbiA9IHsKICAgICAgICAgICAgMTogIkgiLAogICAgICAgICAgICAyOiAiSGUiLAogICAgICAgICAgICAzOiAiTGkiLAogICAgICAgICAgICA0OiAiQmUiLAogICAgICAgICAgICA1OiAiQiIsCiAgICAgICAgICAgIDY6ICJDIiwKICAgICAgICAgICAgNzogIk4iLAogICAgICAgICAgICA4OiAiTyIsCiAgICAgICAgICAgIDk6ICJGIiwKICAgICAgICAgICAgMTA6ICJOZSIsCiAgICAgICAgICAgIDExOiAiTmEiLAogICAgICAgICAgICAxMjogIk1nIiwKICAgICAgICAgICAgMTM6ICJBbCIsCiAgICAgICAgICAgIDE0OiAiU2kiLAogICAgICAgICAgICAxNTogIlAiLAogICAgICAgICAgICAxNjogIlMiLAogICAgICAgICAgICAxNzogIkNsIiwKICAgICAgICAgICAgMTg6ICJBciIsCiAgICAgICAgICAgIDE5OiAiSyIsCiAgICAgICAgICAgIDIwOiAiQ2EiLAogICAgICAgICAgICAyMTogIlNjIiwKICAgICAgICAgICAgMjI6ICJUaSIsCiAgICAgICAgICAgIDIzOiAiViIsCiAgICAgICAgICAgIDI0OiAiQ3IiLAogICAgICAgICAgICAyNTogIk1uIiwKICAgICAgICAgICAgMjY6ICJGZSIsCiAgICAgICAgICAgIDI3OiAiQ28iLAogICAgICAgICAgICAyODogIk5pIiwKICAgICAgICAgICAgMjk6ICJDdSIsCiAgICAgICAgICAgIDMwOiAiWm4iLAogICAgICAgICAgICAzMTogIkdhIiwKICAgICAgICAgICAgMzI6ICJHZSIsCiAgICAgICAgICAgIDMzOiAiQXMiLAogICAgICAgICAgICAzNDogIlNlIiwKICAgICAgICAgICAgMzU6ICJCciIsCiAgICAgICAgICAgIDM2OiAiS3IiLAogICAgICAgICAgICAzNzogIlJiIiwKICAgICAgICAgICAgMzg6ICJTciIsCiAgICAgICAgICAgIDM5OiAiWSIsCiAgICAgICAgICAgIDQwOiAiWnIiLAogICAgICAgICAgICA0MTogIk5iIiwKICAgICAgICAgICAgNDI6ICJNbyIsCiAgICAgICAgICAgIDQzOiAiVGMiLAogICAgICAgICAgICA0NDogIlJ1IiwKICAgICAgICAgICAgNDU6ICJSaCIsCiAgICAgICAgICAgIDQ2OiAiUGQiLAogICAgICAgICAgICA0NzogIkFnIiwKICAgICAgICAgICAgNDg6ICJDZCIsCiAgICAgICAgICAgIDQ5OiAiSW4iLAogICAgICAgICAgICA1MDogIlNuIiwKICAgICAgICAgICAgNTE6ICJTYiIsCiAgICAgICAgICAgIDUyOiAiVGUiLAogICAgICAgICAgICA1MzogIkkiLAogICAgICAgICAgICA1NDogIlhlIiwKICAgICAgICAgICAgNTU6ICJDcyIsCiAgICAgICAgICAgIDU2OiAiQmEiLAogICAgICAgICAgICA3MTogIkx1IiwKICAgICAgICAgICAgNzI6ICJIZiIsCiAgICAgICAgICAgIDczOiAiVGEiLAogICAgICAgICAgICA3NDogIlciLAogICAgICAgICAgICA3NTogIlJlIiwKICAgICAgICAgICAgNzY6ICJPcyIsCiAgICAgICAgICAgIDc3OiAiSXIiLAogICAgICAgICAgICA3ODogIlB0IiwKICAgICAgICAgICAgNzk6ICJBdSIsCiAgICAgICAgICAgIDgwOiAiSGciLAogICAgICAgICAgICA4MTogIlRsIiwKICAgICAgICAgICAgODI6ICJQYiIsCiAgICAgICAgICAgIDgzOiAiQmkiLAogICAgICAgICAgICA4NDogIlBvIiwKICAgICAgICAgICAgODU6ICJBdCIsCiAgICAgICAgICAgIDg2OiAiUm4iLAogICAgICAgICAgICA4NzogIkZyIiwKICAgICAgICAgICAgODg6ICJSYSIsCiAgICAgICAgICAgIDEwNDogIlJmIiwKICAgICAgICAgICAgMTA1OiAiRGIiLAogICAgICAgICAgICAxMDY6ICJTZyIsCiAgICAgICAgICAgIDEwNzogIkJoIiwKICAgICAgICAgICAgMTA4OiAiSHMiLAogICAgICAgICAgICAxMDk6ICJNdCIsCiAgICAgICAgICAgIDExMDogIkRzIiwKICAgICAgICAgICAgMTExOiAiUmciLAogICAgICAgICAgICAxMTI6ICJDbiIsCiAgICAgICAgICAgIDExMzogIk5oIiwKICAgICAgICAgICAgMTE0OiAiRmwiLAogICAgICAgICAgICAxMTU6ICJNYyIsCiAgICAgICAgICAgIDExNjogIkx2IiwKICAgICAgICAgICAgMTE3OiAiVHMiLAogICAgICAgICAgICAxMTg6ICJPZyIsCiAgICAgICAgICAgIDU3OiAiTGEiLAogICAgICAgICAgICA1ODogIkNlIiwKICAgICAgICAgICAgNTk6ICJQciIsCiAgICAgICAgICAgIDYwOiAiTmQiLAogICAgICAgICAgICA2MTogIlBtIiwKICAgICAgICAgICAgNjI6ICJTbSIsCiAgICAgICAgICAgIDYzOiAiRXUiLAogICAgICAgICAgICA2NDogIkdkIiwKICAgICAgICAgICAgNjU6ICJUYiIsCiAgICAgICAgICAgIDY2OiAiRHkiLAogICAgICAgICAgICA2NzogIkhvIiwKICAgICAgICAgICAgNjg6ICJFciIsCiAgICAgICAgICAgIDY5OiAiVG0iLAogICAgICAgICAgICA3MDogIlliIiwKICAgICAgICAgICAgODk6ICJBYyIsCiAgICAgICAgICAgIDkwOiAiVGgiLAogICAgICAgICAgICA5MTogIlBhIiwKICAgICAgICAgICAgOTI6ICJVIiwKICAgICAgICAgICAgOTM6ICJOcCIsCiAgICAgICAgICAgIDk0OiAiUHUiLAogICAgICAgICAgICA5NTogIkFtIiwKICAgICAgICAgICAgOTY6ICJDbSIsCiAgICAgICAgICAgIDk3OiAiQmsiLAogICAgICAgICAgICA5ODogIkNmIiwKICAgICAgICAgICAgOTk6ICJFcyIsCiAgICAgICAgICAgIDEwMDogIkZtIiwKICAgICAgICAgICAgMTAxOiAiTWQiLAogICAgICAgICAgICAxMDI6ICJObyIKICAgICAgICAgIH07CiAgICAgICAgICBmdW5jdGlvbiBvKGUsIHQpIHsKICAgICAgICAgICAgdCA9IHQgfHwge307CiAgICAgICAgICAgIHZhciByID0gW1tdXSwKICAgICAgICAgICAgICBvID0gZS5zcGxpdCgvXHI/XG4vKSwKICAgICAgICAgICAgICBsID0gdm9pZCAwID09PSB0LmFzc2lnbkJvbmRzIHx8IHQuYXNzaWduQm9uZHM7CiAgICAgICAgICAgIGlmIChvLmxlbmd0aCA8IDYpIHJldHVybiByOwogICAgICAgICAgICB2YXIgaCA9IG9bMl0ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpLAogICAgICAgICAgICAgIGMgPSBNYXRoLmFicyhwYXJzZUZsb2F0KGhbMF0pKTsKICAgICAgICAgICAgdmFyIHUgPSB7fTsKICAgICAgICAgICAgdmFyIGYgPSB1Lm9yaWdpbiA9IG5ldyBzLlZlY3RvcjMocGFyc2VGbG9hdChoWzFdKSwgcGFyc2VGbG9hdChoWzJdKSwgcGFyc2VGbG9hdChoWzNdKSk7CiAgICAgICAgICAgIGggPSBvWzNdLnJlcGxhY2UoL15ccysvLCAiIikucmVwbGFjZSgvXHMrL2csICIgIikuc3BsaXQoIiAiKTsKICAgICAgICAgICAgdmFyIHAgPSAoaCA9IG9bM10ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpKVswXSA+IDAgPyAuNTI5MTc3IDogMTsKICAgICAgICAgICAgZi5tdWx0aXBseVNjYWxhcihwKTsKICAgICAgICAgICAgdmFyIGcgPSBNYXRoLmFicyhoWzBdKSwKICAgICAgICAgICAgICB2ID0gbmV3IHMuVmVjdG9yMyhwYXJzZUZsb2F0KGhbMV0pLCBwYXJzZUZsb2F0KGhbMl0pLCBwYXJzZUZsb2F0KGhbM10pKS5tdWx0aXBseVNjYWxhcihwKTsKICAgICAgICAgICAgaCA9IG9bNF0ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpOwogICAgICAgICAgICB2YXIgXyA9IE1hdGguYWJzKGhbMF0pLAogICAgICAgICAgICAgIHkgPSBuZXcgcy5WZWN0b3IzKHBhcnNlRmxvYXQoaFsxXSksIHBhcnNlRmxvYXQoaFsyXSksIHBhcnNlRmxvYXQoaFszXSkpLm11bHRpcGx5U2NhbGFyKHApOwogICAgICAgICAgICBoID0gb1s1XS5yZXBsYWNlKC9eXHMrLywgIiIpLnJlcGxhY2UoL1xzKy9nLCAiICIpLnNwbGl0KCIgIik7CiAgICAgICAgICAgIHZhciBiID0gTWF0aC5hYnMoaFswXSksCiAgICAgICAgICAgICAgdyA9IG5ldyBzLlZlY3RvcjMocGFyc2VGbG9hdChoWzFdKSwgcGFyc2VGbG9hdChoWzJdKSwgcGFyc2VGbG9hdChoWzNdKSkubXVsdGlwbHlTY2FsYXIocCk7CiAgICAgICAgICAgIGlmICh1LnNpemUgPSB7CiAgICAgICAgICAgICAgeDogZywKICAgICAgICAgICAgICB5OiBfLAogICAgICAgICAgICAgIHo6IGIKICAgICAgICAgICAgfSwgdS51bml0ID0gbmV3IHMuVmVjdG9yMyh2LngsIHkueSwgdy56KSwgMCAhPSB2LnkgfHwgMCAhPSB2LnogfHwgMCAhPSB5LnggfHwgMCAhPSB5LnogfHwgMCAhPSB3LnggfHwgMCAhPSB3LnkpIHsKICAgICAgICAgICAgICB1Lm1hdHJpeDQgPSBuZXcgcy5NYXRyaXg0KHYueCwgeS54LCB3LngsIDAsIHYueSwgeS55LCB3LnksIDAsIHYueiwgeS56LCB3LnosIDAsIDAsIDAsIDAsIDEpOwogICAgICAgICAgICAgIHZhciBfZTEwNCA9IG5ldyBzLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oZi54LCBmLnksIGYueik7CiAgICAgICAgICAgICAgdS5tYXRyaXg0ID0gdS5tYXRyaXg0Lm11bHRpcGx5TWF0cmljZXMoX2UxMDQsIHUubWF0cml4NCksIHUubWF0cml4ID0gdS5tYXRyaXg0Lm1hdHJpeDNGcm9tVG9wTGVmdCgpLCB1Lm9yaWdpbiA9IG5ldyBzLlZlY3RvcjMoMCwgMCwgMCksIHUudW5pdCA9IG5ldyBzLlZlY3RvcjMoMSwgMSwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgci5tb2RlbERhdGEgPSBbewogICAgICAgICAgICAgIGNyeXN0OiB1CiAgICAgICAgICAgIH1dLCBvID0gby5zcGxpY2UoNiwgYyk7CiAgICAgICAgICAgIGZvciAodmFyIHggPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLCBBID0geCArIG8ubGVuZ3RoLCBDID0geDsgQyA8IEE7ICsrQykgewogICAgICAgICAgICAgIHZhciBTID0ge307CiAgICAgICAgICAgICAgUy5zZXJpYWwgPSBDOwogICAgICAgICAgICAgIHZhciBNID0gb1tDIC0geF0ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpOwogICAgICAgICAgICAgIFMuZWxlbSA9IG5bTVswXV0sIFMueCA9IHBhcnNlRmxvYXQoTVsyXSkgKiBwLCBTLnkgPSBwYXJzZUZsb2F0KE1bM10pICogcCwgUy56ID0gcGFyc2VGbG9hdChNWzRdKSAqIHAsIFMuaGV0ZmxhZyA9ICEwLCBTLmJvbmRzID0gW10sIFMuYm9uZE9yZGVyID0gW10sIFMucHJvcGVydGllcyA9IHt9LCByW3IubGVuZ3RoIC0gMV0ucHVzaChTKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobCkgZm9yICh2YXIgX2UxMDUgPSAwOyBfZTEwNSA8IHIubGVuZ3RoOyBfZTEwNSsrKSAoMCwgYS5hc3NpZ25Cb25kcykocltfZTEwNV0pOwogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDU1OTE6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgVkFTUDogZnVuY3Rpb24gVkFTUCgpIHsKICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcyA9IHIoNzY5Myk7CiAgICAgICAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBbW11dLAogICAgICAgICAgICAgIHIgPSB7fSwKICAgICAgICAgICAgICBhID0gZS5yZXBsYWNlKC9eXHMrLywgIiIpLnNwbGl0KC9ccj9cbi8pOwogICAgICAgICAgICBpZiAoYS5sZW5ndGggPCAzKSByZXR1cm4gdDsKICAgICAgICAgICAgaWYgKCFhWzFdLm1hdGNoKC9cZCsvKSkgcmV0dXJuIGNvbnNvbGUubG9nKCJXYXJuaW5nOiBzZWNvbmQgbGluZSBvZiB0aGUgdmFzcCBzdHJ1Y3R1cmUgZmlsZSBtdXN0IGJlIGEgbnVtYmVyIiksIHQ7CiAgICAgICAgICAgIGlmIChyLmxlbmd0aCA9IHBhcnNlRmxvYXQoYVsxXSksIHIubGVuZ3RoIDwgMCkgcmV0dXJuIGNvbnNvbGUubG9nKCJXYXJuaW5nOiBWYXNwIGltcGxlbWVudGF0aW9uIGZvciBuZWdhdGl2ZSBsYXR0aWNlIGxlbmd0aHMgaXMgbm90IHlldCBhdmFpbGFibGUiKSwgdDsKICAgICAgICAgICAgci54VmVjID0gbmV3IEZsb2F0MzJBcnJheShhWzJdLnJlcGxhY2UoL15ccysvLCAiIikuc3BsaXQoL1xzKy8pKSwgci55VmVjID0gbmV3IEZsb2F0MzJBcnJheShhWzNdLnJlcGxhY2UoL15ccysvLCAiIikuc3BsaXQoL1xzKy8pKSwgci56VmVjID0gbmV3IEZsb2F0MzJBcnJheShhWzRdLnJlcGxhY2UoL15ccysvLCAiIikuc3BsaXQoL1xzKy8pKTsKICAgICAgICAgICAgdmFyIG4gPSBuZXcgcy5NYXRyaXgzKHIueFZlY1swXSwgci54VmVjWzFdLCByLnhWZWNbMl0sIHIueVZlY1swXSwgci55VmVjWzFdLCByLnlWZWNbMl0sIHIuelZlY1swXSwgci56VmVjWzFdLCByLnpWZWNbMl0pOwogICAgICAgICAgICBuLm11bHRpcGx5U2NhbGFyKHIubGVuZ3RoKSwgdC5tb2RlbERhdGEgPSBbewogICAgICAgICAgICAgIHN5bW1ldHJpZXM6IFtdLAogICAgICAgICAgICAgIGNyeXN0OiB7CiAgICAgICAgICAgICAgICBtYXRyaXg6IG4KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dOwogICAgICAgICAgICB2YXIgbyA9IGFbNV0ucmVwbGFjZSgvXHMrLywgIiIpLnJlcGxhY2UoL1xzKyQvLCAiIikuc3BsaXQoL1xzKy8pLAogICAgICAgICAgICAgIGwgPSBuZXcgSW50MTZBcnJheShhWzZdLnJlcGxhY2UoL15ccysvLCAiIikuc3BsaXQoL1xzKy8pKSwKICAgICAgICAgICAgICBoID0gYVs3XS5yZXBsYWNlKC9ccysvLCAiIik7CiAgICAgICAgICAgIGlmIChoLm1hdGNoKC9DLykpIGggPSAiY2FydGVzaWFuIjtlbHNlIHsKICAgICAgICAgICAgICBpZiAoIWgubWF0Y2goL0QvKSkgcmV0dXJuIGNvbnNvbGUubG9nKCJXYXJuaW5nOiBVbmtub3duIHZhc3AgbW9kZSBpbiBQT1NDQVIgZmlsZTogbW9kZSBtdXN0IGJlIGVpdGhlciBDKGFydGVzaWFuKSBvciBEKGlyZWN0KSIpLCB0OwogICAgICAgICAgICAgIGggPSAiZGlyZWN0IjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoby5sZW5ndGggIT0gbC5sZW5ndGgpIHJldHVybiBjb25zb2xlLmxvZygiV2FybmluZzogZGVjbGFyYXRpb24gb2YgYXRvbWFyeSBzcGVjaWVzIHdyb25nOiIpLCBjb25zb2xlLmxvZyhvKSwgY29uc29sZS5sb2cobCksIHQ7CiAgICAgICAgICAgIGEuc3BsaWNlKDAsIDgpOwogICAgICAgICAgICBmb3IgKHZhciBjID0gMCwgdSA9IDAsIGYgPSBvLmxlbmd0aDsgdSA8IGY7IHUrKykgewogICAgICAgICAgICAgIGZvciAodmFyIHAgPSBvW3VdLCBnID0gMCwgdiA9IGxbdV07IGcgPCB2OyBnKyspIHsKICAgICAgICAgICAgICAgIHZhciBfID0gbmV3IEZsb2F0MzJBcnJheShhW2MgKyBnXS5yZXBsYWNlKC9eXHMrLywgIiIpLnNwbGl0KC9ccysvKSksCiAgICAgICAgICAgICAgICAgIHkgPSB7fTsKICAgICAgICAgICAgICAgIHkuZWxlbSA9IHAsICJjYXJ0ZXNpYW4iID09IGggPyAoeS54ID0gci5sZW5ndGggKiBfWzBdLCB5LnkgPSByLmxlbmd0aCAqIF9bMV0sIHkueiA9IHIubGVuZ3RoICogX1syXSkgOiAoeS54ID0gci5sZW5ndGggKiAoX1swXSAqIHIueFZlY1swXSArIF9bMV0gKiByLnlWZWNbMF0gKyBfWzJdICogci56VmVjWzBdKSwgeS55ID0gci5sZW5ndGggKiAoX1swXSAqIHIueFZlY1sxXSArIF9bMV0gKiByLnlWZWNbMV0gKyBfWzJdICogci56VmVjWzFdKSwgeS56ID0gci5sZW5ndGggKiAoX1swXSAqIHIueFZlY1syXSArIF9bMV0gKiByLnlWZWNbMl0gKyBfWzJdICogci56VmVjWzJdKSksIHkuYm9uZHMgPSBbXSwgdFswXS5wdXNoKHkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjICs9IGxbdV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAyNjQwOiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIFBhcnNlcnM6IGZ1bmN0aW9uIFBhcnNlcnMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEY7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvbmRMZW5ndGg6IGZ1bmN0aW9uIGJvbmRMZW5ndGgoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF8uYm9uZExlbmd0aDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0Qm9uZExlbmd0aDogZnVuY3Rpb24gc2V0Qm9uZExlbmd0aCgpIHsKICAgICAgICAgICAgICByZXR1cm4gXy5zZXRCb25kTGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig1NTkxKSwKICAgICAgICAgICAgYSA9IHIoOTcyKSwKICAgICAgICAgICAgbiA9IHIoNzY5MyksCiAgICAgICAgICAgIG8gPSByKDM5MjApOwogICAgICAgICAgZnVuY3Rpb24gbChlLCB0KSB7CiAgICAgICAgICAgIGZvciAodmFyIHIgPSBbW11dLCBzID0gdm9pZCAwID09PSAodCA9IHQgfHwge30pLmFzc2lnbkJvbmRzIHx8IHQuYXNzaWduQm9uZHMsIGEgPSBlLnNwbGl0KC9ccj9cbnxcci8pOyBhLmxlbmd0aCA+IDAgJiYgIShhLmxlbmd0aCA8IDMpOykgewogICAgICAgICAgICAgIHZhciBsID0gcGFyc2VJbnQoYVswXSk7CiAgICAgICAgICAgICAgaWYgKGlzTmFOKGwpIHx8IGwgPD0gMCkgYnJlYWs7CiAgICAgICAgICAgICAgaWYgKGEubGVuZ3RoIDwgbCArIDIpIGJyZWFrOwogICAgICAgICAgICAgIHZhciBoID0gL0xhdHRpY2Vccyo9XHMqWyJce1x9XShbXiJce1x9XSspWyJce1x9XVxzKi9naS5leGVjKGFbMV0pOwogICAgICAgICAgICAgIGlmIChudWxsICE9IGggJiYgaC5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IG5ldyBGbG9hdDMyQXJyYXkoaFsxXS5zcGxpdCgvXHMrLykpLAogICAgICAgICAgICAgICAgICB1ID0gbmV3IG4uTWF0cml4MyhjWzBdLCBjWzNdLCBjWzZdLCBjWzFdLCBjWzRdLCBjWzddLCBjWzJdLCBjWzVdLCBjWzhdKTsKICAgICAgICAgICAgICAgIHIubW9kZWxEYXRhID0gW3sKICAgICAgICAgICAgICAgICAgY3J5c3Q6IHsKICAgICAgICAgICAgICAgICAgICBtYXRyaXg6IHUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAodmFyIGYgPSAyLCBwID0gcltyLmxlbmd0aCAtIDFdLmxlbmd0aCwgZyA9IHAgKyBsLCB2ID0gcDsgdiA8IGc7IHYrKykgewogICAgICAgICAgICAgICAgdmFyIF8gPSBhW2YrK10ucmVwbGFjZSgvXlxzKy8sICIiKS5yZXBsYWNlKC9ccysvZywgIiAiKS5zcGxpdCgiICIpLAogICAgICAgICAgICAgICAgICB5ID0ge307CiAgICAgICAgICAgICAgICB5LnNlcmlhbCA9IHY7CiAgICAgICAgICAgICAgICB2YXIgYiA9IF9bMF07CiAgICAgICAgICAgICAgICB5LmF0b20gPSB5LmVsZW0gPSBiWzBdLnRvVXBwZXJDYXNlKCkgKyBiLnN1YnN0cigxLCAxKS50b0xvd2VyQ2FzZSgpLCB5LnggPSBwYXJzZUZsb2F0KF9bMV0pLCB5LnkgPSBwYXJzZUZsb2F0KF9bMl0pLCB5LnogPSBwYXJzZUZsb2F0KF9bM10pLCB5LmhldGZsYWcgPSAhMCwgeS5ib25kcyA9IFtdLCB5LmJvbmRPcmRlciA9IFtdLCB5LnByb3BlcnRpZXMgPSB7fSwgcltyLmxlbmd0aCAtIDFdW3ZdID0geSwgXy5sZW5ndGggPj0gNyAmJiAoeS5keCA9IHBhcnNlRmxvYXQoX1s0XSksIHkuZHkgPSBwYXJzZUZsb2F0KF9bNV0pLCB5LmR6ID0gcGFyc2VGbG9hdChfWzZdKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghdC5tdWx0aW1vZGVsKSBicmVhazsKICAgICAgICAgICAgICByLnB1c2goW10pLCBhLnNwbGljZSgwLCBmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocykgZm9yICh2YXIgX2UxMDYgPSAwOyBfZTEwNiA8IHIubGVuZ3RoOyBfZTEwNisrKSAoMCwgby5hc3NpZ25Cb25kcykocltfZTEwNl0pOwogICAgICAgICAgICBpZiAodC5vbmVtb2wpIHsKICAgICAgICAgICAgICB2YXIgdyA9IHI7CiAgICAgICAgICAgICAgKHIgPSBbXSkucHVzaCh3WzBdKTsKICAgICAgICAgICAgICBmb3IgKHZhciBfZTEwNyA9IDE7IF9lMTA3IDwgdy5sZW5ndGg7IF9lMTA3KyspIHsKICAgICAgICAgICAgICAgIHZhciBfdDEwMSA9IHJbMF0ubGVuZ3RoOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3M1MiA9IDA7IF9zNTIgPCB3W19lMTA3XS5sZW5ndGg7IF9zNTIrKykgewogICAgICAgICAgICAgICAgICB2YXIgX2EzNCA9IHdbX2UxMDddW19zNTJdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEwOCA9IDA7IF9lMTA4IDwgX2EzNC5ib25kcy5sZW5ndGg7IF9lMTA4KyspIF9hMzQuYm9uZHNbX2UxMDhdID0gX2EzNC5ib25kc1tfZTEwOF0gKyBfdDEwMTsKICAgICAgICAgICAgICAgICAgX2EzNC5pbmRleCA9IHJbMF0ubGVuZ3RoLCBfYTM0LnNlcmlhbCA9IHJbMF0ubGVuZ3RoLCByWzBdLnB1c2goX2EzNCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaChlLCB0KSB7CiAgICAgICAgICAgIHZhciByID0gIlYyMDAwIiwKICAgICAgICAgICAgICBzID0gZS5zcGxpdCgvXHI/XG58XHIvKTsKICAgICAgICAgICAgcmV0dXJuIHMubGVuZ3RoID4gMyAmJiBzWzNdLmxlbmd0aCA+IDM4ICYmIChyID0gc1szXS5zdWJzdHIoMzQsIDUpKSwgIlYyMDAwIiA9PT0gciA/IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBbW11dLAogICAgICAgICAgICAgICAgcyA9ICExOwogICAgICAgICAgICAgIGZvciAodm9pZCAwICE9PSB0LmtlZXBIICYmIChzID0gIXQua2VlcEgpOyBlLmxlbmd0aCA+IDAgJiYgIShlLmxlbmd0aCA8IDQpOykgewogICAgICAgICAgICAgICAgdmFyIGEgPSBwYXJzZUludChlWzNdLnN1YnN0cigwLCAzKSk7CiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYSkgfHwgYSA8PSAwKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciBuID0gcGFyc2VJbnQoZVszXS5zdWJzdHIoMywgMykpLAogICAgICAgICAgICAgICAgICBvID0gNDsKICAgICAgICAgICAgICAgIGlmIChlLmxlbmd0aCA8IDQgKyBhICsgbikgYnJlYWs7CiAgICAgICAgICAgICAgICB2YXIgbCwKICAgICAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICAgICAgYyA9IFtdLAogICAgICAgICAgICAgICAgICB1ID0gcltyLmxlbmd0aCAtIDFdLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgZiA9IHUgKyBhOwogICAgICAgICAgICAgICAgZm9yIChsID0gdTsgbCA8IGY7IGwrKywgbysrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBwID0ge30sCiAgICAgICAgICAgICAgICAgICAgZyA9IChoID0gZVtvXSkuc3Vic3RyKDMxLCAzKS5yZXBsYWNlKC8gL2csICIiKTsKICAgICAgICAgICAgICAgICAgcC5hdG9tID0gcC5lbGVtID0gZ1swXS50b1VwcGVyQ2FzZSgpICsgZy5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSwgIkgiID09PSBwLmVsZW0gJiYgcyB8fCAocC5zZXJpYWwgPSBsLCBjW2xdID0gcltyLmxlbmd0aCAtIDFdLmxlbmd0aCwgcC54ID0gcGFyc2VGbG9hdChoLnN1YnN0cigwLCAxMCkpLCBwLnkgPSBwYXJzZUZsb2F0KGguc3Vic3RyKDEwLCAxMCkpLCBwLnogPSBwYXJzZUZsb2F0KGguc3Vic3RyKDIwLCAxMCkpLCBwLmhldGZsYWcgPSAhMCwgcC5ib25kcyA9IFtdLCBwLmJvbmRPcmRlciA9IFtdLCBwLnByb3BlcnRpZXMgPSB7fSwgcC5pbmRleCA9IHJbci5sZW5ndGggLSAxXS5sZW5ndGgsIHJbci5sZW5ndGggLSAxXS5wdXNoKHApKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBuOyBsKyssIG8rKykgewogICAgICAgICAgICAgICAgICBoID0gZVtvXTsKICAgICAgICAgICAgICAgICAgdmFyIHYgPSBjW3BhcnNlSW50KGguc3Vic3RyKDAsIDMpKSAtIDEgKyB1XSwKICAgICAgICAgICAgICAgICAgICBfID0gY1twYXJzZUludChoLnN1YnN0cigzLCAzKSkgLSAxICsgdV0sCiAgICAgICAgICAgICAgICAgICAgeSA9IHBhcnNlRmxvYXQoaC5zdWJzdHIoNikpOwogICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHYgJiYgdm9pZCAwICE9PSBfICYmIChyW3IubGVuZ3RoIC0gMV1bdl0uYm9uZHMucHVzaChfKSwgcltyLmxlbmd0aCAtIDFdW3ZdLmJvbmRPcmRlci5wdXNoKHkpLCByW3IubGVuZ3RoIC0gMV1bX10uYm9uZHMucHVzaCh2KSwgcltyLmxlbmd0aCAtIDFdW19dLmJvbmRPcmRlci5wdXNoKHkpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghdC5tdWx0aW1vZGVsKSBicmVhazsKICAgICAgICAgICAgICAgIGZvciAodC5vbmVtb2wgfHwgci5wdXNoKFtdKTsgIiQkJCQiICE9PSBlW29dOykgbysrOwogICAgICAgICAgICAgICAgZS5zcGxpY2UoMCwgKytvKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgIH0ocywgdCkgOiAiVjMwMDAiID09PSByID8gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciA9IFtbXV0sCiAgICAgICAgICAgICAgICBzID0gITE7CiAgICAgICAgICAgICAgZm9yICh2b2lkIDAgIT09IHQua2VlcEggJiYgKHMgPSAhdC5rZWVwSCk7IGUubGVuZ3RoID4gMCAmJiAhKGUubGVuZ3RoIDwgOCkgJiYgZVs0XS5zdGFydHNXaXRoKCJNICBWMzAgQkVHSU4gQ1RBQiIpICYmIGVbNV0uc3RhcnRzV2l0aCgiTSAgVjMwIENPVU5UUyIpICYmICEoZVs1XS5sZW5ndGggPCAxNCk7KSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IGVbNV0uc3Vic3RyKDEzKS5tYXRjaCgvXFMrL2cpOwogICAgICAgICAgICAgICAgaWYgKGEubGVuZ3RoIDwgMikgYnJlYWs7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHBhcnNlSW50KGFbMF0pOwogICAgICAgICAgICAgICAgaWYgKGlzTmFOKG4pIHx8IG4gPD0gMCkgYnJlYWs7CiAgICAgICAgICAgICAgICB2YXIgbyA9IHBhcnNlSW50KGFbMV0pLAogICAgICAgICAgICAgICAgICBsID0gNzsKICAgICAgICAgICAgICAgIGlmIChlLmxlbmd0aCA8IDggKyBuICsgbykgYnJlYWs7CiAgICAgICAgICAgICAgICB2YXIgaCwKICAgICAgICAgICAgICAgICAgYyA9IFtdLAogICAgICAgICAgICAgICAgICB1ID0gcltyLmxlbmd0aCAtIDFdLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgZiA9IHUgKyBuOwogICAgICAgICAgICAgICAgZm9yIChoID0gdTsgaCA8IGY7IGgrKywgbCsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBwID0gZVtsXS5zdWJzdHIoNikubWF0Y2goL1xTKy9nKTsKICAgICAgICAgICAgICAgICAgaWYgKHAubGVuZ3RoID4gNCkgewogICAgICAgICAgICAgICAgICAgIHZhciBnID0ge30sCiAgICAgICAgICAgICAgICAgICAgICB2ID0gcFsxXS5yZXBsYWNlKC8gL2csICIiKTsKICAgICAgICAgICAgICAgICAgICBnLmF0b20gPSBnLmVsZW0gPSB2WzBdLnRvVXBwZXJDYXNlKCkgKyB2LnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpLCAiSCIgPT09IGcuZWxlbSAmJiBzIHx8IChnLnNlcmlhbCA9IGgsIGNbaF0gPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLCBnLnggPSBwYXJzZUZsb2F0KHBbMl0pLCBnLnkgPSBwYXJzZUZsb2F0KHBbM10pLCBnLnogPSBwYXJzZUZsb2F0KHBbNF0pLCBnLmhldGZsYWcgPSAhMCwgZy5ib25kcyA9IFtdLCBnLmJvbmRPcmRlciA9IFtdLCBnLnByb3BlcnRpZXMgPSB7fSwgZy5pbmRleCA9IHJbci5sZW5ndGggLSAxXS5sZW5ndGgsIHJbci5sZW5ndGggLSAxXS5wdXNoKGcpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCJNICBWMzAgRU5EIEFUT00iICE9PSBlW2xdKSBicmVhazsKICAgICAgICAgICAgICAgIGlmIChsKyssIDAgPT09IG8gfHwgIk0gIFYzMCBCRUdJTiBCT05EIiAhPT0gZVtsXSkgYnJlYWs7CiAgICAgICAgICAgICAgICBmb3IgKGwrKywgaCA9IDA7IGggPCBvOyBoKyssIGwrKykgewogICAgICAgICAgICAgICAgICB2YXIgXyA9IGVbbF0uc3Vic3RyKDYpLm1hdGNoKC9cUysvZyk7CiAgICAgICAgICAgICAgICAgIGlmIChfLmxlbmd0aCA+IDMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGNbcGFyc2VJbnQoX1syXSkgLSAxICsgdV0sCiAgICAgICAgICAgICAgICAgICAgICBiID0gY1twYXJzZUludChfWzNdKSAtIDEgKyB1XSwKICAgICAgICAgICAgICAgICAgICAgIHcgPSBwYXJzZUZsb2F0KF9bMV0pOwogICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0geSAmJiB2b2lkIDAgIT09IGIgJiYgKHJbci5sZW5ndGggLSAxXVt5XS5ib25kcy5wdXNoKGIpLCByW3IubGVuZ3RoIC0gMV1beV0uYm9uZE9yZGVyLnB1c2godyksIHJbci5sZW5ndGggLSAxXVtiXS5ib25kcy5wdXNoKHkpLCByW3IubGVuZ3RoIC0gMV1bYl0uYm9uZE9yZGVyLnB1c2godykpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIXQubXVsdGltb2RlbCkgYnJlYWs7CiAgICAgICAgICAgICAgICBmb3IgKHQub25lbW9sIHx8IHIucHVzaChbXSk7ICIkJCQkIiAhPT0gZVtsXTspIGwrKzsKICAgICAgICAgICAgICAgIGUuc3BsaWNlKDAsICsrbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICB9KHMsIHQpIDogW1tdXTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGMoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IFtbXV07CiAgICAgICAgICAgICJzdHJpbmciID09IHR5cGVvZiBlICYmIChlID0gSlNPTi5wYXJzZShlKSk7CiAgICAgICAgICAgIGZvciAodmFyIHMgPSBlLm0sIGEgPSBzWzBdLmEsIG4gPSBzWzBdLmIsIG8gPSBzWzBdLnMsIGwgPSB2b2lkIDAgIT09IHQgJiYgdm9pZCAwICE9PSB0LnBhcnNlU3R5bGUgPyB0LnBhcnNlU3R5bGUgOiB2b2lkIDAgIT09IG8sIGggPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLCBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIHsKICAgICAgICAgICAgICB2YXIgdSA9IGFbY10sCiAgICAgICAgICAgICAgICBmID0ge307CiAgICAgICAgICAgICAgZi5pZCA9IHUuaSwgZi54ID0gdS54LCBmLnkgPSB1LnksIGYueiA9IHUueiB8fCAwLCBmLmJvbmRzID0gW10sIGYuYm9uZE9yZGVyID0gW107CiAgICAgICAgICAgICAgdmFyIHAgPSB1LmwgfHwgIkMiOwogICAgICAgICAgICAgIGYuZWxlbSA9IHBbMF0udG9VcHBlckNhc2UoKSArIHAuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCksIGYuc2VyaWFsID0gcltyLmxlbmd0aCAtIDFdLmxlbmd0aCwgbCAmJiAoZi5zdHlsZSA9IG9bdS5zIHx8IDBdKSwgcltyLmxlbmd0aCAtIDFdLnB1c2goZik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgX2UxMDkgPSAwOyBfZTEwOSA8IG4ubGVuZ3RoOyBfZTEwOSsrKSB7CiAgICAgICAgICAgICAgdmFyIF90MTAyID0gbltfZTEwOV0sCiAgICAgICAgICAgICAgICBfczUzID0gX3QxMDIuYiArIGgsCiAgICAgICAgICAgICAgICBfYTM1ID0gX3QxMDIuZSArIGgsCiAgICAgICAgICAgICAgICBfbzI1ID0gX3QxMDIubyB8fCAxLAogICAgICAgICAgICAgICAgX2wxMyA9IHJbci5sZW5ndGggLSAxXVtfczUzXSwKICAgICAgICAgICAgICAgIF9jMTEgPSByW3IubGVuZ3RoIC0gMV1bX2EzNV07CiAgICAgICAgICAgICAgX2wxMy5ib25kcy5wdXNoKF9hMzUpLCBfbDEzLmJvbmRPcmRlci5wdXNoKF9vMjUpLCBfYzExLmJvbmRzLnB1c2goX3M1MyksIF9jMTEuYm9uZE9yZGVyLnB1c2goX28yNSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB1KGUsIHQpIHsKICAgICAgICAgICAgIWZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSB0IHx8IDMuMiwKICAgICAgICAgICAgICAgIHMgPSByICogciwKICAgICAgICAgICAgICAgIGEgPSBbXTsKICAgICAgICAgICAgICBmb3IgKHZhciBfdDEwMyA9IDAsIF9yNTkgPSBlLmxlbmd0aDsgX3QxMDMgPCBfcjU5OyBfdDEwMysrKSB7CiAgICAgICAgICAgICAgICBlW190MTAzXS5pbmRleCA9IF90MTAzOwogICAgICAgICAgICAgICAgdmFyIG4gPSBlW190MTAzXTsKICAgICAgICAgICAgICAgIG4uaGV0ZmxhZyB8fCAiTiIgIT09IG4uYXRvbSAmJiAiTyIgIT09IG4uYXRvbSB8fCAoYS5wdXNoKG4pLCBuLmhib25kT3RoZXIgPSBudWxsLCBuLmhib25kRGlzdGFuY2VTcSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGEuc29ydChmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUueiAtIHQuejsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmb3IgKHZhciBfZTExMCA9IDAsIF90MTA0ID0gYS5sZW5ndGg7IF9lMTEwIDwgX3QxMDQ7IF9lMTEwKyspIHsKICAgICAgICAgICAgICAgIHZhciBvID0gYVtfZTExMF07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfbjI4ID0gX2UxMTAgKyAxOyBfbjI4IDwgX3QxMDQ7IF9uMjgrKykgewogICAgICAgICAgICAgICAgICB2YXIgbCA9IGFbX24yOF0sCiAgICAgICAgICAgICAgICAgICAgaCA9IGwueiAtIG8uejsKICAgICAgICAgICAgICAgICAgaWYgKGggPiByKSBicmVhazsKICAgICAgICAgICAgICAgICAgaWYgKGwuYXRvbSAhPSBvLmF0b20pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IE1hdGguYWJzKGwueSAtIG8ueSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYyA+IHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IE1hdGguYWJzKGwueCAtIG8ueCk7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoISh1ID4gcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSB1ICogdSArIGMgKiBjICsgaCAqIGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGYgPiBzIHx8IGwuY2hhaW4gPT0gby5jaGFpbiAmJiBNYXRoLmFicyhsLnJlc2kgLSBvLnJlc2kpIDwgNCB8fCAoZiA8IG8uaGJvbmREaXN0YW5jZVNxICYmIChvLmhib25kT3RoZXIgPSBsLCBvLmhib25kRGlzdGFuY2VTcSA9IGYpLCBmIDwgbC5oYm9uZERpc3RhbmNlU3EgJiYgKGwuaGJvbmRPdGhlciA9IG8sIGwuaGJvbmREaXN0YW5jZVNxID0gZikpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfShlLCB0KTsKICAgICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgIGggPSB7fTsKICAgICAgICAgICAgZm9yIChyID0gMCwgcyA9IGUubGVuZ3RoOyByIDwgczsgcisrKSBpZiAodm9pZCAwID09PSBoWyhvID0gZVtyXSkuY2hhaW5dICYmIChoW28uY2hhaW5dID0gW10pLCBpc0Zpbml0ZShvLmhib25kRGlzdGFuY2VTcSkpIHsKICAgICAgICAgICAgICB2YXIgYyA9IG8uaGJvbmRPdGhlcjsKICAgICAgICAgICAgICB2b2lkIDAgPT09IGhbYy5jaGFpbl0gJiYgKGhbYy5jaGFpbl0gPSBbXSksIDQgPT09IE1hdGguYWJzKGMucmVzaSAtIG8ucmVzaSkgJiYgKGhbby5jaGFpbl1bby5yZXNpXSA9ICJoIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChhIGluIGgpIGZvciAobiA9IDE7IG4gPCBoW2FdLmxlbmd0aCAtIDE7IG4rKykgewogICAgICAgICAgICAgIHZhciB1ID0gaFthXVtuIC0gMV0sCiAgICAgICAgICAgICAgICBmID0gaFthXVtuICsgMV07CiAgICAgICAgICAgICAgbCA9IGhbYV1bbl0sICJoIiA9PSB1ICYmIHUgPT0gZiAmJiBsICE9IHUgJiYgKGhbYV1bbl0gPSB1KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHIgPSAwLCBzID0gZS5sZW5ndGg7IHIgPCBzOyByKyspIG8gPSBlW3JdLCBpc0Zpbml0ZShvLmhib25kRGlzdGFuY2VTcSkgJiYgImgiICE9IGhbby5jaGFpbl1bby5yZXNpXSAmJiAiaCIgIT0gby5zcyAmJiAoaFtvLmNoYWluXVtvLnJlc2ldID0gIm1heWJlc2hlZXQiKTsKICAgICAgICAgICAgZm9yICh2YXIgX3QxMDUgPSAwLCBfcjYwID0gZS5sZW5ndGg7IF90MTA1IDwgX3I2MDsgX3QxMDUrKykgaWYgKG8gPSBlW190MTA1XSwgaXNGaW5pdGUoby5oYm9uZERpc3RhbmNlU3EpICYmICJtYXliZXNoZWV0IiA9PSBoW28uY2hhaW5dW28ucmVzaV0pIHsKICAgICAgICAgICAgICB2YXIgX2UxMTEgPSBvLmhib25kT3RoZXIsCiAgICAgICAgICAgICAgICBfdDEwNiA9IGhbX2UxMTEuY2hhaW5dW19lMTExLnJlc2ldOwogICAgICAgICAgICAgICJtYXliZXNoZWV0IiAhPSBfdDEwNiAmJiAicyIgIT0gX3QxMDYgfHwgKGhbby5jaGFpbl1bby5yZXNpXSA9ICJzIiwgaFtfZTExMS5jaGFpbl1bX2UxMTEucmVzaV0gPSAicyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIF9lMTEyIGluIGgpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBfdDEwNyA9IDE7IF90MTA3IDwgaFtfZTExMl0ubGVuZ3RoIC0gMTsgX3QxMDcrKykgewogICAgICAgICAgICAgICAgdmFyIF9yNjEgPSBoW19lMTEyXVtfdDEwNyAtIDFdLAogICAgICAgICAgICAgICAgICBfczU0ID0gaFtfZTExMl1bX3QxMDcgKyAxXTsKICAgICAgICAgICAgICAgIGwgPSBoW19lMTEyXVtfdDEwN10sICJzIiA9PSBfcjYxICYmIF9yNjEgPT0gX3M1NCAmJiBsICE9IF9yNjEgJiYgKGhbX2UxMTJdW190MTA3XSA9IF9yNjEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmb3IgKHZhciBfdDEwOCA9IDA7IF90MTA4IDwgaFtfZTExMl0ubGVuZ3RoOyBfdDEwOCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgX3I2MiA9IGhbX2UxMTJdW190MTA4XTsKICAgICAgICAgICAgICAgICJoIiAhPSBfcjYyICYmICJzIiAhPSBfcjYyIHx8IGhbX2UxMTJdW190MTA4IC0gMV0gIT0gX3I2MiAmJiBoW19lMTEyXVtfdDEwOCArIDFdICE9IF9yNjIgJiYgZGVsZXRlIGhbX2UxMTJdW190MTA4XTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChyID0gMCwgcyA9IGUubGVuZ3RoOyByIDwgczsgcisrKSBsID0gaFsobyA9IGVbcl0pLmNoYWluXVtvLnJlc2ldLCBkZWxldGUgby5oYm9uZE90aGVyLCBkZWxldGUgby5oYm9uZERpc3RhbmNlU3EsIHZvaWQgMCAhPT0gbCAmJiAibWF5YmVzaGVldCIgIT0gbCAmJiAoby5zcyA9IGwsIGhbby5jaGFpbl1bby5yZXNpIC0gMV0gIT0gbCAmJiAoby5zc2JlZ2luID0gITApLCBoW28uY2hhaW5dW28ucmVzaSArIDFdICE9IGwgJiYgKG8uc3NlbmQgPSAhMCkpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZihlLCB0LCByLCBzKSB7CiAgICAgICAgICAgIHZhciBhLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgbCwKICAgICAgICAgICAgICBoID0gIXIuZHVwbGljYXRlQXNzZW1ibHlBdG9tcywKICAgICAgICAgICAgICBjID0gdC5sZW5ndGgsCiAgICAgICAgICAgICAgdSA9IGM7CiAgICAgICAgICAgIHZhciBmID0gLTE7CiAgICAgICAgICAgIGlmIChyLm5vcm1hbGl6ZUFzc2VtYmx5ICYmIHMpIHsKICAgICAgICAgICAgICB2YXIgX3I2MyA9ICgwLCBuLmNvbnZlcnNpb25NYXRyaXgzKShzLmEsIHMuYiwgcy5jLCBzLmFscGhhLCBzLmJldGEsIHMuZ2FtbWEpLAogICAgICAgICAgICAgICAgX28yNiA9IG5ldyBuLk1hdHJpeDMoKTsKICAgICAgICAgICAgICBmb3IgKF9vMjYuZ2V0SW52ZXJzZTMoX3I2MyksIGEgPSAwOyBhIDwgZS5sZW5ndGg7IGErKykgewogICAgICAgICAgICAgICAgdmFyIF9zNTUgPSBuZXcgbi5WZWN0b3IzKDAsIDAsIDApOwogICAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8IGM7IGwrKykgewogICAgICAgICAgICAgICAgICB2YXIgX3I2NCA9IG5ldyBuLlZlY3RvcjModFtsXS54LCB0W2xdLnksIHRbbF0ueik7CiAgICAgICAgICAgICAgICAgIF9yNjQuYXBwbHlNYXRyaXg0KGVbYV0pLCBfcjY0LmFwcGx5TWF0cml4MyhfbzI2KSwgX3M1NS5hZGQoX3I2NCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfczU1LmRpdmlkZVNjYWxhcihjKTsKICAgICAgICAgICAgICAgIHZhciBfaDE2ID0gW19zNTUueCwgX3M1NS55LCBfczU1LnpdOwogICAgICAgICAgICAgICAgdmFyIF91NyA9IFswLCAwLCAwXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTEzID0gMDsgX2UxMTMgPCAzOyBfZTExMysrKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyBfaDE2W19lMTEzXSA8IC0uMDAxOykgX2gxNltfZTExM10gKz0gMSwgX3U3W19lMTEzXSArPSAxOwogICAgICAgICAgICAgICAgICBmb3IgKDsgX2gxNltfZTExM10gPiAxLjAwMTspIF9oMTZbX2UxMTNdIC09IDEsIF91N1tfZTExM10gLT0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBfcDYgPSBuZXcgbi5WZWN0b3IzKF91N1swXSwgX3U3WzFdLCBfdTdbMl0pOwogICAgICAgICAgICAgICAgX3A2LmFwcGx5TWF0cml4MyhfcjYzKSwgZVthXS5pc05lYXJseUlkZW50aXR5KCkgJiYgX3A2Lmxlbmd0aFNxKCkgPiAuMDAxICYmIChmID0gYSksIGVbYV0udHJhbnNsYXRlKF9wNik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChoKSB7CiAgICAgICAgICAgICAgaWYgKGUubGVuZ3RoID4gMSkgZm9yIChhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIHsKICAgICAgICAgICAgICAgIHZhciBwID0gW107CiAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgZS5sZW5ndGg7IG8rKykgaWYgKCFlW29dLmlzTmVhcmx5SWRlbnRpdHkoKSkgewogICAgICAgICAgICAgICAgICB2YXIgZyA9IG5ldyBuLlZlY3RvcjMoKTsKICAgICAgICAgICAgICAgICAgZy5zZXQodFthXS54LCB0W2FdLnksIHRbYV0ueiksIGcuYXBwbHlNYXRyaXg0KGVbb10pLCBwLnB1c2goZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0W2FdLnN5bW1ldHJpZXMgPSBwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmb3IgKGwgPSAwOyBsIDwgYzsgbCsrKSB0W2xdLnN5bSA9IC0xOwogICAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCBlLmxlbmd0aDsgYSsrKSBpZiAoZVthXS5pc05lYXJseUlkZW50aXR5KCkgfHwgZiA9PSBhKSBmb3IgKGwgPSAwOyBsIDwgYzsgbCsrKSB0W2xdLnN5bSA9IGE7ZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgX3I2NSA9IG5ldyBuLlZlY3RvcjMoKTsKICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBjOyBsKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHYgPSBbXTsKICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IHRbbF0uYm9uZHMubGVuZ3RoOyBvKyspIHYucHVzaCh0W2xdLmJvbmRzW29dICsgdSk7CiAgICAgICAgICAgICAgICAgIF9yNjUuc2V0KHRbbF0ueCwgdFtsXS55LCB0W2xdLnopLCBfcjY1LmFwcGx5TWF0cml4NChlW2FdKTsKICAgICAgICAgICAgICAgICAgdmFyIF8gPSB7fTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSBpbiB0W2xdKSBfW3ldID0gdFtsXVt5XTsKICAgICAgICAgICAgICAgICAgXy54ID0gX3I2NS54LCBfLnkgPSBfcjY1LnksIF8ueiA9IF9yNjUueiwgXy5ib25kcyA9IHYsIF8uc3ltID0gYSwgXy5pbmRleCA9IHQubGVuZ3RoLCB0LnB1c2goXyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB1ID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChmID49IDApIHsKICAgICAgICAgICAgICAgIHZhciBfcjY2ID0gbmV3IG4uVmVjdG9yMygpOwogICAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8IGM7IGwrKykgX3I2Ni5zZXQodFtsXS54LCB0W2xdLnksIHRbbF0ueiksIF9yNjYuYXBwbHlNYXRyaXg0KGVbZl0pLCB0W2xdLnggPSBfcjY2LngsIHRbbF0ueSA9IF9yNjYueSwgdFtsXS56ID0gX3I2Ni56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlLmxlbmd0aCA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHAoZSkgewogICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgICAgICAgIHZhciByID0gW10sCiAgICAgICAgICAgICAgcyA9ICF0LmRvQXNzZW1ibHksCiAgICAgICAgICAgICAgYSA9IHIubW9kZWxEYXRhID0gW10sCiAgICAgICAgICAgICAgbCA9IHZvaWQgMCA9PT0gdC5hc3NpZ25Cb25kcyB8fCB0LmFzc2lnbkJvbmRzOwogICAgICAgICAgICBmdW5jdGlvbiBoKGUsIHQpIHsKICAgICAgICAgICAgICBmb3IgKHZhciByID0gW10sIHMgPSAwLCBhID0gMDsgYSA8IGUubGVuZ3RoOykgewogICAgICAgICAgICAgICAgZm9yICg7IGUuc3Vic3RyKGEsIHQubGVuZ3RoKSAhPT0gdCAmJiBhIDwgZS5sZW5ndGg7KSB7CiAgICAgICAgICAgICAgICAgIGlmICgiJyIgPT09IGVbYV0pIGZvciAoYSsrOyBhIDwgZS5sZW5ndGggJiYgIiciICE9PSBlW2FdOykgYSsrO2Vsc2UgaWYgKCciJyA9PT0gZVthXSkgZm9yIChhKys7IGEgPCBlLmxlbmd0aCAmJiAnIicgIT09IGVbYV07KSBhKys7CiAgICAgICAgICAgICAgICAgIGErKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIucHVzaChlLnN1YnN0cihzLCBhIC0gcykpLCBzID0gYSArPSB0Lmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGMgPSBlLnNwbGl0KC9ccj9cbnxcci8pLAogICAgICAgICAgICAgIHAgPSBbXSwKICAgICAgICAgICAgICBnID0gITE7CiAgICAgICAgICAgIGZvciAodmFyIF9lMTE0ID0gMDsgX2UxMTQgPCBjLmxlbmd0aDsgX2UxMTQrKykgewogICAgICAgICAgICAgIHZhciB2ID0gY1tfZTExNF0uc3BsaXQoIiMiKVswXTsKICAgICAgICAgICAgICBpZiAoZyA/ICI7IiA9PT0gdlswXSAmJiAoZyA9ICExKSA6ICI7IiA9PT0gdlswXSAmJiAoZyA9ICEwKSwgZyB8fCAiIiAhPT0gdikgewogICAgICAgICAgICAgICAgaWYgKCFnICYmICJfIiA9PT0gKHYgPSB2LnRyaW0oKSlbMF0pIHsKICAgICAgICAgICAgICAgICAgdmFyIF8gPSB2LnNwbGl0KC9ccy8pWzBdLmluZGV4T2YoIi4iKTsKICAgICAgICAgICAgICAgICAgaWYgKF8gPiAtMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBfZTExNSA9IHYuc3BsaXQoIiIpOwogICAgICAgICAgICAgICAgICAgIF9lMTE1W19dID0gIl8iLCB2ID0gKHYgPSBfZTExNS5qb2luKCIiKSkuc3Vic3RyKDAsIF8pICsgIl8iICsgdi5zdWJzdHIoXyArIDEpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwLnB1c2godik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIHksIGIsIHcsIHgsIEEgPSAwOyBBIDwgcC5sZW5ndGg7KSB7CiAgICAgICAgICAgICAgZm9yICg7ICFwW0FdLnN0YXJ0c1dpdGgoImRhdGFfIikgfHwgImRhdGFfZ2xvYmFsIiA9PT0gcFtBXTspIEErKzsKICAgICAgICAgICAgICBBKys7CiAgICAgICAgICAgICAgZm9yICh2YXIgQyA9IHt9OyBBIDwgcC5sZW5ndGggJiYgIXBbQV0uc3RhcnRzV2l0aCgiZGF0YV8iKTspIGlmICh2b2lkIDAgPT09IHBbQV1bMF0pIEErKztlbHNlIGlmICgiXyIgPT09IHBbQV1bMF0pIHsKICAgICAgICAgICAgICAgIHZhciBTID0gcFtBXS5zcGxpdCgvXHMvKVswXS50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgICAgICBNID0gQ1tTXSA9IENbU10gfHwgW10sCiAgICAgICAgICAgICAgICAgIHogPSBwW0FdLnN1YnN0cihwW0FdLmluZGV4T2YoUykgKyBTLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBpZiAoIiIgPT09IHopIHsKICAgICAgICAgICAgICAgICAgaWYgKCI7IiA9PT0gcFsrK0FdWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIEwgPSBwW0FdLnN1YnN0cigxKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKEErKzsgIjsiICE9PSBwW0FdOykgTCA9IEwgKyAiXG4iICsgcFtBXSwgQSsrOwogICAgICAgICAgICAgICAgICAgIE0ucHVzaChMKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIE0ucHVzaChwW0FdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBNLnB1c2goei50cmltKCkpOwogICAgICAgICAgICAgICAgQSsrOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoImxvb3BfIiA9PT0gcFtBXS5zdWJzdHIoMCwgNSkpIHsKICAgICAgICAgICAgICAgIEErKzsKICAgICAgICAgICAgICAgIGZvciAodmFyIEUgPSBbXTsgIiIgPT09IHBbQV0gfHwgIl8iID09PSBwW0FdWzBdOykgewogICAgICAgICAgICAgICAgICBpZiAoIiIgIT09IHBbQV0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX2UxMTYgPSBwW0FdLnNwbGl0KC9ccy8pWzBdLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICAgICBfdDEwOSA9IENbX2UxMTZdID0gQ1tfZTExNl0gfHwgW107CiAgICAgICAgICAgICAgICAgICAgRS5wdXNoKF90MTA5KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBBKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBUID0gMDsgQSA8IHAubGVuZ3RoICYmICJfIiAhPT0gcFtBXVswXSAmJiAhcFtBXS5zdGFydHNXaXRoKCJsb29wXyIpICYmICFwW0FdLnN0YXJ0c1dpdGgoImRhdGFfIik7KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTExNyA9IGgocFtBXSwgIiAiKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBfZTExNy5sZW5ndGg7IGsrKykgIiIgIT09IF9lMTE3W2tdICYmIChFW1RdLnB1c2goX2UxMTdba10pLCBUID0gKFQgKyAxKSAlIEUubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgQSsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSBBKys7CiAgICAgICAgICAgICAgYS5wdXNoKHsKICAgICAgICAgICAgICAgIHN5bW1ldHJpZXM6IFtdCiAgICAgICAgICAgICAgfSksIHIucHVzaChbXSk7CiAgICAgICAgICAgICAgdmFyIEksCiAgICAgICAgICAgICAgICBPID0gdm9pZCAwICE9PSBDLl9hdG9tX3NpdGVfaWQgPyBDLl9hdG9tX3NpdGVfaWQubGVuZ3RoIDogQy5fYXRvbV9zaXRlX2xhYmVsLmxlbmd0aDsKICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBDLl9jZWxsX2xlbmd0aF9hKSB7CiAgICAgICAgICAgICAgICB2YXIgRCA9IHBhcnNlRmxvYXQoQy5fY2VsbF9sZW5ndGhfYSksCiAgICAgICAgICAgICAgICAgIEYgPSBwYXJzZUZsb2F0KEMuX2NlbGxfbGVuZ3RoX2IpLAogICAgICAgICAgICAgICAgICBSID0gcGFyc2VGbG9hdChDLl9jZWxsX2xlbmd0aF9jKSwKICAgICAgICAgICAgICAgICAgUCA9IHBhcnNlRmxvYXQoQy5fY2VsbF9hbmdsZV9hbHBoYSkgfHwgOTAsCiAgICAgICAgICAgICAgICAgIEcgPSBwYXJzZUZsb2F0KEMuX2NlbGxfYW5nbGVfYmV0YSkgfHwgOTAsCiAgICAgICAgICAgICAgICAgIEIgPSBwYXJzZUZsb2F0KEMuX2NlbGxfYW5nbGVfZ2FtbWEpIHx8IDkwOwogICAgICAgICAgICAgICAgSSA9ICgwLCBuLmNvbnZlcnNpb25NYXRyaXgzKShELCBGLCBSLCBQLCBHLCBCKSwgYVthLmxlbmd0aCAtIDFdLmNyeXN0ID0gewogICAgICAgICAgICAgICAgICBhOiBELAogICAgICAgICAgICAgICAgICBiOiBGLAogICAgICAgICAgICAgICAgICBjOiBSLAogICAgICAgICAgICAgICAgICBhbHBoYTogUCwKICAgICAgICAgICAgICAgICAgYmV0YTogRywKICAgICAgICAgICAgICAgICAgZ2FtbWE6IEIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAodmFyIFUgPSAwOyBVIDwgTzsgVSsrKSBpZiAodm9pZCAwID09PSBDLl9hdG9tX3NpdGVfZ3JvdXBfcGRiIHx8ICJURVIiICE9PSBDLl9hdG9tX3NpdGVfZ3JvdXBfcGRiW1VdKSB7CiAgICAgICAgICAgICAgICB2YXIgTiA9IHt9OwogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gQy5fYXRvbV9zaXRlX2NhcnRuX3gpIE4ueCA9IHBhcnNlRmxvYXQoQy5fYXRvbV9zaXRlX2NhcnRuX3hbVV0pLCBOLnkgPSBwYXJzZUZsb2F0KEMuX2F0b21fc2l0ZV9jYXJ0bl95W1VdKSwgTi56ID0gcGFyc2VGbG9hdChDLl9hdG9tX3NpdGVfY2FydG5feltVXSk7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBWID0gKHkgPSBJLCBiID0gcGFyc2VGbG9hdChDLl9hdG9tX3NpdGVfZnJhY3RfeFtVXSksIHcgPSBwYXJzZUZsb2F0KEMuX2F0b21fc2l0ZV9mcmFjdF95W1VdKSwgeCA9IHBhcnNlRmxvYXQoQy5fYXRvbV9zaXRlX2ZyYWN0X3pbVV0pLCBuZXcgbi5WZWN0b3IzKGIsIHcsIHgpLmFwcGx5TWF0cml4Myh5KSk7CiAgICAgICAgICAgICAgICAgIE4ueCA9IFYueCwgTi55ID0gVi55LCBOLnogPSBWLno7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBOLmNoYWluID0gQy5fYXRvbV9zaXRlX2F1dGhfYXN5bV9pZCA/IEMuX2F0b21fc2l0ZV9hdXRoX2FzeW1faWRbVV0gOiB2b2lkIDAsIE4ucmVzaSA9IEMuX2F0b21fc2l0ZV9hdXRoX3NlcV9pZCA/IHBhcnNlSW50KEMuX2F0b21fc2l0ZV9hdXRoX3NlcV9pZFtVXSkgOiB2b2lkIDAsIE4ucmVzbiA9IEMuX2F0b21fc2l0ZV9hdXRoX2NvbXBfaWQgPyBDLl9hdG9tX3NpdGVfYXV0aF9jb21wX2lkW1VdLnRyaW0oKSA6IHZvaWQgMCwgTi5hdG9tID0gQy5fYXRvbV9zaXRlX2F1dGhfYXRvbV9pZCA/IEMuX2F0b21fc2l0ZV9hdXRoX2F0b21faWRbVV0ucmVwbGFjZSgvIi9nbSwgIiIpIDogdm9pZCAwLCBOLmhldGZsYWcgPSAhQy5fYXRvbV9zaXRlX2dyb3VwX3BkYiB8fCAiSEVUQSIgPT09IEMuX2F0b21fc2l0ZV9ncm91cF9wZGJbVV0gfHwgIkhFVEFUTSIgPT09IEMuX2F0b21fc2l0ZV9ncm91cF9wZGJbVV07CiAgICAgICAgICAgICAgICB2YXIgaiA9ICJYIjsKICAgICAgICAgICAgICAgIEMuX2F0b21fc2l0ZV90eXBlX3N5bWJvbCA/IGogPSBDLl9hdG9tX3NpdGVfdHlwZV9zeW1ib2xbVV0ucmVwbGFjZSgvXCg/XCs/XGQrLiovLCAiIikgOiBDLl9hdG9tX3NpdGVfbGFiZWwgJiYgKGogPSBDLl9hdG9tX3NpdGVfbGFiZWxbVV0uc3BsaXQoIl8iKVswXS5yZXBsYWNlKC9cKD9cZCsuKi8sICIiKSksIE4uZWxlbSA9IGpbMF0udG9VcHBlckNhc2UoKSArIGouc3Vic3RyKDEsIDEpLnRvTG93ZXJDYXNlKCksIE4uYm9uZHMgPSBbXSwgTi5zcyA9ICJjIiwgTi5zZXJpYWwgPSBVLCBOLmJvbmRPcmRlciA9IFtdLCBOLnByb3BlcnRpZXMgPSB7fSwgcltyLmxlbmd0aCAtIDFdLnB1c2goTik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IEMuX3BkYnhfc3RydWN0X29wZXJfbGlzdF9pZCAmJiAhcykgZm9yICh2YXIgX2UxMTggPSAwOyBfZTExOCA8IEMuX3BkYnhfc3RydWN0X29wZXJfbGlzdF9pZC5sZW5ndGg7IF9lMTE4KyspIHsKICAgICAgICAgICAgICAgIHZhciBIID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X21hdHJpeFsxXVsxXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgIFcgPSBwYXJzZUZsb2F0KENbIl9wZGJ4X3N0cnVjdF9vcGVyX2xpc3RfbWF0cml4WzFdWzJdIl1bX2UxMThdKSwKICAgICAgICAgICAgICAgICAgcSA9IHBhcnNlRmxvYXQoQ1siX3BkYnhfc3RydWN0X29wZXJfbGlzdF9tYXRyaXhbMV1bM10iXVtfZTExOF0pLAogICAgICAgICAgICAgICAgICBZID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X3ZlY3RvclsxXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgIFogPSBwYXJzZUZsb2F0KENbIl9wZGJ4X3N0cnVjdF9vcGVyX2xpc3RfbWF0cml4WzJdWzFdIl1bX2UxMThdKSwKICAgICAgICAgICAgICAgICAgWCA9IHBhcnNlRmxvYXQoQ1siX3BkYnhfc3RydWN0X29wZXJfbGlzdF9tYXRyaXhbMl1bMl0iXVtfZTExOF0pLAogICAgICAgICAgICAgICAgICBLID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X21hdHJpeFsyXVszXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgICQgPSBwYXJzZUZsb2F0KENbIl9wZGJ4X3N0cnVjdF9vcGVyX2xpc3RfdmVjdG9yWzJdIl1bX2UxMThdKSwKICAgICAgICAgICAgICAgICAgUSA9IHBhcnNlRmxvYXQoQ1siX3BkYnhfc3RydWN0X29wZXJfbGlzdF9tYXRyaXhbM11bMV0iXVtfZTExOF0pLAogICAgICAgICAgICAgICAgICBKID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X21hdHJpeFszXVsyXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgIGVlID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X21hdHJpeFszXVszXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgIHRlID0gcGFyc2VGbG9hdChDWyJfcGRieF9zdHJ1Y3Rfb3Blcl9saXN0X3ZlY3RvclszXSJdW19lMTE4XSksCiAgICAgICAgICAgICAgICAgIHJlID0gbmV3IG4uTWF0cml4NChILCBXLCBxLCBZLCBaLCBYLCBLLCAkLCBRLCBKLCBlZSwgdGUpOwogICAgICAgICAgICAgICAgYVthLmxlbmd0aCAtIDFdLnN5bW1ldHJpZXMucHVzaChyZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBpZSA9IGZ1bmN0aW9uIGllKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgICByID0gZS5tYXRjaCgiLSIpLAogICAgICAgICAgICAgICAgICBzID0gKGUgPSBlLnJlcGxhY2UoL1steHl6XS9nLCAiIikpLnNwbGl0KCIvIik7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHZvaWQgMCA9PT0gc1sxXSA/IDEgOiBwYXJzZUludChzWzFdKSwgKCIiID09PSBzWzBdID8gMSA6IHBhcnNlSW50KHNbMF0pKSAvIHQgKiAociA/IC0xIDogMSk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBDLl9zeW1tZXRyeV9lcXVpdl9wb3NfYXNfeHl6ICYmICFzKSBmb3IgKHZhciBzZSA9IDA7IHNlIDwgQy5fc3ltbWV0cnlfZXF1aXZfcG9zX2FzX3h5ei5sZW5ndGg7IHNlKyspIHsKICAgICAgICAgICAgICAgIHZhciBhZSA9IEMuX3N5bW1ldHJ5X2VxdWl2X3Bvc19hc194eXpbc2VdLnJlcGxhY2UoL1siJyBdL2csICIiKS5zcGxpdCgiLCIpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC8tL2csICIrLSIpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgX2UxMTkgPSBuZXcgbi5NYXRyaXg0KDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3QxMTAgPSAwOyBfdDExMCA8IDM7IF90MTEwKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIG5lID0gYWVbX3QxMTBdLnNwbGl0KCIrIik7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9yNjcgPSAwOyBfcjY3IDwgbmUubGVuZ3RoOyBfcjY3KyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgb2UgPSBuZVtfcjY3XTsKICAgICAgICAgICAgICAgICAgICBpZiAoIiIgIT09IG9lKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgbGUgPSBpZShvZSk7CiAgICAgICAgICAgICAgICAgICAgICBvZS5tYXRjaCgieCIpID8gX2UxMTkuZWxlbWVudHNbX3QxMTAgKyAwXSA9IGxlIDogb2UubWF0Y2goInkiKSA/IF9lMTE5LmVsZW1lbnRzW190MTEwICsgNF0gPSBsZSA6IG9lLm1hdGNoKCJ6IikgPyBfZTExOS5lbGVtZW50c1tfdDExMCArIDhdID0gbGUgOiBfZTExOS5lbGVtZW50c1tfdDExMCArIDEyXSA9IGxlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGhlID0gSS5nZXRNYXRyaXg0KCksCiAgICAgICAgICAgICAgICAgIGNlID0gbmV3IG4uTWF0cml4NCgpLmdldEludmVyc2UoaGUsICEwKTsKICAgICAgICAgICAgICAgIF9lMTE5ID0gbmV3IG4uTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMoX2UxMTksIGNlKSwgX2UxMTkgPSBuZXcgbi5NYXRyaXg0KCkubXVsdGlwbHlNYXRyaWNlcyhoZSwgX2UxMTkpLCBhW2EubGVuZ3RoIC0gMV0uc3ltbWV0cmllcy5wdXNoKF9lMTE5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgX2UxMjAgPSAwOyBfZTEyMCA8IHIubGVuZ3RoOyBfZTEyMCsrKSBsICYmICgwLCBvLmFzc2lnbkJvbmRzKShyW19lMTIwXSksIHUocltfZTEyMF0sIHQuaGJvbmRDdXRvZmYpLCBmKGFbX2UxMjBdLnN5bW1ldHJpZXMsIHJbX2UxMjBdLCB0LCBhW19lMTIwXS5jcnlzdCksIHQuZHVwbGljYXRlQXNzZW1ibHlBdG9tcyAmJiAhdC5kb250Q29ubmVjdER1cGxpY2F0ZWRBdG9tcyAmJiBsICYmICgwLCBvLmFzc2lnbkJvbmRzKShyW19lMTIwXSk7CiAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGcgPSB7CiAgICAgICAgICAgICJDLjEiOiAiQyIsCiAgICAgICAgICAgIEMxOiAiQyIsCiAgICAgICAgICAgICJDLjIiOiAiQyIsCiAgICAgICAgICAgIEMyOiAiQyIsCiAgICAgICAgICAgICJDLjMiOiAiQyIsCiAgICAgICAgICAgIEMzOiAiQyIsCiAgICAgICAgICAgICJDLmFyIjogIkMiLAogICAgICAgICAgICBDYXI6ICJDIiwKICAgICAgICAgICAgIkMuY2F0IjogIkMiLAogICAgICAgICAgICBDY2F0OiAiQyIsCiAgICAgICAgICAgICJILnNwYyI6ICJIIiwKICAgICAgICAgICAgSHNwYzogIkgiLAogICAgICAgICAgICAiSC50M3AiOiAiSCIsCiAgICAgICAgICAgIEh0M3A6ICJIIiwKICAgICAgICAgICAgIk4uMSI6ICJOIiwKICAgICAgICAgICAgTjE6ICJOIiwKICAgICAgICAgICAgIk4uMiI6ICJOIiwKICAgICAgICAgICAgTjI6ICJOIiwKICAgICAgICAgICAgIk4uMyI6ICJOIiwKICAgICAgICAgICAgTjM6ICJOIiwKICAgICAgICAgICAgIk4uNCI6ICJOIiwKICAgICAgICAgICAgTjQ6ICJOIiwKICAgICAgICAgICAgIk4uYW0iOiAiTiIsCiAgICAgICAgICAgIE5hbTogIk4iLAogICAgICAgICAgICAiTi5hciI6ICJOIiwKICAgICAgICAgICAgTmFyOiAiTiIsCiAgICAgICAgICAgICJOLnAxMyI6ICJOIiwKICAgICAgICAgICAgTnAxMzogIk4iLAogICAgICAgICAgICAiTy4yIjogIk8iLAogICAgICAgICAgICBPMjogIk8iLAogICAgICAgICAgICAiTy4zIjogIk8iLAogICAgICAgICAgICBPMzogIk8iLAogICAgICAgICAgICAiTy5jbzIiOiAiTyIsCiAgICAgICAgICAgIE9jbzI6ICJPIiwKICAgICAgICAgICAgIk8uc3BjIjogIk8iLAogICAgICAgICAgICBPc3BjOiAiTyIsCiAgICAgICAgICAgICJPLnQzcCI6ICJPIiwKICAgICAgICAgICAgT3QzcDogIk8iLAogICAgICAgICAgICAiUC4zIjogIlAiLAogICAgICAgICAgICBQMzogIlAiLAogICAgICAgICAgICAiUy4yIjogIlMiLAogICAgICAgICAgICBTMjogIlMiLAogICAgICAgICAgICAiUy4zIjogIlMiLAogICAgICAgICAgICBTMzogIlMiLAogICAgICAgICAgICAiUy5vIjogIlMiLAogICAgICAgICAgICBTbzogIlMiLAogICAgICAgICAgICAiUy5vMiI6ICJTIiwKICAgICAgICAgICAgU28yOiAiUyIKICAgICAgICAgIH07CiAgICAgICAgICBmdW5jdGlvbiB2KGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSBbW11dLAogICAgICAgICAgICAgIHMgPSAhMTsKICAgICAgICAgICAgdm9pZCAwICE9PSB0LmtlZXBIICYmIChzID0gIXQua2VlcEgpOwogICAgICAgICAgICB2YXIgYSA9IGUuc2VhcmNoKC9APFRSSVBPUz5NT0xFQ1VMRS8pLAogICAgICAgICAgICAgIG4gPSBlLnNlYXJjaCgvQDxUUklQT1M+QVRPTS8pOwogICAgICAgICAgICBpZiAoLTEgPT0gYSB8fCAtMSA9PSBuKSByZXR1cm4gcjsKICAgICAgICAgICAgZm9yICh2YXIgbyA9IGUuc3Vic3RyKGEsIGUubGVuZ3RoKS5zcGxpdCgvXHI/XG58XHIvKTsgby5sZW5ndGggPiAwOykgewogICAgICAgICAgICAgIHZhciBsID0gW10sCiAgICAgICAgICAgICAgICBoID0gb1syXS5yZXBsYWNlKC9eXHMrLywgIiIpLnJlcGxhY2UoL1xzKy9nLCAiICIpLnNwbGl0KCIgIiksCiAgICAgICAgICAgICAgICBjID0gcGFyc2VJbnQoaFswXSksCiAgICAgICAgICAgICAgICB1ID0gMDsKICAgICAgICAgICAgICBoLmxlbmd0aCA+IDEgJiYgKHUgPSBwYXJzZUludChoWzFdKSk7CiAgICAgICAgICAgICAgdmFyIGYsCiAgICAgICAgICAgICAgICBwID0gNDsKICAgICAgICAgICAgICBmb3IgKGYgPSAzOyBmIDwgby5sZW5ndGg7IGYrKykgaWYgKCJAPFRSSVBPUz5BVE9NIiA9PSBvW2ZdKSB7CiAgICAgICAgICAgICAgICBwID0gZiArIDE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHYgPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLAogICAgICAgICAgICAgICAgXyA9IHYgKyBjOwogICAgICAgICAgICAgIGZvciAoZiA9IHY7IGYgPCBfOyBmKyspIHsKICAgICAgICAgICAgICAgIHZhciB5ID0ge30sCiAgICAgICAgICAgICAgICAgIGIgPSAoaCA9IG9bcCsrXS5yZXBsYWNlKC9eXHMrLywgIiIpLnJlcGxhY2UoL1xzKy9nLCAiICIpLnNwbGl0KCIgIikpWzVdOwogICAgICAgICAgICAgICAgaWYgKGIgPSB2b2lkIDAgIT09IGdbYl0gPyBnW2JdIDogKGIgPSBiLnNwbGl0KCIuIilbMF0pWzBdLnRvVXBwZXJDYXNlKCkgKyBiLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpLCB5LmF0b20gPSBoWzFdLCB5LmVsZW0gPSBiLCAiSCIgPT0geS5lbGVtICYmIHMpIDtlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIHcgPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIHggPSBwYXJzZUludChoWzBdKTsKICAgICAgICAgICAgICAgICAgeS5zZXJpYWwgPSB4LCB5LnggPSBwYXJzZUZsb2F0KGhbMl0pLCB5LnkgPSBwYXJzZUZsb2F0KGhbM10pLCB5LnogPSBwYXJzZUZsb2F0KGhbNF0pLCB5LmF0b20gPSBoWzVdOwogICAgICAgICAgICAgICAgICB2YXIgQSA9IHBhcnNlRmxvYXQoaFs4XSk7CiAgICAgICAgICAgICAgICAgIHkuaW5kZXggPSB3LCB5LmJvbmRzID0gW10sIHkuYm9uZE9yZGVyID0gW10sIHkucHJvcGVydGllcyA9IHsKICAgICAgICAgICAgICAgICAgICBjaGFyZ2U6IEEsCiAgICAgICAgICAgICAgICAgICAgcGFydGlhbENoYXJnZTogQQogICAgICAgICAgICAgICAgICB9LCBsW3hdID0gdywgcltyLmxlbmd0aCAtIDFdLnB1c2goeSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAodmFyIEMgPSAhMTsgcCA8IG8ubGVuZ3RoOykgaWYgKCJAPFRSSVBPUz5CT05EIiA9PSBvW3ArK10pIHsKICAgICAgICAgICAgICAgIEMgPSAhMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoQyAmJiB1KSBmb3IgKGYgPSAwOyBmIDwgdTsgZisrKSB7CiAgICAgICAgICAgICAgICBoID0gb1twKytdLnJlcGxhY2UoL15ccysvLCAiIikucmVwbGFjZSgvXHMrL2csICIgIikuc3BsaXQoIiAiKTsKICAgICAgICAgICAgICAgIHZhciBTID0gcGFyc2VJbnQoaFsxXSksCiAgICAgICAgICAgICAgICAgIE0gPSByW3IubGVuZ3RoIC0gMV1bbFtTXV0sCiAgICAgICAgICAgICAgICAgIHogPSBwYXJzZUludChoWzJdKSwKICAgICAgICAgICAgICAgICAgTCA9IHJbci5sZW5ndGggLSAxXVtsW3pdXSwKICAgICAgICAgICAgICAgICAgRSA9IHBhcnNlSW50KGhbM10pOwogICAgICAgICAgICAgICAgaXNOYU4oRSkgJiYgKEUgPSAxKSwgdm9pZCAwICE9PSBNICYmIHZvaWQgMCAhPT0gTCAmJiAoTS5ib25kcy5wdXNoKGxbel0pLCBNLmJvbmRPcmRlci5wdXNoKEUpLCBMLmJvbmRzLnB1c2gobFtTXSksIEwuYm9uZE9yZGVyLnB1c2goRSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIXQubXVsdGltb2RlbCkgYnJlYWs7CiAgICAgICAgICAgICAgdC5vbmVtb2wgfHwgci5wdXNoKFtdKSwgby5zcGxpY2UoMCwgcCksIGUgPSBvLmpvaW4oIlxuIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgXyA9IHIoMjkyOSk7CiAgICAgICAgICBmdW5jdGlvbiB5KGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSBlLnJlcGxhY2UoLyAvZywgIiIpOwogICAgICAgICAgICByZXR1cm4gci5sZW5ndGggPiAwICYmICJIIiA9PSByWzBdICYmICJIZyIgIT0gciAmJiAiSGUiICE9IHIgJiYgIkhmIiAhPSByICYmICJIcyIgIT0gciAmJiAiSG8iICE9IHIgJiYgKHIgPSAiSCIpLCByLmxlbmd0aCA+IDEgJiYgKHIgPSByWzBdLnRvVXBwZXJDYXNlKCkgKyByLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpLCB2b2lkIDAgPT09IF8uYm9uZFRhYmxlW3JdID8gciA9IHJbMF0gOiB0ICYmICgiQ2EiID09IHIgfHwgIkNkIiA9PSByKSAmJiAociA9ICJDIikpLCByOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGIgPSByKDg5OTUpOwogICAgICAgICAgdmFyIHcgPSBuZXcgU2V0KFsiQUJVIiwgIkFDRCIsICJBTEEiLCAiQUxCIiwgIkFMSSIsICJBUkciLCAiQVIwIiwgIkFTTiIsICJBU1AiLCAiQVNYIiwgIkJBUyIsICJDWVMiLCAiQ1lIIiwgIkNZWCIsICJDU1MiLCAiQ1NIIiwgIkdMTiIsICJHTFUiLCAiR0xYIiwgIkdMWSIsICJISVMiLCAiSElFIiwgIkhJRCIsICJISVAiLCAiSFlQIiwgIklMRSIsICJJTFUiLCAiTEVVIiwgIkxZUyIsICJNRVQiLCAiUENBIiwgIlBHQSIsICJQSEUiLCAiUFIwIiwgIlBSTyIsICJQUloiLCAiU0VSIiwgIlRIUiIsICJUUlAiLCAiVFlSIiwgIlZBTCIsICJBIiwgIjFNQSIsICJDIiwgIjVNQyIsICJPTUMiLCAiRyIsICIxTUciLCAiMk1HIiwgIk0yRyIsICI3TUciLCAiT01HIiwgIllHIiwgIkkiLCAiVCIsICJVIiwgIitVIiwgIkgyVSIsICI1TVUiLCAiUFNVIiwgIkFDRSIsICJGMFIiLCAiSDJPIiwgIkhPSCIsICJXQVQiXSk7CiAgICAgICAgICBmdW5jdGlvbiB4KGUpIHsKICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICBzID0gW10sCiAgICAgICAgICAgICAgYSA9IFtdOwogICAgICAgICAgICBmb3IgKHQgPSAwLCByID0gZS5sZW5ndGg7IHQgPCByOyB0KyspIHsKICAgICAgICAgICAgICB2YXIgbiA9IGVbdF07CiAgICAgICAgICAgICAgbi5pbmRleCA9IHQsIG4uaGV0ZmxhZyB8fCAhdy5oYXMobi5yZXNuKSA/IGEucHVzaChuKSA6IHMucHVzaChuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAoMCwgby5hc3NpZ25Cb25kcykoYSksIHMuc29ydChmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgIHJldHVybiBlLmNoYWluICE9IHQuY2hhaW4gPyBlLmNoYWluIDwgdC5jaGFpbiA/IC0xIDogMSA6IGUucmVzaSAtIHQucmVzaTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBsLAogICAgICAgICAgICAgIGggPSAtMSwKICAgICAgICAgICAgICBjID0gLTE7CiAgICAgICAgICAgIGZvciAodCA9IDAsIHIgPSBzLmxlbmd0aDsgdCA8IHI7IHQrKykgewogICAgICAgICAgICAgIHZhciB1ID0gc1t0XTsKICAgICAgICAgICAgICB1LnJlc2kgIT09IGggJiYgKGggPSB1LnJlc2ksIGwgfHwgYysrLCBsID0gITEpLCB1LnJlc2NoYWluID0gYzsKICAgICAgICAgICAgICBmb3IgKHZhciBmID0gdCArIDE7IGYgPCBzLmxlbmd0aDsgZisrKSB7CiAgICAgICAgICAgICAgICB2YXIgcCA9IHNbZl07CiAgICAgICAgICAgICAgICBpZiAocC5jaGFpbiAhPSB1LmNoYWluKSBicmVhazsKICAgICAgICAgICAgICAgIGlmIChwLnJlc2kgLSB1LnJlc2kgPiAxKSBicmVhazsKICAgICAgICAgICAgICAgICgwLCBiLmFyZUNvbm5lY3RlZCkodSwgcCkgJiYgKC0xID09PSB1LmJvbmRzLmluZGV4T2YocC5pbmRleCkgJiYgKHUuYm9uZHMucHVzaChwLmluZGV4KSwgdS5ib25kT3JkZXIucHVzaCgxKSwgcC5ib25kcy5wdXNoKHUuaW5kZXgpLCBwLmJvbmRPcmRlci5wdXNoKDEpKSwgdS5yZXNpICE9PSBwLnJlc2kgJiYgKGwgPSAhMCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQShlLCB0LCByKSB7CiAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgbyA9IFtdLAogICAgICAgICAgICAgIGwgPSB2b2lkIDAgPT09IHQuYXNzaWduQm9uZHMgfHwgdC5hc3NpZ25Cb25kcywKICAgICAgICAgICAgICBoID0gIXQua2VlcEgsCiAgICAgICAgICAgICAgYyA9ICEhdC5ub1NlY29uZGFyeVN0cnVjdHVyZSwKICAgICAgICAgICAgICBwID0gIXQubm9Db21wdXRlU2Vjb25kYXJ5U3RydWN0dXJlLAogICAgICAgICAgICAgIGcgPSAhdC5kb0Fzc2VtYmx5LAogICAgICAgICAgICAgIHYgPSB0LmFsdExvYyA/IHQuYWx0TG9jIDogIkEiLAogICAgICAgICAgICAgIGIgPSB7CiAgICAgICAgICAgICAgICBzeW1tZXRyaWVzOiBbXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgdyA9IFtdLAogICAgICAgICAgICAgIEEgPSBbXSwKICAgICAgICAgICAgICBDID0ge307CiAgICAgICAgICAgIGZvciAodmFyIF90MTExID0gMDsgX3QxMTEgPCBlLmxlbmd0aDsgX3QxMTErKykgewogICAgICAgICAgICAgIHZhciBTLAogICAgICAgICAgICAgICAgTSwKICAgICAgICAgICAgICAgIHosCiAgICAgICAgICAgICAgICBMID0gKGEgPSBlW190MTExXS5yZXBsYWNlKC9eXHMqLywgIiIpKS5zdWJzdHIoMCwgNik7CiAgICAgICAgICAgICAgaWYgKDAgPT0gTC5pbmRleE9mKCJFTkQiKSkgewogICAgICAgICAgICAgICAgaWYgKHcgPSBlLnNsaWNlKF90MTExICsgMSksICJFTkQiID09IEwpIGZvciAodmFyIEUgaW4gcikgci5oYXNPd25Qcm9wZXJ0eShFKSAmJiBkZWxldGUgcltFXTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIkFUT00gICIgPT0gTCB8fCAiSEVUQVRNIiA9PSBMKSB7CiAgICAgICAgICAgICAgICB2YXIgVCwgaywgSSwgTywgRCwgRiwgUiwgUCwgRywgQiwgVSwgTjsKICAgICAgICAgICAgICAgIGlmICgiICIgIT0gKFUgPSBhLnN1YnN0cigxNiwgMSkpICYmIFUgIT0gdiAmJiAiKiIgIT0gdikgY29udGludWU7CiAgICAgICAgICAgICAgICBpZiAoQiA9IHBhcnNlSW50KGEuc3Vic3RyKDYsIDUpKSwgcyA9IGEuc3Vic3RyKDEyLCA0KS5yZXBsYWNlKC8gL2csICIiKSwgVCA9IGEuc3Vic3RyKDE3LCAzKS5yZXBsYWNlKC8gL2csICIiKSwgayA9IGEuc3Vic3RyKDIxLCAxKSwgSSA9IHBhcnNlSW50KGEuc3Vic3RyKDIyLCA0KSksIE8gPSBhLnN1YnN0cigyNiwgMSksIEQgPSBwYXJzZUZsb2F0KGEuc3Vic3RyKDMwLCA4KSksIEYgPSBwYXJzZUZsb2F0KGEuc3Vic3RyKDM4LCA4KSksIFIgPSBwYXJzZUZsb2F0KGEuc3Vic3RyKDQ2LCA4KSksIE4gPSBwYXJzZUZsb2F0KGEuc3Vic3RyKDYwLCA4KSksICJIIiA9PSAoRyA9ICIiID09PSAoRyA9IGEuc3Vic3RyKDc2LCAyKS5yZXBsYWNlKC8gL2csICIiKSkgfHwgdm9pZCAwID09PSBfLmJvbmRUYWJsZVtHXSA/IHkoYS5zdWJzdHIoMTIsIDIpLCAiQSIgPT0gYVswXSkgOiBHWzBdLnRvVXBwZXJDYXNlKCkgKyBHLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpKSAmJiBoKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIFAgPSAiSCIgPT0gTFswXSwgQVtCXSA9IG8ubGVuZ3RoLCBvLnB1c2goewogICAgICAgICAgICAgICAgICByZXNuOiBULAogICAgICAgICAgICAgICAgICB4OiBELAogICAgICAgICAgICAgICAgICB5OiBGLAogICAgICAgICAgICAgICAgICB6OiBSLAogICAgICAgICAgICAgICAgICBlbGVtOiBHLAogICAgICAgICAgICAgICAgICBoZXRmbGFnOiBQLAogICAgICAgICAgICAgICAgICBhbHRMb2M6IFUsCiAgICAgICAgICAgICAgICAgIGNoYWluOiBrLAogICAgICAgICAgICAgICAgICByZXNpOiBJLAogICAgICAgICAgICAgICAgICBpY29kZTogTywKICAgICAgICAgICAgICAgICAgcmVzY29kZTogSSArICgiICIgIT0gTyA/ICJeIiArIE8gOiAiIiksCiAgICAgICAgICAgICAgICAgIHNlcmlhbDogQiwKICAgICAgICAgICAgICAgICAgYXRvbTogcywKICAgICAgICAgICAgICAgICAgYm9uZHM6IFtdLAogICAgICAgICAgICAgICAgICBzczogImMiLAogICAgICAgICAgICAgICAgICBib25kT3JkZXI6IFtdLAogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSwKICAgICAgICAgICAgICAgICAgYjogTiwKICAgICAgICAgICAgICAgICAgcGRibGluZTogYQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICgiU0hFRVQgIiA9PSBMKSB7CiAgICAgICAgICAgICAgICAhMCwgUyA9IGEuc3Vic3RyKDIxLCAxKSwgTSA9IHBhcnNlSW50KGEuc3Vic3RyKDIyLCA0KSksIGEuc3Vic3RyKDMyLCAxKSwgeiA9IHBhcnNlSW50KGEuc3Vic3RyKDMzLCA0KSksIFMgaW4gciB8fCAocltTXSA9IHt9KSwgcltTXVtNXSA9ICJzMSI7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBWID0gTSArIDE7IFYgPCB6OyBWKyspIHJbU11bVl0gPSAicyI7CiAgICAgICAgICAgICAgICByW1NdW3pdID0gInMyIjsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKCJDT05FQ1QiID09IEwpIHsKICAgICAgICAgICAgICAgIHZhciBqID0gQVtwYXJzZUludChhLnN1YnN0cig2LCA1KSldLAogICAgICAgICAgICAgICAgICBIID0gb1tqXSwKICAgICAgICAgICAgICAgICAgVyA9IFsxMSwgMTYsIDIxLCAyNl07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEyMSA9IDA7IF9lMTIxIDwgNDsgX2UxMjErKykgewogICAgICAgICAgICAgICAgICB2YXIgcSA9IEFbcGFyc2VJbnQoYS5zdWJzdHIoV1tfZTEyMV0sIDUpKV07CiAgICAgICAgICAgICAgICAgIHZhciBfdDExMiA9IGogKyAiOiIgKyBxOwogICAgICAgICAgICAgICAgICB2YXIgWSA9IG9bcV07CiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IEggJiYgdm9pZCAwICE9PSBZKSBpZiAoQ1tfdDExMl0pIHsKICAgICAgICAgICAgICAgICAgICBDW190MTEyXSArPSAxOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTIyID0gMDsgX2UxMjIgPCBILmJvbmRzLmxlbmd0aDsgX2UxMjIrKykgaWYgKEguYm9uZHNbX2UxMjJdID09IHEpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBaID0gQ1tfdDExMl07CiAgICAgICAgICAgICAgICAgICAgICBILmJvbmRPcmRlcltfZTEyMl0gPSBaID49IDQgPyAxIDogWjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBDW190MTEyXSA9IDEsIDAgIT0gSC5ib25kcy5sZW5ndGggJiYgSC5ib25kc1tILmJvbmRzLmxlbmd0aCAtIDFdID09IHEgfHwgKEguYm9uZHMucHVzaChxKSwgSC5ib25kT3JkZXIucHVzaCgxKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmICgiSEVMSVggIiA9PSBMKSB7CiAgICAgICAgICAgICAgICAhMCwgUyA9IGEuc3Vic3RyKDE5LCAxKSwgTSA9IHBhcnNlSW50KGEuc3Vic3RyKDIxLCA0KSksIGEuc3Vic3RyKDMxLCAxKSwgeiA9IHBhcnNlSW50KGEuc3Vic3RyKDMzLCA0KSksIFMgaW4gciB8fCAocltTXSA9IHt9KSwgcltTXVtNXSA9ICJoMSI7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEyMyA9IE0gKyAxOyBfZTEyMyA8IHo7IF9lMTIzKyspIHJbU11bX2UxMjNdID0gImgiOwogICAgICAgICAgICAgICAgcltTXVt6XSA9ICJoMiI7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChnIHx8ICJSRU1BUksiICE9IEwgfHwgIkJJT01UIiAhPSBhLnN1YnN0cigxMywgNSkpIHsKICAgICAgICAgICAgICAgIGlmICgiQ1JZU1QxIiA9PSBMKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfZTEyNCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICBfdDExMyA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICBfcjY4ID0gdm9pZCAwLAogICAgICAgICAgICAgICAgICAgIF9zNTYgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgX24yOSA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICBfbzI3ID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICBfZTEyNCA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoNywgOCkpLCBfdDExMyA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoMTYsIDgpKSwgX3I2OCA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoMjUsIDgpKSwgX3M1NiA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoMzQsIDYpKSwgX24yOSA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoNDEsIDYpKSwgX28yNyA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoNDgsIDYpKSwgYi5jcnlzdCA9IHsKICAgICAgICAgICAgICAgICAgICBhOiBfZTEyNCwKICAgICAgICAgICAgICAgICAgICBiOiBfdDExMywKICAgICAgICAgICAgICAgICAgICBjOiBfcjY4LAogICAgICAgICAgICAgICAgICAgIGFscGhhOiBfczU2LAogICAgICAgICAgICAgICAgICAgIGJldGE6IF9uMjksCiAgICAgICAgICAgICAgICAgICAgZ2FtbWE6IF9vMjcKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIkFOSVNPVSIgPT0gTCkgewogICAgICAgICAgICAgICAgICB2YXIgWCA9IG9bQVtwYXJzZUludChhLnN1YnN0cig2LCA1KSldXTsKICAgICAgICAgICAgICAgICAgaWYgKFgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgSyA9IGEuc3Vic3RyKDMwKS50cmltKCkuc3BsaXQoL1xzKy8pLAogICAgICAgICAgICAgICAgICAgICAgJCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdTExOiBwYXJzZUludChLWzBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgdTIyOiBwYXJzZUludChLWzFdKSwKICAgICAgICAgICAgICAgICAgICAgICAgdTMzOiBwYXJzZUludChLWzJdKSwKICAgICAgICAgICAgICAgICAgICAgICAgdTEyOiBwYXJzZUludChLWzNdKSwKICAgICAgICAgICAgICAgICAgICAgICAgdTEzOiBwYXJzZUludChLWzRdKSwKICAgICAgICAgICAgICAgICAgICAgICAgdTIzOiBwYXJzZUludChLWzVdKQogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBYLnVNYXQgPSAkOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBRLAogICAgICAgICAgICAgICAgICBKID0gbmV3IG4uTWF0cml4NCgpOwogICAgICAgICAgICAgICAgZm9yIChRID0gMTsgUSA8PSAzOyBRKyspIGlmIChhID0gZVtfdDExMV0ucmVwbGFjZSgvXlxzKi8sICIiKSwgcGFyc2VJbnQoYS5zdWJzdHIoMTgsIDEpKSA9PSBRKSBKLmVsZW1lbnRzW1EgLSAxXSA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoMjMsIDEwKSksIEouZWxlbWVudHNbUSAtIDEgKyA0XSA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoMzMsIDEwKSksIEouZWxlbWVudHNbUSAtIDEgKyA4XSA9IHBhcnNlRmxvYXQoYS5zdWJzdHIoNDMsIDEwKSksIEouZWxlbWVudHNbUSAtIDEgKyAxMl0gPSBwYXJzZUZsb2F0KGEuc3Vic3RyKDUzKSksIF90MTExKys7ZWxzZSBmb3IgKDsgIkJJT01UIiA9PSBhLnN1YnN0cigxMywgNSk7KSBfdDExMSsrLCBhID0gZVtfdDExMV0ucmVwbGFjZSgvXlxzKi8sICIiKTsKICAgICAgICAgICAgICAgIEouZWxlbWVudHNbM10gPSAwLCBKLmVsZW1lbnRzWzddID0gMCwgSi5lbGVtZW50c1sxMV0gPSAwLCBKLmVsZW1lbnRzWzE1XSA9IDEsIGIuc3ltbWV0cmllcy5wdXNoKEopLCBfdDExMS0tOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgcyA9IGUubGVuZ3RoOyByIDwgczsgcisrKSBmb3IgKHZhciBhID0gZVtyXSwgbiA9IDA7IG4gPCBhLmJvbmRzLmxlbmd0aDsgbisrKSB7CiAgICAgICAgICAgICAgICB2YXIgbyA9IGVbYS5ib25kc1tuXV0sCiAgICAgICAgICAgICAgICAgIGwgPSB0W2Euc2VyaWFsXTsKICAgICAgICAgICAgICAgIG8gJiYgbCAmJiBvLmJvbmRzLmluZGV4T2YobCkgPCAwICYmIChvLmJvbmRzLnB1c2gobCksIG8uYm9uZE9yZGVyLnB1c2goYS5ib25kT3JkZXJbbl0pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0obywgQSksIGwgJiYgeChvKSwgZyB8fCBmKGIuc3ltbWV0cmllcywgbywgdCwgYi5jcnlzdCksIHAgJiYgIWMgJiYgdShvLCB0Lmhib25kQ3V0b2ZmKSwgIWZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgZm9yICh0IGluIGUpIHJldHVybiAhMTsKICAgICAgICAgICAgICByZXR1cm4gITA7CiAgICAgICAgICAgIH0ocikpIGZvciAodmFyIF9lMTI1ID0gMDsgX2UxMjUgPCBvLmxlbmd0aDsgX2UxMjUrKykgaWYgKHZvaWQgMCAhPT0gKHMgPSBvW19lMTI1XSkgJiYgcy5jaGFpbiBpbiByICYmIHMucmVzaSBpbiByW3MuY2hhaW5dKSB7CiAgICAgICAgICAgICAgdmFyIGVlID0gcltzLmNoYWluXVtzLnJlc2ldOwogICAgICAgICAgICAgIHMuc3MgPSBlZVswXSwgZWUubGVuZ3RoID4gMSAmJiAoIjEiID09IGVlWzFdID8gcy5zc2JlZ2luID0gITAgOiAiMiIgPT0gZWVbMV0gJiYgKHMuc3NlbmQgPSAhMCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBbbywgYiwgd107CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBDKGUsIHQpIHsKICAgICAgICAgICAgdCA9IHQgfHwge307CiAgICAgICAgICAgIHZhciByID0gW10sCiAgICAgICAgICAgICAgcyA9IHt9OwogICAgICAgICAgICByLm1vZGVsRGF0YSA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBhID0gZS5zcGxpdCgvXHI/XG58XHIvKTsgYS5sZW5ndGggPiAwOykgewogICAgICAgICAgICAgIHZhciBuID0gQShhLCB0LCBzKSwKICAgICAgICAgICAgICAgIG8gPSBuWzBdLAogICAgICAgICAgICAgICAgbCA9IG5bMV07CiAgICAgICAgICAgICAgaWYgKGEgPSBuWzJdLCAwICE9IG8ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAodC5tdWx0aW1vZGVsICYmIHQub25lbW9sICYmIHIubGVuZ3RoID4gMCkgZm9yICh2YXIgaCA9IHJbMF0ubGVuZ3RoLCBjID0gMDsgYyA8IG8ubGVuZ3RoOyBjKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHUgPSBvW2NdOwogICAgICAgICAgICAgICAgICB1LmluZGV4ID0gYzsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPCB1LmJvbmRzLmxlbmd0aDsgZisrKSB1LmJvbmRzW2ZdICs9IGg7CiAgICAgICAgICAgICAgICAgIHJbMF0ucHVzaCh1KTsKICAgICAgICAgICAgICAgIH0gZWxzZSByLm1vZGVsRGF0YS5wdXNoKGwpLCByLnB1c2gobyk7CiAgICAgICAgICAgICAgICBpZiAoIXQubXVsdGltb2RlbCkgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUyhlLCB0KSB7CiAgICAgICAgICAgIHZhciByID0gW1tdXSwKICAgICAgICAgICAgICBzID0gIXQubm9TZWNvbmRhcnlTdHJ1Y3R1cmU7CiAgICAgICAgICAgIHIubW9kZWxEYXRhID0gW3sKICAgICAgICAgICAgICBzeW1tZXRyaWVzOiBbXQogICAgICAgICAgICB9XTsKICAgICAgICAgICAgdmFyIGEsCiAgICAgICAgICAgICAgbiA9IFtdLAogICAgICAgICAgICAgIG8gPSBlLnNwbGl0KC9ccj9cbnxcci8pOwogICAgICAgICAgICBmb3IgKHZhciBfZTEyNiA9IDA7IF9lMTI2IDwgby5sZW5ndGg7IF9lMTI2KyspIHsKICAgICAgICAgICAgICB2YXIgbCA9IChhID0gb1tfZTEyNl0ucmVwbGFjZSgvXlxzKi8sICIiKSkuc3Vic3RyKDAsIDYpOwogICAgICAgICAgICAgIGlmICgwID09IGwuaW5kZXhPZigiRU5EIikpIHsKICAgICAgICAgICAgICAgIGlmICh0Lm11bHRpbW9kZWwpIHsKICAgICAgICAgICAgICAgICAgdC5vbmVtb2wgfHwgci5wdXNoKFtdKTsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCJBVE9NICAiID09IGwgfHwgIkhFVEFUTSIgPT0gbCkgewogICAgICAgICAgICAgICAgdmFyIGg7CiAgICAgICAgICAgICAgICB2YXIgX2UxMjcgPSBwYXJzZUludChhLnN1YnN0cig2LCA1KSksCiAgICAgICAgICAgICAgICAgIF90MTE0ID0gYS5zdWJzdHIoMTIsIDQpLnJlcGxhY2UoLyAvZywgIiIpLAogICAgICAgICAgICAgICAgICBfczU3ID0gYS5zdWJzdHIoMTcsIDMpLnRyaW0oKSwKICAgICAgICAgICAgICAgICAgX28yOCA9IGEuc3Vic3RyKDIxLCAxKSwKICAgICAgICAgICAgICAgICAgX2wxNCA9IHBhcnNlSW50KGEuc3Vic3RyKDIyLCA0KSk7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGEuc3Vic3RyKDMwKS50cmltKCkuc3BsaXQoL1xzKy8pLAogICAgICAgICAgICAgICAgICBmID0gcGFyc2VGbG9hdChjWzBdKSwKICAgICAgICAgICAgICAgICAgcCA9IHBhcnNlRmxvYXQoY1sxXSksCiAgICAgICAgICAgICAgICAgIGcgPSBwYXJzZUZsb2F0KGNbMl0pLAogICAgICAgICAgICAgICAgICB2ID0gcGFyc2VGbG9hdChjWzNdKSwKICAgICAgICAgICAgICAgICAgXyA9IHBhcnNlRmxvYXQoY1s0XSksCiAgICAgICAgICAgICAgICAgIHkgPSBfdDExNFswXTsKICAgICAgICAgICAgICAgIF90MTE0Lmxlbmd0aCA+IDEgJiYgX3QxMTRbMV0udG9VcHBlckNhc2UoKSAhPSBfdDExNFsxXSAmJiAoeSA9IF90MTE0LnN1YnN0cigwLCAyKSksIGggPSAiSCIgPT0gYVswXSwgbltfZTEyN10gPSByW3IubGVuZ3RoIC0gMV0ubGVuZ3RoLCByW3IubGVuZ3RoIC0gMV0ucHVzaCh7CiAgICAgICAgICAgICAgICAgIHJlc246IF9zNTcsCiAgICAgICAgICAgICAgICAgIHg6IGYsCiAgICAgICAgICAgICAgICAgIHk6IHAsCiAgICAgICAgICAgICAgICAgIHo6IGcsCiAgICAgICAgICAgICAgICAgIGVsZW06IHksCiAgICAgICAgICAgICAgICAgIGhldGZsYWc6IGgsCiAgICAgICAgICAgICAgICAgIGNoYWluOiBfbzI4LAogICAgICAgICAgICAgICAgICByZXNpOiBfbDE0LAogICAgICAgICAgICAgICAgICBzZXJpYWw6IF9lMTI3LAogICAgICAgICAgICAgICAgICBhdG9tOiBfdDExNCwKICAgICAgICAgICAgICAgICAgYm9uZHM6IFtdLAogICAgICAgICAgICAgICAgICBzczogImMiLAogICAgICAgICAgICAgICAgICBib25kT3JkZXI6IFtdLAogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgICAgICAgY2hhcmdlOiB2LAogICAgICAgICAgICAgICAgICAgIHBhcnRpYWxDaGFyZ2U6IHYsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBfCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHBkYmxpbmU6IGEKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoIkNPTkVDVCIgPT0gbCkgewogICAgICAgICAgICAgICAgdmFyIGIgPSBwYXJzZUludChhLnN1YnN0cig2LCA1KSksCiAgICAgICAgICAgICAgICAgIHcgPSByW3IubGVuZ3RoIC0gMV1bbltiXV07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEyOCA9IDA7IF9lMTI4IDwgNDsgX2UxMjgrKykgewogICAgICAgICAgICAgICAgICB2YXIgQSA9IHBhcnNlSW50KGEuc3Vic3RyKFsxMSwgMTYsIDIxLCAyNl1bX2UxMjhdLCA1KSksCiAgICAgICAgICAgICAgICAgICAgQyA9IHJbci5sZW5ndGggLSAxXVtuW0FdXTsKICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSB3ICYmIHZvaWQgMCAhPT0gQyAmJiAody5ib25kcy5wdXNoKG5bQV0pLCB3LmJvbmRPcmRlci5wdXNoKDEpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgX2UxMjkgPSAwOyBfZTEyOSA8IHIubGVuZ3RoOyBfZTEyOSsrKSB4KHJbX2UxMjldKSwgcyAmJiB1KHJbX2UxMjldLCB0Lmhib25kQ3V0b2ZmKTsKICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgTSA9IHIoOTAwNSksCiAgICAgICAgICAgIHogPSByKDc0MjApLAogICAgICAgICAgICBMID0gZnVuY3Rpb24gTChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZSkucmVwbGFjZSgvXDAvZywgIiIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBFID0gZnVuY3Rpb24gRShlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIDAgPT0gZSB8fCAyID09IGUgfHwgNCA9PSBlID8gImgiIDogMyA9PSBlID8gInMiIDogImMiOwogICAgICAgICAgICB9OwogICAgICAgICAgdmFyIFQgPSBuZXcgU2V0KFsiRC1TQUNDSEFSSURFIiwgIkQtU0FDQ0hBUklERSAxLDQgQU5EIDEsNCBMSU5LSU5HIiwgIkQtU0FDQ0hBUklERSAxLDQgQU5EIDEsNiBMSU5LSU5HIiwgIkwtU0FDQ0hBUklERSIsICJMLVNBQ0NIQVJJREUgMSw0IEFORCAxLDQgTElOS0lORyIsICJMLVNBQ0NIQVJJREUgMSw0IEFORCAxLDYgTElOS0lORyIsICJOT04tUE9MWU1FUiIsICJPVEhFUiIsICJQRVBUSURFLUxJS0UiLCAiU0FDQ0hBUklERSJdKTsKICAgICAgICAgIGZ1bmN0aW9uIGsoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9ICF0LmtlZXBILAogICAgICAgICAgICAgIHMgPSB0LmFsdExvYyA/IHQuYWx0TG9jIDogIkEiLAogICAgICAgICAgICAgIGEgPSAhIXQubm9TZWNvbmRhcnlTdHJ1Y3R1cmUsCiAgICAgICAgICAgICAgbyA9ICF0Lm5vQ29tcHV0ZVNlY29uZGFyeVN0cnVjdHVyZSwKICAgICAgICAgICAgICBsID0gIXQuZG9Bc3NlbWJseSwKICAgICAgICAgICAgICBoID0gdC5hc3NlbWJseUluZGV4ID8gdC5hc3NlbWJseUluZGV4IDogMDsKICAgICAgICAgICAgZSA9ICJzdHJpbmciID09IHR5cGVvZiBlID8gKDAsIE0uYmFzZTY0VG9BcnJheSkoZSkgOiBuZXcgVWludDhBcnJheShlKTsKICAgICAgICAgICAgdmFyIGMsCiAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICBnLAogICAgICAgICAgICAgIHYsCiAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICB5LAogICAgICAgICAgICAgIGIgPSB6LmRlY29kZShlKSwKICAgICAgICAgICAgICB3ID0gW1tdXSwKICAgICAgICAgICAgICB4ID0gdy5tb2RlbERhdGEgPSBbXSwKICAgICAgICAgICAgICBBID0gMCwKICAgICAgICAgICAgICBDID0gMCwKICAgICAgICAgICAgICBTID0gMCwKICAgICAgICAgICAgICBrID0gYi5zZWNTdHJ1Y3RMaXN0LAogICAgICAgICAgICAgIEkgPSBiLmluc0NvZGVMaXN0LAogICAgICAgICAgICAgIE8gPSBiLnNlcXVlbmNlSW5kZXhMaXN0LAogICAgICAgICAgICAgIEQgPSBiLmJGYWN0b3JMaXN0LAogICAgICAgICAgICAgIEYgPSBiLmFsdExvY0xpc3QsCiAgICAgICAgICAgICAgUiA9IGIub2NjdXBhbmN5TGlzdCwKICAgICAgICAgICAgICBQID0gYi5ib25kQXRvbUxpc3QsCiAgICAgICAgICAgICAgRyA9IGIuYm9uZE9yZGVyTGlzdCwKICAgICAgICAgICAgICBCID0gYi5udW1Nb2RlbHM7CiAgICAgICAgICAgIGlmICgwID09IEIpIHJldHVybiB3OwogICAgICAgICAgICB0Lm11bHRpbW9kZWwgfHwgKEIgPSAxKTsKICAgICAgICAgICAgdmFyIFUgPSBbXTsKICAgICAgICAgICAgaWYgKCFsICYmIGIuYmlvQXNzZW1ibHlMaXN0ICYmIGIuYmlvQXNzZW1ibHlMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICB2YXIgTiA9IGIuYmlvQXNzZW1ibHlMaXN0W2hdLnRyYW5zZm9ybUxpc3Q7CiAgICAgICAgICAgICAgZm9yIChjID0gMCwgeSA9IE4ubGVuZ3RoOyBjIDwgeTsgYysrKSB7CiAgICAgICAgICAgICAgICB2YXIgViA9IG5ldyBuLk1hdHJpeDQoTltjXS5tYXRyaXgpOwogICAgICAgICAgICAgICAgVi50cmFuc3Bvc2UoKSwgVS5wdXNoKFYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaiA9IG51bGw7CiAgICAgICAgICAgIGlmIChiLnVuaXRDZWxsKSB7CiAgICAgICAgICAgICAgdmFyIEggPSBiLnVuaXRDZWxsOwogICAgICAgICAgICAgIGogPSB7CiAgICAgICAgICAgICAgICBhOiBIWzBdLAogICAgICAgICAgICAgICAgYjogSFsxXSwKICAgICAgICAgICAgICAgIGM6IEhbMl0sCiAgICAgICAgICAgICAgICBhbHBoYTogSFszXSwKICAgICAgICAgICAgICAgIGJldGE6IEhbNF0sCiAgICAgICAgICAgICAgICBnYW1tYTogSFs1XQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIFcgPSBbXTsKICAgICAgICAgICAgYi5lbnRpdHlMaXN0LmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBlLmNoYWluSW5kZXhMaXN0LmZvckVhY2goZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgIFdbdF0gPSAicG9seW1lciIgPT0gZS50eXBlOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHEgPSAwOwogICAgICAgICAgICBmb3IgKF8gPSAwOyBfIDwgQjsgXysrKSB7CiAgICAgICAgICAgICAgdmFyIFkgPSBiLmNoYWluc1Blck1vZGVsW19dLAogICAgICAgICAgICAgICAgWiA9IHdbdy5sZW5ndGggLSAxXSwKICAgICAgICAgICAgICAgIFggPSBbXTsKICAgICAgICAgICAgICBmb3IgKHgucHVzaCh7CiAgICAgICAgICAgICAgICBzeW1tZXRyaWVzOiBVLAogICAgICAgICAgICAgICAgY3J5c3Q6IGoKICAgICAgICAgICAgICB9KSwgYyA9IDA7IGMgPCBZOyArK2MpIHsKICAgICAgICAgICAgICAgIHZhciBLID0gYi5ncm91cHNQZXJDaGFpbltBXSwKICAgICAgICAgICAgICAgICAgJCA9IEwoYi5jaGFpbklkTGlzdC5zdWJhcnJheSg0ICogQSwgNCAqIEEgKyA0KSk7CiAgICAgICAgICAgICAgICBiLmNoYWluTmFtZUxpc3QgJiYgKCQgPSBMKGIuY2hhaW5OYW1lTGlzdC5zdWJhcnJheSg0ICogQSwgNCAqIEEgKyA0KSkpOwogICAgICAgICAgICAgICAgdmFyIFEgPSBDLAogICAgICAgICAgICAgICAgICBKID0gIiI7CiAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgSzsgKytwKSB7CiAgICAgICAgICAgICAgICAgIHZhciBlZSA9IGIuZ3JvdXBMaXN0W2IuZ3JvdXBUeXBlTGlzdFtDXV0sCiAgICAgICAgICAgICAgICAgICAgdGUgPSBlZS5hdG9tTmFtZUxpc3QubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIHJlID0gMCwKICAgICAgICAgICAgICAgICAgICBpZSA9ICExLAogICAgICAgICAgICAgICAgICAgIHNlID0gITE7CiAgICAgICAgICAgICAgICAgIGlmIChrKSB7CiAgICAgICAgICAgICAgICAgICAgcmUgPSBrW0NdOwogICAgICAgICAgICAgICAgICAgIHZhciBhZSA9IEUocmUpOwogICAgICAgICAgICAgICAgICAgIDAgIT0gQyAmJiBhZSA9PSBKIHx8IChpZSA9ICEwKSwgSiA9IGFlOwogICAgICAgICAgICAgICAgICAgIHZhciBuZSA9IEMgKyAxOwogICAgICAgICAgICAgICAgICAgIChuZSA+PSBrLmxlbmd0aCB8fCBFKGtbbmVdICE9IGFlKSkgJiYgKHNlID0gITApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGIuaW5zQ29kZUxpc3QgJiYgU3RyaW5nLmZyb21DaGFyQ29kZShJW0NdKTsKICAgICAgICAgICAgICAgICAgTyAmJiBPW0NdOwogICAgICAgICAgICAgICAgICB2YXIgb2UgPSBiLmdyb3VwSWRMaXN0W0NdLAogICAgICAgICAgICAgICAgICAgIGxlID0gZWUuZ3JvdXBOYW1lOwogICAgICAgICAgICAgICAgICB2YXIgX2UxMzAgPSBlZS5jaGVtQ29tcFR5cGU7CiAgICAgICAgICAgICAgICAgIHZhciBoZSA9IFM7CiAgICAgICAgICAgICAgICAgIHZhciBfdDExNSA9IFQuaGFzKF9lMTMwKSB8fCAhV1tBXTsKICAgICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IHRlOyArK2cpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY2UgPSBlZS5lbGVtZW50TGlzdFtnXTsKICAgICAgICAgICAgICAgICAgICBpZiAociAmJiAiSCIgPT0gY2UpIFMgKz0gMTtlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBkZSA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgRCAmJiAoZGUgPSBEW1NdKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciB1ZSA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgRiAmJiBGW1NdICYmICh1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoRltTXSkpOwogICAgICAgICAgICAgICAgICAgICAgdmFyIGZlID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoUiAmJiAoZmUgPSBSW1NdKSwgIiIgPT0gdWUgfHwgdWUgPT0gcyB8fCAiKiIgPT0gcykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGUgPSBiLmF0b21JZExpc3RbU10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgbWUgPSBlZS5hdG9tTmFtZUxpc3RbZ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2UgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBlZS5hdG9tQ2hhcmdlTGlzdCAmJiAoZ2UgPSBlZS5hdG9tQ2hhcmdlTGlzdFtnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZSA9IGIueENvb3JkTGlzdFtTXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfZSA9IGIueUNvb3JkTGlzdFtTXSwKICAgICAgICAgICAgICAgICAgICAgICAgICB5ZSA9IGIuekNvb3JkTGlzdFtTXTsKICAgICAgICAgICAgICAgICAgICAgICAgWFtTXSA9IFoubGVuZ3RoLCBaLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc246IGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHZlLAogICAgICAgICAgICAgICAgICAgICAgICAgIHk6IF9lLAogICAgICAgICAgICAgICAgICAgICAgICAgIHo6IHllLAogICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW06IGNlLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhldGZsYWc6IF90MTE1LAogICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluOiAkLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2k6IG9lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb2RlOiB1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICByZXNjb2RlOiBvZSArICgiICIgIT0gdWUgPyAiXiIgKyB1ZSA6ICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWw6IHBlLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdExvYzogdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IFMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXRvbTogbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZHM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNzOiBFKHJlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzc2JlZ2luOiBpZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzc2VuZDogc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZE9yZGVyOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyZ2U6IGdlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2NjdXBhbmN5OiBmZQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYjogZGUKICAgICAgICAgICAgICAgICAgICAgICAgfSksIFMgKz0gMTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBTICs9IDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHZhciBiZSA9IGVlLmJvbmRBdG9tTGlzdDsKICAgICAgICAgICAgICAgICAgZm9yIChnID0gMCwgdiA9IGVlLmJvbmRPcmRlckxpc3QubGVuZ3RoOyBnIDwgdjsgKytnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHdlID0gaGUgKyBiZVsyICogZ10sCiAgICAgICAgICAgICAgICAgICAgICB4ZSA9IGhlICsgYmVbMiAqIGcgKyAxXSwKICAgICAgICAgICAgICAgICAgICAgIEFlID0gZWUuYm9uZE9yZGVyTGlzdFtnXSwKICAgICAgICAgICAgICAgICAgICAgIENlID0gWFt3ZV0sCiAgICAgICAgICAgICAgICAgICAgICBTZSA9IFhbeGVdLAogICAgICAgICAgICAgICAgICAgICAgTWUgPSBaW0NlXSwKICAgICAgICAgICAgICAgICAgICAgIHplID0gWltTZV07CiAgICAgICAgICAgICAgICAgICAgTWUgJiYgemUgJiYgKE1lLmJvbmRzLnB1c2goU2UpLCBNZS5ib25kT3JkZXIucHVzaChBZSksIHplLmJvbmRzLnB1c2goQ2UpLCB6ZS5ib25kT3JkZXIucHVzaChBZSkpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIEMgKz0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoQyA9IFEsIHAgPSAwOyBwIDwgSzsgKytwKSBDICs9IDE7CiAgICAgICAgICAgICAgICBBICs9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChQKSBmb3IgKHZhciBfZTEzMSA9IHEsIF90MTE2ID0gUC5sZW5ndGg7IF9lMTMxIDwgX3QxMTY7IF9lMTMxICs9IDIpIHsKICAgICAgICAgICAgICAgIHZhciBfdDExNyA9IFBbX2UxMzFdLAogICAgICAgICAgICAgICAgICBfcjY5ID0gUFtfZTEzMSArIDFdLAogICAgICAgICAgICAgICAgICBfczU4ID0gRyA/IEdbX2UxMzEgLyAyXSA6IDE7CiAgICAgICAgICAgICAgICBpZiAoX3QxMTcgPj0gUykgewogICAgICAgICAgICAgICAgICBxID0gX2UxMzE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIF9hMzYgPSBYW190MTE3XSwKICAgICAgICAgICAgICAgICAgX24zMCA9IFhbX3I2OV0sCiAgICAgICAgICAgICAgICAgIF9vMjkgPSBaW19hMzZdLAogICAgICAgICAgICAgICAgICBfbDE1ID0gWltfbjMwXTsKICAgICAgICAgICAgICAgIF9vMjkgJiYgX2wxNSAmJiAoX28yOS5ib25kcy5wdXNoKF9uMzApLCBfbzI5LmJvbmRPcmRlci5wdXNoKF9zNTgpLCBfbDE1LmJvbmRzLnB1c2goX2EzNiksIF9sMTUuYm9uZE9yZGVyLnB1c2goX3M1OCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0Lm11bHRpbW9kZWwgJiYgKHQub25lbW9sIHx8IHcucHVzaChbXSkpLCAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghbCkgZm9yICh2YXIgX2UxMzIgPSAwOyBfZTEzMiA8IHcubGVuZ3RoOyBfZTEzMisrKSBmKHhbX2UxMzJdLnN5bW1ldHJpZXMsIHdbX2UxMzJdLCB0LCB4W19lMTMyXS5jcnlzdCk7CiAgICAgICAgICAgIHJldHVybiBvICYmICFhICYmIHUodywgdC5oYm9uZEN1dG9mZiksIHc7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBJKGUpIHsKICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgciA9IFtdLAogICAgICAgICAgICAgIHMgPSAwLAogICAgICAgICAgICAgIGEgPSBlLnNwbGl0KC9ccj9cbnxcci8pOwogICAgICAgICAgICBpZiAoIShhLmxlbmd0aCA+IDAgJiYgYVswXS5pbmNsdWRlcygiVkVSU0lPTiIpKSkgcmV0dXJuIFtdOwogICAgICAgICAgICB2YXIgbiA9IGEuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZS5pbmNsdWRlcygiUE9JTlRFUlMiKSB8fCBlLmluY2x1ZGVzKCJBVE9NX05BTUUiKSB8fCBlLmluY2x1ZGVzKCJDSEFSR0UiKSB8fCBlLmluY2x1ZGVzKCJSQURJSSIpIHx8IGUuaW5jbHVkZXMoIkJPTkRTX0lOQ19IWURST0dFTiIpIHx8IGUuaW5jbHVkZXMoIkJPTkRTX1dJVEhPVVRfSFlEUk9HRU4iKTsKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBvID0gdSgiUE9JTlRFUlMiKTsKICAgICAgICAgICAgaWYgKC0xID09IG8pIHJldHVybiBbXTsKICAgICAgICAgICAgdmFyIGwgPSBmKG8pLAogICAgICAgICAgICAgIGggPSBwYXJzZUludChhW28gKyAxXS5zbGljZSgwLCBsWzFdKSk7CiAgICAgICAgICAgIGlmIChpc05hTihoKSB8fCBoIDw9IDApIHJldHVybiBbXTsKICAgICAgICAgICAgaWYgKC0xID09IChvID0gdSgiQVRPTV9OQU1FIikpKSByZXR1cm4gW107CiAgICAgICAgICAgIHZhciBjID0gKGwgPSBmKG8pKVswXTsKICAgICAgICAgICAgZm9yICh2YXIgX2UxMzMgPSAwOyBfZTEzMyA8IGggLyBsWzBdOyBfZTEzMysrKSB7CiAgICAgICAgICAgICAgX2UxMzMgPT0gcGFyc2VJbnQoaCAvIGxbMF0pICYmIChjID0gaCAlIGxbMF0pOwogICAgICAgICAgICAgIGZvciAodmFyIF9lMTM0ID0gMDsgX2UxMzQgPCBjOyBfZTEzNCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgX3QxMTggPSB7fSwKICAgICAgICAgICAgICAgICAgX24zMSA9IHsKICAgICAgICAgICAgICAgICAgICBjaGFyZ2U6ICIiLAogICAgICAgICAgICAgICAgICAgIHJhZGlpOiAiIgogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX3QxMTguc2VyaWFsID0gcywgX3QxMTgueCA9IDAsIF90MTE4LnkgPSAwLCBfdDExOC56ID0gMCwgX3QxMTguYXRvbSA9IGFbbyArIDFdLnNsaWNlKGxbMV0gKiBfZTEzNCwgbFsxXSAqIChfZTEzNCArIDEpKSwgX3QxMTguZWxlbSA9IGFbbyArIDFdLnNsaWNlKGxbMV0gKiBfZTEzNCwgbFsxXSAqIF9lMTM0ICsgMSksIF90MTE4LnByb3BlcnRpZXMgPSBfbjMxLCBfdDExOC5ib25kcyA9IFtdLCBfdDExOC5ib25kT3JkZXIgPSBbXSwgci5wdXNoKF90MTE4KSwgcysrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBvKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKC0xICE9IChvID0gdSgiQ0hBUkdFIikpKSB7CiAgICAgICAgICAgICAgcyA9IDAsIGMgPSAobCA9IGYobykpWzBdOwogICAgICAgICAgICAgIGZvciAodmFyIF9lMTM1ID0gMDsgX2UxMzUgPCBoIC8gbFswXTsgX2UxMzUrKykgewogICAgICAgICAgICAgICAgX2UxMzUgPT0gcGFyc2VJbnQoaCAvIGxbMF0pICYmIChjID0gaCAlIGxbMF0pOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX2UxMzYgPSAwOyBfZTEzNiA8IGM7IF9lMTM2KyspIHJbc10ucHJvcGVydGllcy5jaGFyZ2UgPSBwYXJzZUZsb2F0KGFbbyArIDFdLnNsaWNlKGxbMV0gKiBfZTEzNiwgbFsxXSAqIChfZTEzNiArIDEpKSksIHMrKzsKICAgICAgICAgICAgICAgIG8rKzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKC0xICE9IChvID0gdSgiUkFESUkiKSkpIHsKICAgICAgICAgICAgICBzID0gMCwgYyA9IChsID0gZihvKSlbMF07CiAgICAgICAgICAgICAgZm9yICh2YXIgX2UxMzcgPSAwOyBfZTEzNyA8IGggLyBsWzBdOyBfZTEzNysrKSB7CiAgICAgICAgICAgICAgICBfZTEzNyA9PSBwYXJzZUludChoIC8gbFswXSkgJiYgKGMgPSBoICUgbFswXSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZTEzOCA9IDA7IF9lMTM4IDwgYzsgX2UxMzgrKykgcltzXS5wcm9wZXJ0aWVzLnJhZGlpID0gcGFyc2VGbG9hdChhW28gKyAxXS5zbGljZShsWzFdICogX2UxMzgsIGxbMV0gKiAoX2UxMzggKyAxKSkpLCBzKys7CiAgICAgICAgICAgICAgICBvKys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgtMSAhPSAobyA9IHUoIkJPTkRTX1dJVEhPVVRfSFlEUk9HRU4iKSkpIGZvciAocyA9IDAsIGMgPSAobCA9IGYobykpWzBdLCBvICs9IDE7ICFhW29dLm1hdGNoKC9eJUZMQUcvKTspIHsKICAgICAgICAgICAgICBhW28gKyAxXS5tYXRjaCgvXiVGTEFHLykgJiYgKGMgPSBoICUgbFswXSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgX2UxMzkgPSAwOyBfZTEzOSA8IGM7IF9lMTM5KyspIHMgJSAzID09IDAgPyB0ID0gcGFyc2VJbnQoYVtvXS5zbGljZShsWzFdICogX2UxMzksIGxbMV0gKiAoX2UxMzkgKyAxKSkgLyAzKSA6IHMgJSAzID09IDEgJiYgclt0XS5ib25kcy5wdXNoKHBhcnNlSW50KGFbb10uc2xpY2UobFsxXSAqIF9lMTM5LCBsWzFdICogKF9lMTM5ICsgMSkpIC8gMykpLCBzKys7CiAgICAgICAgICAgICAgbysrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgtMSAhPSAobyA9IHUoIkJPTkRTX0lOQ19IWURST0dFTiIpKSkgZm9yIChzID0gMCwgYyA9IChsID0gZihvKSlbMF0sIG8gKz0gMTsgIWFbb10ubWF0Y2goL14lRkxBRy8pOykgewogICAgICAgICAgICAgIGFbbyArIDFdLm1hdGNoKC9eJUZMQUcvKSAmJiAoYyA9IGggJSBsWzBdKTsKICAgICAgICAgICAgICBmb3IgKHZhciBfZTE0MCA9IDA7IF9lMTQwIDwgYzsgX2UxNDArKykgcyAlIDMgPT0gMCA/IHQgPSBwYXJzZUludChhW29dLnNsaWNlKGxbMV0gKiBfZTE0MCwgbFsxXSAqIChfZTE0MCArIDEpKSAvIDMpIDogcyAlIDMgPT0gMSAmJiByW3RdLmJvbmRzLnB1c2gocGFyc2VJbnQoYVtvXS5zbGljZShsWzFdICogX2UxNDAsIGxbMV0gKiAoX2UxNDAgKyAxKSkgLyAzKSksIHMrKzsKICAgICAgICAgICAgICBvKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdShlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBhLmluZGV4T2Yobi5maWx0ZXIoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0LmluY2x1ZGVzKGUpOwogICAgICAgICAgICAgIH0pWzBdKTsKICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih0KSAmJiB0ID4gMCkgewogICAgICAgICAgICAgICAgZm9yICg7ICFhW3RdLmluY2x1ZGVzKCJGT1JNQVQiKTspIHQrKzsKICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZihlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBhW2VdLm1hdGNoKC9cKChcZCopXFMqLyksCiAgICAgICAgICAgICAgICByID0gYVtlXS5tYXRjaCgvW2EtekEtWl0oXGQqKVwpXHMqLyk7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gciAmJiAociA9IGFbZV0ubWF0Y2goL1thLXpBLVpdKFxkKilcLlxkKlwpXHMqLykpLCBbdFsxXSwgclsxXV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFtyXTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIE8oZSkgewogICAgICAgICAgICBmb3IgKHZhciB0ID0gW10sIHIgPSBlLnNwbGl0KC9ccj9cbnxcci8pOyByLmxlbmd0aCA+IDAgJiYgIShyLmxlbmd0aCA8IDMpOykgewogICAgICAgICAgICAgIHZhciBzID0gcGFyc2VJbnQoclsxXSk7CiAgICAgICAgICAgICAgaWYgKGlzTmFOKHMpIHx8IHMgPD0gMCkgYnJlYWs7CiAgICAgICAgICAgICAgaWYgKHIubGVuZ3RoIDwgcyArIDMpIGJyZWFrOwogICAgICAgICAgICAgIHZhciBhID0gW107CiAgICAgICAgICAgICAgdC5wdXNoKGEpOwogICAgICAgICAgICAgIGZvciAodmFyIG4gPSAyLCBvID0gYS5sZW5ndGgsIGwgPSBvICsgcywgaCA9IG87IGggPCBsOyBoKyspIHsKICAgICAgICAgICAgICAgIHZhciBjID0gcltuKytdLAogICAgICAgICAgICAgICAgICB1ID0ge307CiAgICAgICAgICAgICAgICB1LnNlcmlhbCA9IGgsIHUuYXRvbSA9IGMuc2xpY2UoMTAsIDE1KS50cmltKCksIHUuZWxlbSA9IHkodS5hdG9tLCAhMCksIHUueCA9IDEwICogcGFyc2VGbG9hdChjLnNsaWNlKDIwLCAyOCkpLCB1LnkgPSAxMCAqIHBhcnNlRmxvYXQoYy5zbGljZSgyOCwgMzYpKSwgdS56ID0gMTAgKiBwYXJzZUZsb2F0KGMuc2xpY2UoMzYsIDQ0KSksIHUucmVzaSA9IHBhcnNlSW50KGMuc2xpY2UoMCwgNSkpLCB1LnJlc24gPSBjLnNsaWNlKDUsIDEwKS50cmltKCksIHUuYm9uZHMgPSBbXSwgdS5ib25kT3JkZXIgPSBbXSwgdS5wcm9wZXJ0aWVzID0ge30sIGMubGVuZ3RoID4gNDQgJiYgKHUuZHggPSAxMCAqIHBhcnNlRmxvYXQoYy5zbGljZSg0NCwgNTIpKSwgdS5keSA9IDEwICogcGFyc2VGbG9hdChjLnNsaWNlKDUyLCA2MCkpLCB1LmR6ID0gMTAgKiBwYXJzZUZsb2F0KGMuc2xpY2UoNjAsIDY4KSkpLCBhW2hdID0gdTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHIubGVuZ3RoIDw9IG4gKyAzKSB7CiAgICAgICAgICAgICAgICB2YXIgZiA9IHJbbisrXS50cmltKCkuc3BsaXQoL1xzKy8pOwogICAgICAgICAgICAgICAgaWYgKDMgPT0gZi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCAzOyBwKyspIGZbcF0gPSAxMCAqIHBhcnNlRmxvYXQoZltwXSk7CiAgICAgICAgICAgICAgICAgIHQuYm94ID0gZjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgci5zcGxpY2UoMCwgKytuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBfZTE0MSA9IDA7IF9lMTQxIDwgdC5sZW5ndGg7IF9lMTQxKyspIHgodFtfZTE0MV0pOwogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEQoZSwgdCkgewogICAgICAgICAgICBmb3IgKHZhciByID0gW10sIHMgPSB7CiAgICAgICAgICAgICAgICBpZDogInNlcmlhbCIsCiAgICAgICAgICAgICAgICB0eXBlOiAiYXRvbSIsCiAgICAgICAgICAgICAgICBlbGVtZW50OiAiZWxlbSIsCiAgICAgICAgICAgICAgICBxOiAiY2hhcmdlIiwKICAgICAgICAgICAgICAgIHJhZGl1czogInJhZGl1cyIsCiAgICAgICAgICAgICAgICB4OiAieCIsCiAgICAgICAgICAgICAgICB4dTogIngiLAogICAgICAgICAgICAgICAgeHM6ICJ4IiwKICAgICAgICAgICAgICAgIHhzdTogIngiLAogICAgICAgICAgICAgICAgeTogInkiLAogICAgICAgICAgICAgICAgeXU6ICJ5IiwKICAgICAgICAgICAgICAgIHlzOiAieSIsCiAgICAgICAgICAgICAgICB5c3U6ICJ5IiwKICAgICAgICAgICAgICAgIHo6ICJ6IiwKICAgICAgICAgICAgICAgIHp1OiAieiIsCiAgICAgICAgICAgICAgICB6czogInoiLAogICAgICAgICAgICAgICAgenN1OiAieiIKICAgICAgICAgICAgICB9LCBhID0gZS5zcGxpdCgvXHI/XG58XHIvKSwgbiA9IDAsIGwgPSAwLCBoID0gMDsgaCA8IGEubGVuZ3RoIC0gOTspIHsKICAgICAgICAgICAgICBmb3IgKHZhciBjID0gaDsgYyA8IGEubGVuZ3RoOyBjKyspIGlmIChhW2NdLm1hdGNoKC9JVEVNOiBOVU1CRVIgT0YgQVRPTVMvKSAmJiAobCA9IHBhcnNlSW50KGFbYyArIDFdKSksIGFbY10ubWF0Y2goL0lURU06IEFUT01TLykpIHsKICAgICAgICAgICAgICAgIG4gPSBjICsgMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgdSA9IGFbbiAtIDFdLnJlcGxhY2UoIklURU06IEFUT01TICIsICIiKS5zcGxpdCgiICIpOwogICAgICAgICAgICAgIHIucHVzaChbXSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgX2UxNDIgPSBuOyBfZTE0MiA8IG4gKyBsOyBfZTE0MisrKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBmID0ge30sIHAgPSB7fSwgZyA9IGFbX2UxNDJdLnNwbGl0KCIgIiksIHYgPSAwOyB2IDwgZy5sZW5ndGg7IHYrKykgewogICAgICAgICAgICAgICAgICB2YXIgXyA9IHNbdVt2XV07CiAgICAgICAgICAgICAgICAgIG51bGwgIT0gXyAmJiAoInNlcmlhbCIgPT0gXyA/IGZbX10gPSBwYXJzZUludChnW3ZdKSA6ICJ4IiA9PSBfIHx8ICJ5IiA9PSBfIHx8ICJ6IiA9PT0gXyA/IGZbX10gPSBwYXJzZUZsb2F0KGdbdl0pIDogImNoYXJnZSIgPT0gXyB8fCAicmFkaXVzIiA9PSBfID8gcFtfXSA9IHBhcnNlRmxvYXQoZ1t2XSkgOiBmW19dID0gZ1t2XSksIGYucHJvcGVydGllcyA9IHAsIGYuYm9uZHMgPSBbXSwgZi5ib25kT3JkZXIgPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJbci5sZW5ndGggLSAxXVtfZTE0MiAtIG5dID0gZjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaCA9IG4gKyBsIC0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodC5hc3NpZ25Cb25kcykgZm9yICh2YXIgeSA9IDA7IHkgPCByLmxlbmd0aDsgeSsrKSAoMCwgby5hc3NpZ25Cb25kcykoclt5XSk7CiAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgfQogICAgICAgICAgdmFyIEYgPSB7CiAgICAgICAgICAgIHZhc3A6IHMuVkFTUCwKICAgICAgICAgICAgVkFTUDogcy5WQVNQLAogICAgICAgICAgICBjdWJlOiBhLkNVQkUsCiAgICAgICAgICAgIENVQkU6IGEuQ1VCRSwKICAgICAgICAgICAgeHl6OiBsLAogICAgICAgICAgICBYWVo6IGwsCiAgICAgICAgICAgIHNkZjogaCwKICAgICAgICAgICAgU0RGOiBoLAogICAgICAgICAgICBqc29uOiBjLAogICAgICAgICAgICBjZGpzb246IGMsCiAgICAgICAgICAgIENESlNPTjogYywKICAgICAgICAgICAgbWNpZjogcCwKICAgICAgICAgICAgY2lmOiBwLAogICAgICAgICAgICBDSUY6IHAsCiAgICAgICAgICAgIG1vbDI6IHYsCiAgICAgICAgICAgIE1PTDI6IHYsCiAgICAgICAgICAgIHBkYjogQywKICAgICAgICAgICAgUERCOiBDLAogICAgICAgICAgICBwZGJxdDogQywKICAgICAgICAgICAgUERCUVQ6IEMsCiAgICAgICAgICAgIHBxcjogUywKICAgICAgICAgICAgUFFSOiBTLAogICAgICAgICAgICBtbXRmOiBrLAogICAgICAgICAgICBNTVRGOiBrLAogICAgICAgICAgICBwcm10b3A6IEksCiAgICAgICAgICAgIFBSTVRPUDogSSwKICAgICAgICAgICAgZ3JvOiBPLAogICAgICAgICAgICBHUk86IE8sCiAgICAgICAgICAgIGxhbW1wc3RyajogRCwKICAgICAgICAgICAgTEFNTVBTVFJKOiBECiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgODk5NTogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgci5yKHQpLCByLmQodCwgewogICAgICAgICAgICBhcmVDb25uZWN0ZWQ6IGZ1bmN0aW9uIGFyZUNvbm5lY3RlZCgpIHsKICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcyA9IHIoMjkyOSk7CiAgICAgICAgICBmdW5jdGlvbiBhKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSAoMCwgcy5ib25kTGVuZ3RoKShlLmVsZW0pICsgKDAsIHMuYm9uZExlbmd0aCkodC5lbGVtKTsKICAgICAgICAgICAgciArPSAuMjUsIHIgKj0gcjsKICAgICAgICAgICAgdmFyIGEgPSBlLnggLSB0Lng7CiAgICAgICAgICAgIGlmICgoYSAqPSBhKSA+IHIpIHJldHVybiAhMTsKICAgICAgICAgICAgdmFyIG4gPSBlLnkgLSB0Lnk7CiAgICAgICAgICAgIGlmICgobiAqPSBuKSA+IHIpIHJldHVybiAhMTsKICAgICAgICAgICAgdmFyIG8gPSBlLnogLSB0Lno7CiAgICAgICAgICAgIGlmICgobyAqPSBvKSA+IHIpIHJldHVybiAhMTsKICAgICAgICAgICAgdmFyIGwgPSBhICsgbiArIG87CiAgICAgICAgICAgIHJldHVybiAhaXNOYU4obCkgJiYgIShsIDwgLjUpICYmICEobCA+IHIpICYmIChlLmFsdExvYyA9PSB0LmFsdExvYyB8fCAiICIgPT0gZS5hbHRMb2MgfHwgIiAiID09IHQuYWx0TG9jKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDM5MjA6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHIucih0KSwgci5kKHQsIHsKICAgICAgICAgICAgYXNzaWduQm9uZHM6IGZ1bmN0aW9uIGFzc2lnbkJvbmRzKCkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzID0gcig4OTk1KTsKICAgICAgICAgIGZ1bmN0aW9uIGEoZSkgewogICAgICAgICAgICBmb3IgKHZhciB0ID0gMCwgciA9IGUubGVuZ3RoOyB0IDwgcjsgdCsrKSBlW3RdLmluZGV4IHx8IChlW3RdLmluZGV4ID0gdCk7CiAgICAgICAgICAgIGZvciAodmFyIGEgPSB7fSwgbiA9IDQuOTUsIG8gPSAwOyBvIDwgZS5sZW5ndGg7IG8rKykgewogICAgICAgICAgICAgIHZhciBsID0gZVtvXSwKICAgICAgICAgICAgICAgIGggPSBNYXRoLmZsb29yKGwueCAvIG4pLAogICAgICAgICAgICAgICAgYyA9IE1hdGguZmxvb3IobC55IC8gbiksCiAgICAgICAgICAgICAgICB1ID0gTWF0aC5mbG9vcihsLnogLyBuKTsKICAgICAgICAgICAgICBhW2hdIHx8IChhW2hdID0ge30pLCBhW2hdW2NdIHx8IChhW2hdW2NdID0ge30pLCBhW2hdW2NdW3VdIHx8IChhW2hdW2NdW3VdID0gW10pLCBhW2hdW2NdW3VdLnB1c2gobCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiBmKGUsIHQpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykgZm9yICh2YXIgYSA9IGVbcl0sIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykgewogICAgICAgICAgICAgICAgICB2YXIgbyA9IHRbbl07CiAgICAgICAgICAgICAgICAgIGlmICgoMCwgcy5hcmVDb25uZWN0ZWQpKGEsIG8pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhLmJvbmRzLmluZGV4T2Yoby5pbmRleCksCiAgICAgICAgICAgICAgICAgICAgICBoID0gby5ib25kcy5pbmRleE9mKGEuaW5kZXgpOwogICAgICAgICAgICAgICAgICAgIC0xID09IGwgJiYgLTEgPT0gaCA/IChhLmJvbmRzLnB1c2goby5pbmRleCksIGEuYm9uZE9yZGVyLnB1c2goMSksIG8uYm9uZHMucHVzaChhLmluZGV4KSwgby5ib25kT3JkZXIucHVzaCgxKSkgOiAtMSA9PSBsID8gKGEuYm9uZHMucHVzaChvLmluZGV4KSwgYS5ib25kT3JkZXIucHVzaChvLmJvbmRPcmRlcltoXSkpIDogLTEgPT0gaCAmJiAoby5ib25kcy5wdXNoKGEuaW5kZXgpLCBvLmJvbmRPcmRlci5wdXNoKGEuYm9uZE9yZGVyW2xdKSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHAgPSBbewogICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICB6OiAxCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgIHk6IDEsCiAgICAgICAgICAgICAgICB6OiAtMQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICB5OiAxLAogICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICB5OiAxLAogICAgICAgICAgICAgICAgejogMQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDEsCiAgICAgICAgICAgICAgICB5OiAtMSwKICAgICAgICAgICAgICAgIHo6IC0xCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgeDogMSwKICAgICAgICAgICAgICAgIHk6IC0xLAogICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDEsCiAgICAgICAgICAgICAgICB5OiAtMSwKICAgICAgICAgICAgICAgIHo6IDEKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB4OiAxLAogICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgIHo6IC0xCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgeDogMSwKICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgeDogMSwKICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICB6OiAxCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgeDogMSwKICAgICAgICAgICAgICAgIHk6IDEsCiAgICAgICAgICAgICAgICB6OiAtMQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDEsCiAgICAgICAgICAgICAgICB5OiAxLAogICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHg6IDEsCiAgICAgICAgICAgICAgICB5OiAxLAogICAgICAgICAgICAgICAgejogMQogICAgICAgICAgICAgIH1dOwogICAgICAgICAgICBmb3IgKHZhciBfZTE0MyBpbiBhKSB7CiAgICAgICAgICAgICAgdmFyIF90MTE5ID0gcGFyc2VJbnQoX2UxNDMpOwogICAgICAgICAgICAgIGZvciAodmFyIF9lMTQ0IGluIGFbX3QxMTldKSB7CiAgICAgICAgICAgICAgICB2YXIgX3I3MCA9IHBhcnNlSW50KF9lMTQ0KTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9lMTQ1IGluIGFbX3QxMTldW19yNzBdKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfbjMyID0gcGFyc2VJbnQoX2UxNDUpLAogICAgICAgICAgICAgICAgICAgIF9vMzAgPSBhW190MTE5XVtfcjcwXVtfbjMyXTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UxNDYgPSAwOyBfZTE0NiA8IF9vMzAubGVuZ3RoOyBfZTE0NisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90MTIwID0gX28zMFtfZTE0Nl07CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3I3MSA9IF9lMTQ2ICsgMTsgX3I3MSA8IF9vMzAubGVuZ3RoOyBfcjcxKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfZTE0NyA9IF9vMzBbX3I3MV07CiAgICAgICAgICAgICAgICAgICAgICAoMCwgcy5hcmVDb25uZWN0ZWQpKF90MTIwLCBfZTE0NykgJiYgLTEgPT0gX3QxMjAuYm9uZHMuaW5kZXhPZihfZTE0Ny5pbmRleCkgJiYgKF90MTIwLmJvbmRzLnB1c2goX2UxNDcuaW5kZXgpLCBfdDEyMC5ib25kT3JkZXIucHVzaCgxKSwgX2UxNDcuYm9uZHMucHVzaChfdDEyMC5pbmRleCksIF9lMTQ3LmJvbmRPcmRlci5wdXNoKDEpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UxNDggPSAwOyBfZTE0OCA8IHAubGVuZ3RoOyBfZTE0OCsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9zNTkgPSBwW19lMTQ4XTsKICAgICAgICAgICAgICAgICAgICBhW190MTE5ICsgX3M1OS54XSAmJiBhW190MTE5ICsgX3M1OS54XVtfcjcwICsgX3M1OS55XSAmJiBhW190MTE5ICsgX3M1OS54XVtfcjcwICsgX3M1OS55XVtfbjMyICsgX3M1OS56XSAmJiBmKF9vMzAsIGFbX3QxMTkgKyBfczU5LnhdW19yNzAgKyBfczU5LnldW19uMzIgKyBfczU5LnpdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgMjkyOTogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgci5yKHQpLCByLmQodCwgewogICAgICAgICAgICBib25kTGVuZ3RoOiBmdW5jdGlvbiBib25kTGVuZ3RoKCkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9LAogICAgICAgICAgICBib25kVGFibGU6IGZ1bmN0aW9uIGJvbmRUYWJsZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0Qm9uZExlbmd0aDogZnVuY3Rpb24gc2V0Qm9uZExlbmd0aCgpIHsKICAgICAgICAgICAgICByZXR1cm4gbjsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgcyA9IHsKICAgICAgICAgICAgSDogLjM3LAogICAgICAgICAgICBIZTogLjMyLAogICAgICAgICAgICBMaTogMS4zNCwKICAgICAgICAgICAgQmU6IC45LAogICAgICAgICAgICBCOiAuODIsCiAgICAgICAgICAgIEM6IC43NywKICAgICAgICAgICAgTjogLjc1LAogICAgICAgICAgICBPOiAuNzMsCiAgICAgICAgICAgIEY6IC43MSwKICAgICAgICAgICAgTmU6IC42OSwKICAgICAgICAgICAgTmE6IDEuNTQsCiAgICAgICAgICAgIE1nOiAxLjMsCiAgICAgICAgICAgIEFsOiAxLjE4LAogICAgICAgICAgICBTaTogMS4xMSwKICAgICAgICAgICAgUDogMS4wNiwKICAgICAgICAgICAgUzogMS4wMiwKICAgICAgICAgICAgQ2w6IC45OSwKICAgICAgICAgICAgQXI6IC45NywKICAgICAgICAgICAgSzogMS45NiwKICAgICAgICAgICAgQ2E6IDEuNzQsCiAgICAgICAgICAgIFNjOiAxLjQ0LAogICAgICAgICAgICBUaTogMS41NiwKICAgICAgICAgICAgVjogMS4yNSwKICAgICAgICAgICAgTW46IDEuMzksCiAgICAgICAgICAgIEZlOiAxLjI1LAogICAgICAgICAgICBDbzogMS4yNiwKICAgICAgICAgICAgTmk6IDEuMjEsCiAgICAgICAgICAgIEN1OiAxLjM4LAogICAgICAgICAgICBabjogMS4zMSwKICAgICAgICAgICAgR2E6IDEuMjYsCiAgICAgICAgICAgIEdlOiAxLjIyLAogICAgICAgICAgICBTZTogMS4xNiwKICAgICAgICAgICAgQnI6IDEuMTQsCiAgICAgICAgICAgIEtyOiAxLjEsCiAgICAgICAgICAgIFJiOiAyLjExLAogICAgICAgICAgICBTcjogMS45MiwKICAgICAgICAgICAgWTogMS42MiwKICAgICAgICAgICAgWnI6IDEuNDgsCiAgICAgICAgICAgIE5iOiAxLjM3LAogICAgICAgICAgICBNbzogMS40NSwKICAgICAgICAgICAgVGM6IDEuNTYsCiAgICAgICAgICAgIFJ1OiAxLjI2LAogICAgICAgICAgICBSaDogMS4zNSwKICAgICAgICAgICAgUGQ6IDEuMzEsCiAgICAgICAgICAgIEFnOiAxLjUzLAogICAgICAgICAgICBDZDogMS40OCwKICAgICAgICAgICAgSW46IDEuNDQsCiAgICAgICAgICAgIFNuOiAxLjQxLAogICAgICAgICAgICBTYjogMS4zOCwKICAgICAgICAgICAgVGU6IDEuMzUsCiAgICAgICAgICAgIEk6IDEuMzMsCiAgICAgICAgICAgIFhlOiAxLjMsCiAgICAgICAgICAgIENzOiAyLjI1LAogICAgICAgICAgICBCYTogMS45OCwKICAgICAgICAgICAgTHU6IDEuNiwKICAgICAgICAgICAgSGY6IDEuNSwKICAgICAgICAgICAgVGE6IDEuMzgsCiAgICAgICAgICAgIFc6IDEuNDYsCiAgICAgICAgICAgIFJlOiAxLjU5LAogICAgICAgICAgICBPczogMS40NCwKICAgICAgICAgICAgSXI6IDEuMzcsCiAgICAgICAgICAgIFB0OiAxLjI4LAogICAgICAgICAgICBBdTogMS40NCwKICAgICAgICAgICAgSGc6IDEuNDksCiAgICAgICAgICAgIFRsOiAxLjQ4LAogICAgICAgICAgICBQYjogMS40NywKICAgICAgICAgICAgQmk6IDEuNDYsCiAgICAgICAgICAgIFJuOiAxLjQ1CiAgICAgICAgICB9OwogICAgICAgICAgZnVuY3Rpb24gYShlKSB7CiAgICAgICAgICAgIHJldHVybiBzW2VdIHx8IDEuNjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIG4oZSwgdCkgewogICAgICAgICAgICB0IDwgMCAmJiAodCA9IDApLCBzW2VdID0gdDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDkwMDU6IGZ1bmN0aW9uIF8oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyksIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7CiAgICAgICAgICAgIFBhdXNhYmxlVGltZXI6IGZ1bmN0aW9uIFBhdXNhYmxlVGltZXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9QYXVzYWJsZVRpbWVyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBhZGp1c3RWb2x1bWVTdHlsZTogZnVuY3Rpb24gYWRqdXN0Vm9sdW1lU3R5bGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9hZGp1c3RWb2x1bWVTdHlsZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmFzZTY0VG9BcnJheTogZnVuY3Rpb24gYmFzZTY0VG9BcnJheSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2Jhc2U2NFRvQXJyYXk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZXBDb3B5OiBmdW5jdGlvbiBkZWVwQ29weSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2RlZXBDb3B5OwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb3dubG9hZDogZnVuY3Rpb24gZG93bmxvYWQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9kb3dubG9hZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9leHRlbmQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgIHJldHVybiBfZ2V0MjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0QXRvbVByb3BlcnR5OiBmdW5jdGlvbiBnZXRBdG9tUHJvcGVydHkoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRBdG9tUHJvcGVydHk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldENvbG9yRnJvbVN0eWxlOiBmdW5jdGlvbiBnZXRDb2xvckZyb21TdHlsZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2dldENvbG9yRnJvbVN0eWxlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbiBnZXRFbGVtZW50KCkgewogICAgICAgICAgICAgIHJldHVybiBfZ2V0RWxlbWVudDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0RXh0ZW50OiBmdW5jdGlvbiBnZXRFeHRlbnQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRFeHRlbnQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldFByb3BlcnR5UmFuZ2U6IGZ1bmN0aW9uIGdldFByb3BlcnR5UmFuZ2UoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRQcm9wZXJ0eVJhbmdlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRiaW46IGZ1bmN0aW9uIGdldGJpbigpIHsKICAgICAgICAgICAgICByZXR1cm4gX2dldGJpbjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNFbXB0eU9iamVjdDogZnVuY3Rpb24gaXNFbXB0eU9iamVjdCgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2lzRW1wdHlPYmplY3Q7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzTnVtZXJpYzogZnVuY3Rpb24gaXNOdW1lcmljKCkgewogICAgICAgICAgICAgIHJldHVybiBfaXNOdW1lcmljOwogICAgICAgICAgICB9LAogICAgICAgICAgICBtYWtlRnVuY3Rpb246IGZ1bmN0aW9uIG1ha2VGdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gX21ha2VGdW5jdGlvbjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWVyZ2VHZW9zOiBmdW5jdGlvbiBtZXJnZUdlb3MoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9tZXJnZUdlb3M7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNwZWNTdHJpbmdUb09iamVjdDogZnVuY3Rpb24gc3BlY1N0cmluZ1RvT2JqZWN0KCkgewogICAgICAgICAgICAgIHJldHVybiBfc3BlY1N0cmluZ1RvT2JqZWN0OwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBfR3JhZGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ2MCksCiAgICAgICAgICAgIF9Wb2x1bWVEYXRhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczMjMpLAogICAgICAgICAgICBfY29sb3JzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1NTApOwogICAgICAgICAgZnVuY3Rpb24gX2V4dGVuZChlLCB0KSB7CiAgICAgICAgICAgIGZvciAodmFyIHIgaW4gdCkgdC5oYXNPd25Qcm9wZXJ0eShyKSAmJiB2b2lkIDAgIT09IHRbcl0gJiYgKGVbcl0gPSB0W3JdKTsKICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfZGVlcENvcHkoZSkgewogICAgICAgICAgICB2YXIgdCwgciwgczsKICAgICAgICAgICAgaWYgKG51bGwgPT0gZSkgcmV0dXJuIHt9OwogICAgICAgICAgICBpZiAoIm9iamVjdCIgIT0gX3R5cGVvZihlKSB8fCBudWxsID09PSBlKSByZXR1cm4gZTsKICAgICAgICAgICAgZm9yIChzIGluIHQgPSBBcnJheS5pc0FycmF5KGUpID8gW10gOiB7fSwgZSkgciA9IGVbc10sIHRbc10gPSBfZGVlcENvcHkocik7CiAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2lzTnVtZXJpYyhlKSB7CiAgICAgICAgICAgIHZhciB0ID0gX3R5cGVvZihlKTsKICAgICAgICAgICAgcmV0dXJuICgibnVtYmVyIiA9PT0gdCB8fCAic3RyaW5nIiA9PT0gdCkgJiYgIWlzTmFOKGUgLSBwYXJzZUZsb2F0KGUpKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9pc0VtcHR5T2JqZWN0KGUpIHsKICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgIGZvciAodCBpbiBlKSByZXR1cm4gITE7CiAgICAgICAgICAgIHJldHVybiAhMDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9tYWtlRnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmICJzdHJpbmciID09IHR5cGVvZiBjYWxsYmFjayAmJiAoY2FsbGJhY2sgPSBldmFsKCIoIiArIGNhbGxiYWNrICsgIikiKSksIGNhbGxiYWNrICYmICJmdW5jdGlvbiIgIT0gdHlwZW9mIGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2FkanVzdFZvbHVtZVN0eWxlKGUpIHsKICAgICAgICAgICAgZSAmJiAoIWUudm9sZm9ybWF0IHx8IGUudm9sZGF0YSBpbnN0YW5jZW9mIF9Wb2x1bWVEYXRhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uVm9sdW1lRGF0YSB8fCAoZS52b2xkYXRhID0gbmV3IF9Wb2x1bWVEYXRhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uVm9sdW1lRGF0YShlLnZvbGRhdGEsIGUudm9sZm9ybWF0KSksIGUudm9sc2NoZW1lICYmIChlLnZvbHNjaGVtZSA9IF9HcmFkaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkdyYWRpZW50LmdldEdyYWRpZW50KGUudm9sc2NoZW1lKSkpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2dldEV4dGVudChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIHMsCiAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgbCwKICAgICAgICAgICAgICBoLAogICAgICAgICAgICAgIGMsCiAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICBmLAogICAgICAgICAgICAgIHAgPSAhdDsKICAgICAgICAgICAgaWYgKHIgPSBzID0gYSA9IDk5OTksIG4gPSBvID0gbCA9IC05OTk5LCBoID0gYyA9IHUgPSBmID0gMCwgMCA9PT0gZS5sZW5ndGgpIHJldHVybiBbWzAsIDAsIDBdLCBbMCwgMCwgMF0sIFswLCAwLCAwXV07CiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZS5sZW5ndGg7IGcrKykgewogICAgICAgICAgICAgIHZhciB2ID0gZVtnXTsKICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB2ICYmIGlzRmluaXRlKHYueCkgJiYgaXNGaW5pdGUodi55KSAmJiBpc0Zpbml0ZSh2LnopICYmIChmKyssIGggKz0gdi54LCBjICs9IHYueSwgdSArPSB2LnosIHIgPSByIDwgdi54ID8gciA6IHYueCwgcyA9IHMgPCB2LnkgPyBzIDogdi55LCBhID0gYSA8IHYueiA/IGEgOiB2LnosIG4gPSBuID4gdi54ID8gbiA6IHYueCwgbyA9IG8gPiB2LnkgPyBvIDogdi55LCBsID0gbCA+IHYueiA/IGwgOiB2LnosIHYuc3ltbWV0cmllcyAmJiBwKSkgZm9yICh2YXIgXyA9IDA7IF8gPCB2LnN5bW1ldHJpZXMubGVuZ3RoOyBfKyspIGYrKywgaCArPSB2LnN5bW1ldHJpZXNbX10ueCwgYyArPSB2LnN5bW1ldHJpZXNbX10ueSwgdSArPSB2LnN5bW1ldHJpZXNbX10ueiwgciA9IHIgPCB2LnN5bW1ldHJpZXNbX10ueCA/IHIgOiB2LnN5bW1ldHJpZXNbX10ueCwgcyA9IHMgPCB2LnN5bW1ldHJpZXNbX10ueSA/IHMgOiB2LnN5bW1ldHJpZXNbX10ueSwgYSA9IGEgPCB2LnN5bW1ldHJpZXNbX10ueiA/IGEgOiB2LnN5bW1ldHJpZXNbX10ueiwgbiA9IG4gPiB2LnN5bW1ldHJpZXNbX10ueCA/IG4gOiB2LnN5bW1ldHJpZXNbX10ueCwgbyA9IG8gPiB2LnN5bW1ldHJpZXNbX10ueSA/IG8gOiB2LnN5bW1ldHJpZXNbX10ueSwgbCA9IGwgPiB2LnN5bW1ldHJpZXNbX10ueiA/IGwgOiB2LnN5bW1ldHJpZXNbX10uejsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW1tyLCBzLCBhXSwgW24sIG8sIGxdLCBbaCAvIGYsIGMgLyBmLCB1IC8gZl1dOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2dldFByb3BlcnR5UmFuZ2UoZSwgdCkgewogICAgICAgICAgICBmb3IgKHZhciByID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBzID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBhID0gMCwgbiA9IGUubGVuZ3RoOyBhIDwgbjsgYSsrKSB7CiAgICAgICAgICAgICAgdmFyIG8gPSBfZ2V0QXRvbVByb3BlcnR5KGVbYV0sIHQpOwogICAgICAgICAgICAgIG51bGwgIT0gbyAmJiAobyA8IHIgJiYgKHIgPSBvKSwgbyA+IHMgJiYgKHMgPSBvKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKHIpIHx8IGlzRmluaXRlKHMpID8gaXNGaW5pdGUocikgPyBpc0Zpbml0ZShzKSB8fCAocyA9IHIpIDogciA9IHMgOiByID0gcyA9IDAsIFtyLCBzXTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBfUGF1c2FibGVUaW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9QYXVzYWJsZVRpbWVyKGUsIHQsIHIpIHsKICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX1BhdXNhYmxlVGltZXIpOwogICAgICAgICAgICAgIHRoaXMudG90YWxfdGltZV9ydW4gPSAwLCB0aGlzLmZuID0gZSwgdGhpcy5hcmcgPSByLCB0aGlzLmNvdW50ZG93biA9IHQsIHRoaXMuc3RhcnRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCB0aGlzLmlkZW50ID0gc2V0VGltZW91dChlLCB0LCByKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY3JlYXRlQ2xhc3MoX1BhdXNhYmxlVGltZXIsIFt7CiAgICAgICAgICAgICAga2V5OiAiY2FuY2VsIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKCkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaWRlbnQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGtleTogInBhdXNlIiwKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5pZGVudCksIHRoaXMudG90YWxfdGltZV9ydW4gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRfdGltZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBrZXk6ICJyZXN1bWUiLAogICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWUoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlkZW50ID0gc2V0VGltZW91dCh0aGlzLmZuLCBNYXRoLm1heCgwLCB0aGlzLmNvdW50ZG93biAtIHRoaXMudG90YWxfdGltZV9ydW4pLCB0aGlzLmFyZyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XSk7CiAgICAgICAgICAgIHJldHVybiBfUGF1c2FibGVUaW1lcjsKICAgICAgICAgIH0oKTsKICAgICAgICAgIGZ1bmN0aW9uIF9iYXNlNjRUb0FycmF5KGUpIHsKICAgICAgICAgICAgZm9yICh2YXIgdCA9IHdpbmRvdy5hdG9iKGUpLCByID0gdC5sZW5ndGgsIHMgPSBuZXcgVWludDhBcnJheShyKSwgYSA9IDA7IGEgPCByOyBhKyspIHNbYV0gPSB0LmNoYXJDb2RlQXQoYSk7CiAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2dldEF0b21Qcm9wZXJ0eShlLCB0KSB7CiAgICAgICAgICAgIHZhciByID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIGUucHJvcGVydGllcyAmJiB2b2lkIDAgIT09IGUucHJvcGVydGllc1t0XSA/IHIgPSBlLnByb3BlcnRpZXNbdF0gOiB2b2lkIDAgIT09IGVbdF0gJiYgKHIgPSBlW3RdKSwgcjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9tZXJnZUdlb3MoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IHQuZ2VvbWV0cnk7CiAgICAgICAgICAgIHZvaWQgMCAhPT0gciAmJiBlLmdlb21ldHJ5R3JvdXBzLnB1c2goci5nZW9tZXRyeUdyb3Vwc1swXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfc3BlY1N0cmluZ1RvT2JqZWN0KGUpIHsKICAgICAgICAgICAgaWYgKCJvYmplY3QiID09IF90eXBlb2YoZSkpIHJldHVybiBlOwogICAgICAgICAgICBpZiAodm9pZCAwID09PSBlIHx8IG51bGwgPT0gZSkgcmV0dXJuIGU7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIHZhciB0ID0gZnVuY3Rpb24gdChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2lzTnVtZXJpYyhlKSA/IE1hdGguZmxvb3IocGFyc2VGbG9hdChlKSkgPT0gcGFyc2VJbnQoZSkgfHwgZS5pbmRleE9mKCIuIikgPj0gMCA/IHBhcnNlRmxvYXQoZSkgOiBwYXJzZUludChlKSA6ICJ0cnVlIiA9PT0gZSB8fCAiZmFsc2UiICE9PSBlICYmIGU7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICByID0ge307CiAgICAgICAgICAgIGlmICgiYWxsIiA9PT0gKGUgPSBlLnJlcGxhY2UoLyU3RS8sICJ+IikpKSByZXR1cm4gcjsKICAgICAgICAgICAgZm9yICh2YXIgcyA9IGUuc3BsaXQoIjsiKSwgYSA9IDA7IGEgPCBzLmxlbmd0aDsgYSsrKSB7CiAgICAgICAgICAgICAgdmFyIG4gPSBzW2FdLnNwbGl0KCI6IiksCiAgICAgICAgICAgICAgICBvID0gblswXSwKICAgICAgICAgICAgICAgIGwgPSB7fSwKICAgICAgICAgICAgICAgIGggPSBuWzFdOwogICAgICAgICAgICAgIGlmIChoKSBpZiAoLTEgIT09IChoID0gaC5yZXBsYWNlKC9+L2csICI9IikpLmluZGV4T2YoIj0iKSkgZm9yICh2YXIgYyA9IGguc3BsaXQoIiwiKSwgdSA9IDA7IHUgPCBjLmxlbmd0aDsgdSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZiA9IGNbdV0uc3BsaXQoIj0iLCAyKTsKICAgICAgICAgICAgICAgIGxbZlswXV0gPSB0KGZbMV0pOwogICAgICAgICAgICAgIH0gZWxzZSBsID0gLTEgIT09IGguaW5kZXhPZigiLCIpID8gaC5zcGxpdCgiLCIpIDogdChoKTsKICAgICAgICAgICAgICByW29dID0gbDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrU3RhdHVzKGUpIHsKICAgICAgICAgICAgaWYgKCFlLm9rKSB0aHJvdyBuZXcgRXJyb3IoIkhUVFAgIi5jb25jYXQoZS5zdGF0dXMsICIgLSAiKS5jb25jYXQoZS5zdGF0dXNUZXh0KSk7CiAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2dldDIoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IGZldGNoKGUpLnRoZW4oY2hlY2tTdGF0dXMpLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gZS50ZXh0KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdCA/IHIudGhlbih0KSA6IHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfZ2V0YmluKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgIHJldHVybiBhID0gIlBPU1QiID09IHIgPyBmZXRjaChlLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgYm9keTogcwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrU3RhdHVzKGUpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGUuYXJyYXlCdWZmZXIoKTsKICAgICAgICAgICAgfSkgOiBmZXRjaChlKS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrU3RhdHVzKGUpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGUuYXJyYXlCdWZmZXIoKTsKICAgICAgICAgICAgfSksIHQgPyBhLnRoZW4odCkgOiBhOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2Rvd25sb2FkKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgdmFyIGEgPSAiIiwKICAgICAgICAgICAgICBuID0gIiIsCiAgICAgICAgICAgICAgbyA9ICIiLAogICAgICAgICAgICAgIGwgPSAiIiwKICAgICAgICAgICAgICBoID0gbnVsbCwKICAgICAgICAgICAgICBjID0gdC5hZGRNb2RlbCgpOwogICAgICAgICAgICBpZiAoZS5pbmRleE9mKCI6IikgPCAwICYmIChlID0gNCA9PSBlLmxlbmd0aCA/ICJwZGI6IiArIGUgOiBpc05hTihlKSA/ICJ1cmw6IiArIGUgOiAiY2lkOiIgKyBlKSwgIm1tdGY6IiA9PT0gZS5zdWJzdHIoMCwgNSkpIG4gPSByICYmIHIucGRiVXJpID8gci5wZGJVcmkgOiAiaHR0cHM6Ly9tbXRmLnJjc2Iub3JnL3YxLjAvZnVsbC8iLCBlID0gZS5zdWJzdHIoNSkudG9VcHBlckNhc2UoKSwgbCA9IG4gKyBlLCByICYmIHZvaWQgMCA9PT0gci5ub0NvbXB1dGVTZWNvbmRhcnlTdHJ1Y3R1cmUgJiYgKHIubm9Db21wdXRlU2Vjb25kYXJ5U3RydWN0dXJlID0gITApLCBoID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBfZ2V0YmluKGwpLnRoZW4oZnVuY3Rpb24gKHMpIHsKICAgICAgICAgICAgICAgIGMuYWRkTW9sRGF0YShzLCAibW10ZiIsIHIpLCB0Lnpvb21UbygpLCB0LnJlbmRlcigpLCBlKGMpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmZXRjaCBvZiAiICsgbCArICIgZmFpbGVkLiIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTtlbHNlIHsKICAgICAgICAgICAgICBpZiAoInBkYjoiID09PSBlLnN1YnN0cigwLCA0KSkgewogICAgICAgICAgICAgICAgaWYgKGEgPSAibW10ZiIsIHIgJiYgci5mb3JtYXQgJiYgKGEgPSByLmZvcm1hdCksIHIgJiYgdm9pZCAwID09PSByLm5vQ29tcHV0ZVNlY29uZGFyeVN0cnVjdHVyZSAmJiAoci5ub0NvbXB1dGVTZWNvbmRhcnlTdHJ1Y3R1cmUgPSAhMCksICEoZSA9IGUuc3Vic3RyKDQpLnRvVXBwZXJDYXNlKCkpLm1hdGNoKC9eWzEtOV1bQS1aYS16MC05XXszfSQvKSkgcmV0dXJuIHZvaWQgYWxlcnQoIldyb25nIFBEQiBJRCIpOwogICAgICAgICAgICAgICAgIm1tdGYiID09IGEgPyAobyA9IHIgJiYgci5tbXRmVXJpID8gci5tbXRmVXJpIDogImh0dHBzOi8vbW10Zi5yY3NiLm9yZy92MS4wL2Z1bGwvIiwgbCA9IG8gKyBlLnRvVXBwZXJDYXNlKCkpIDogKG4gPSByICYmIHIucGRiVXJpID8gci5wZGJVcmkgOiAiaHR0cHM6Ly9maWxlcy5yY3NiLm9yZy92aWV3LyIsIGwgPSBuICsgZSArICIuIiArIGEpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoImNpZDoiID09IGUuc3Vic3RyKDAsIDQpKSB7CiAgICAgICAgICAgICAgICBpZiAoYSA9ICJzZGYiLCAhKGUgPSBlLnN1YnN0cig0KSkubWF0Y2goL15bMC05XSskLykpIHJldHVybiB2b2lkIGFsZXJ0KCJXcm9uZyBDb21wb3VuZCBJRCIpOwogICAgICAgICAgICAgICAgbCA9ICJodHRwczovL3B1YmNoZW0ubmNiaS5ubG0ubmloLmdvdi9yZXN0L3B1Zy9jb21wb3VuZC9jaWQvIiArIGUgKyAiL1NERj9yZWNvcmRfdHlwZT0zZCI7CiAgICAgICAgICAgICAgfSBlbHNlICJ1cmw6IiA9PSBlLnN1YnN0cigwLCA0KSAmJiAobCA9IGUuc3Vic3RyKDQpLCBhID0gbCk7CiAgICAgICAgICAgICAgdmFyIHUgPSBmdW5jdGlvbiB1KGUpIHsKICAgICAgICAgICAgICAgIGMuYWRkTW9sRGF0YShlLCBhLCByKSwgdC56b29tVG8oKSwgdC5yZW5kZXIoKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGggPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgIm1tdGYiID09IGEgPyBfZ2V0YmluKGwpLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgdShlKSwgdChjKTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgbiA9IHIgJiYgci5wZGJVcmkgPyByLnBkYlVyaSA6ICJodHRwczovL2ZpbGVzLnJjc2Iub3JnL3ZpZXcvIiwgbCA9IG4gKyBlICsgIi5wZGIiLCBhID0gInBkYiIsIGNvbnNvbGUubG9nKCJmYWxsaW5nIGJhY2sgdG8gcGRiIGZvcm1hdCIpLCBfZ2V0MihsKS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgdShlKSwgdChjKTsKICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICB1KCIiKSwgdChjKSwgY29uc29sZS5sb2coImZldGNoIG9mICIgKyBsICsgIiBmYWlsZWQ6ICIgKyBlLnN0YXR1c1RleHQpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pIDogX2dldDIobCkudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB1KGUpLCB0KGMpOwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgdSgiIiksIHQoYyksIGNvbnNvbGUubG9nKCJmZXRjaCBvZiAiICsgbCArICIgZmFpbGVkOiAiICsgZS5zdGF0dXNUZXh0KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzID8gKGgudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHMoZSk7CiAgICAgICAgICAgIH0pLCBjKSA6IGg7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfZ2V0Q29sb3JGcm9tU3R5bGUoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IHQuY29sb3JzY2hlbWU7CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5idWlsdGluQ29sb3JTY2hlbWVzW3JdKSByID0gX2NvbG9yc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmJ1aWx0aW5Db2xvclNjaGVtZXNbcl07ZWxzZSBpZiAoInN0cmluZyIgPT0gdHlwZW9mIHIgJiYgci5lbmRzV2l0aCgiQ2FyYm9uIikpIHsKICAgICAgICAgICAgICB2YXIgX2UxNDkgPSByLnN1YnN0cmluZygwLCByLmxhc3RJbmRleE9mKCJDYXJib24iKSkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBfY29sb3JzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uaHRtbENvbG9yc1tfZTE0OV0pIHsKICAgICAgICAgICAgICAgIHZhciBfdDEyMSA9IE9iamVjdC5hc3NpZ24oe30sIF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5lbGVtZW50Q29sb3JzLmRlZmF1bHRDb2xvcnMpOwogICAgICAgICAgICAgICAgX3QxMjEuQyA9IF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5odG1sQ29sb3JzW19lMTQ5XSwgX2NvbG9yc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmJ1aWx0aW5Db2xvclNjaGVtZXNbcl0gPSB7CiAgICAgICAgICAgICAgICAgIHByb3A6ICJlbGVtIiwKICAgICAgICAgICAgICAgICAgbWFwOiBfdDEyMQogICAgICAgICAgICAgICAgfSwgciA9IF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5idWlsdGluQ29sb3JTY2hlbWVzW3JdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcyA9IGUuY29sb3I7CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQuY29sb3IgJiYgInNwZWN0cnVtIiAhPSB0LmNvbG9yICYmIChzID0gdC5jb2xvciksIHZvaWQgMCAhPT0gcikgewogICAgICAgICAgICAgIHZhciBuLCBvOwogICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IF9jb2xvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5lbGVtZW50Q29sb3JzW3JdKSByID0gX2NvbG9yc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmVsZW1lbnRDb2xvcnNbcl0sIHZvaWQgMCAhPT0gcltlW3IucHJvcF1dICYmIChzID0gci5tYXBbZVtyLnByb3BdXSk7ZWxzZSBpZiAodm9pZCAwICE9PSByW2Vbci5wcm9wXV0pIHMgPSByLm1hcFtlW3IucHJvcF1dO2Vsc2UgaWYgKHZvaWQgMCAhPT0gci5wcm9wICYmIHZvaWQgMCAhPT0gci5ncmFkaWVudCkgewogICAgICAgICAgICAgICAgbiA9IHIucHJvcDsKICAgICAgICAgICAgICAgIHZhciBhID0gci5ncmFkaWVudDsKICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gX0dyYWRpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYnVpbHRpbkdyYWRpZW50c1thXSAmJiAoYSA9IG5ldyBfR3JhZGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5idWlsdGluR3JhZGllbnRzW2FdKHIubWluLCByLm1heCwgci5taWQgPyByLm1pZCA6IHIuY29sb3JzKSk7CiAgICAgICAgICAgICAgICB2YXIgX3QxMjIgPSBhLnJhbmdlKCkgfHwgWy0xLCAxXTsKICAgICAgICAgICAgICAgIG8gPSBfZ2V0QXRvbVByb3BlcnR5KGUsIG4pLCBudWxsICE9IG8gJiYgKHMgPSBhLnZhbHVlVG9IZXgobywgX3QxMjIpKTsKICAgICAgICAgICAgICB9IGVsc2Ugdm9pZCAwICE9PSByLnByb3AgJiYgdm9pZCAwICE9PSByLm1hcCA/IChuID0gci5wcm9wLCBvID0gX2dldEF0b21Qcm9wZXJ0eShlLCBuKSwgdm9pZCAwICE9PSByLm1hcFtvXSAmJiAocyA9IHIubWFwW29dKSkgOiB2b2lkIDAgIT09IHQuY29sb3JzY2hlbWVbZS5lbGVtXSA/IHMgPSB0LmNvbG9yc2NoZW1lW2UuZWxlbV0gOiBjb25zb2xlLmxvZygiQ291bGQgbm90IGludGVycHJldCBjb2xvcnNjaGVtZSAiICsgcik7CiAgICAgICAgICAgIH0gZWxzZSB2b2lkIDAgIT09IHQuY29sb3JmdW5jICYmIChzID0gdC5jb2xvcmZ1bmMoZSkpOwogICAgICAgICAgICByZXR1cm4gX2NvbG9yc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNDLmNvbG9yKHMpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnQoZSkgewogICAgICAgICAgICB2YXIgdCA9IGU7CiAgICAgICAgICAgIHJldHVybiAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjIiArIGUpIDogIm9iamVjdCIgPT0gX3R5cGVvZihlKSAmJiBlLmdldCAmJiAodCA9IGUuZ2V0KDApKSwgdDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDIxMDk6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgdmFyIHM7CiAgICAgICAgICBzID0ge30sIGUuZXhwb3J0cyA9IHMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIGUudG9SR0JBOCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSB0LndpZHRoLAogICAgICAgICAgICAgICAgcyA9IHQuaGVpZ2h0OwogICAgICAgICAgICAgIGlmIChudWxsID09IHQudGFicy5hY1RMKSByZXR1cm4gW2UudG9SR0JBOC5kZWNvZGVJbWFnZSh0LmRhdGEsIHIsIHMsIHQpLmJ1ZmZlcl07CiAgICAgICAgICAgICAgdmFyIGEgPSBbXTsKICAgICAgICAgICAgICBudWxsID09IHQuZnJhbWVzWzBdLmRhdGEgJiYgKHQuZnJhbWVzWzBdLmRhdGEgPSB0LmRhdGEpOwogICAgICAgICAgICAgIGZvciAodmFyIG4sIG8gPSBuZXcgVWludDhBcnJheShyICogcyAqIDQpLCBsID0gMDsgbCA8IHQuZnJhbWVzLmxlbmd0aDsgbCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgaCA9IHQuZnJhbWVzW2xdLAogICAgICAgICAgICAgICAgICBjID0gaC5yZWN0LngsCiAgICAgICAgICAgICAgICAgIHUgPSBoLnJlY3QueSwKICAgICAgICAgICAgICAgICAgZiA9IGgucmVjdC53aWR0aCwKICAgICAgICAgICAgICAgICAgcCA9IGgucmVjdC5oZWlnaHQsCiAgICAgICAgICAgICAgICAgIGcgPSBlLnRvUkdCQTguZGVjb2RlSW1hZ2UoaC5kYXRhLCBmLCBwLCB0KTsKICAgICAgICAgICAgICAgIGlmICgwID09IGwgPyBuID0gZyA6IDAgPT0gaC5ibGVuZCA/IGUuX2NvcHlUaWxlKGcsIGYsIHAsIG4sIHIsIHMsIGMsIHUsIDApIDogMSA9PSBoLmJsZW5kICYmIGUuX2NvcHlUaWxlKGcsIGYsIHAsIG4sIHIsIHMsIGMsIHUsIDEpLCBhLnB1c2gobi5idWZmZXIpLCBuID0gbi5zbGljZSgwKSwgMCA9PSBoLmRpc3Bvc2UpIDtlbHNlIGlmICgxID09IGguZGlzcG9zZSkgZS5fY29weVRpbGUobywgZiwgcCwgbiwgciwgcywgYywgdSwgMCk7ZWxzZSBpZiAoMiA9PSBoLmRpc3Bvc2UpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdiA9IGwgLSAxOyAyID09IHQuZnJhbWVzW3ZdLmRpc3Bvc2U7KSB2LS07CiAgICAgICAgICAgICAgICAgIG4gPSBuZXcgVWludDhBcnJheShhW3ZdKS5zbGljZSgwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgIH0sIGUudG9SR0JBOC5kZWNvZGVJbWFnZSA9IGZ1bmN0aW9uICh0LCByLCBzLCBhKSB7CiAgICAgICAgICAgICAgdmFyIG4gPSByICogcywKICAgICAgICAgICAgICAgIG8gPSBlLmRlY29kZS5fZ2V0QlBQKGEpLAogICAgICAgICAgICAgICAgbCA9IE1hdGguY2VpbChyICogbyAvIDgpLAogICAgICAgICAgICAgICAgaCA9IG5ldyBVaW50OEFycmF5KDQgKiBuKSwKICAgICAgICAgICAgICAgIGMgPSBuZXcgVWludDMyQXJyYXkoaC5idWZmZXIpLAogICAgICAgICAgICAgICAgdSA9IGEuY3R5cGUsCiAgICAgICAgICAgICAgICBmID0gYS5kZXB0aCwKICAgICAgICAgICAgICAgIHAgPSBlLl9iaW4ucmVhZFVzaG9ydDsKICAgICAgICAgICAgICBpZiAoNiA9PSB1KSB7CiAgICAgICAgICAgICAgICB2YXIgZyA9IG4gPDwgMjsKICAgICAgICAgICAgICAgIGlmICg4ID09IGYpIGZvciAodmFyIHYgPSAwOyB2IDwgZzsgdisrKSBoW3ZdID0gdFt2XTsKICAgICAgICAgICAgICAgIGlmICgxNiA9PSBmKSBmb3IgKHYgPSAwOyB2IDwgZzsgdisrKSBoW3ZdID0gdFt2IDw8IDFdOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoMiA9PSB1KSB7CiAgICAgICAgICAgICAgICB2YXIgXyA9IGEudGFicy50Uk5TLAogICAgICAgICAgICAgICAgICB5ID0gLTEsCiAgICAgICAgICAgICAgICAgIGIgPSAtMSwKICAgICAgICAgICAgICAgICAgdyA9IC0xOwogICAgICAgICAgICAgICAgaWYgKF8gJiYgKHkgPSBfWzBdLCBiID0gX1sxXSwgdyA9IF9bMl0pLCA4ID09IGYpIGZvciAodiA9IDA7IHYgPCBuOyB2KyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHggPSAzICogdjsKICAgICAgICAgICAgICAgICAgaFtFID0gdiA8PCAyXSA9IHRbeF0sIGhbRSArIDFdID0gdFt4ICsgMV0sIGhbRSArIDJdID0gdFt4ICsgMl0sIGhbRSArIDNdID0gMjU1LCAtMSAhPSB5ICYmIHRbeF0gPT0geSAmJiB0W3ggKyAxXSA9PSBiICYmIHRbeCArIDJdID09IHcgJiYgKGhbRSArIDNdID0gMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMTYgPT0gZikgZm9yICh2ID0gMDsgdiA8IG47IHYrKykgeCA9IDYgKiB2LCBoW0UgPSB2IDw8IDJdID0gdFt4XSwgaFtFICsgMV0gPSB0W3ggKyAyXSwgaFtFICsgMl0gPSB0W3ggKyA0XSwgaFtFICsgM10gPSAyNTUsIC0xICE9IHkgJiYgcCh0LCB4KSA9PSB5ICYmIHAodCwgeCArIDIpID09IGIgJiYgcCh0LCB4ICsgNCkgPT0gdyAmJiAoaFtFICsgM10gPSAwKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKDMgPT0gdSkgewogICAgICAgICAgICAgICAgdmFyIEEgPSBhLnRhYnMuUExURSwKICAgICAgICAgICAgICAgICAgQyA9IGEudGFicy50Uk5TLAogICAgICAgICAgICAgICAgICBTID0gQyA/IEMubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgIGlmICgxID09IGYpIGZvciAodmFyIE0gPSAwOyBNIDwgczsgTSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciB6ID0gTSAqIGwsCiAgICAgICAgICAgICAgICAgICAgTCA9IE0gKiByOwogICAgICAgICAgICAgICAgICBmb3IgKHYgPSAwOyB2IDwgcjsgdisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIEUgPSBMICsgdiA8PCAyLAogICAgICAgICAgICAgICAgICAgICAgVCA9IDMgKiAoayA9IHRbeiArICh2ID4+IDMpXSA+PiA3IC0gKCg3ICYgdikgPDwgMCkgJiAxKTsKICAgICAgICAgICAgICAgICAgICBoW0VdID0gQVtUXSwgaFtFICsgMV0gPSBBW1QgKyAxXSwgaFtFICsgMl0gPSBBW1QgKyAyXSwgaFtFICsgM10gPSBrIDwgUyA/IENba10gOiAyNTU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgyID09IGYpIGZvciAoTSA9IDA7IE0gPCBzOyBNKyspIGZvciAoeiA9IE0gKiBsLCBMID0gTSAqIHIsIHYgPSAwOyB2IDwgcjsgdisrKSBFID0gTCArIHYgPDwgMiwgVCA9IDMgKiAoayA9IHRbeiArICh2ID4+IDIpXSA+PiA2IC0gKCgzICYgdikgPDwgMSkgJiAzKSwgaFtFXSA9IEFbVF0sIGhbRSArIDFdID0gQVtUICsgMV0sIGhbRSArIDJdID0gQVtUICsgMl0sIGhbRSArIDNdID0gayA8IFMgPyBDW2tdIDogMjU1OwogICAgICAgICAgICAgICAgaWYgKDQgPT0gZikgZm9yIChNID0gMDsgTSA8IHM7IE0rKykgZm9yICh6ID0gTSAqIGwsIEwgPSBNICogciwgdiA9IDA7IHYgPCByOyB2KyspIEUgPSBMICsgdiA8PCAyLCBUID0gMyAqIChrID0gdFt6ICsgKHYgPj4gMSldID4+IDQgLSAoKDEgJiB2KSA8PCAyKSAmIDE1KSwgaFtFXSA9IEFbVF0sIGhbRSArIDFdID0gQVtUICsgMV0sIGhbRSArIDJdID0gQVtUICsgMl0sIGhbRSArIDNdID0gayA8IFMgPyBDW2tdIDogMjU1OwogICAgICAgICAgICAgICAgaWYgKDggPT0gZikgZm9yICh2ID0gMDsgdiA8IG47IHYrKykgewogICAgICAgICAgICAgICAgICB2YXIgazsKICAgICAgICAgICAgICAgICAgRSA9IHYgPDwgMiwgVCA9IDMgKiAoayA9IHRbdl0pLCBoW0VdID0gQVtUXSwgaFtFICsgMV0gPSBBW1QgKyAxXSwgaFtFICsgMl0gPSBBW1QgKyAyXSwgaFtFICsgM10gPSBrIDwgUyA/IENba10gOiAyNTU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmICg0ID09IHUpIHsKICAgICAgICAgICAgICAgIGlmICg4ID09IGYpIGZvciAodiA9IDA7IHYgPCBuOyB2KyspIHsKICAgICAgICAgICAgICAgICAgRSA9IHYgPDwgMjsKICAgICAgICAgICAgICAgICAgdmFyIEkgPSB0W08gPSB2IDw8IDFdOwogICAgICAgICAgICAgICAgICBoW0VdID0gSSwgaFtFICsgMV0gPSBJLCBoW0UgKyAyXSA9IEksIGhbRSArIDNdID0gdFtPICsgMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMTYgPT0gZikgZm9yICh2ID0gMDsgdiA8IG47IHYrKykgewogICAgICAgICAgICAgICAgICB2YXIgTzsKICAgICAgICAgICAgICAgICAgRSA9IHYgPDwgMiwgSSA9IHRbTyA9IHYgPDwgMl0sIGhbRV0gPSBJLCBoW0UgKyAxXSA9IEksIGhbRSArIDJdID0gSSwgaFtFICsgM10gPSB0W08gKyAyXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKDAgPT0gdSkgewogICAgICAgICAgICAgICAgaWYgKHkgPSBhLnRhYnMudFJOUyA/IGEudGFicy50Uk5TIDogLTEsIDEgPT0gZikgZm9yICh2ID0gMDsgdiA8IG47IHYrKykgewogICAgICAgICAgICAgICAgICB2YXIgRCA9IChJID0gMjU1ICogKHRbdiA+PiAzXSA+PiA3IC0gKDcgJiB2KSAmIDEpKSA9PSAyNTUgKiB5ID8gMCA6IDI1NTsKICAgICAgICAgICAgICAgICAgY1t2XSA9IEQgPDwgMjQgfCBJIDw8IDE2IHwgSSA8PCA4IHwgSTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgyID09IGYpIGZvciAodiA9IDA7IHYgPCBuOyB2KyspIEQgPSAoSSA9IDg1ICogKHRbdiA+PiAyXSA+PiA2IC0gKCgzICYgdikgPDwgMSkgJiAzKSkgPT0gODUgKiB5ID8gMCA6IDI1NSwgY1t2XSA9IEQgPDwgMjQgfCBJIDw8IDE2IHwgSSA8PCA4IHwgSTsKICAgICAgICAgICAgICAgIGlmICg0ID09IGYpIGZvciAodiA9IDA7IHYgPCBuOyB2KyspIEQgPSAoSSA9IDE3ICogKHRbdiA+PiAxXSA+PiA0IC0gKCgxICYgdikgPDwgMikgJiAxNSkpID09IDE3ICogeSA/IDAgOiAyNTUsIGNbdl0gPSBEIDw8IDI0IHwgSSA8PCAxNiB8IEkgPDwgOCB8IEk7CiAgICAgICAgICAgICAgICBpZiAoOCA9PSBmKSBmb3IgKHYgPSAwOyB2IDwgbjsgdisrKSBEID0gKEkgPSB0W3ZdKSA9PSB5ID8gMCA6IDI1NSwgY1t2XSA9IEQgPDwgMjQgfCBJIDw8IDE2IHwgSSA8PCA4IHwgSTsKICAgICAgICAgICAgICAgIGlmICgxNiA9PSBmKSBmb3IgKHYgPSAwOyB2IDwgbjsgdisrKSBJID0gdFt2IDw8IDFdLCBEID0gcCh0LCB2IDw8IDEpID09IHkgPyAwIDogMjU1LCBjW3ZdID0gRCA8PCAyNCB8IEkgPDwgMTYgfCBJIDw8IDggfCBJOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gaDsKICAgICAgICAgICAgfSwgZS5kZWNvZGUgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIGZvciAodmFyIHIsIHMgPSBuZXcgVWludDhBcnJheSh0KSwgYSA9IDgsIG4gPSBlLl9iaW4sIG8gPSBuLnJlYWRVc2hvcnQsIGwgPSBuLnJlYWRVaW50LCBoID0gewogICAgICAgICAgICAgICAgICB0YWJzOiB7fSwKICAgICAgICAgICAgICAgICAgZnJhbWVzOiBbXQogICAgICAgICAgICAgICAgfSwgYyA9IG5ldyBVaW50OEFycmF5KHMubGVuZ3RoKSwgdSA9IDAsIGYgPSAwLCBwID0gWzEzNywgODAsIDc4LCA3MSwgMTMsIDEwLCAyNiwgMTBdLCBnID0gMDsgZyA8IDg7IGcrKykgaWYgKHNbZ10gIT0gcFtnXSkgdGhyb3cgIlRoZSBpbnB1dCBpcyBub3QgYSBQTkcgZmlsZSEiOwogICAgICAgICAgICAgIGZvciAoOyBhIDwgcy5sZW5ndGg7KSB7CiAgICAgICAgICAgICAgICB2YXIgdiA9IG4ucmVhZFVpbnQocywgYSk7CiAgICAgICAgICAgICAgICBhICs9IDQ7CiAgICAgICAgICAgICAgICB2YXIgXyA9IG4ucmVhZEFTQ0lJKHMsIGEsIDQpOwogICAgICAgICAgICAgICAgaWYgKGEgKz0gNCwgIklIRFIiID09IF8pIGUuZGVjb2RlLl9JSERSKHMsIGEsIGgpO2Vsc2UgaWYgKCJJREFUIiA9PSBfKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCB2OyBnKyspIGNbdSArIGddID0gc1thICsgZ107CiAgICAgICAgICAgICAgICAgIHUgKz0gdjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoImFjVEwiID09IF8pIGgudGFic1tfXSA9IHsKICAgICAgICAgICAgICAgICAgbnVtX2ZyYW1lczogbChzLCBhKSwKICAgICAgICAgICAgICAgICAgbnVtX3BsYXlzOiBsKHMsIGEgKyA0KQogICAgICAgICAgICAgICAgfSwgciA9IG5ldyBVaW50OEFycmF5KHMubGVuZ3RoKTtlbHNlIGlmICgiZmNUTCIgPT0gXykgewogICAgICAgICAgICAgICAgICAwICE9IGYgJiYgKCh6ID0gaC5mcmFtZXNbaC5mcmFtZXMubGVuZ3RoIC0gMV0pLmRhdGEgPSBlLmRlY29kZS5fZGVjb21wcmVzcyhoLCByLnNsaWNlKDAsIGYpLCB6LnJlY3Qud2lkdGgsIHoucmVjdC5oZWlnaHQpLCBmID0gMCk7CiAgICAgICAgICAgICAgICAgIHZhciB5ID0gewogICAgICAgICAgICAgICAgICAgICAgeDogbChzLCBhICsgMTIpLAogICAgICAgICAgICAgICAgICAgICAgeTogbChzLCBhICsgMTYpLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGwocywgYSArIDQpLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBsKHMsIGEgKyA4KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYiA9IG8ocywgYSArIDIyKTsKICAgICAgICAgICAgICAgICAgYiA9IG8ocywgYSArIDIwKSAvICgwID09IGIgPyAxMDAgOiBiKTsKICAgICAgICAgICAgICAgICAgdmFyIHcgPSB7CiAgICAgICAgICAgICAgICAgICAgcmVjdDogeSwKICAgICAgICAgICAgICAgICAgICBkZWxheTogTWF0aC5yb3VuZCgxZTMgKiBiKSwKICAgICAgICAgICAgICAgICAgICBkaXNwb3NlOiBzW2EgKyAyNF0sCiAgICAgICAgICAgICAgICAgICAgYmxlbmQ6IHNbYSArIDI1XQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBoLmZyYW1lcy5wdXNoKHcpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgiZmRBVCIgPT0gXykgewogICAgICAgICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgdiAtIDQ7IGcrKykgcltmICsgZ10gPSBzW2EgKyBnICsgNF07CiAgICAgICAgICAgICAgICAgIGYgKz0gdiAtIDQ7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCJwSFlzIiA9PSBfKSBoLnRhYnNbX10gPSBbbi5yZWFkVWludChzLCBhKSwgbi5yZWFkVWludChzLCBhICsgNCksIHNbYSArIDhdXTtlbHNlIGlmICgiY0hSTSIgPT0gXykgZm9yIChoLnRhYnNbX10gPSBbXSwgZyA9IDA7IGcgPCA4OyBnKyspIGgudGFic1tfXS5wdXNoKG4ucmVhZFVpbnQocywgYSArIDQgKiBnKSk7ZWxzZSBpZiAoInRFWHQiID09IF8pIHsKICAgICAgICAgICAgICAgICAgbnVsbCA9PSBoLnRhYnNbX10gJiYgKGgudGFic1tfXSA9IHt9KTsKICAgICAgICAgICAgICAgICAgdmFyIHggPSBuLm5leHRaZXJvKHMsIGEpLAogICAgICAgICAgICAgICAgICAgIEEgPSBuLnJlYWRBU0NJSShzLCBhLCB4IC0gYSksCiAgICAgICAgICAgICAgICAgICAgQyA9IG4ucmVhZEFTQ0lJKHMsIHggKyAxLCBhICsgdiAtIHggLSAxKTsKICAgICAgICAgICAgICAgICAgaC50YWJzW19dW0FdID0gQzsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoImlUWHQiID09IF8pIHsKICAgICAgICAgICAgICAgICAgbnVsbCA9PSBoLnRhYnNbX10gJiYgKGgudGFic1tfXSA9IHt9KSwgeCA9IDA7CiAgICAgICAgICAgICAgICAgIHZhciBTID0gYTsKICAgICAgICAgICAgICAgICAgeCA9IG4ubmV4dFplcm8ocywgUyksIEEgPSBuLnJlYWRBU0NJSShzLCBTLCB4IC0gUyksIHNbUyA9IHggKyAxXSwgc1tTICsgMV0sIFMgKz0gMiwgeCA9IG4ubmV4dFplcm8ocywgUyksIG4ucmVhZEFTQ0lJKHMsIFMsIHggLSBTKSwgUyA9IHggKyAxLCB4ID0gbi5uZXh0WmVybyhzLCBTKSwgbi5yZWFkVVRGOChzLCBTLCB4IC0gUyksIFMgPSB4ICsgMSwgQyA9IG4ucmVhZFVURjgocywgUywgdiAtIChTIC0gYSkpLCBoLnRhYnNbX11bQV0gPSBDOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgiUExURSIgPT0gXykgaC50YWJzW19dID0gbi5yZWFkQnl0ZXMocywgYSwgdik7ZWxzZSBpZiAoImhJU1QiID09IF8pIHsKICAgICAgICAgICAgICAgICAgdmFyIE0gPSBoLnRhYnMuUExURS5sZW5ndGggLyAzOwogICAgICAgICAgICAgICAgICBmb3IgKGgudGFic1tfXSA9IFtdLCBnID0gMDsgZyA8IE07IGcrKykgaC50YWJzW19dLnB1c2gobyhzLCBhICsgMiAqIGcpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoInRSTlMiID09IF8pIDMgPT0gaC5jdHlwZSA/IGgudGFic1tfXSA9IG4ucmVhZEJ5dGVzKHMsIGEsIHYpIDogMCA9PSBoLmN0eXBlID8gaC50YWJzW19dID0gbyhzLCBhKSA6IDIgPT0gaC5jdHlwZSAmJiAoaC50YWJzW19dID0gW28ocywgYSksIG8ocywgYSArIDIpLCBvKHMsIGEgKyA0KV0pO2Vsc2UgaWYgKCJnQU1BIiA9PSBfKSBoLnRhYnNbX10gPSBuLnJlYWRVaW50KHMsIGEpIC8gMWU1O2Vsc2UgaWYgKCJzUkdCIiA9PSBfKSBoLnRhYnNbX10gPSBzW2FdO2Vsc2UgaWYgKCJiS0dEIiA9PSBfKSAwID09IGguY3R5cGUgfHwgNCA9PSBoLmN0eXBlID8gaC50YWJzW19dID0gW28ocywgYSldIDogMiA9PSBoLmN0eXBlIHx8IDYgPT0gaC5jdHlwZSA/IGgudGFic1tfXSA9IFtvKHMsIGEpLCBvKHMsIGEgKyAyKSwgbyhzLCBhICsgNCldIDogMyA9PSBoLmN0eXBlICYmIChoLnRhYnNbX10gPSBzW2FdKTtlbHNlIGlmICgiSUVORCIgPT0gXykgewogICAgICAgICAgICAgICAgICB2YXIgejsKICAgICAgICAgICAgICAgICAgMCAhPSBmICYmICgoeiA9IGguZnJhbWVzW2guZnJhbWVzLmxlbmd0aCAtIDFdKS5kYXRhID0gZS5kZWNvZGUuX2RlY29tcHJlc3MoaCwgci5zbGljZSgwLCBmKSwgei5yZWN0LndpZHRoLCB6LnJlY3QuaGVpZ2h0KSwgZiA9IDApLCBoLmRhdGEgPSBlLmRlY29kZS5fZGVjb21wcmVzcyhoLCBjLCBoLndpZHRoLCBoLmhlaWdodCk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYSArPSB2LCBuLnJlYWRVaW50KHMsIGEpLCBhICs9IDQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBkZWxldGUgaC5jb21wcmVzcywgZGVsZXRlIGguaW50ZXJsYWNlLCBkZWxldGUgaC5maWx0ZXIsIGg7CiAgICAgICAgICAgIH0sIGUuZGVjb2RlLl9kZWNvbXByZXNzID0gZnVuY3Rpb24gKHQsIHIsIHMsIGEpIHsKICAgICAgICAgICAgICByZXR1cm4gMCA9PSB0LmNvbXByZXNzICYmIChyID0gZS5kZWNvZGUuX2luZmxhdGUocikpLCAwID09IHQuaW50ZXJsYWNlID8gciA9IGUuZGVjb2RlLl9maWx0ZXJaZXJvKHIsIHQsIDAsIHMsIGEpIDogMSA9PSB0LmludGVybGFjZSAmJiAociA9IGUuZGVjb2RlLl9yZWFkSW50ZXJsYWNlKHIsIHQpKSwgcjsKICAgICAgICAgICAgfSwgZS5kZWNvZGUuX2luZmxhdGUgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHJldHVybiB0LmluZmxhdGUoZSk7CiAgICAgICAgICAgIH0sIGUuZGVjb2RlLl9yZWFkSW50ZXJsYWNlID0gZnVuY3Rpb24gKHQsIHIpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBzID0gci53aWR0aCwgYSA9IHIuaGVpZ2h0LCBuID0gZS5kZWNvZGUuX2dldEJQUChyKSwgbyA9IG4gPj4gMywgbCA9IE1hdGguY2VpbChzICogbiAvIDgpLCBoID0gbmV3IFVpbnQ4QXJyYXkoYSAqIGwpLCBjID0gMCwgdSA9IFswLCAwLCA0LCAwLCAyLCAwLCAxXSwgZiA9IFswLCA0LCAwLCAyLCAwLCAxLCAwXSwgcCA9IFs4LCA4LCA4LCA0LCA0LCAyLCAyXSwgZyA9IFs4LCA4LCA0LCA0LCAyLCAyLCAxXSwgdiA9IDA7IHYgPCA3OykgewogICAgICAgICAgICAgICAgZm9yICh2YXIgXyA9IHBbdl0sIHkgPSBnW3ZdLCBiID0gMCwgdyA9IDAsIHggPSB1W3ZdOyB4IDwgYTspIHggKz0gXywgdysrOwogICAgICAgICAgICAgICAgZm9yICh2YXIgQSA9IGZbdl07IEEgPCBzOykgQSArPSB5LCBiKys7CiAgICAgICAgICAgICAgICB2YXIgQyA9IE1hdGguY2VpbChiICogbiAvIDgpOwogICAgICAgICAgICAgICAgZS5kZWNvZGUuX2ZpbHRlclplcm8odCwgciwgYywgYiwgdyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBTID0gMCwgTSA9IHVbdl07IE0gPCBhOykgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciB6ID0gZlt2XSwgTCA9IGMgKyBTICogQyA8PCAzOyB6IDwgczspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgRTsKICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PSBuICYmIChFID0gKEUgPSB0W0wgPj4gM10pID4+IDcgLSAoNyAmIEwpICYgMSwgaFtNICogbCArICh6ID4+IDMpXSB8PSBFIDw8IDcgLSAoKDMgJiB6KSA8PCAwKSksIDIgPT0gbiAmJiAoRSA9IChFID0gdFtMID4+IDNdKSA+PiA2IC0gKDcgJiBMKSAmIDMsIGhbTSAqIGwgKyAoeiA+PiAyKV0gfD0gRSA8PCA2IC0gKCgzICYgeikgPDwgMSkpLCA0ID09IG4gJiYgKEUgPSAoRSA9IHRbTCA+PiAzXSkgPj4gNCAtICg3ICYgTCkgJiAxNSwgaFtNICogbCArICh6ID4+IDEpXSB8PSBFIDw8IDQgLSAoKDEgJiB6KSA8PCAyKSksIG4gPj0gOCkgZm9yICh2YXIgVCA9IE0gKiBsICsgeiAqIG8sIGsgPSAwOyBrIDwgbzsgaysrKSBoW1QgKyBrXSA9IHRbKEwgPj4gMykgKyBrXTsKICAgICAgICAgICAgICAgICAgICBMICs9IG4sIHogKz0geTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBTKyssIE0gKz0gXzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGIgKiB3ICE9IDAgJiYgKGMgKz0gdyAqICgxICsgQykpLCB2ICs9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBoOwogICAgICAgICAgICB9LCBlLmRlY29kZS5fZ2V0QlBQID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gWzEsIG51bGwsIDMsIDEsIDIsIG51bGwsIDRdW2UuY3R5cGVdICogZS5kZXB0aDsKICAgICAgICAgICAgfSwgZS5kZWNvZGUuX2ZpbHRlclplcm8gPSBmdW5jdGlvbiAodCwgciwgcywgYSwgbikgewogICAgICAgICAgICAgIHZhciBvID0gZS5kZWNvZGUuX2dldEJQUChyKSwKICAgICAgICAgICAgICAgIGwgPSBNYXRoLmNlaWwoYSAqIG8gLyA4KSwKICAgICAgICAgICAgICAgIGggPSBlLmRlY29kZS5fcGFldGg7CiAgICAgICAgICAgICAgbyA9IE1hdGguY2VpbChvIC8gOCk7CiAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuOyBjKyspIHsKICAgICAgICAgICAgICAgIHZhciB1ID0gcyArIGMgKiBsLAogICAgICAgICAgICAgICAgICBmID0gdSArIGMgKyAxLAogICAgICAgICAgICAgICAgICBwID0gdFtmIC0gMV07CiAgICAgICAgICAgICAgICBpZiAoMCA9PSBwKSBmb3IgKHZhciBnID0gMDsgZyA8IGw7IGcrKykgdFt1ICsgZ10gPSB0W2YgKyBnXTtlbHNlIGlmICgxID09IHApIHsKICAgICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IG87IGcrKykgdFt1ICsgZ10gPSB0W2YgKyBnXTsKICAgICAgICAgICAgICAgICAgZm9yIChnID0gbzsgZyA8IGw7IGcrKykgdFt1ICsgZ10gPSB0W2YgKyBnXSArIHRbdSArIGcgLSBvXSAmIDI1NTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PSBjKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCBvOyBnKyspIHRbdSArIGddID0gdFtmICsgZ107CiAgICAgICAgICAgICAgICAgIGlmICgyID09IHApIGZvciAoZyA9IG87IGcgPCBsOyBnKyspIHRbdSArIGddID0gMjU1ICYgdFtmICsgZ107CiAgICAgICAgICAgICAgICAgIGlmICgzID09IHApIGZvciAoZyA9IG87IGcgPCBsOyBnKyspIHRbdSArIGddID0gdFtmICsgZ10gKyAodFt1ICsgZyAtIG9dID4+IDEpICYgMjU1OwogICAgICAgICAgICAgICAgICBpZiAoNCA9PSBwKSBmb3IgKGcgPSBvOyBnIDwgbDsgZysrKSB0W3UgKyBnXSA9IHRbZiArIGddICsgaCh0W3UgKyBnIC0gb10sIDAsIDApICYgMjU1OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKDIgPT0gcCkgZm9yIChnID0gMDsgZyA8IGw7IGcrKykgdFt1ICsgZ10gPSB0W2YgKyBnXSArIHRbdSArIGcgLSBsXSAmIDI1NTsKICAgICAgICAgICAgICAgICAgaWYgKDMgPT0gcCkgewogICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCBvOyBnKyspIHRbdSArIGddID0gdFtmICsgZ10gKyAodFt1ICsgZyAtIGxdID4+IDEpICYgMjU1OwogICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IG87IGcgPCBsOyBnKyspIHRbdSArIGddID0gdFtmICsgZ10gKyAodFt1ICsgZyAtIGxdICsgdFt1ICsgZyAtIG9dID4+IDEpICYgMjU1OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICg0ID09IHApIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgbzsgZysrKSB0W3UgKyBnXSA9IHRbZiArIGddICsgaCgwLCB0W3UgKyBnIC0gbF0sIDApICYgMjU1OwogICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IG87IGcgPCBsOyBnKyspIHRbdSArIGddID0gdFtmICsgZ10gKyBoKHRbdSArIGcgLSBvXSwgdFt1ICsgZyAtIGxdLCB0W3UgKyBnIC0gbyAtIGxdKSAmIDI1NTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgfSwgZS5kZWNvZGUuX3BhZXRoID0gZnVuY3Rpb24gKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgcyA9IGUgKyB0IC0gciwKICAgICAgICAgICAgICAgIGEgPSBNYXRoLmFicyhzIC0gZSksCiAgICAgICAgICAgICAgICBuID0gTWF0aC5hYnMocyAtIHQpLAogICAgICAgICAgICAgICAgbyA9IE1hdGguYWJzKHMgLSByKTsKICAgICAgICAgICAgICByZXR1cm4gYSA8PSBuICYmIGEgPD0gbyA/IGUgOiBuIDw9IG8gPyB0IDogcjsKICAgICAgICAgICAgfSwgZS5kZWNvZGUuX0lIRFIgPSBmdW5jdGlvbiAodCwgciwgcykgewogICAgICAgICAgICAgIHZhciBhID0gZS5fYmluOwogICAgICAgICAgICAgIHMud2lkdGggPSBhLnJlYWRVaW50KHQsIHIpLCByICs9IDQsIHMuaGVpZ2h0ID0gYS5yZWFkVWludCh0LCByKSwgciArPSA0LCBzLmRlcHRoID0gdFtyXSwgcisrLCBzLmN0eXBlID0gdFtyXSwgcisrLCBzLmNvbXByZXNzID0gdFtyXSwgcisrLCBzLmZpbHRlciA9IHRbcl0sIHIrKywgcy5pbnRlcmxhY2UgPSB0W3JdLCByKys7CiAgICAgICAgICAgIH0sIGUuX2JpbiA9IHsKICAgICAgICAgICAgICBuZXh0WmVybzogZnVuY3Rpb24gbmV4dFplcm8oZSwgdCkgewogICAgICAgICAgICAgICAgZm9yICg7IDAgIT0gZVt0XTspIHQrKzsKICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgcmVhZFVzaG9ydDogZnVuY3Rpb24gcmVhZFVzaG9ydChlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZVt0XSA8PCA4IHwgZVt0ICsgMV07CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB3cml0ZVVzaG9ydDogZnVuY3Rpb24gd3JpdGVVc2hvcnQoZSwgdCwgcikgewogICAgICAgICAgICAgICAgZVt0XSA9IHIgPj4gOCAmIDI1NSwgZVt0ICsgMV0gPSAyNTUgJiByOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgcmVhZFVpbnQ6IGZ1bmN0aW9uIHJlYWRVaW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAxNjc3NzIxNiAqIGVbdF0gKyAoZVt0ICsgMV0gPDwgMTYgfCBlW3QgKyAyXSA8PCA4IHwgZVt0ICsgM10pOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgd3JpdGVVaW50OiBmdW5jdGlvbiB3cml0ZVVpbnQoZSwgdCwgcikgewogICAgICAgICAgICAgICAgZVt0XSA9IHIgPj4gMjQgJiAyNTUsIGVbdCArIDFdID0gciA+PiAxNiAmIDI1NSwgZVt0ICsgMl0gPSByID4+IDggJiAyNTUsIGVbdCArIDNdID0gMjU1ICYgcjsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHJlYWRBU0NJSTogZnVuY3Rpb24gcmVhZEFTQ0lJKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAiIiwgYSA9IDA7IGEgPCByOyBhKyspIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlW3QgKyBhXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gczsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHdyaXRlQVNDSUk6IGZ1bmN0aW9uIHdyaXRlQVNDSUkoZSwgdCwgcikgewogICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCByLmxlbmd0aDsgcysrKSBlW3QgKyBzXSA9IHIuY2hhckNvZGVBdChzKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHJlYWRCeXRlczogZnVuY3Rpb24gcmVhZEJ5dGVzKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSBbXSwgYSA9IDA7IGEgPCByOyBhKyspIHMucHVzaChlW3QgKyBhXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gczsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHBhZDogZnVuY3Rpb24gcGFkKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLmxlbmd0aCA8IDIgPyAiMCIgKyBlIDogZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHJlYWRVVEY4OiBmdW5jdGlvbiByZWFkVVRGOCh0LCByLCBzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBhLCBuID0gIiIsIG8gPSAwOyBvIDwgczsgbysrKSBuICs9ICIlIiArIGUuX2Jpbi5wYWQodFtyICsgb10udG9TdHJpbmcoMTYpKTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIGEgPSBkZWNvZGVVUklDb21wb25lbnQobik7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9iaW4ucmVhZEFTQ0lJKHQsIHIsIHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBlLl9jb3B5VGlsZSA9IGZ1bmN0aW9uIChlLCB0LCByLCBzLCBhLCBuLCBvLCBsLCBoKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IE1hdGgubWluKHQsIGEpLCB1ID0gTWF0aC5taW4ociwgbiksIGYgPSAwLCBwID0gMCwgZyA9IDA7IGcgPCB1OyBnKyspIGZvciAodmFyIHYgPSAwOyB2IDwgYzsgdisrKSBpZiAobyA+PSAwICYmIGwgPj0gMCA/IChmID0gZyAqIHQgKyB2IDw8IDIsIHAgPSAobCArIGcpICogYSArIG8gKyB2IDw8IDIpIDogKGYgPSAoLWwgKyBnKSAqIHQgLSBvICsgdiA8PCAyLCBwID0gZyAqIGEgKyB2IDw8IDIpLCAwID09IGgpIHNbcF0gPSBlW2ZdLCBzW3AgKyAxXSA9IGVbZiArIDFdLCBzW3AgKyAyXSA9IGVbZiArIDJdLCBzW3AgKyAzXSA9IGVbZiArIDNdO2Vsc2UgaWYgKDEgPT0gaCkgewogICAgICAgICAgICAgICAgdmFyIF8gPSBlW2YgKyAzXSAqICgxIC8gMjU1KSwKICAgICAgICAgICAgICAgICAgeSA9IGVbZl0gKiBfLAogICAgICAgICAgICAgICAgICBiID0gZVtmICsgMV0gKiBfLAogICAgICAgICAgICAgICAgICB3ID0gZVtmICsgMl0gKiBfLAogICAgICAgICAgICAgICAgICB4ID0gc1twICsgM10gKiAoMSAvIDI1NSksCiAgICAgICAgICAgICAgICAgIEEgPSBzW3BdICogeCwKICAgICAgICAgICAgICAgICAgQyA9IHNbcCArIDFdICogeCwKICAgICAgICAgICAgICAgICAgUyA9IHNbcCArIDJdICogeCwKICAgICAgICAgICAgICAgICAgTSA9IDEgLSBfLAogICAgICAgICAgICAgICAgICB6ID0gXyArIHggKiBNLAogICAgICAgICAgICAgICAgICBMID0gMCA9PSB6ID8gMCA6IDEgLyB6OwogICAgICAgICAgICAgICAgc1twICsgM10gPSAyNTUgKiB6LCBzW3AgKyAwXSA9ICh5ICsgQSAqIE0pICogTCwgc1twICsgMV0gPSAoYiArIEMgKiBNKSAqIEwsIHNbcCArIDJdID0gKHcgKyBTICogTSkgKiBMOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoMiA9PSBoKSBfID0gZVtmICsgM10sIHkgPSBlW2ZdLCBiID0gZVtmICsgMV0sIHcgPSBlW2YgKyAyXSwgeCA9IHNbcCArIDNdLCBBID0gc1twXSwgQyA9IHNbcCArIDFdLCBTID0gc1twICsgMl0sIF8gPT0geCAmJiB5ID09IEEgJiYgYiA9PSBDICYmIHcgPT0gUyA/IChzW3BdID0gMCwgc1twICsgMV0gPSAwLCBzW3AgKyAyXSA9IDAsIHNbcCArIDNdID0gMCkgOiAoc1twXSA9IHksIHNbcCArIDFdID0gYiwgc1twICsgMl0gPSB3LCBzW3AgKyAzXSA9IF8pO2Vsc2UgaWYgKDMgPT0gaCkgewogICAgICAgICAgICAgICAgaWYgKF8gPSBlW2YgKyAzXSwgeSA9IGVbZl0sIGIgPSBlW2YgKyAxXSwgdyA9IGVbZiArIDJdLCB4ID0gc1twICsgM10sIEEgPSBzW3BdLCBDID0gc1twICsgMV0sIFMgPSBzW3AgKyAyXSwgXyA9PSB4ICYmIHkgPT0gQSAmJiBiID09IEMgJiYgdyA9PSBTKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIGlmIChfIDwgMjIwICYmIHggPiAyMCkgcmV0dXJuICExOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gITA7CiAgICAgICAgICAgIH0sIGUuZW5jb2RlID0gZnVuY3Rpb24gKHQsIHIsIHMsIGEsIG4sIG8pIHsKICAgICAgICAgICAgICBudWxsID09IGEgJiYgKGEgPSAwKSwgbnVsbCA9PSBvICYmIChvID0gITEpOwogICAgICAgICAgICAgIGZvciAodmFyIGwgPSBuZXcgVWludDhBcnJheSh0WzBdLmJ5dGVMZW5ndGggKiB0Lmxlbmd0aCArIDEwMCksIGggPSBbMTM3LCA4MCwgNzgsIDcxLCAxMywgMTAsIDI2LCAxMF0sIGMgPSAwOyBjIDwgODsgYysrKSBsW2NdID0gaFtjXTsKICAgICAgICAgICAgICB2YXIgdSA9IDgsCiAgICAgICAgICAgICAgICBmID0gZS5fYmluLAogICAgICAgICAgICAgICAgcCA9IGUuY3JjLmNyYywKICAgICAgICAgICAgICAgIGcgPSBmLndyaXRlVWludCwKICAgICAgICAgICAgICAgIHYgPSBmLndyaXRlVXNob3J0LAogICAgICAgICAgICAgICAgXyA9IGYud3JpdGVBU0NJSSwKICAgICAgICAgICAgICAgIHkgPSBlLmVuY29kZS5jb21wcmVzc1BORyh0LCByLCBzLCBhLCBvKTsKICAgICAgICAgICAgICBnKGwsIHUsIDEzKSwgXyhsLCB1ICs9IDQsICJJSERSIiksIGcobCwgdSArPSA0LCByKSwgZyhsLCB1ICs9IDQsIHMpLCBsW3UgKz0gNF0gPSB5LmRlcHRoLCBsWysrdV0gPSB5LmN0eXBlLCBsWysrdV0gPSAwLCBsWysrdV0gPSAwLCBsWysrdV0gPSAwLCBnKGwsICsrdSwgcChsLCB1IC0gMTcsIDE3KSksIGcobCwgdSArPSA0LCAxKSwgXyhsLCB1ICs9IDQsICJzUkdCIiksIGxbdSArPSA0XSA9IDEsIGcobCwgKyt1LCBwKGwsIHUgLSA1LCA1KSksIHUgKz0gNDsKICAgICAgICAgICAgICB2YXIgYiA9IHQubGVuZ3RoID4gMTsKICAgICAgICAgICAgICBpZiAoYiAmJiAoZyhsLCB1LCA4KSwgXyhsLCB1ICs9IDQsICJhY1RMIiksIGcobCwgdSArPSA0LCB0Lmxlbmd0aCksIGcobCwgdSArPSA0LCAwKSwgZyhsLCB1ICs9IDQsIHAobCwgdSAtIDEyLCAxMikpLCB1ICs9IDQpLCAzID09IHkuY3R5cGUpIHsKICAgICAgICAgICAgICAgIGZvciAoZyhsLCB1LCAzICogKEUgPSB5LnBsdGUubGVuZ3RoKSksIF8obCwgdSArPSA0LCAiUExURSIpLCB1ICs9IDQsIGMgPSAwOyBjIDwgRTsgYysrKSB7CiAgICAgICAgICAgICAgICAgIHZhciB3ID0gMyAqIGMsCiAgICAgICAgICAgICAgICAgICAgeCA9IHkucGx0ZVtjXSwKICAgICAgICAgICAgICAgICAgICBBID0gMjU1ICYgeCwKICAgICAgICAgICAgICAgICAgICBDID0geCA+PiA4ICYgMjU1LAogICAgICAgICAgICAgICAgICAgIFMgPSB4ID4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgICBsW3UgKyB3ICsgMF0gPSBBLCBsW3UgKyB3ICsgMV0gPSBDLCBsW3UgKyB3ICsgMl0gPSBTOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGcobCwgdSArPSAzICogRSwgcChsLCB1IC0gMyAqIEUgLSA0LCAzICogRSArIDQpKSwgdSArPSA0LCB5LmdvdEFscGhhKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoZyhsLCB1LCBFKSwgXyhsLCB1ICs9IDQsICJ0Uk5TIiksIHUgKz0gNCwgYyA9IDA7IGMgPCBFOyBjKyspIGxbdSArIGNdID0geS5wbHRlW2NdID4+IDI0ICYgMjU1OwogICAgICAgICAgICAgICAgICBnKGwsIHUgKz0gRSwgcChsLCB1IC0gRSAtIDQsIEUgKyA0KSksIHUgKz0gNDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICh2YXIgTSA9IDAsIHogPSAwOyB6IDwgeS5mcmFtZXMubGVuZ3RoOyB6KyspIHsKICAgICAgICAgICAgICAgIHZhciBMID0geS5mcmFtZXNbel07CiAgICAgICAgICAgICAgICBiICYmIChnKGwsIHUsIDI2KSwgXyhsLCB1ICs9IDQsICJmY1RMIiksIGcobCwgdSArPSA0LCBNKyspLCBnKGwsIHUgKz0gNCwgTC5yZWN0LndpZHRoKSwgZyhsLCB1ICs9IDQsIEwucmVjdC5oZWlnaHQpLCBnKGwsIHUgKz0gNCwgTC5yZWN0LngpLCBnKGwsIHUgKz0gNCwgTC5yZWN0LnkpLCB2KGwsIHUgKz0gNCwgblt6XSksIHYobCwgdSArPSAyLCAxZTMpLCBsW3UgKz0gMl0gPSBMLmRpc3Bvc2UsIGxbKyt1XSA9IEwuYmxlbmQsIGcobCwgKyt1LCBwKGwsIHUgLSAzMCwgMzApKSwgdSArPSA0KTsKICAgICAgICAgICAgICAgIHZhciBFLAogICAgICAgICAgICAgICAgICBUID0gTC5jaW1nOwogICAgICAgICAgICAgICAgZyhsLCB1LCAoRSA9IFQubGVuZ3RoKSArICgwID09IHogPyAwIDogNCkpOwogICAgICAgICAgICAgICAgdmFyIGsgPSB1ICs9IDQ7CiAgICAgICAgICAgICAgICBmb3IgKF8obCwgdSwgMCA9PSB6ID8gIklEQVQiIDogImZkQVQiKSwgdSArPSA0LCAwICE9IHogJiYgKGcobCwgdSwgTSsrKSwgdSArPSA0KSwgYyA9IDA7IGMgPCBFOyBjKyspIGxbdSArIGNdID0gVFtjXTsKICAgICAgICAgICAgICAgIGcobCwgdSArPSBFLCBwKGwsIGssIHUgLSBrKSksIHUgKz0gNDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGcobCwgdSwgMCksIF8obCwgdSArPSA0LCAiSUVORCIpLCBnKGwsIHUgKz0gNCwgcChsLCB1IC0gNCwgNCkpLCB1ICs9IDQsIGwuYnVmZmVyLnNsaWNlKDAsIHUpOwogICAgICAgICAgICB9LCBlLmVuY29kZS5jb21wcmVzc1BORyA9IGZ1bmN0aW9uICh0LCByLCBzLCBhLCBuKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IGUuZW5jb2RlLmNvbXByZXNzKHQsIHIsIHMsIGEsICExLCBuKSwgbCA9IDA7IGwgPCB0Lmxlbmd0aDsgbCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgaCA9IG8uZnJhbWVzW2xdLAogICAgICAgICAgICAgICAgICBjID0gKGgucmVjdC53aWR0aCwgaC5yZWN0LmhlaWdodCksCiAgICAgICAgICAgICAgICAgIHUgPSBoLmJwbCwKICAgICAgICAgICAgICAgICAgZiA9IGguYnBwLAogICAgICAgICAgICAgICAgICBwID0gbmV3IFVpbnQ4QXJyYXkoYyAqIHUgKyBjKTsKICAgICAgICAgICAgICAgIGguY2ltZyA9IGUuZW5jb2RlLl9maWx0ZXJaZXJvKGguaW1nLCBjLCBmLCB1LCBwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgICAgIH0sIGUuZW5jb2RlLmNvbXByZXNzID0gZnVuY3Rpb24gKHQsIHIsIHMsIGEsIG4sIG8pIHsKICAgICAgICAgICAgICBudWxsID09IG8gJiYgKG8gPSAhMSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDYsIGggPSA4LCBjID0gNCwgdSA9IDI1NSwgZiA9IDA7IGYgPCB0Lmxlbmd0aDsgZisrKSBmb3IgKHZhciBwID0gbmV3IFVpbnQ4QXJyYXkodFtmXSksIGcgPSBwLmxlbmd0aCwgdiA9IDA7IHYgPCBnOyB2ICs9IDQpIHUgJj0gcFt2ICsgM107CiAgICAgICAgICAgICAgdmFyIF8gPSAyNTUgIT0gdSwKICAgICAgICAgICAgICAgIHkgPSB7fSwKICAgICAgICAgICAgICAgIGIgPSBbXTsKICAgICAgICAgICAgICBpZiAoMCAhPSB0Lmxlbmd0aCAmJiAoeVswXSA9IDAsIGIucHVzaCgwKSwgMCAhPSBhICYmIGEtLSksIDAgIT0gYSkgewogICAgICAgICAgICAgICAgdmFyIHcgPSBlLnF1YW50aXplKHQsIGEsIG4pOwogICAgICAgICAgICAgICAgZm9yICh0ID0gdy5idWZzLCB2ID0gMDsgdiA8IHcucGx0ZS5sZW5ndGg7IHYrKykgbnVsbCA9PSB5W0EgPSB3LnBsdGVbdl0uZXN0LnJnYmFdICYmICh5W0FdID0gYi5sZW5ndGgsIGIucHVzaChBKSk7CiAgICAgICAgICAgICAgfSBlbHNlIGZvciAoZiA9IDA7IGYgPCB0Lmxlbmd0aDsgZisrKSB7CiAgICAgICAgICAgICAgICB2YXIgeCA9IG5ldyBVaW50MzJBcnJheSh0W2ZdKTsKICAgICAgICAgICAgICAgIGZvciAoZyA9IHgubGVuZ3RoLCB2ID0gMDsgdiA8IGc7IHYrKykgewogICAgICAgICAgICAgICAgICB2YXIgQSA9IHhbdl07CiAgICAgICAgICAgICAgICAgIGlmICgodiA8IHIgfHwgQSAhPSB4W3YgLSAxXSAmJiBBICE9IHhbdiAtIHJdKSAmJiBudWxsID09IHlbQV0gJiYgKHlbQV0gPSBiLmxlbmd0aCwgYi5wdXNoKEEpLCBiLmxlbmd0aCA+PSAzMDApKSBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIEMgPSAhIV8gJiYgbiwKICAgICAgICAgICAgICAgIFMgPSBiLmxlbmd0aDsKICAgICAgICAgICAgICBTIDw9IDI1NiAmJiAwID09IG8gJiYgKGggPSBTIDw9IDIgPyAxIDogUyA8PSA0ID8gMiA6IFMgPD0gMTYgPyA0IDogOCwgbiAmJiAoaCA9IDgpLCBfID0gITApOwogICAgICAgICAgICAgIHZhciBNID0gW107CiAgICAgICAgICAgICAgZm9yIChmID0gMDsgZiA8IHQubGVuZ3RoOyBmKyspIHsKICAgICAgICAgICAgICAgIHZhciB6ID0gbmV3IFVpbnQ4QXJyYXkodFtmXSksCiAgICAgICAgICAgICAgICAgIEwgPSBuZXcgVWludDMyQXJyYXkoei5idWZmZXIpLAogICAgICAgICAgICAgICAgICBFID0gMCwKICAgICAgICAgICAgICAgICAgVCA9IDAsCiAgICAgICAgICAgICAgICAgIGsgPSByLAogICAgICAgICAgICAgICAgICBJID0gcywKICAgICAgICAgICAgICAgICAgTyA9IDA7CiAgICAgICAgICAgICAgICBpZiAoMCAhPSBmICYmICFDKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIEQgPSBuIHx8IDEgPT0gZiB8fCAyID09IE1bTS5sZW5ndGggLSAyXS5kaXNwb3NlID8gMSA6IDIsIEYgPSAwLCBSID0gMWU5LCBQID0gMDsgUCA8IEQ7IFArKykgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIEcgPSBuZXcgVWludDhBcnJheSh0W2YgLSAxIC0gUF0pLCBCID0gbmV3IFVpbnQzMkFycmF5KHRbZiAtIDEgLSBQXSksIFUgPSByLCBOID0gcywgViA9IC0xLCBqID0gLTEsIEggPSAwOyBIIDwgczsgSCsrKSBmb3IgKHZhciBXID0gMDsgVyA8IHI7IFcrKykgTFt2ID0gSCAqIHIgKyBXXSAhPSBCW3ZdICYmIChXIDwgVSAmJiAoVSA9IFcpLCBXID4gViAmJiAoViA9IFcpLCBIIDwgTiAmJiAoTiA9IEgpLCBIID4gaiAmJiAoaiA9IEgpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IC0xID09IFYgPyAxIDogKFYgLSBVICsgMSkgKiAoaiAtIE4gKyAxKTsKICAgICAgICAgICAgICAgICAgICBxIDwgUiAmJiAoUiA9IHEsIEYgPSBQLCAtMSA9PSBWID8gKEUgPSBUID0gMCwgayA9IEkgPSAxKSA6IChFID0gVSwgVCA9IE4sIGsgPSBWIC0gVSArIDEsIEkgPSBqIC0gTiArIDEpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBHID0gbmV3IFVpbnQ4QXJyYXkodFtmIC0gMSAtIEZdKSwgMSA9PSBGICYmIChNW00ubGVuZ3RoIC0gMV0uZGlzcG9zZSA9IDIpOwogICAgICAgICAgICAgICAgICB2YXIgWSA9IG5ldyBVaW50OEFycmF5KGsgKiBJICogNCk7CiAgICAgICAgICAgICAgICAgIG5ldyBVaW50MzJBcnJheShZLmJ1ZmZlciksIGUuX2NvcHlUaWxlKEcsIHIsIHMsIFksIGssIEksIC1FLCAtVCwgMCksIGUuX2NvcHlUaWxlKHosIHIsIHMsIFksIGssIEksIC1FLCAtVCwgMykgPyAoZS5fY29weVRpbGUoeiwgciwgcywgWSwgaywgSSwgLUUsIC1ULCAyKSwgTyA9IDEpIDogKGUuX2NvcHlUaWxlKHosIHIsIHMsIFksIGssIEksIC1FLCAtVCwgMCksIE8gPSAwKSwgeiA9IFksIEwgPSBuZXcgVWludDMyQXJyYXkoei5idWZmZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIFogPSA0ICogazsKICAgICAgICAgICAgICAgIGlmIChTIDw9IDI1NiAmJiAwID09IG8pIHsKICAgICAgICAgICAgICAgICAgZm9yIChaID0gTWF0aC5jZWlsKGggKiBrIC8gOCksIFkgPSBuZXcgVWludDhBcnJheShaICogSSksIEggPSAwOyBIIDwgSTsgSCsrKSB7CiAgICAgICAgICAgICAgICAgICAgdiA9IEggKiBaOwogICAgICAgICAgICAgICAgICAgIHZhciBYID0gSCAqIGs7CiAgICAgICAgICAgICAgICAgICAgaWYgKDggPT0gaCkgZm9yIChXID0gMDsgVyA8IGs7IFcrKykgWVt2ICsgV10gPSB5W0xbWCArIFddXTtlbHNlIGlmICg0ID09IGgpIGZvciAoVyA9IDA7IFcgPCBrOyBXKyspIFlbdiArIChXID4+IDEpXSB8PSB5W0xbWCArIFddXSA8PCA0IC0gNCAqICgxICYgVyk7ZWxzZSBpZiAoMiA9PSBoKSBmb3IgKFcgPSAwOyBXIDwgazsgVysrKSBZW3YgKyAoVyA+PiAyKV0gfD0geVtMW1ggKyBXXV0gPDwgNiAtIDIgKiAoMyAmIFcpO2Vsc2UgaWYgKDEgPT0gaCkgZm9yIChXID0gMDsgVyA8IGs7IFcrKykgWVt2ICsgKFcgPj4gMyldIHw9IHlbTFtYICsgV11dIDw8IDcgLSAxICogKDcgJiBXKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB6ID0gWSwgbCA9IDMsIGMgPSAxOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgwID09IF8gJiYgMSA9PSB0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICBZID0gbmV3IFVpbnQ4QXJyYXkoayAqIEkgKiAzKTsKICAgICAgICAgICAgICAgICAgdmFyIEsgPSBrICogSTsKICAgICAgICAgICAgICAgICAgZm9yICh2ID0gMDsgdiA8IEs7IHYrKykgewogICAgICAgICAgICAgICAgICAgIHZhciAkID0gMyAqIHYsCiAgICAgICAgICAgICAgICAgICAgICBRID0gNCAqIHY7CiAgICAgICAgICAgICAgICAgICAgWVskXSA9IHpbUV0sIFlbJCArIDFdID0geltRICsgMV0sIFlbJCArIDJdID0geltRICsgMl07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgeiA9IFksIGwgPSAyLCBjID0gMywgWiA9IDMgKiBrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgTS5wdXNoKHsKICAgICAgICAgICAgICAgICAgcmVjdDogewogICAgICAgICAgICAgICAgICAgIHg6IEUsCiAgICAgICAgICAgICAgICAgICAgeTogVCwKICAgICAgICAgICAgICAgICAgICB3aWR0aDogaywKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IEkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgaW1nOiB6LAogICAgICAgICAgICAgICAgICBicGw6IFosCiAgICAgICAgICAgICAgICAgIGJwcDogYywKICAgICAgICAgICAgICAgICAgYmxlbmQ6IE8sCiAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6IEMgPyAxIDogMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjdHlwZTogbCwKICAgICAgICAgICAgICAgIGRlcHRoOiBoLAogICAgICAgICAgICAgICAgcGx0ZTogYiwKICAgICAgICAgICAgICAgIGdvdEFscGhhOiBfLAogICAgICAgICAgICAgICAgZnJhbWVzOiBNCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwgZS5lbmNvZGUuX2ZpbHRlclplcm8gPSBmdW5jdGlvbiAociwgcywgYSwgbiwgbykgewogICAgICAgICAgICAgIGZvciAodmFyIGwgPSBbXSwgaCA9IDA7IGggPCA1OyBoKyspIGlmICghKHMgKiBuID4gNWU1KSB8fCAyICE9IGggJiYgMyAhPSBoICYmIDQgIT0gaCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBzOyBjKyspIGUuZW5jb2RlLl9maWx0ZXJMaW5lKG8sIHIsIGMsIG4sIGEsIGgpOwogICAgICAgICAgICAgICAgaWYgKGwucHVzaCh0LmRlZmxhdGUobykpLCAxID09IGEpIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmb3IgKHZhciB1LCBmID0gMWU5LCBwID0gMDsgcCA8IGwubGVuZ3RoOyBwKyspIGxbcF0ubGVuZ3RoIDwgZiAmJiAodSA9IHAsIGYgPSBsW3BdLmxlbmd0aCk7CiAgICAgICAgICAgICAgcmV0dXJuIGxbdV07CiAgICAgICAgICAgIH0sIGUuZW5jb2RlLl9maWx0ZXJMaW5lID0gZnVuY3Rpb24gKHQsIHIsIHMsIGEsIG4sIG8pIHsKICAgICAgICAgICAgICB2YXIgbCA9IHMgKiBhLAogICAgICAgICAgICAgICAgaCA9IGwgKyBzLAogICAgICAgICAgICAgICAgYyA9IGUuZGVjb2RlLl9wYWV0aDsKICAgICAgICAgICAgICBpZiAodFtoXSA9IG8sIGgrKywgMCA9PSBvKSBmb3IgKHZhciB1ID0gMDsgdSA8IGE7IHUrKykgdFtoICsgdV0gPSByW2wgKyB1XTtlbHNlIGlmICgxID09IG8pIHsKICAgICAgICAgICAgICAgIGZvciAodSA9IDA7IHUgPCBuOyB1KyspIHRbaCArIHVdID0gcltsICsgdV07CiAgICAgICAgICAgICAgICBmb3IgKHUgPSBuOyB1IDwgYTsgdSsrKSB0W2ggKyB1XSA9IHJbbCArIHVdIC0gcltsICsgdSAtIG5dICsgMjU2ICYgMjU1OwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PSBzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHUgPSAwOyB1IDwgbjsgdSsrKSB0W2ggKyB1XSA9IHJbbCArIHVdOwogICAgICAgICAgICAgICAgaWYgKDIgPT0gbykgZm9yICh1ID0gbjsgdSA8IGE7IHUrKykgdFtoICsgdV0gPSByW2wgKyB1XTsKICAgICAgICAgICAgICAgIGlmICgzID09IG8pIGZvciAodSA9IG47IHUgPCBhOyB1KyspIHRbaCArIHVdID0gcltsICsgdV0gLSAocltsICsgdSAtIG5dID4+IDEpICsgMjU2ICYgMjU1OwogICAgICAgICAgICAgICAgaWYgKDQgPT0gbykgZm9yICh1ID0gbjsgdSA8IGE7IHUrKykgdFtoICsgdV0gPSByW2wgKyB1XSAtIGMocltsICsgdSAtIG5dLCAwLCAwKSArIDI1NiAmIDI1NTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKDIgPT0gbykgZm9yICh1ID0gMDsgdSA8IGE7IHUrKykgdFtoICsgdV0gPSByW2wgKyB1XSArIDI1NiAtIHJbbCArIHUgLSBhXSAmIDI1NTsKICAgICAgICAgICAgICAgIGlmICgzID09IG8pIHsKICAgICAgICAgICAgICAgICAgZm9yICh1ID0gMDsgdSA8IG47IHUrKykgdFtoICsgdV0gPSByW2wgKyB1XSArIDI1NiAtIChyW2wgKyB1IC0gYV0gPj4gMSkgJiAyNTU7CiAgICAgICAgICAgICAgICAgIGZvciAodSA9IG47IHUgPCBhOyB1KyspIHRbaCArIHVdID0gcltsICsgdV0gKyAyNTYgLSAocltsICsgdSAtIGFdICsgcltsICsgdSAtIG5dID4+IDEpICYgMjU1OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKDQgPT0gbykgewogICAgICAgICAgICAgICAgICBmb3IgKHUgPSAwOyB1IDwgbjsgdSsrKSB0W2ggKyB1XSA9IHJbbCArIHVdICsgMjU2IC0gYygwLCByW2wgKyB1IC0gYV0sIDApICYgMjU1OwogICAgICAgICAgICAgICAgICBmb3IgKHUgPSBuOyB1IDwgYTsgdSsrKSB0W2ggKyB1XSA9IHJbbCArIHVdICsgMjU2IC0gYyhyW2wgKyB1IC0gbl0sIHJbbCArIHUgLSBhXSwgcltsICsgdSAtIG4gLSBhXSkgJiAyNTU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBlLmNyYyA9IHsKICAgICAgICAgICAgICB0YWJsZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IG5ldyBVaW50MzJBcnJheSgyNTYpLCB0ID0gMDsgdCA8IDI1NjsgdCsrKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSB0LCBzID0gMDsgcyA8IDg7IHMrKykgMSAmIHIgPyByID0gMzk4ODI5MjM4NCBeIHIgPj4+IDEgOiByID4+Pj0gMTsKICAgICAgICAgICAgICAgICAgZVt0XSA9IHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgICB9KCksCiAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodCwgciwgcywgYSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBhOyBuKyspIHQgPSBlLmNyYy50YWJsZVsyNTUgJiAodCBeIHJbcyArIG5dKV0gXiB0ID4+PiA4OwogICAgICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjcmM6IGZ1bmN0aW9uIGNyYyh0LCByLCBzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gNDI5NDk2NzI5NSBeIGUuY3JjLnVwZGF0ZSg0Mjk0OTY3Mjk1LCB0LCByLCBzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIGUucXVhbnRpemUgPSBmdW5jdGlvbiAodCwgciwgcykgewogICAgICAgICAgICAgIGZvciAodmFyIGEgPSBbXSwgbiA9IDAsIG8gPSAwOyBvIDwgdC5sZW5ndGg7IG8rKykgYS5wdXNoKGUuZW5jb2RlLmFscGhhTXVsKG5ldyBVaW50OEFycmF5KHRbb10pLCBzKSksIG4gKz0gdFtvXS5ieXRlTGVuZ3RoOwogICAgICAgICAgICAgIHZhciBsID0gbmV3IFVpbnQ4QXJyYXkobiksCiAgICAgICAgICAgICAgICBoID0gbmV3IFVpbnQzMkFycmF5KGwuYnVmZmVyKSwKICAgICAgICAgICAgICAgIGMgPSAwOwogICAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBhLmxlbmd0aDsgbysrKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gYVtvXSwgZiA9IHUubGVuZ3RoLCBwID0gMDsgcCA8IGY7IHArKykgbFtjICsgcF0gPSB1W3BdOwogICAgICAgICAgICAgICAgYyArPSBmOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgZyA9IHsKICAgICAgICAgICAgICAgIGkwOiAwLAogICAgICAgICAgICAgICAgaTE6IGwubGVuZ3RoLAogICAgICAgICAgICAgICAgYnN0OiBudWxsLAogICAgICAgICAgICAgICAgZXN0OiBudWxsLAogICAgICAgICAgICAgICAgdGRzdDogMCwKICAgICAgICAgICAgICAgIGxlZnQ6IG51bGwsCiAgICAgICAgICAgICAgICByaWdodDogbnVsbAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZy5ic3QgPSBlLnF1YW50aXplLnN0YXRzKGwsIGcuaTAsIGcuaTEpLCBnLmVzdCA9IGUucXVhbnRpemUuZXN0YXRzKGcuYnN0KTsKICAgICAgICAgICAgICBmb3IgKHZhciB2ID0gW2ddOyB2Lmxlbmd0aCA8IHI7KSB7CiAgICAgICAgICAgICAgICB2YXIgXyA9IDAsCiAgICAgICAgICAgICAgICAgIHkgPSAwOwogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IHYubGVuZ3RoOyBvKyspIHZbb10uZXN0LkwgPiBfICYmIChfID0gdltvXS5lc3QuTCwgeSA9IG8pOwogICAgICAgICAgICAgICAgaWYgKF8gPCAuMDAxKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciBiID0gdlt5XSwKICAgICAgICAgICAgICAgICAgdyA9IGUucXVhbnRpemUuc3BsaXRQaXhlbHMobCwgaCwgYi5pMCwgYi5pMSwgYi5lc3QuZSwgYi5lc3QuZU1xMjU1KSwKICAgICAgICAgICAgICAgICAgeCA9IHsKICAgICAgICAgICAgICAgICAgICBpMDogYi5pMCwKICAgICAgICAgICAgICAgICAgICBpMTogdywKICAgICAgICAgICAgICAgICAgICBic3Q6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgZXN0OiBudWxsLAogICAgICAgICAgICAgICAgICAgIHRkc3Q6IDAsCiAgICAgICAgICAgICAgICAgICAgbGVmdDogbnVsbCwKICAgICAgICAgICAgICAgICAgICByaWdodDogbnVsbAogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgeC5ic3QgPSBlLnF1YW50aXplLnN0YXRzKGwsIHguaTAsIHguaTEpLCB4LmVzdCA9IGUucXVhbnRpemUuZXN0YXRzKHguYnN0KTsKICAgICAgICAgICAgICAgIHZhciBBID0gewogICAgICAgICAgICAgICAgICBpMDogdywKICAgICAgICAgICAgICAgICAgaTE6IGIuaTEsCiAgICAgICAgICAgICAgICAgIGJzdDogbnVsbCwKICAgICAgICAgICAgICAgICAgZXN0OiBudWxsLAogICAgICAgICAgICAgICAgICB0ZHN0OiAwLAogICAgICAgICAgICAgICAgICBsZWZ0OiBudWxsLAogICAgICAgICAgICAgICAgICByaWdodDogbnVsbAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGZvciAoQS5ic3QgPSB7CiAgICAgICAgICAgICAgICAgIFI6IFtdLAogICAgICAgICAgICAgICAgICBtOiBbXSwKICAgICAgICAgICAgICAgICAgTjogYi5ic3QuTiAtIHguYnN0Lk4KICAgICAgICAgICAgICAgIH0sIG8gPSAwOyBvIDwgMTY7IG8rKykgQS5ic3QuUltvXSA9IGIuYnN0LlJbb10gLSB4LmJzdC5SW29dOwogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IDQ7IG8rKykgQS5ic3QubVtvXSA9IGIuYnN0Lm1bb10gLSB4LmJzdC5tW29dOwogICAgICAgICAgICAgICAgQS5lc3QgPSBlLnF1YW50aXplLmVzdGF0cyhBLmJzdCksIGIubGVmdCA9IHgsIGIucmlnaHQgPSBBLCB2W3ldID0geCwgdi5wdXNoKEEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2LnNvcnQoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0LmJzdC5OIC0gZS5ic3QuTjsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmb3IgKHZhciBDID0gMDsgQyA8IGEubGVuZ3RoOyBDKyspIHsKICAgICAgICAgICAgICAgIHZhciBTID0gZS5xdWFudGl6ZS5wbGFuZURzdCwKICAgICAgICAgICAgICAgICAgTSA9IG5ldyBVaW50OEFycmF5KGFbQ10uYnVmZmVyKSwKICAgICAgICAgICAgICAgICAgeiA9IG5ldyBVaW50MzJBcnJheShhW0NdLmJ1ZmZlciksCiAgICAgICAgICAgICAgICAgIEwgPSBNLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBMOyBvICs9IDQpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgRSA9IE1bb10gKiAoMSAvIDI1NSksIFQgPSBNW28gKyAxXSAqICgxIC8gMjU1KSwgayA9IE1bbyArIDJdICogKDEgLyAyNTUpLCBJID0gTVtvICsgM10gKiAoMSAvIDI1NSksIE8gPSBnOyBPLmxlZnQ7KSBPID0gUyhPLmVzdCwgRSwgVCwgaywgSSkgPD0gMCA/IE8ubGVmdCA6IE8ucmlnaHQ7CiAgICAgICAgICAgICAgICAgIHpbbyA+PiAyXSA9IE8uZXN0LnJnYmE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhW0NdID0gei5idWZmZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBidWZzOiBhLAogICAgICAgICAgICAgICAgcGx0ZTogdgogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sIGUucXVhbnRpemUuZ2V0TmVhcmVzdCA9IGZ1bmN0aW9uICh0LCByLCBzLCBhLCBuKSB7CiAgICAgICAgICAgICAgaWYgKG51bGwgPT0gdC5sZWZ0KSByZXR1cm4gdC50ZHN0ID0gZS5xdWFudGl6ZS5kaXN0KHQuZXN0LnEsIHIsIHMsIGEsIG4pLCB0OwogICAgICAgICAgICAgIHZhciBvID0gZS5xdWFudGl6ZS5wbGFuZURzdCh0LmVzdCwgciwgcywgYSwgbiksCiAgICAgICAgICAgICAgICBsID0gdC5sZWZ0LAogICAgICAgICAgICAgICAgaCA9IHQucmlnaHQ7CiAgICAgICAgICAgICAgbyA+IDAgJiYgKGwgPSB0LnJpZ2h0LCBoID0gdC5sZWZ0KTsKICAgICAgICAgICAgICB2YXIgYyA9IGUucXVhbnRpemUuZ2V0TmVhcmVzdChsLCByLCBzLCBhLCBuKTsKICAgICAgICAgICAgICBpZiAoYy50ZHN0IDw9IG8gKiBvKSByZXR1cm4gYzsKICAgICAgICAgICAgICB2YXIgdSA9IGUucXVhbnRpemUuZ2V0TmVhcmVzdChoLCByLCBzLCBhLCBuKTsKICAgICAgICAgICAgICByZXR1cm4gdS50ZHN0IDwgYy50ZHN0ID8gdSA6IGM7CiAgICAgICAgICAgIH0sIGUucXVhbnRpemUucGxhbmVEc3QgPSBmdW5jdGlvbiAoZSwgdCwgciwgcywgYSkgewogICAgICAgICAgICAgIHZhciBuID0gZS5lOwogICAgICAgICAgICAgIHJldHVybiBuWzBdICogdCArIG5bMV0gKiByICsgblsyXSAqIHMgKyBuWzNdICogYSAtIGUuZU1xOwogICAgICAgICAgICB9LCBlLnF1YW50aXplLmRpc3QgPSBmdW5jdGlvbiAoZSwgdCwgciwgcywgYSkgewogICAgICAgICAgICAgIHZhciBuID0gdCAtIGVbMF0sCiAgICAgICAgICAgICAgICBvID0gciAtIGVbMV0sCiAgICAgICAgICAgICAgICBsID0gcyAtIGVbMl0sCiAgICAgICAgICAgICAgICBoID0gYSAtIGVbM107CiAgICAgICAgICAgICAgcmV0dXJuIG4gKiBuICsgbyAqIG8gKyBsICogbCArIGggKiBoOwogICAgICAgICAgICB9LCBlLnF1YW50aXplLnNwbGl0UGl4ZWxzID0gZnVuY3Rpb24gKHQsIHIsIHMsIGEsIG4sIG8pIHsKICAgICAgICAgICAgICB2YXIgbCA9IGUucXVhbnRpemUudmVjRG90OwogICAgICAgICAgICAgIGZvciAoYSAtPSA0OyBzIDwgYTspIHsKICAgICAgICAgICAgICAgIGZvciAoOyBsKHQsIHMsIG4pIDw9IG87KSBzICs9IDQ7CiAgICAgICAgICAgICAgICBmb3IgKDsgbCh0LCBhLCBuKSA+IG87KSBhIC09IDQ7CiAgICAgICAgICAgICAgICBpZiAocyA+PSBhKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciBoID0gcltzID4+IDJdOwogICAgICAgICAgICAgICAgcltzID4+IDJdID0gclthID4+IDJdLCByW2EgPj4gMl0gPSBoLCBzICs9IDQsIGEgLT0gNDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICg7IGwodCwgcywgbikgPiBvOykgcyAtPSA0OwogICAgICAgICAgICAgIHJldHVybiBzICsgNDsKICAgICAgICAgICAgfSwgZS5xdWFudGl6ZS52ZWNEb3QgPSBmdW5jdGlvbiAoZSwgdCwgcikgewogICAgICAgICAgICAgIHJldHVybiBlW3RdICogclswXSArIGVbdCArIDFdICogclsxXSArIGVbdCArIDJdICogclsyXSArIGVbdCArIDNdICogclszXTsKICAgICAgICAgICAgfSwgZS5xdWFudGl6ZS5zdGF0cyA9IGZ1bmN0aW9uIChlLCB0LCByKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSwgYSA9IFswLCAwLCAwLCAwXSwgbiA9IHIgLSB0ID4+IDIsIG8gPSB0OyBvIDwgcjsgbyArPSA0KSB7CiAgICAgICAgICAgICAgICB2YXIgbCA9IGVbb10gKiAoMSAvIDI1NSksCiAgICAgICAgICAgICAgICAgIGggPSBlW28gKyAxXSAqICgxIC8gMjU1KSwKICAgICAgICAgICAgICAgICAgYyA9IGVbbyArIDJdICogKDEgLyAyNTUpLAogICAgICAgICAgICAgICAgICB1ID0gZVtvICsgM10gKiAoMSAvIDI1NSk7CiAgICAgICAgICAgICAgICBhWzBdICs9IGwsIGFbMV0gKz0gaCwgYVsyXSArPSBjLCBhWzNdICs9IHUsIHNbMF0gKz0gbCAqIGwsIHNbMV0gKz0gbCAqIGgsIHNbMl0gKz0gbCAqIGMsIHNbM10gKz0gbCAqIHUsIHNbNV0gKz0gaCAqIGgsIHNbNl0gKz0gaCAqIGMsIHNbN10gKz0gaCAqIHUsIHNbMTBdICs9IGMgKiBjLCBzWzExXSArPSBjICogdSwgc1sxNV0gKz0gdSAqIHU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzWzRdID0gc1sxXSwgc1s4XSA9IHNbMl0sIHNbMTJdID0gc1szXSwgc1s5XSA9IHNbNl0sIHNbMTNdID0gc1s3XSwgc1sxNF0gPSBzWzExXSwgewogICAgICAgICAgICAgICAgUjogcywKICAgICAgICAgICAgICAgIG06IGEsCiAgICAgICAgICAgICAgICBOOiBuCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwgZS5xdWFudGl6ZS5lc3RhdHMgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHZhciByID0gdC5SLAogICAgICAgICAgICAgICAgcyA9IHQubSwKICAgICAgICAgICAgICAgIGEgPSB0Lk4sCiAgICAgICAgICAgICAgICBuID0gc1swXSwKICAgICAgICAgICAgICAgIG8gPSBzWzFdLAogICAgICAgICAgICAgICAgbCA9IHNbMl0sCiAgICAgICAgICAgICAgICBoID0gc1szXSwKICAgICAgICAgICAgICAgIGMgPSAwID09IGEgPyAwIDogMSAvIGEsCiAgICAgICAgICAgICAgICB1ID0gW3JbMF0gLSBuICogbiAqIGMsIHJbMV0gLSBuICogbyAqIGMsIHJbMl0gLSBuICogbCAqIGMsIHJbM10gLSBuICogaCAqIGMsIHJbNF0gLSBvICogbiAqIGMsIHJbNV0gLSBvICogbyAqIGMsIHJbNl0gLSBvICogbCAqIGMsIHJbN10gLSBvICogaCAqIGMsIHJbOF0gLSBsICogbiAqIGMsIHJbOV0gLSBsICogbyAqIGMsIHJbMTBdIC0gbCAqIGwgKiBjLCByWzExXSAtIGwgKiBoICogYywgclsxMl0gLSBoICogbiAqIGMsIHJbMTNdIC0gaCAqIG8gKiBjLCByWzE0XSAtIGggKiBsICogYywgclsxNV0gLSBoICogaCAqIGNdLAogICAgICAgICAgICAgICAgZiA9IHUsCiAgICAgICAgICAgICAgICBwID0gZS5NNCwKICAgICAgICAgICAgICAgIGcgPSBbLjUsIC41LCAuNSwgLjVdLAogICAgICAgICAgICAgICAgdiA9IDAsCiAgICAgICAgICAgICAgICBfID0gMDsKICAgICAgICAgICAgICBpZiAoMCAhPSBhKSBmb3IgKHZhciB5ID0gMDsgeSA8IDEwICYmIChnID0gcC5tdWx0VmVjKGYsIGcpLCBfID0gTWF0aC5zcXJ0KHAuZG90KGcsIGcpKSwgZyA9IHAuc21sKDEgLyBfLCBnKSwgIShNYXRoLmFicyhfIC0gdikgPCAxZS05KSk7IHkrKykgdiA9IF87CiAgICAgICAgICAgICAgdmFyIGIgPSBbbiAqIGMsIG8gKiBjLCBsICogYywgaCAqIGNdLAogICAgICAgICAgICAgICAgdyA9IHAuZG90KHAuc21sKDI1NSwgYiksIGcpLAogICAgICAgICAgICAgICAgeCA9IGJbM10gPCAuMDAxID8gMCA6IDEgLyBiWzNdOwogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBDb3Y6IHUsCiAgICAgICAgICAgICAgICBxOiBiLAogICAgICAgICAgICAgICAgZTogZywKICAgICAgICAgICAgICAgIEw6IHYsCiAgICAgICAgICAgICAgICBlTXEyNTU6IHcsCiAgICAgICAgICAgICAgICBlTXE6IHAuZG90KGcsIGIpLAogICAgICAgICAgICAgICAgcmdiYTogKE1hdGgucm91bmQoMjU1ICogYlszXSkgPDwgMjQgfCBNYXRoLnJvdW5kKDI1NSAqIGJbMl0gKiB4KSA8PCAxNiB8IE1hdGgucm91bmQoMjU1ICogYlsxXSAqIHgpIDw8IDggfCBNYXRoLnJvdW5kKDI1NSAqIGJbMF0gKiB4KSA8PCAwKSA+Pj4gMAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sIGUuTTQgPSB7CiAgICAgICAgICAgICAgbXVsdFZlYzogZnVuY3Rpb24gbXVsdFZlYyhlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gW2VbMF0gKiB0WzBdICsgZVsxXSAqIHRbMV0gKyBlWzJdICogdFsyXSArIGVbM10gKiB0WzNdLCBlWzRdICogdFswXSArIGVbNV0gKiB0WzFdICsgZVs2XSAqIHRbMl0gKyBlWzddICogdFszXSwgZVs4XSAqIHRbMF0gKyBlWzldICogdFsxXSArIGVbMTBdICogdFsyXSArIGVbMTFdICogdFszXSwgZVsxMl0gKiB0WzBdICsgZVsxM10gKiB0WzFdICsgZVsxNF0gKiB0WzJdICsgZVsxNV0gKiB0WzNdXTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRvdDogZnVuY3Rpb24gZG90KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlWzBdICogdFswXSArIGVbMV0gKiB0WzFdICsgZVsyXSAqIHRbMl0gKyBlWzNdICogdFszXTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHNtbDogZnVuY3Rpb24gc21sKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbZSAqIHRbMF0sIGUgKiB0WzFdLCBlICogdFsyXSwgZSAqIHRbM11dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZS5lbmNvZGUuYWxwaGFNdWwgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgIGZvciAodmFyIHIgPSBuZXcgVWludDhBcnJheShlLmxlbmd0aCksIHMgPSBlLmxlbmd0aCA+PiAyLCBhID0gMDsgYSA8IHM7IGErKykgewogICAgICAgICAgICAgICAgdmFyIG4gPSBhIDw8IDIsCiAgICAgICAgICAgICAgICAgIG8gPSBlW24gKyAzXTsKICAgICAgICAgICAgICAgIHQgJiYgKG8gPSBvIDwgMTI4ID8gMCA6IDI1NSk7CiAgICAgICAgICAgICAgICB2YXIgbCA9IG8gKiAoMSAvIDI1NSk7CiAgICAgICAgICAgICAgICByW24gKyAwXSA9IGVbbiArIDBdICogbCwgcltuICsgMV0gPSBlW24gKyAxXSAqIGwsIHJbbiArIDJdID0gZVtuICsgMl0gKiBsLCByW24gKyAzXSA9IG87CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICB9OwogICAgICAgICAgfShzLCByKDQzMDApKTsKICAgICAgICB9LAogICAgICAgIDQzMDA6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHZhciBzID0ge307CiAgICAgICAgICAoMCwgcig2Mjk2KS5hc3NpZ24pKHMsIHIoNzQzNCksIHIoNjk4OCksIHIoNTY0MikpLCBlLmV4cG9ydHMgPSBzOwogICAgICAgIH0sCiAgICAgICAgNzQzNDogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgdmFyIHMgPSByKDk4OTIpLAogICAgICAgICAgICBhID0gcig2Mjk2KSwKICAgICAgICAgICAgbiA9IHIoMzk2MyksCiAgICAgICAgICAgIG8gPSByKDU3OTUpLAogICAgICAgICAgICBsID0gcig2ODY2KSwKICAgICAgICAgICAgaCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7CiAgICAgICAgICBmdW5jdGlvbiBjKGUpIHsKICAgICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGMpKSByZXR1cm4gbmV3IGMoZSk7CiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGEuYXNzaWduKHsKICAgICAgICAgICAgICBsZXZlbDogLTEsCiAgICAgICAgICAgICAgbWV0aG9kOiA4LAogICAgICAgICAgICAgIGNodW5rU2l6ZTogMTYzODQsCiAgICAgICAgICAgICAgd2luZG93Qml0czogMTUsCiAgICAgICAgICAgICAgbWVtTGV2ZWw6IDgsCiAgICAgICAgICAgICAgc3RyYXRlZ3k6IDAsCiAgICAgICAgICAgICAgdG86ICIiCiAgICAgICAgICAgIH0sIGUgfHwge30pOwogICAgICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9uczsKICAgICAgICAgICAgdC5yYXcgJiYgdC53aW5kb3dCaXRzID4gMCA/IHQud2luZG93Qml0cyA9IC10LndpbmRvd0JpdHMgOiB0Lmd6aXAgJiYgdC53aW5kb3dCaXRzID4gMCAmJiB0LndpbmRvd0JpdHMgPCAxNiAmJiAodC53aW5kb3dCaXRzICs9IDE2KSwgdGhpcy5lcnIgPSAwLCB0aGlzLm1zZyA9ICIiLCB0aGlzLmVuZGVkID0gITEsIHRoaXMuY2h1bmtzID0gW10sIHRoaXMuc3RybSA9IG5ldyBsKCksIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwOwogICAgICAgICAgICB2YXIgciA9IHMuZGVmbGF0ZUluaXQyKHRoaXMuc3RybSwgdC5sZXZlbCwgdC5tZXRob2QsIHQud2luZG93Qml0cywgdC5tZW1MZXZlbCwgdC5zdHJhdGVneSk7CiAgICAgICAgICAgIGlmICgwICE9PSByKSB0aHJvdyBuZXcgRXJyb3Iob1tyXSk7CiAgICAgICAgICAgIGlmICh0LmhlYWRlciAmJiBzLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLCB0LmhlYWRlciksIHQuZGljdGlvbmFyeSkgewogICAgICAgICAgICAgIHZhciB1OwogICAgICAgICAgICAgIGlmICh1ID0gInN0cmluZyIgPT0gdHlwZW9mIHQuZGljdGlvbmFyeSA/IG4uc3RyaW5nMmJ1Zih0LmRpY3Rpb25hcnkpIDogIltvYmplY3QgQXJyYXlCdWZmZXJdIiA9PT0gaC5jYWxsKHQuZGljdGlvbmFyeSkgPyBuZXcgVWludDhBcnJheSh0LmRpY3Rpb25hcnkpIDogdC5kaWN0aW9uYXJ5LCAwICE9PSAociA9IHMuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCB1KSkpIHRocm93IG5ldyBFcnJvcihvW3JdKTsKICAgICAgICAgICAgICB0aGlzLl9kaWN0X3NldCA9ICEwOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB1KGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSBuZXcgYyh0KTsKICAgICAgICAgICAgaWYgKHIucHVzaChlLCAhMCksIHIuZXJyKSB0aHJvdyByLm1zZyB8fCBvW3IuZXJyXTsKICAgICAgICAgICAgcmV0dXJuIHIucmVzdWx0OwogICAgICAgICAgfQogICAgICAgICAgYy5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgbCA9IHRoaXMuc3RybSwKICAgICAgICAgICAgICBjID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTsKICAgICAgICAgICAgaWYgKHRoaXMuZW5kZWQpIHJldHVybiAhMTsKICAgICAgICAgICAgbyA9IHQgPT09IH5+dCA/IHQgOiAhMCA9PT0gdCA/IDQgOiAwLCAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IGwuaW5wdXQgPSBuLnN0cmluZzJidWYoZSkgOiAiW29iamVjdCBBcnJheUJ1ZmZlcl0iID09PSBoLmNhbGwoZSkgPyBsLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZSkgOiBsLmlucHV0ID0gZSwgbC5uZXh0X2luID0gMCwgbC5hdmFpbF9pbiA9IGwuaW5wdXQubGVuZ3RoOwogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgaWYgKDAgPT09IGwuYXZhaWxfb3V0ICYmIChsLm91dHB1dCA9IG5ldyBhLkJ1ZjgoYyksIGwubmV4dF9vdXQgPSAwLCBsLmF2YWlsX291dCA9IGMpLCAxICE9PSAociA9IHMuZGVmbGF0ZShsLCBvKSkgJiYgMCAhPT0gcikgcmV0dXJuIHRoaXMub25FbmQociksIHRoaXMuZW5kZWQgPSAhMCwgITE7CiAgICAgICAgICAgICAgMCAhPT0gbC5hdmFpbF9vdXQgJiYgKDAgIT09IGwuYXZhaWxfaW4gfHwgNCAhPT0gbyAmJiAyICE9PSBvKSB8fCAoInN0cmluZyIgPT09IHRoaXMub3B0aW9ucy50byA/IHRoaXMub25EYXRhKG4uYnVmMmJpbnN0cmluZyhhLnNocmlua0J1ZihsLm91dHB1dCwgbC5uZXh0X291dCkpKSA6IHRoaXMub25EYXRhKGEuc2hyaW5rQnVmKGwub3V0cHV0LCBsLm5leHRfb3V0KSkpOwogICAgICAgICAgICB9IHdoaWxlICgobC5hdmFpbF9pbiA+IDAgfHwgMCA9PT0gbC5hdmFpbF9vdXQpICYmIDEgIT09IHIpOwogICAgICAgICAgICByZXR1cm4gNCA9PT0gbyA/IChyID0gcy5kZWZsYXRlRW5kKHRoaXMuc3RybSksIHRoaXMub25FbmQociksIHRoaXMuZW5kZWQgPSAhMCwgMCA9PT0gcikgOiAyICE9PSBvIHx8ICh0aGlzLm9uRW5kKDApLCBsLmF2YWlsX291dCA9IDAsICEwKTsKICAgICAgICAgIH0sIGMucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2goZSk7CiAgICAgICAgICB9LCBjLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIDAgPT09IGUgJiYgKCJzdHJpbmciID09PSB0aGlzLm9wdGlvbnMudG8gPyB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oIiIpIDogdGhpcy5yZXN1bHQgPSBhLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5lcnIgPSBlLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7CiAgICAgICAgICB9LCB0LkRlZmxhdGUgPSBjLCB0LmRlZmxhdGUgPSB1LCB0LmRlZmxhdGVSYXcgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICByZXR1cm4gKHQgPSB0IHx8IHt9KS5yYXcgPSAhMCwgdShlLCB0KTsKICAgICAgICAgIH0sIHQuZ3ppcCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiAodCA9IHQgfHwge30pLmd6aXAgPSAhMCwgdShlLCB0KTsKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICA2OTg4OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICB2YXIgcyA9IHIoNTM1NiksCiAgICAgICAgICAgIGEgPSByKDYyOTYpLAogICAgICAgICAgICBuID0gcigzOTYzKSwKICAgICAgICAgICAgbyA9IHIoNTY0MiksCiAgICAgICAgICAgIGwgPSByKDU3OTUpLAogICAgICAgICAgICBoID0gcig2ODY2KSwKICAgICAgICAgICAgYyA9IHIoODc3MiksCiAgICAgICAgICAgIHUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwogICAgICAgICAgZnVuY3Rpb24gZihlKSB7CiAgICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBmKSkgcmV0dXJuIG5ldyBmKGUpOwogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBhLmFzc2lnbih7CiAgICAgICAgICAgICAgY2h1bmtTaXplOiAxNjM4NCwKICAgICAgICAgICAgICB3aW5kb3dCaXRzOiAwLAogICAgICAgICAgICAgIHRvOiAiIgogICAgICAgICAgICB9LCBlIHx8IHt9KTsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgIHQucmF3ICYmIHQud2luZG93Qml0cyA+PSAwICYmIHQud2luZG93Qml0cyA8IDE2ICYmICh0LndpbmRvd0JpdHMgPSAtdC53aW5kb3dCaXRzLCAwID09PSB0LndpbmRvd0JpdHMgJiYgKHQud2luZG93Qml0cyA9IC0xNSkpLCAhKHQud2luZG93Qml0cyA+PSAwICYmIHQud2luZG93Qml0cyA8IDE2KSB8fCBlICYmIGUud2luZG93Qml0cyB8fCAodC53aW5kb3dCaXRzICs9IDMyKSwgdC53aW5kb3dCaXRzID4gMTUgJiYgdC53aW5kb3dCaXRzIDwgNDggJiYgMCA9PSAoMTUgJiB0LndpbmRvd0JpdHMpICYmICh0LndpbmRvd0JpdHMgfD0gMTUpLCB0aGlzLmVyciA9IDAsIHRoaXMubXNnID0gIiIsIHRoaXMuZW5kZWQgPSAhMSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5zdHJtID0gbmV3IGgoKSwgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7CiAgICAgICAgICAgIHZhciByID0gcy5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLCB0LndpbmRvd0JpdHMpOwogICAgICAgICAgICBpZiAociAhPT0gby5aX09LKSB0aHJvdyBuZXcgRXJyb3IobFtyXSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhlYWRlciA9IG5ldyBjKCksIHMuaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sIHRoaXMuaGVhZGVyKSwgdC5kaWN0aW9uYXJ5ICYmICgic3RyaW5nIiA9PSB0eXBlb2YgdC5kaWN0aW9uYXJ5ID8gdC5kaWN0aW9uYXJ5ID0gbi5zdHJpbmcyYnVmKHQuZGljdGlvbmFyeSkgOiAiW29iamVjdCBBcnJheUJ1ZmZlcl0iID09PSB1LmNhbGwodC5kaWN0aW9uYXJ5KSAmJiAodC5kaWN0aW9uYXJ5ID0gbmV3IFVpbnQ4QXJyYXkodC5kaWN0aW9uYXJ5KSksIHQucmF3ICYmIChyID0gcy5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIHQuZGljdGlvbmFyeSkpICE9PSBvLlpfT0spKSB0aHJvdyBuZXcgRXJyb3IobFtyXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBwKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSBuZXcgZih0KTsKICAgICAgICAgICAgaWYgKHIucHVzaChlLCAhMCksIHIuZXJyKSB0aHJvdyByLm1zZyB8fCBsW3IuZXJyXTsKICAgICAgICAgICAgcmV0dXJuIHIucmVzdWx0OwogICAgICAgICAgfQogICAgICAgICAgZi5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICBjLAogICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgcCA9IHRoaXMuc3RybSwKICAgICAgICAgICAgICBnID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZSwKICAgICAgICAgICAgICB2ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnksCiAgICAgICAgICAgICAgXyA9ICExOwogICAgICAgICAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuICExOwogICAgICAgICAgICBsID0gdCA9PT0gfn50ID8gdCA6ICEwID09PSB0ID8gby5aX0ZJTklTSCA6IG8uWl9OT19GTFVTSCwgInN0cmluZyIgPT0gdHlwZW9mIGUgPyBwLmlucHV0ID0gbi5iaW5zdHJpbmcyYnVmKGUpIDogIltvYmplY3QgQXJyYXlCdWZmZXJdIiA9PT0gdS5jYWxsKGUpID8gcC5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGUpIDogcC5pbnB1dCA9IGUsIHAubmV4dF9pbiA9IDAsIHAuYXZhaWxfaW4gPSBwLmlucHV0Lmxlbmd0aDsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGlmICgwID09PSBwLmF2YWlsX291dCAmJiAocC5vdXRwdXQgPSBuZXcgYS5CdWY4KGcpLCBwLm5leHRfb3V0ID0gMCwgcC5hdmFpbF9vdXQgPSBnKSwgKHIgPSBzLmluZmxhdGUocCwgby5aX05PX0ZMVVNIKSkgPT09IG8uWl9ORUVEX0RJQ1QgJiYgdiAmJiAociA9IHMuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCB2KSksIHIgPT09IG8uWl9CVUZfRVJST1IgJiYgITAgPT09IF8gJiYgKHIgPSBvLlpfT0ssIF8gPSAhMSksIHIgIT09IG8uWl9TVFJFQU1fRU5EICYmIHIgIT09IG8uWl9PSykgcmV0dXJuIHRoaXMub25FbmQociksIHRoaXMuZW5kZWQgPSAhMCwgITE7CiAgICAgICAgICAgICAgcC5uZXh0X291dCAmJiAoMCAhPT0gcC5hdmFpbF9vdXQgJiYgciAhPT0gby5aX1NUUkVBTV9FTkQgJiYgKDAgIT09IHAuYXZhaWxfaW4gfHwgbCAhPT0gby5aX0ZJTklTSCAmJiBsICE9PSBvLlpfU1lOQ19GTFVTSCkgfHwgKCJzdHJpbmciID09PSB0aGlzLm9wdGlvbnMudG8gPyAoaCA9IG4udXRmOGJvcmRlcihwLm91dHB1dCwgcC5uZXh0X291dCksIGMgPSBwLm5leHRfb3V0IC0gaCwgZiA9IG4uYnVmMnN0cmluZyhwLm91dHB1dCwgaCksIHAubmV4dF9vdXQgPSBjLCBwLmF2YWlsX291dCA9IGcgLSBjLCBjICYmIGEuYXJyYXlTZXQocC5vdXRwdXQsIHAub3V0cHV0LCBoLCBjLCAwKSwgdGhpcy5vbkRhdGEoZikpIDogdGhpcy5vbkRhdGEoYS5zaHJpbmtCdWYocC5vdXRwdXQsIHAubmV4dF9vdXQpKSkpLCAwID09PSBwLmF2YWlsX2luICYmIDAgPT09IHAuYXZhaWxfb3V0ICYmIChfID0gITApOwogICAgICAgICAgICB9IHdoaWxlICgocC5hdmFpbF9pbiA+IDAgfHwgMCA9PT0gcC5hdmFpbF9vdXQpICYmIHIgIT09IG8uWl9TVFJFQU1fRU5EKTsKICAgICAgICAgICAgcmV0dXJuIHIgPT09IG8uWl9TVFJFQU1fRU5EICYmIChsID0gby5aX0ZJTklTSCksIGwgPT09IG8uWl9GSU5JU0ggPyAociA9IHMuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pLCB0aGlzLm9uRW5kKHIpLCB0aGlzLmVuZGVkID0gITAsIHIgPT09IG8uWl9PSykgOiBsICE9PSBvLlpfU1lOQ19GTFVTSCB8fCAodGhpcy5vbkVuZChvLlpfT0spLCBwLmF2YWlsX291dCA9IDAsICEwKTsKICAgICAgICAgIH0sIGYucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2goZSk7CiAgICAgICAgICB9LCBmLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUgPT09IG8uWl9PSyAmJiAoInN0cmluZyIgPT09IHRoaXMub3B0aW9ucy50byA/IHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbigiIikgOiB0aGlzLnJlc3VsdCA9IGEuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLmVyciA9IGUsIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZzsKICAgICAgICAgIH0sIHQuSW5mbGF0ZSA9IGYsIHQuaW5mbGF0ZSA9IHAsIHQuaW5mbGF0ZVJhdyA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiAodCA9IHQgfHwge30pLnJhdyA9ICEwLCBwKGUsIHQpOwogICAgICAgICAgfSwgdC51bmd6aXAgPSBwOwogICAgICAgIH0sCiAgICAgICAgNjI5NjogZnVuY3Rpb24gXyhlLCB0KSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgdmFyIHIgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgVWludDhBcnJheSAmJiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgVWludDE2QXJyYXkgJiYgInVuZGVmaW5lZCIgIT0gdHlwZW9mIEludDMyQXJyYXk7CiAgICAgICAgICBmdW5jdGlvbiBzKGUsIHQpIHsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB0KTsKICAgICAgICAgIH0KICAgICAgICAgIHQuYXNzaWduID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZm9yICh2YXIgdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IHQubGVuZ3RoOykgewogICAgICAgICAgICAgIHZhciByID0gdC5zaGlmdCgpOwogICAgICAgICAgICAgIGlmIChyKSB7CiAgICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgIT0gX3R5cGVvZihyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihyICsgIm11c3QgYmUgbm9uLW9iamVjdCIpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgYSBpbiByKSBzKHIsIGEpICYmIChlW2FdID0gclthXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgfSwgdC5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPT09IHQgPyBlIDogZS5zdWJhcnJheSA/IGUuc3ViYXJyYXkoMCwgdCkgOiAoZS5sZW5ndGggPSB0LCBlKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgYSA9IHsKICAgICAgICAgICAgICBhcnJheVNldDogZnVuY3Rpb24gYXJyYXlTZXQoZSwgdCwgciwgcywgYSkgewogICAgICAgICAgICAgICAgaWYgKHQuc3ViYXJyYXkgJiYgZS5zdWJhcnJheSkgZS5zZXQodC5zdWJhcnJheShyLCByICsgcyksIGEpO2Vsc2UgZm9yICh2YXIgbiA9IDA7IG4gPCBzOyBuKyspIGVbYSArIG5dID0gdFtyICsgbl07CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiBmbGF0dGVuQ2h1bmtzKGUpIHsKICAgICAgICAgICAgICAgIHZhciB0LCByLCBzLCBhLCBuLCBvOwogICAgICAgICAgICAgICAgZm9yIChzID0gMCwgdCA9IDAsIHIgPSBlLmxlbmd0aDsgdCA8IHI7IHQrKykgcyArPSBlW3RdLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAobyA9IG5ldyBVaW50OEFycmF5KHMpLCBhID0gMCwgdCA9IDAsIHIgPSBlLmxlbmd0aDsgdCA8IHI7IHQrKykgbiA9IGVbdF0sIG8uc2V0KG4sIGEpLCBhICs9IG4ubGVuZ3RoOwogICAgICAgICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBuID0gewogICAgICAgICAgICAgIGFycmF5U2V0OiBmdW5jdGlvbiBhcnJheVNldChlLCB0LCByLCBzLCBhKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHM7IG4rKykgZVthICsgbl0gPSB0W3IgKyBuXTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIGZsYXR0ZW5DaHVua3MoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgdC5zZXRUeXBlZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUgPyAodC5CdWY4ID0gVWludDhBcnJheSwgdC5CdWYxNiA9IFVpbnQxNkFycmF5LCB0LkJ1ZjMyID0gSW50MzJBcnJheSwgdC5hc3NpZ24odCwgYSkpIDogKHQuQnVmOCA9IEFycmF5LCB0LkJ1ZjE2ID0gQXJyYXksIHQuQnVmMzIgPSBBcnJheSwgdC5hc3NpZ24odCwgbikpOwogICAgICAgICAgfSwgdC5zZXRUeXBlZChyKTsKICAgICAgICB9LAogICAgICAgIDM5NjM6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHZhciBzID0gcig2Mjk2KSwKICAgICAgICAgICAgYSA9ICEwLAogICAgICAgICAgICBuID0gITA7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGEgPSAhMTsKICAgICAgICAgIH0KICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoMSkpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBuID0gITE7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKHZhciBvID0gbmV3IHMuQnVmOCgyNTYpLCBsID0gMDsgbCA8IDI1NjsgbCsrKSBvW2xdID0gbCA+PSAyNTIgPyA2IDogbCA+PSAyNDggPyA1IDogbCA+PSAyNDAgPyA0IDogbCA+PSAyMjQgPyAzIDogbCA+PSAxOTIgPyAyIDogMTsKICAgICAgICAgIGZ1bmN0aW9uIGgoZSwgdCkgewogICAgICAgICAgICBpZiAodCA8IDY1NTM0ICYmIChlLnN1YmFycmF5ICYmIG4gfHwgIWUuc3ViYXJyYXkgJiYgYSkpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHMuc2hyaW5rQnVmKGUsIHQpKTsKICAgICAgICAgICAgZm9yICh2YXIgciA9ICIiLCBvID0gMDsgbyA8IHQ7IG8rKykgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGVbb10pOwogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgIH0KICAgICAgICAgIG9bMjU0XSA9IG9bMjU0XSA9IDEsIHQuc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgbCA9IGUubGVuZ3RoLAogICAgICAgICAgICAgIGggPSAwOwogICAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgbDsgbisrKSA1NTI5NiA9PSAoNjQ1MTIgJiAociA9IGUuY2hhckNvZGVBdChuKSkpICYmIG4gKyAxIDwgbCAmJiA1NjMyMCA9PSAoNjQ1MTIgJiAoYSA9IGUuY2hhckNvZGVBdChuICsgMSkpKSAmJiAociA9IDY1NTM2ICsgKHIgLSA1NTI5NiA8PCAxMCkgKyAoYSAtIDU2MzIwKSwgbisrKSwgaCArPSByIDwgMTI4ID8gMSA6IHIgPCAyMDQ4ID8gMiA6IHIgPCA2NTUzNiA/IDMgOiA0OwogICAgICAgICAgICBmb3IgKHQgPSBuZXcgcy5CdWY4KGgpLCBvID0gMCwgbiA9IDA7IG8gPCBoOyBuKyspIDU1Mjk2ID09ICg2NDUxMiAmIChyID0gZS5jaGFyQ29kZUF0KG4pKSkgJiYgbiArIDEgPCBsICYmIDU2MzIwID09ICg2NDUxMiAmIChhID0gZS5jaGFyQ29kZUF0KG4gKyAxKSkpICYmIChyID0gNjU1MzYgKyAociAtIDU1Mjk2IDw8IDEwKSArIChhIC0gNTYzMjApLCBuKyspLCByIDwgMTI4ID8gdFtvKytdID0gciA6IHIgPCAyMDQ4ID8gKHRbbysrXSA9IDE5MiB8IHIgPj4+IDYsIHRbbysrXSA9IDEyOCB8IDYzICYgcikgOiByIDwgNjU1MzYgPyAodFtvKytdID0gMjI0IHwgciA+Pj4gMTIsIHRbbysrXSA9IDEyOCB8IHIgPj4+IDYgJiA2MywgdFtvKytdID0gMTI4IHwgNjMgJiByKSA6ICh0W28rK10gPSAyNDAgfCByID4+PiAxOCwgdFtvKytdID0gMTI4IHwgciA+Pj4gMTIgJiA2MywgdFtvKytdID0gMTI4IHwgciA+Pj4gNiAmIDYzLCB0W28rK10gPSAxMjggfCA2MyAmIHIpOwogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgIH0sIHQuYnVmMmJpbnN0cmluZyA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBoKGUsIGUubGVuZ3RoKTsKICAgICAgICAgIH0sIHQuYmluc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGZvciAodmFyIHQgPSBuZXcgcy5CdWY4KGUubGVuZ3RoKSwgciA9IDAsIGEgPSB0Lmxlbmd0aDsgciA8IGE7IHIrKykgdFtyXSA9IGUuY2hhckNvZGVBdChyKTsKICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICB9LCB0LmJ1ZjJzdHJpbmcgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICBsID0gdCB8fCBlLmxlbmd0aCwKICAgICAgICAgICAgICBjID0gbmV3IEFycmF5KDIgKiBsKTsKICAgICAgICAgICAgZm9yIChzID0gMCwgciA9IDA7IHIgPCBsOykgaWYgKChhID0gZVtyKytdKSA8IDEyOCkgY1tzKytdID0gYTtlbHNlIGlmICgobiA9IG9bYV0pID4gNCkgY1tzKytdID0gNjU1MzMsIHIgKz0gbiAtIDE7ZWxzZSB7CiAgICAgICAgICAgICAgZm9yIChhICY9IDIgPT09IG4gPyAzMSA6IDMgPT09IG4gPyAxNSA6IDc7IG4gPiAxICYmIHIgPCBsOykgYSA9IGEgPDwgNiB8IDYzICYgZVtyKytdLCBuLS07CiAgICAgICAgICAgICAgbiA+IDEgPyBjW3MrK10gPSA2NTUzMyA6IGEgPCA2NTUzNiA/IGNbcysrXSA9IGEgOiAoYSAtPSA2NTUzNiwgY1tzKytdID0gNTUyOTYgfCBhID4+IDEwICYgMTAyMywgY1tzKytdID0gNTYzMjAgfCAxMDIzICYgYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGgoYywgcyk7CiAgICAgICAgICB9LCB0LnV0Zjhib3JkZXIgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgcjsKICAgICAgICAgICAgZm9yICgodCA9IHQgfHwgZS5sZW5ndGgpID4gZS5sZW5ndGggJiYgKHQgPSBlLmxlbmd0aCksIHIgPSB0IC0gMTsgciA+PSAwICYmIDEyOCA9PSAoMTkyICYgZVtyXSk7KSByLS07CiAgICAgICAgICAgIHJldHVybiByIDwgMCB8fCAwID09PSByID8gdCA6IHIgKyBvW2Vbcl1dID4gdCA/IHIgOiB0OwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDc4NTM6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlLCB0LCByLCBzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGEgPSA2NTUzNSAmIGUgfCAwLCBuID0gZSA+Pj4gMTYgJiA2NTUzNSB8IDAsIG8gPSAwOyAwICE9PSByOykgewogICAgICAgICAgICAgIHIgLT0gbyA9IHIgPiAyZTMgPyAyZTMgOiByOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIG4gPSBuICsgKGEgPSBhICsgdFtzKytdIHwgMCkgfCAwOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tbyk7CiAgICAgICAgICAgICAgYSAlPSA2NTUyMSwgbiAlPSA2NTUyMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYSB8IG4gPDwgMTYgfCAwOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDU2NDI6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIGUuZXhwb3J0cyA9IHsKICAgICAgICAgICAgWl9OT19GTFVTSDogMCwKICAgICAgICAgICAgWl9QQVJUSUFMX0ZMVVNIOiAxLAogICAgICAgICAgICBaX1NZTkNfRkxVU0g6IDIsCiAgICAgICAgICAgIFpfRlVMTF9GTFVTSDogMywKICAgICAgICAgICAgWl9GSU5JU0g6IDQsCiAgICAgICAgICAgIFpfQkxPQ0s6IDUsCiAgICAgICAgICAgIFpfVFJFRVM6IDYsCiAgICAgICAgICAgIFpfT0s6IDAsCiAgICAgICAgICAgIFpfU1RSRUFNX0VORDogMSwKICAgICAgICAgICAgWl9ORUVEX0RJQ1Q6IDIsCiAgICAgICAgICAgIFpfRVJSTk86IC0xLAogICAgICAgICAgICBaX1NUUkVBTV9FUlJPUjogLTIsCiAgICAgICAgICAgIFpfREFUQV9FUlJPUjogLTMsCiAgICAgICAgICAgIFpfQlVGX0VSUk9SOiAtNSwKICAgICAgICAgICAgWl9OT19DT01QUkVTU0lPTjogMCwKICAgICAgICAgICAgWl9CRVNUX1NQRUVEOiAxLAogICAgICAgICAgICBaX0JFU1RfQ09NUFJFU1NJT046IDksCiAgICAgICAgICAgIFpfREVGQVVMVF9DT01QUkVTU0lPTjogLTEsCiAgICAgICAgICAgIFpfRklMVEVSRUQ6IDEsCiAgICAgICAgICAgIFpfSFVGRk1BTl9PTkxZOiAyLAogICAgICAgICAgICBaX1JMRTogMywKICAgICAgICAgICAgWl9GSVhFRDogNCwKICAgICAgICAgICAgWl9ERUZBVUxUX1NUUkFURUdZOiAwLAogICAgICAgICAgICBaX0JJTkFSWTogMCwKICAgICAgICAgICAgWl9URVhUOiAxLAogICAgICAgICAgICBaX1VOS05PV046IDIsCiAgICAgICAgICAgIFpfREVGTEFURUQ6IDgKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICA1Njg0OiBmdW5jdGlvbiBfKGUpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICB2YXIgdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSwgdCA9IFtdLCByID0gMDsgciA8IDI1NjsgcisrKSB7CiAgICAgICAgICAgICAgZSA9IHI7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCA4OyBzKyspIGUgPSAxICYgZSA/IDM5ODgyOTIzODQgXiBlID4+PiAxIDogZSA+Pj4gMTsKICAgICAgICAgICAgICB0W3JdID0gZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgIH0oKTsKICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlLCByLCBzLCBhKSB7CiAgICAgICAgICAgIHZhciBuID0gdCwKICAgICAgICAgICAgICBvID0gYSArIHM7CiAgICAgICAgICAgIGUgXj0gLTE7CiAgICAgICAgICAgIGZvciAodmFyIGwgPSBhOyBsIDwgbzsgbCsrKSBlID0gZSA+Pj4gOCBeIG5bMjU1ICYgKGUgXiByW2xdKV07CiAgICAgICAgICAgIHJldHVybiAtMSBeIGU7CiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgOTg5MjogZnVuY3Rpb24gXyhlLCB0LCByKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgIGEgPSByKDYyOTYpLAogICAgICAgICAgICBuID0gcig1MzEzKSwKICAgICAgICAgICAgbyA9IHIoNzg1MyksCiAgICAgICAgICAgIGwgPSByKDU2ODQpLAogICAgICAgICAgICBoID0gcig1Nzk1KSwKICAgICAgICAgICAgYyA9IC0yLAogICAgICAgICAgICB1ID0gMjU4LAogICAgICAgICAgICBmID0gMjYyLAogICAgICAgICAgICBwID0gMTAzLAogICAgICAgICAgICBnID0gMTEzLAogICAgICAgICAgICB2ID0gNjY2OwogICAgICAgICAgZnVuY3Rpb24gXyhlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiBlLm1zZyA9IGhbdF0sIHQ7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB5KGUpIHsKICAgICAgICAgICAgcmV0dXJuIChlIDw8IDEpIC0gKGUgPiA0ID8gOSA6IDApOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gYihlKSB7CiAgICAgICAgICAgIGZvciAodmFyIHQgPSBlLmxlbmd0aDsgLS10ID49IDA7KSBlW3RdID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHcoZSkgewogICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGUsCiAgICAgICAgICAgICAgciA9IHQucGVuZGluZzsKICAgICAgICAgICAgciA+IGUuYXZhaWxfb3V0ICYmIChyID0gZS5hdmFpbF9vdXQpLCAwICE9PSByICYmIChhLmFycmF5U2V0KGUub3V0cHV0LCB0LnBlbmRpbmdfYnVmLCB0LnBlbmRpbmdfb3V0LCByLCBlLm5leHRfb3V0KSwgZS5uZXh0X291dCArPSByLCB0LnBlbmRpbmdfb3V0ICs9IHIsIGUudG90YWxfb3V0ICs9IHIsIGUuYXZhaWxfb3V0IC09IHIsIHQucGVuZGluZyAtPSByLCAwID09PSB0LnBlbmRpbmcgJiYgKHQucGVuZGluZ19vdXQgPSAwKSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB4KGUsIHQpIHsKICAgICAgICAgICAgbi5fdHJfZmx1c2hfYmxvY2soZSwgZS5ibG9ja19zdGFydCA+PSAwID8gZS5ibG9ja19zdGFydCA6IC0xLCBlLnN0cnN0YXJ0IC0gZS5ibG9ja19zdGFydCwgdCksIGUuYmxvY2tfc3RhcnQgPSBlLnN0cnN0YXJ0LCB3KGUuc3RybSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBBKGUsIHQpIHsKICAgICAgICAgICAgZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK10gPSB0OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQyhlLCB0KSB7CiAgICAgICAgICAgIGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gdCA+Pj4gOCAmIDI1NSwgZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK10gPSAyNTUgJiB0OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUyhlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIHMsCiAgICAgICAgICAgICAgYSA9IGUubWF4X2NoYWluX2xlbmd0aCwKICAgICAgICAgICAgICBuID0gZS5zdHJzdGFydCwKICAgICAgICAgICAgICBvID0gZS5wcmV2X2xlbmd0aCwKICAgICAgICAgICAgICBsID0gZS5uaWNlX21hdGNoLAogICAgICAgICAgICAgIGggPSBlLnN0cnN0YXJ0ID4gZS53X3NpemUgLSBmID8gZS5zdHJzdGFydCAtIChlLndfc2l6ZSAtIGYpIDogMCwKICAgICAgICAgICAgICBjID0gZS53aW5kb3csCiAgICAgICAgICAgICAgcCA9IGUud19tYXNrLAogICAgICAgICAgICAgIGcgPSBlLnByZXYsCiAgICAgICAgICAgICAgdiA9IGUuc3Ryc3RhcnQgKyB1LAogICAgICAgICAgICAgIF8gPSBjW24gKyBvIC0gMV0sCiAgICAgICAgICAgICAgeSA9IGNbbiArIG9dOwogICAgICAgICAgICBlLnByZXZfbGVuZ3RoID49IGUuZ29vZF9tYXRjaCAmJiAoYSA+Pj0gMiksIGwgPiBlLmxvb2thaGVhZCAmJiAobCA9IGUubG9va2FoZWFkKTsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGlmIChjWyhyID0gdCkgKyBvXSA9PT0geSAmJiBjW3IgKyBvIC0gMV0gPT09IF8gJiYgY1tyXSA9PT0gY1tuXSAmJiBjWysrcl0gPT09IGNbbiArIDFdKSB7CiAgICAgICAgICAgICAgICBuICs9IDIsIHIrKzsKICAgICAgICAgICAgICAgIGRvIHt9IHdoaWxlIChjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBuIDwgdik7CiAgICAgICAgICAgICAgICBpZiAocyA9IHUgLSAodiAtIG4pLCBuID0gdiAtIHUsIHMgPiBvKSB7CiAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoX3N0YXJ0ID0gdCwgbyA9IHMsIHMgPj0gbCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgIF8gPSBjW24gKyBvIC0gMV0sIHkgPSBjW24gKyBvXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gd2hpbGUgKCh0ID0gZ1t0ICYgcF0pID4gaCAmJiAwICE9IC0tYSk7CiAgICAgICAgICAgIHJldHVybiBvIDw9IGUubG9va2FoZWFkID8gbyA6IGUubG9va2FoZWFkOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTShlKSB7CiAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgIGgsCiAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgIHAsCiAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICB2LAogICAgICAgICAgICAgIF8gPSBlLndfc2l6ZTsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGlmIChuID0gZS53aW5kb3dfc2l6ZSAtIGUubG9va2FoZWFkIC0gZS5zdHJzdGFydCwgZS5zdHJzdGFydCA+PSBfICsgKF8gLSBmKSkgewogICAgICAgICAgICAgICAgYS5hcnJheVNldChlLndpbmRvdywgZS53aW5kb3csIF8sIF8sIDApLCBlLm1hdGNoX3N0YXJ0IC09IF8sIGUuc3Ryc3RhcnQgLT0gXywgZS5ibG9ja19zdGFydCAtPSBfLCB0ID0gciA9IGUuaGFzaF9zaXplOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBzID0gZS5oZWFkWy0tdF0sIGUuaGVhZFt0XSA9IHMgPj0gXyA/IHMgLSBfIDogMDsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tcik7CiAgICAgICAgICAgICAgICB0ID0gciA9IF87CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIHMgPSBlLnByZXZbLS10XSwgZS5wcmV2W3RdID0gcyA+PSBfID8gcyAtIF8gOiAwOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1yKTsKICAgICAgICAgICAgICAgIG4gKz0gXzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKDAgPT09IGUuc3RybS5hdmFpbF9pbikgYnJlYWs7CiAgICAgICAgICAgICAgaWYgKGMgPSBlLnN0cm0sIHUgPSBlLndpbmRvdywgcCA9IGUuc3Ryc3RhcnQgKyBlLmxvb2thaGVhZCwgZyA9IG4sIHYgPSB2b2lkIDAsICh2ID0gYy5hdmFpbF9pbikgPiBnICYmICh2ID0gZyksIHIgPSAwID09PSB2ID8gMCA6IChjLmF2YWlsX2luIC09IHYsIGEuYXJyYXlTZXQodSwgYy5pbnB1dCwgYy5uZXh0X2luLCB2LCBwKSwgMSA9PT0gYy5zdGF0ZS53cmFwID8gYy5hZGxlciA9IG8oYy5hZGxlciwgdSwgdiwgcCkgOiAyID09PSBjLnN0YXRlLndyYXAgJiYgKGMuYWRsZXIgPSBsKGMuYWRsZXIsIHUsIHYsIHApKSwgYy5uZXh0X2luICs9IHYsIGMudG90YWxfaW4gKz0gdiwgdiksIGUubG9va2FoZWFkICs9IHIsIGUubG9va2FoZWFkICsgZS5pbnNlcnQgPj0gMykgZm9yIChoID0gZS5zdHJzdGFydCAtIGUuaW5zZXJ0LCBlLmluc19oID0gZS53aW5kb3dbaF0sIGUuaW5zX2ggPSAoZS5pbnNfaCA8PCBlLmhhc2hfc2hpZnQgXiBlLndpbmRvd1toICsgMV0pICYgZS5oYXNoX21hc2s7IGUuaW5zZXJ0ICYmIChlLmluc19oID0gKGUuaW5zX2ggPDwgZS5oYXNoX3NoaWZ0IF4gZS53aW5kb3dbaCArIDMgLSAxXSkgJiBlLmhhc2hfbWFzaywgZS5wcmV2W2ggJiBlLndfbWFza10gPSBlLmhlYWRbZS5pbnNfaF0sIGUuaGVhZFtlLmluc19oXSA9IGgsIGgrKywgZS5pbnNlcnQtLSwgIShlLmxvb2thaGVhZCArIGUuaW5zZXJ0IDwgMykpOyk7CiAgICAgICAgICAgIH0gd2hpbGUgKGUubG9va2FoZWFkIDwgZiAmJiAwICE9PSBlLnN0cm0uYXZhaWxfaW4pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geihlLCB0KSB7CiAgICAgICAgICAgIGZvciAodmFyIHIsIHM7OykgewogICAgICAgICAgICAgIGlmIChlLmxvb2thaGVhZCA8IGYpIHsKICAgICAgICAgICAgICAgIGlmIChNKGUpLCBlLmxvb2thaGVhZCA8IGYgJiYgMCA9PT0gdCkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5sb29rYWhlYWQpIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAociA9IDAsIGUubG9va2FoZWFkID49IDMgJiYgKGUuaW5zX2ggPSAoZS5pbnNfaCA8PCBlLmhhc2hfc2hpZnQgXiBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMyAtIDFdKSAmIGUuaGFzaF9tYXNrLCByID0gZS5wcmV2W2Uuc3Ryc3RhcnQgJiBlLndfbWFza10gPSBlLmhlYWRbZS5pbnNfaF0sIGUuaGVhZFtlLmluc19oXSA9IGUuc3Ryc3RhcnQpLCAwICE9PSByICYmIGUuc3Ryc3RhcnQgLSByIDw9IGUud19zaXplIC0gZiAmJiAoZS5tYXRjaF9sZW5ndGggPSBTKGUsIHIpKSwgZS5tYXRjaF9sZW5ndGggPj0gMykgewogICAgICAgICAgICAgICAgaWYgKHMgPSBuLl90cl90YWxseShlLCBlLnN0cnN0YXJ0IC0gZS5tYXRjaF9zdGFydCwgZS5tYXRjaF9sZW5ndGggLSAzKSwgZS5sb29rYWhlYWQgLT0gZS5tYXRjaF9sZW5ndGgsIGUubWF0Y2hfbGVuZ3RoIDw9IGUubWF4X2xhenlfbWF0Y2ggJiYgZS5sb29rYWhlYWQgPj0gMykgewogICAgICAgICAgICAgICAgICBlLm1hdGNoX2xlbmd0aC0tOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgZS5zdHJzdGFydCsrLCBlLmluc19oID0gKGUuaW5zX2ggPDwgZS5oYXNoX3NoaWZ0IF4gZS53aW5kb3dbZS5zdHJzdGFydCArIDMgLSAxXSkgJiBlLmhhc2hfbWFzaywgciA9IGUucHJldltlLnN0cnN0YXJ0ICYgZS53X21hc2tdID0gZS5oZWFkW2UuaW5zX2hdLCBlLmhlYWRbZS5pbnNfaF0gPSBlLnN0cnN0YXJ0OwogICAgICAgICAgICAgICAgICB9IHdoaWxlICgwICE9IC0tZS5tYXRjaF9sZW5ndGgpOwogICAgICAgICAgICAgICAgICBlLnN0cnN0YXJ0Kys7CiAgICAgICAgICAgICAgICB9IGVsc2UgZS5zdHJzdGFydCArPSBlLm1hdGNoX2xlbmd0aCwgZS5tYXRjaF9sZW5ndGggPSAwLCBlLmluc19oID0gZS53aW5kb3dbZS5zdHJzdGFydF0sIGUuaW5zX2ggPSAoZS5pbnNfaCA8PCBlLmhhc2hfc2hpZnQgXiBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMV0pICYgZS5oYXNoX21hc2s7CiAgICAgICAgICAgICAgfSBlbHNlIHMgPSBuLl90cl90YWxseShlLCAwLCBlLndpbmRvd1tlLnN0cnN0YXJ0XSksIGUubG9va2FoZWFkLS0sIGUuc3Ryc3RhcnQrKzsKICAgICAgICAgICAgICBpZiAocyAmJiAoeChlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpKSByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZS5pbnNlcnQgPSBlLnN0cnN0YXJ0IDwgMiA/IGUuc3Ryc3RhcnQgOiAyLCA0ID09PSB0ID8gKHgoZSwgITApLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0ID8gMyA6IDQpIDogZS5sYXN0X2xpdCAmJiAoeChlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpID8gMSA6IDI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBMKGUsIHQpIHsKICAgICAgICAgICAgZm9yICh2YXIgciwgcywgYTs7KSB7CiAgICAgICAgICAgICAgaWYgKGUubG9va2FoZWFkIDwgZikgewogICAgICAgICAgICAgICAgaWYgKE0oZSksIGUubG9va2FoZWFkIDwgZiAmJiAwID09PSB0KSByZXR1cm4gMTsKICAgICAgICAgICAgICAgIGlmICgwID09PSBlLmxvb2thaGVhZCkgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChyID0gMCwgZS5sb29rYWhlYWQgPj0gMyAmJiAoZS5pbnNfaCA9IChlLmluc19oIDw8IGUuaGFzaF9zaGlmdCBeIGUud2luZG93W2Uuc3Ryc3RhcnQgKyAzIC0gMV0pICYgZS5oYXNoX21hc2ssIHIgPSBlLnByZXZbZS5zdHJzdGFydCAmIGUud19tYXNrXSA9IGUuaGVhZFtlLmluc19oXSwgZS5oZWFkW2UuaW5zX2hdID0gZS5zdHJzdGFydCksIGUucHJldl9sZW5ndGggPSBlLm1hdGNoX2xlbmd0aCwgZS5wcmV2X21hdGNoID0gZS5tYXRjaF9zdGFydCwgZS5tYXRjaF9sZW5ndGggPSAyLCAwICE9PSByICYmIGUucHJldl9sZW5ndGggPCBlLm1heF9sYXp5X21hdGNoICYmIGUuc3Ryc3RhcnQgLSByIDw9IGUud19zaXplIC0gZiAmJiAoZS5tYXRjaF9sZW5ndGggPSBTKGUsIHIpLCBlLm1hdGNoX2xlbmd0aCA8PSA1ICYmICgxID09PSBlLnN0cmF0ZWd5IHx8IDMgPT09IGUubWF0Y2hfbGVuZ3RoICYmIGUuc3Ryc3RhcnQgLSBlLm1hdGNoX3N0YXJ0ID4gNDA5NikgJiYgKGUubWF0Y2hfbGVuZ3RoID0gMikpLCBlLnByZXZfbGVuZ3RoID49IDMgJiYgZS5tYXRjaF9sZW5ndGggPD0gZS5wcmV2X2xlbmd0aCkgewogICAgICAgICAgICAgICAgYSA9IGUuc3Ryc3RhcnQgKyBlLmxvb2thaGVhZCAtIDMsIHMgPSBuLl90cl90YWxseShlLCBlLnN0cnN0YXJ0IC0gMSAtIGUucHJldl9tYXRjaCwgZS5wcmV2X2xlbmd0aCAtIDMpLCBlLmxvb2thaGVhZCAtPSBlLnByZXZfbGVuZ3RoIC0gMSwgZS5wcmV2X2xlbmd0aCAtPSAyOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICArK2Uuc3Ryc3RhcnQgPD0gYSAmJiAoZS5pbnNfaCA9IChlLmluc19oIDw8IGUuaGFzaF9zaGlmdCBeIGUud2luZG93W2Uuc3Ryc3RhcnQgKyAzIC0gMV0pICYgZS5oYXNoX21hc2ssIHIgPSBlLnByZXZbZS5zdHJzdGFydCAmIGUud19tYXNrXSA9IGUuaGVhZFtlLmluc19oXSwgZS5oZWFkW2UuaW5zX2hdID0gZS5zdHJzdGFydCk7CiAgICAgICAgICAgICAgICB9IHdoaWxlICgwICE9IC0tZS5wcmV2X2xlbmd0aCk7CiAgICAgICAgICAgICAgICBpZiAoZS5tYXRjaF9hdmFpbGFibGUgPSAwLCBlLm1hdGNoX2xlbmd0aCA9IDIsIGUuc3Ryc3RhcnQrKywgcyAmJiAoeChlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpKSByZXR1cm4gMTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUubWF0Y2hfYXZhaWxhYmxlKSB7CiAgICAgICAgICAgICAgICBpZiAoKHMgPSBuLl90cl90YWxseShlLCAwLCBlLndpbmRvd1tlLnN0cnN0YXJ0IC0gMV0pKSAmJiB4KGUsICExKSwgZS5zdHJzdGFydCsrLCBlLmxvb2thaGVhZC0tLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSByZXR1cm4gMTsKICAgICAgICAgICAgICB9IGVsc2UgZS5tYXRjaF9hdmFpbGFibGUgPSAxLCBlLnN0cnN0YXJ0KyssIGUubG9va2FoZWFkLS07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGUubWF0Y2hfYXZhaWxhYmxlICYmIChzID0gbi5fdHJfdGFsbHkoZSwgMCwgZS53aW5kb3dbZS5zdHJzdGFydCAtIDFdKSwgZS5tYXRjaF9hdmFpbGFibGUgPSAwKSwgZS5pbnNlcnQgPSBlLnN0cnN0YXJ0IDwgMiA/IGUuc3Ryc3RhcnQgOiAyLCA0ID09PSB0ID8gKHgoZSwgITApLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0ID8gMyA6IDQpIDogZS5sYXN0X2xpdCAmJiAoeChlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpID8gMSA6IDI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBFKGUsIHQsIHIsIHMsIGEpIHsKICAgICAgICAgICAgdGhpcy5nb29kX2xlbmd0aCA9IGUsIHRoaXMubWF4X2xhenkgPSB0LCB0aGlzLm5pY2VfbGVuZ3RoID0gciwgdGhpcy5tYXhfY2hhaW4gPSBzLCB0aGlzLmZ1bmMgPSBhOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVCgpIHsKICAgICAgICAgICAgdGhpcy5zdHJtID0gbnVsbCwgdGhpcy5zdGF0dXMgPSAwLCB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbCwgdGhpcy5wZW5kaW5nX2J1Zl9zaXplID0gMCwgdGhpcy5wZW5kaW5nX291dCA9IDAsIHRoaXMucGVuZGluZyA9IDAsIHRoaXMud3JhcCA9IDAsIHRoaXMuZ3poZWFkID0gbnVsbCwgdGhpcy5nemluZGV4ID0gMCwgdGhpcy5tZXRob2QgPSA4LCB0aGlzLmxhc3RfZmx1c2ggPSAtMSwgdGhpcy53X3NpemUgPSAwLCB0aGlzLndfYml0cyA9IDAsIHRoaXMud19tYXNrID0gMCwgdGhpcy53aW5kb3cgPSBudWxsLCB0aGlzLndpbmRvd19zaXplID0gMCwgdGhpcy5wcmV2ID0gbnVsbCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy5pbnNfaCA9IDAsIHRoaXMuaGFzaF9zaXplID0gMCwgdGhpcy5oYXNoX2JpdHMgPSAwLCB0aGlzLmhhc2hfbWFzayA9IDAsIHRoaXMuaGFzaF9zaGlmdCA9IDAsIHRoaXMuYmxvY2tfc3RhcnQgPSAwLCB0aGlzLm1hdGNoX2xlbmd0aCA9IDAsIHRoaXMucHJldl9tYXRjaCA9IDAsIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMCwgdGhpcy5zdHJzdGFydCA9IDAsIHRoaXMubWF0Y2hfc3RhcnQgPSAwLCB0aGlzLmxvb2thaGVhZCA9IDAsIHRoaXMucHJldl9sZW5ndGggPSAwLCB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwLCB0aGlzLm1heF9sYXp5X21hdGNoID0gMCwgdGhpcy5sZXZlbCA9IDAsIHRoaXMuc3RyYXRlZ3kgPSAwLCB0aGlzLmdvb2RfbWF0Y2ggPSAwLCB0aGlzLm5pY2VfbWF0Y2ggPSAwLCB0aGlzLmR5bl9sdHJlZSA9IG5ldyBhLkJ1ZjE2KDExNDYpLCB0aGlzLmR5bl9kdHJlZSA9IG5ldyBhLkJ1ZjE2KDEyMiksIHRoaXMuYmxfdHJlZSA9IG5ldyBhLkJ1ZjE2KDc4KSwgYih0aGlzLmR5bl9sdHJlZSksIGIodGhpcy5keW5fZHRyZWUpLCBiKHRoaXMuYmxfdHJlZSksIHRoaXMubF9kZXNjID0gbnVsbCwgdGhpcy5kX2Rlc2MgPSBudWxsLCB0aGlzLmJsX2Rlc2MgPSBudWxsLCB0aGlzLmJsX2NvdW50ID0gbmV3IGEuQnVmMTYoMTYpLCB0aGlzLmhlYXAgPSBuZXcgYS5CdWYxNig1NzMpLCBiKHRoaXMuaGVhcCksIHRoaXMuaGVhcF9sZW4gPSAwLCB0aGlzLmhlYXBfbWF4ID0gMCwgdGhpcy5kZXB0aCA9IG5ldyBhLkJ1ZjE2KDU3MyksIGIodGhpcy5kZXB0aCksIHRoaXMubF9idWYgPSAwLCB0aGlzLmxpdF9idWZzaXplID0gMCwgdGhpcy5sYXN0X2xpdCA9IDAsIHRoaXMuZF9idWYgPSAwLCB0aGlzLm9wdF9sZW4gPSAwLCB0aGlzLnN0YXRpY19sZW4gPSAwLCB0aGlzLm1hdGNoZXMgPSAwLCB0aGlzLmluc2VydCA9IDAsIHRoaXMuYmlfYnVmID0gMCwgdGhpcy5iaV92YWxpZCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBrKGUpIHsKICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgIHJldHVybiBlICYmIGUuc3RhdGUgPyAoZS50b3RhbF9pbiA9IGUudG90YWxfb3V0ID0gMCwgZS5kYXRhX3R5cGUgPSAyLCAodCA9IGUuc3RhdGUpLnBlbmRpbmcgPSAwLCB0LnBlbmRpbmdfb3V0ID0gMCwgdC53cmFwIDwgMCAmJiAodC53cmFwID0gLXQud3JhcCksIHQuc3RhdHVzID0gdC53cmFwID8gNDIgOiBnLCBlLmFkbGVyID0gMiA9PT0gdC53cmFwID8gMCA6IDEsIHQubGFzdF9mbHVzaCA9IDAsIG4uX3RyX2luaXQodCksIDApIDogXyhlLCBjKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEkoZSkgewogICAgICAgICAgICB2YXIgdCwKICAgICAgICAgICAgICByID0gayhlKTsKICAgICAgICAgICAgcmV0dXJuIDAgPT09IHIgJiYgKCh0ID0gZS5zdGF0ZSkud2luZG93X3NpemUgPSAyICogdC53X3NpemUsIGIodC5oZWFkKSwgdC5tYXhfbGF6eV9tYXRjaCA9IHNbdC5sZXZlbF0ubWF4X2xhenksIHQuZ29vZF9tYXRjaCA9IHNbdC5sZXZlbF0uZ29vZF9sZW5ndGgsIHQubmljZV9tYXRjaCA9IHNbdC5sZXZlbF0ubmljZV9sZW5ndGgsIHQubWF4X2NoYWluX2xlbmd0aCA9IHNbdC5sZXZlbF0ubWF4X2NoYWluLCB0LnN0cnN0YXJ0ID0gMCwgdC5ibG9ja19zdGFydCA9IDAsIHQubG9va2FoZWFkID0gMCwgdC5pbnNlcnQgPSAwLCB0Lm1hdGNoX2xlbmd0aCA9IHQucHJldl9sZW5ndGggPSAyLCB0Lm1hdGNoX2F2YWlsYWJsZSA9IDAsIHQuaW5zX2ggPSAwKSwgcjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIE8oZSwgdCwgciwgcywgbiwgbykgewogICAgICAgICAgICBpZiAoIWUpIHJldHVybiBjOwogICAgICAgICAgICB2YXIgbCA9IDE7CiAgICAgICAgICAgIGlmICgtMSA9PT0gdCAmJiAodCA9IDYpLCBzIDwgMCA/IChsID0gMCwgcyA9IC1zKSA6IHMgPiAxNSAmJiAobCA9IDIsIHMgLT0gMTYpLCBuIDwgMSB8fCBuID4gOSB8fCA4ICE9PSByIHx8IHMgPCA4IHx8IHMgPiAxNSB8fCB0IDwgMCB8fCB0ID4gOSB8fCBvIDwgMCB8fCBvID4gNCkgcmV0dXJuIF8oZSwgYyk7CiAgICAgICAgICAgIDggPT09IHMgJiYgKHMgPSA5KTsKICAgICAgICAgICAgdmFyIGggPSBuZXcgVCgpOwogICAgICAgICAgICByZXR1cm4gZS5zdGF0ZSA9IGgsIGguc3RybSA9IGUsIGgud3JhcCA9IGwsIGguZ3poZWFkID0gbnVsbCwgaC53X2JpdHMgPSBzLCBoLndfc2l6ZSA9IDEgPDwgaC53X2JpdHMsIGgud19tYXNrID0gaC53X3NpemUgLSAxLCBoLmhhc2hfYml0cyA9IG4gKyA3LCBoLmhhc2hfc2l6ZSA9IDEgPDwgaC5oYXNoX2JpdHMsIGguaGFzaF9tYXNrID0gaC5oYXNoX3NpemUgLSAxLCBoLmhhc2hfc2hpZnQgPSB+figoaC5oYXNoX2JpdHMgKyAzIC0gMSkgLyAzKSwgaC53aW5kb3cgPSBuZXcgYS5CdWY4KDIgKiBoLndfc2l6ZSksIGguaGVhZCA9IG5ldyBhLkJ1ZjE2KGguaGFzaF9zaXplKSwgaC5wcmV2ID0gbmV3IGEuQnVmMTYoaC53X3NpemUpLCBoLmxpdF9idWZzaXplID0gMSA8PCBuICsgNiwgaC5wZW5kaW5nX2J1Zl9zaXplID0gNCAqIGgubGl0X2J1ZnNpemUsIGgucGVuZGluZ19idWYgPSBuZXcgYS5CdWY4KGgucGVuZGluZ19idWZfc2l6ZSksIGguZF9idWYgPSAxICogaC5saXRfYnVmc2l6ZSwgaC5sX2J1ZiA9IDMgKiBoLmxpdF9idWZzaXplLCBoLmxldmVsID0gdCwgaC5zdHJhdGVneSA9IG8sIGgubWV0aG9kID0gciwgSShlKTsKICAgICAgICAgIH0KICAgICAgICAgIHMgPSBbbmV3IEUoMCwgMCwgMCwgMCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSA2NTUzNTsKICAgICAgICAgICAgZm9yIChyID4gZS5wZW5kaW5nX2J1Zl9zaXplIC0gNSAmJiAociA9IGUucGVuZGluZ19idWZfc2l6ZSAtIDUpOzspIHsKICAgICAgICAgICAgICBpZiAoZS5sb29rYWhlYWQgPD0gMSkgewogICAgICAgICAgICAgICAgaWYgKE0oZSksIDAgPT09IGUubG9va2FoZWFkICYmIDAgPT09IHQpIHJldHVybiAxOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IGUubG9va2FoZWFkKSBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZS5zdHJzdGFydCArPSBlLmxvb2thaGVhZCwgZS5sb29rYWhlYWQgPSAwOwogICAgICAgICAgICAgIHZhciBzID0gZS5ibG9ja19zdGFydCArIHI7CiAgICAgICAgICAgICAgaWYgKCgwID09PSBlLnN0cnN0YXJ0IHx8IGUuc3Ryc3RhcnQgPj0gcykgJiYgKGUubG9va2FoZWFkID0gZS5zdHJzdGFydCAtIHMsIGUuc3Ryc3RhcnQgPSBzLCB4KGUsICExKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCkpIHJldHVybiAxOwogICAgICAgICAgICAgIGlmIChlLnN0cnN0YXJ0IC0gZS5ibG9ja19zdGFydCA+PSBlLndfc2l6ZSAtIGYgJiYgKHgoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSkgcmV0dXJuIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGUuaW5zZXJ0ID0gMCwgNCA9PT0gdCA/ICh4KGUsICEwKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCA/IDMgOiA0KSA6IChlLnN0cnN0YXJ0ID4gZS5ibG9ja19zdGFydCAmJiAoeChlLCAhMSksIGUuc3RybS5hdmFpbF9vdXQpLCAxKTsKICAgICAgICAgIH0pLCBuZXcgRSg0LCA0LCA4LCA0LCB6KSwgbmV3IEUoNCwgNSwgMTYsIDgsIHopLCBuZXcgRSg0LCA2LCAzMiwgMzIsIHopLCBuZXcgRSg0LCA0LCAxNiwgMTYsIEwpLCBuZXcgRSg4LCAxNiwgMzIsIDMyLCBMKSwgbmV3IEUoOCwgMTYsIDEyOCwgMTI4LCBMKSwgbmV3IEUoOCwgMzIsIDEyOCwgMjU2LCBMKSwgbmV3IEUoMzIsIDEyOCwgMjU4LCAxMDI0LCBMKSwgbmV3IEUoMzIsIDI1OCwgMjU4LCA0MDk2LCBMKV0sIHQuZGVmbGF0ZUluaXQgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICByZXR1cm4gTyhlLCB0LCA4LCAxNSwgOCwgMCk7CiAgICAgICAgICB9LCB0LmRlZmxhdGVJbml0MiA9IE8sIHQuZGVmbGF0ZVJlc2V0ID0gSSwgdC5kZWZsYXRlUmVzZXRLZWVwID0gaywgdC5kZWZsYXRlU2V0SGVhZGVyID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgcmV0dXJuIGUgJiYgZS5zdGF0ZSA/IDIgIT09IGUuc3RhdGUud3JhcCA/IGMgOiAoZS5zdGF0ZS5nemhlYWQgPSB0LCAwKSA6IGM7CiAgICAgICAgICB9LCB0LmRlZmxhdGUgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgciwgYSwgbywgaDsKICAgICAgICAgICAgaWYgKCFlIHx8ICFlLnN0YXRlIHx8IHQgPiA1IHx8IHQgPCAwKSByZXR1cm4gZSA/IF8oZSwgYykgOiBjOwogICAgICAgICAgICBpZiAoYSA9IGUuc3RhdGUsICFlLm91dHB1dCB8fCAhZS5pbnB1dCAmJiAwICE9PSBlLmF2YWlsX2luIHx8IGEuc3RhdHVzID09PSB2ICYmIDQgIT09IHQpIHJldHVybiBfKGUsIDAgPT09IGUuYXZhaWxfb3V0ID8gLTUgOiBjKTsKICAgICAgICAgICAgaWYgKGEuc3RybSA9IGUsIHIgPSBhLmxhc3RfZmx1c2gsIGEubGFzdF9mbHVzaCA9IHQsIDQyID09PSBhLnN0YXR1cykgaWYgKDIgPT09IGEud3JhcCkgZS5hZGxlciA9IDAsIEEoYSwgMzEpLCBBKGEsIDEzOSksIEEoYSwgOCksIGEuZ3poZWFkID8gKEEoYSwgKGEuZ3poZWFkLnRleHQgPyAxIDogMCkgKyAoYS5nemhlYWQuaGNyYyA/IDIgOiAwKSArIChhLmd6aGVhZC5leHRyYSA/IDQgOiAwKSArIChhLmd6aGVhZC5uYW1lID8gOCA6IDApICsgKGEuZ3poZWFkLmNvbW1lbnQgPyAxNiA6IDApKSwgQShhLCAyNTUgJiBhLmd6aGVhZC50aW1lKSwgQShhLCBhLmd6aGVhZC50aW1lID4+IDggJiAyNTUpLCBBKGEsIGEuZ3poZWFkLnRpbWUgPj4gMTYgJiAyNTUpLCBBKGEsIGEuZ3poZWFkLnRpbWUgPj4gMjQgJiAyNTUpLCBBKGEsIDkgPT09IGEubGV2ZWwgPyAyIDogYS5zdHJhdGVneSA+PSAyIHx8IGEubGV2ZWwgPCAyID8gNCA6IDApLCBBKGEsIDI1NSAmIGEuZ3poZWFkLm9zKSwgYS5nemhlYWQuZXh0cmEgJiYgYS5nemhlYWQuZXh0cmEubGVuZ3RoICYmIChBKGEsIDI1NSAmIGEuZ3poZWFkLmV4dHJhLmxlbmd0aCksIEEoYSwgYS5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDggJiAyNTUpKSwgYS5nemhlYWQuaGNyYyAmJiAoZS5hZGxlciA9IGwoZS5hZGxlciwgYS5wZW5kaW5nX2J1ZiwgYS5wZW5kaW5nLCAwKSksIGEuZ3ppbmRleCA9IDAsIGEuc3RhdHVzID0gNjkpIDogKEEoYSwgMCksIEEoYSwgMCksIEEoYSwgMCksIEEoYSwgMCksIEEoYSwgMCksIEEoYSwgOSA9PT0gYS5sZXZlbCA/IDIgOiBhLnN0cmF0ZWd5ID49IDIgfHwgYS5sZXZlbCA8IDIgPyA0IDogMCksIEEoYSwgMyksIGEuc3RhdHVzID0gZyk7ZWxzZSB7CiAgICAgICAgICAgICAgdmFyIGYgPSA4ICsgKGEud19iaXRzIC0gOCA8PCA0KSA8PCA4OwogICAgICAgICAgICAgIGYgfD0gKGEuc3RyYXRlZ3kgPj0gMiB8fCBhLmxldmVsIDwgMiA/IDAgOiBhLmxldmVsIDwgNiA/IDEgOiA2ID09PSBhLmxldmVsID8gMiA6IDMpIDw8IDYsIDAgIT09IGEuc3Ryc3RhcnQgJiYgKGYgfD0gMzIpLCBmICs9IDMxIC0gZiAlIDMxLCBhLnN0YXR1cyA9IGcsIEMoYSwgZiksIDAgIT09IGEuc3Ryc3RhcnQgJiYgKEMoYSwgZS5hZGxlciA+Pj4gMTYpLCBDKGEsIDY1NTM1ICYgZS5hZGxlcikpLCBlLmFkbGVyID0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoNjkgPT09IGEuc3RhdHVzKSBpZiAoYS5nemhlYWQuZXh0cmEpIHsKICAgICAgICAgICAgICBmb3IgKG8gPSBhLnBlbmRpbmc7IGEuZ3ppbmRleCA8ICg2NTUzNSAmIGEuZ3poZWFkLmV4dHJhLmxlbmd0aCkgJiYgKGEucGVuZGluZyAhPT0gYS5wZW5kaW5nX2J1Zl9zaXplIHx8IChhLmd6aGVhZC5oY3JjICYmIGEucGVuZGluZyA+IG8gJiYgKGUuYWRsZXIgPSBsKGUuYWRsZXIsIGEucGVuZGluZ19idWYsIGEucGVuZGluZyAtIG8sIG8pKSwgdyhlKSwgbyA9IGEucGVuZGluZywgYS5wZW5kaW5nICE9PSBhLnBlbmRpbmdfYnVmX3NpemUpKTspIEEoYSwgMjU1ICYgYS5nemhlYWQuZXh0cmFbYS5nemluZGV4XSksIGEuZ3ppbmRleCsrOwogICAgICAgICAgICAgIGEuZ3poZWFkLmhjcmMgJiYgYS5wZW5kaW5nID4gbyAmJiAoZS5hZGxlciA9IGwoZS5hZGxlciwgYS5wZW5kaW5nX2J1ZiwgYS5wZW5kaW5nIC0gbywgbykpLCBhLmd6aW5kZXggPT09IGEuZ3poZWFkLmV4dHJhLmxlbmd0aCAmJiAoYS5nemluZGV4ID0gMCwgYS5zdGF0dXMgPSA3Myk7CiAgICAgICAgICAgIH0gZWxzZSBhLnN0YXR1cyA9IDczOwogICAgICAgICAgICBpZiAoNzMgPT09IGEuc3RhdHVzKSBpZiAoYS5nemhlYWQubmFtZSkgewogICAgICAgICAgICAgIG8gPSBhLnBlbmRpbmc7CiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgaWYgKGEucGVuZGluZyA9PT0gYS5wZW5kaW5nX2J1Zl9zaXplICYmIChhLmd6aGVhZC5oY3JjICYmIGEucGVuZGluZyA+IG8gJiYgKGUuYWRsZXIgPSBsKGUuYWRsZXIsIGEucGVuZGluZ19idWYsIGEucGVuZGluZyAtIG8sIG8pKSwgdyhlKSwgbyA9IGEucGVuZGluZywgYS5wZW5kaW5nID09PSBhLnBlbmRpbmdfYnVmX3NpemUpKSB7CiAgICAgICAgICAgICAgICAgIGggPSAxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGggPSBhLmd6aW5kZXggPCBhLmd6aGVhZC5uYW1lLmxlbmd0aCA/IDI1NSAmIGEuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChhLmd6aW5kZXgrKykgOiAwLCBBKGEsIGgpOwogICAgICAgICAgICAgIH0gd2hpbGUgKDAgIT09IGgpOwogICAgICAgICAgICAgIGEuZ3poZWFkLmhjcmMgJiYgYS5wZW5kaW5nID4gbyAmJiAoZS5hZGxlciA9IGwoZS5hZGxlciwgYS5wZW5kaW5nX2J1ZiwgYS5wZW5kaW5nIC0gbywgbykpLCAwID09PSBoICYmIChhLmd6aW5kZXggPSAwLCBhLnN0YXR1cyA9IDkxKTsKICAgICAgICAgICAgfSBlbHNlIGEuc3RhdHVzID0gOTE7CiAgICAgICAgICAgIGlmICg5MSA9PT0gYS5zdGF0dXMpIGlmIChhLmd6aGVhZC5jb21tZW50KSB7CiAgICAgICAgICAgICAgbyA9IGEucGVuZGluZzsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBpZiAoYS5wZW5kaW5nID09PSBhLnBlbmRpbmdfYnVmX3NpemUgJiYgKGEuZ3poZWFkLmhjcmMgJiYgYS5wZW5kaW5nID4gbyAmJiAoZS5hZGxlciA9IGwoZS5hZGxlciwgYS5wZW5kaW5nX2J1ZiwgYS5wZW5kaW5nIC0gbywgbykpLCB3KGUpLCBvID0gYS5wZW5kaW5nLCBhLnBlbmRpbmcgPT09IGEucGVuZGluZ19idWZfc2l6ZSkpIHsKICAgICAgICAgICAgICAgICAgaCA9IDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaCA9IGEuZ3ppbmRleCA8IGEuZ3poZWFkLmNvbW1lbnQubGVuZ3RoID8gMjU1ICYgYS5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KGEuZ3ppbmRleCsrKSA6IDAsIEEoYSwgaCk7CiAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPT0gaCk7CiAgICAgICAgICAgICAgYS5nemhlYWQuaGNyYyAmJiBhLnBlbmRpbmcgPiBvICYmIChlLmFkbGVyID0gbChlLmFkbGVyLCBhLnBlbmRpbmdfYnVmLCBhLnBlbmRpbmcgLSBvLCBvKSksIDAgPT09IGggJiYgKGEuc3RhdHVzID0gcCk7CiAgICAgICAgICAgIH0gZWxzZSBhLnN0YXR1cyA9IHA7CiAgICAgICAgICAgIGlmIChhLnN0YXR1cyA9PT0gcCAmJiAoYS5nemhlYWQuaGNyYyA/IChhLnBlbmRpbmcgKyAyID4gYS5wZW5kaW5nX2J1Zl9zaXplICYmIHcoZSksIGEucGVuZGluZyArIDIgPD0gYS5wZW5kaW5nX2J1Zl9zaXplICYmIChBKGEsIDI1NSAmIGUuYWRsZXIpLCBBKGEsIGUuYWRsZXIgPj4gOCAmIDI1NSksIGUuYWRsZXIgPSAwLCBhLnN0YXR1cyA9IGcpKSA6IGEuc3RhdHVzID0gZyksIDAgIT09IGEucGVuZGluZykgewogICAgICAgICAgICAgIGlmICh3KGUpLCAwID09PSBlLmF2YWlsX291dCkgcmV0dXJuIGEubGFzdF9mbHVzaCA9IC0xLCAwOwogICAgICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUuYXZhaWxfaW4gJiYgeSh0KSA8PSB5KHIpICYmIDQgIT09IHQpIHJldHVybiBfKGUsIC01KTsKICAgICAgICAgICAgaWYgKGEuc3RhdHVzID09PSB2ICYmIDAgIT09IGUuYXZhaWxfaW4pIHJldHVybiBfKGUsIC01KTsKICAgICAgICAgICAgaWYgKDAgIT09IGUuYXZhaWxfaW4gfHwgMCAhPT0gYS5sb29rYWhlYWQgfHwgMCAhPT0gdCAmJiBhLnN0YXR1cyAhPT0gdikgewogICAgICAgICAgICAgIHZhciBTID0gMiA9PT0gYS5zdHJhdGVneSA/IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByOzspIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGUubG9va2FoZWFkICYmIChNKGUpLCAwID09PSBlLmxvb2thaGVhZCkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdCkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGUubWF0Y2hfbGVuZ3RoID0gMCwgciA9IG4uX3RyX3RhbGx5KGUsIDAsIGUud2luZG93W2Uuc3Ryc3RhcnRdKSwgZS5sb29rYWhlYWQtLSwgZS5zdHJzdGFydCsrLCByICYmICh4KGUsICExKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCkpIHJldHVybiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGUuaW5zZXJ0ID0gMCwgNCA9PT0gdCA/ICh4KGUsICEwKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCA/IDMgOiA0KSA6IGUubGFzdF9saXQgJiYgKHgoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSA/IDEgOiAyOwogICAgICAgICAgICAgIH0oYSwgdCkgOiAzID09PSBhLnN0cmF0ZWd5ID8gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIsIHMsIGEsIG8sIGwgPSBlLndpbmRvdzs7KSB7CiAgICAgICAgICAgICAgICAgIGlmIChlLmxvb2thaGVhZCA8PSB1KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKE0oZSksIGUubG9va2FoZWFkIDw9IHUgJiYgMCA9PT0gdCkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGUubG9va2FoZWFkKSBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoZS5tYXRjaF9sZW5ndGggPSAwLCBlLmxvb2thaGVhZCA+PSAzICYmIGUuc3Ryc3RhcnQgPiAwICYmIChzID0gbFthID0gZS5zdHJzdGFydCAtIDFdKSA9PT0gbFsrK2FdICYmIHMgPT09IGxbKythXSAmJiBzID09PSBsWysrYV0pIHsKICAgICAgICAgICAgICAgICAgICBvID0gZS5zdHJzdGFydCArIHU7CiAgICAgICAgICAgICAgICAgICAgZG8ge30gd2hpbGUgKHMgPT09IGxbKythXSAmJiBzID09PSBsWysrYV0gJiYgcyA9PT0gbFsrK2FdICYmIHMgPT09IGxbKythXSAmJiBzID09PSBsWysrYV0gJiYgcyA9PT0gbFsrK2FdICYmIHMgPT09IGxbKythXSAmJiBzID09PSBsWysrYV0gJiYgYSA8IG8pOwogICAgICAgICAgICAgICAgICAgIGUubWF0Y2hfbGVuZ3RoID0gdSAtIChvIC0gYSksIGUubWF0Y2hfbGVuZ3RoID4gZS5sb29rYWhlYWQgJiYgKGUubWF0Y2hfbGVuZ3RoID0gZS5sb29rYWhlYWQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoX2xlbmd0aCA+PSAzID8gKHIgPSBuLl90cl90YWxseShlLCAxLCBlLm1hdGNoX2xlbmd0aCAtIDMpLCBlLmxvb2thaGVhZCAtPSBlLm1hdGNoX2xlbmd0aCwgZS5zdHJzdGFydCArPSBlLm1hdGNoX2xlbmd0aCwgZS5tYXRjaF9sZW5ndGggPSAwKSA6IChyID0gbi5fdHJfdGFsbHkoZSwgMCwgZS53aW5kb3dbZS5zdHJzdGFydF0pLCBlLmxvb2thaGVhZC0tLCBlLnN0cnN0YXJ0KyspLCByICYmICh4KGUsICExKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCkpIHJldHVybiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGUuaW5zZXJ0ID0gMCwgNCA9PT0gdCA/ICh4KGUsICEwKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCA/IDMgOiA0KSA6IGUubGFzdF9saXQgJiYgKHgoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSA/IDEgOiAyOwogICAgICAgICAgICAgIH0oYSwgdCkgOiBzW2EubGV2ZWxdLmZ1bmMoYSwgdCk7CiAgICAgICAgICAgICAgaWYgKDMgIT09IFMgJiYgNCAhPT0gUyB8fCAoYS5zdGF0dXMgPSB2KSwgMSA9PT0gUyB8fCAzID09PSBTKSByZXR1cm4gMCA9PT0gZS5hdmFpbF9vdXQgJiYgKGEubGFzdF9mbHVzaCA9IC0xKSwgMDsKICAgICAgICAgICAgICBpZiAoMiA9PT0gUyAmJiAoMSA9PT0gdCA/IG4uX3RyX2FsaWduKGEpIDogNSAhPT0gdCAmJiAobi5fdHJfc3RvcmVkX2Jsb2NrKGEsIDAsIDAsICExKSwgMyA9PT0gdCAmJiAoYihhLmhlYWQpLCAwID09PSBhLmxvb2thaGVhZCAmJiAoYS5zdHJzdGFydCA9IDAsIGEuYmxvY2tfc3RhcnQgPSAwLCBhLmluc2VydCA9IDApKSksIHcoZSksIDAgPT09IGUuYXZhaWxfb3V0KSkgcmV0dXJuIGEubGFzdF9mbHVzaCA9IC0xLCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiA0ICE9PSB0ID8gMCA6IGEud3JhcCA8PSAwID8gMSA6ICgyID09PSBhLndyYXAgPyAoQShhLCAyNTUgJiBlLmFkbGVyKSwgQShhLCBlLmFkbGVyID4+IDggJiAyNTUpLCBBKGEsIGUuYWRsZXIgPj4gMTYgJiAyNTUpLCBBKGEsIGUuYWRsZXIgPj4gMjQgJiAyNTUpLCBBKGEsIDI1NSAmIGUudG90YWxfaW4pLCBBKGEsIGUudG90YWxfaW4gPj4gOCAmIDI1NSksIEEoYSwgZS50b3RhbF9pbiA+PiAxNiAmIDI1NSksIEEoYSwgZS50b3RhbF9pbiA+PiAyNCAmIDI1NSkpIDogKEMoYSwgZS5hZGxlciA+Pj4gMTYpLCBDKGEsIDY1NTM1ICYgZS5hZGxlcikpLCB3KGUpLCBhLndyYXAgPiAwICYmIChhLndyYXAgPSAtYS53cmFwKSwgMCAhPT0gYS5wZW5kaW5nID8gMCA6IDEpOwogICAgICAgICAgfSwgdC5kZWZsYXRlRW5kID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgIHJldHVybiBlICYmIGUuc3RhdGUgPyA0MiAhPT0gKHQgPSBlLnN0YXRlLnN0YXR1cykgJiYgNjkgIT09IHQgJiYgNzMgIT09IHQgJiYgOTEgIT09IHQgJiYgdCAhPT0gcCAmJiB0ICE9PSBnICYmIHQgIT09IHYgPyBfKGUsIGMpIDogKGUuc3RhdGUgPSBudWxsLCB0ID09PSBnID8gXyhlLCAtMykgOiAwKSA6IGM7CiAgICAgICAgICB9LCB0LmRlZmxhdGVTZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICBnID0gdC5sZW5ndGg7CiAgICAgICAgICAgIGlmICghZSB8fCAhZS5zdGF0ZSkgcmV0dXJuIGM7CiAgICAgICAgICAgIGlmICgyID09PSAobCA9IChyID0gZS5zdGF0ZSkud3JhcCkgfHwgMSA9PT0gbCAmJiA0MiAhPT0gci5zdGF0dXMgfHwgci5sb29rYWhlYWQpIHJldHVybiBjOwogICAgICAgICAgICBmb3IgKDEgPT09IGwgJiYgKGUuYWRsZXIgPSBvKGUuYWRsZXIsIHQsIGcsIDApKSwgci53cmFwID0gMCwgZyA+PSByLndfc2l6ZSAmJiAoMCA9PT0gbCAmJiAoYihyLmhlYWQpLCByLnN0cnN0YXJ0ID0gMCwgci5ibG9ja19zdGFydCA9IDAsIHIuaW5zZXJ0ID0gMCksIHAgPSBuZXcgYS5CdWY4KHIud19zaXplKSwgYS5hcnJheVNldChwLCB0LCBnIC0gci53X3NpemUsIHIud19zaXplLCAwKSwgdCA9IHAsIGcgPSByLndfc2l6ZSksIGggPSBlLmF2YWlsX2luLCB1ID0gZS5uZXh0X2luLCBmID0gZS5pbnB1dCwgZS5hdmFpbF9pbiA9IGcsIGUubmV4dF9pbiA9IDAsIGUuaW5wdXQgPSB0LCBNKHIpOyByLmxvb2thaGVhZCA+PSAzOykgewogICAgICAgICAgICAgIHMgPSByLnN0cnN0YXJ0LCBuID0gci5sb29rYWhlYWQgLSAyOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIHIuaW5zX2ggPSAoci5pbnNfaCA8PCByLmhhc2hfc2hpZnQgXiByLndpbmRvd1tzICsgMyAtIDFdKSAmIHIuaGFzaF9tYXNrLCByLnByZXZbcyAmIHIud19tYXNrXSA9IHIuaGVhZFtyLmluc19oXSwgci5oZWFkW3IuaW5zX2hdID0gcywgcysrOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tbik7CiAgICAgICAgICAgICAgci5zdHJzdGFydCA9IHMsIHIubG9va2FoZWFkID0gMiwgTShyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gci5zdHJzdGFydCArPSByLmxvb2thaGVhZCwgci5ibG9ja19zdGFydCA9IHIuc3Ryc3RhcnQsIHIuaW5zZXJ0ID0gci5sb29rYWhlYWQsIHIubG9va2FoZWFkID0gMCwgci5tYXRjaF9sZW5ndGggPSByLnByZXZfbGVuZ3RoID0gMiwgci5tYXRjaF9hdmFpbGFibGUgPSAwLCBlLm5leHRfaW4gPSB1LCBlLmlucHV0ID0gZiwgZS5hdmFpbF9pbiA9IGgsIHIud3JhcCA9IGwsIDA7CiAgICAgICAgICB9LCB0LmRlZmxhdGVJbmZvID0gInBha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCkiOwogICAgICAgIH0sCiAgICAgICAgODc3MjogZnVuY3Rpb24gXyhlKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLnRleHQgPSAwLCB0aGlzLnRpbWUgPSAwLCB0aGlzLnhmbGFncyA9IDAsIHRoaXMub3MgPSAwLCB0aGlzLmV4dHJhID0gbnVsbCwgdGhpcy5leHRyYV9sZW4gPSAwLCB0aGlzLm5hbWUgPSAiIiwgdGhpcy5jb21tZW50ID0gIiIsIHRoaXMuaGNyYyA9IDAsIHRoaXMuZG9uZSA9ICExOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDc5MzM6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLCBzLCBhLCBuLCBvLCBsLCBoLCBjLCB1LCBmLCBwLCBnLCB2LCBfLCB5LCBiLCB3LCB4LCBBLCBDLCBTLCBNLCB6LCBMLCBFOwogICAgICAgICAgICByID0gZS5zdGF0ZSwgcyA9IGUubmV4dF9pbiwgTCA9IGUuaW5wdXQsIGEgPSBzICsgKGUuYXZhaWxfaW4gLSA1KSwgbiA9IGUubmV4dF9vdXQsIEUgPSBlLm91dHB1dCwgbyA9IG4gLSAodCAtIGUuYXZhaWxfb3V0KSwgbCA9IG4gKyAoZS5hdmFpbF9vdXQgLSAyNTcpLCBoID0gci5kbWF4LCBjID0gci53c2l6ZSwgdSA9IHIud2hhdmUsIGYgPSByLnduZXh0LCBwID0gci53aW5kb3csIGcgPSByLmhvbGQsIHYgPSByLmJpdHMsIF8gPSByLmxlbmNvZGUsIHkgPSByLmRpc3Rjb2RlLCBiID0gKDEgPDwgci5sZW5iaXRzKSAtIDEsIHcgPSAoMSA8PCByLmRpc3RiaXRzKSAtIDE7CiAgICAgICAgICAgIGU6IGRvIHsKICAgICAgICAgICAgICB2IDwgMTUgJiYgKGcgKz0gTFtzKytdIDw8IHYsIHYgKz0gOCwgZyArPSBMW3MrK10gPDwgdiwgdiArPSA4KSwgeCA9IF9bZyAmIGJdOwogICAgICAgICAgICAgIHQ6IGZvciAoOzspIHsKICAgICAgICAgICAgICAgIGlmIChnID4+Pj0gQSA9IHggPj4+IDI0LCB2IC09IEEsIDAgPT09IChBID0geCA+Pj4gMTYgJiAyNTUpKSBFW24rK10gPSA2NTUzNSAmIHg7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIGlmICghKDE2ICYgQSkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSAoNjQgJiBBKSkgewogICAgICAgICAgICAgICAgICAgICAgeCA9IF9bKDY1NTM1ICYgeCkgKyAoZyAmICgxIDw8IEEpIC0gMSldOwogICAgICAgICAgICAgICAgICAgICAgY29udGludWUgdDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKDMyICYgQSkgewogICAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTI7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUiLCByLm1vZGUgPSAzMDsKICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIEMgPSA2NTUzNSAmIHgsIChBICY9IDE1KSAmJiAodiA8IEEgJiYgKGcgKz0gTFtzKytdIDw8IHYsIHYgKz0gOCksIEMgKz0gZyAmICgxIDw8IEEpIC0gMSwgZyA+Pj49IEEsIHYgLT0gQSksIHYgPCAxNSAmJiAoZyArPSBMW3MrK10gPDwgdiwgdiArPSA4LCBnICs9IExbcysrXSA8PCB2LCB2ICs9IDgpLCB4ID0geVtnICYgd107CiAgICAgICAgICAgICAgICAgIHI6IGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZyA+Pj49IEEgPSB4ID4+PiAyNCwgdiAtPSBBLCAhKDE2ICYgKEEgPSB4ID4+PiAxNiAmIDI1NSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSAoNjQgJiBBKSkgewogICAgICAgICAgICAgICAgICAgICAgICB4ID0geVsoNjU1MzUgJiB4KSArIChnICYgKDEgPDwgQSkgLSAxKV07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHI7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIGNvZGUiLCByLm1vZGUgPSAzMDsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChTID0gNjU1MzUgJiB4LCB2IDwgKEEgJj0gMTUpICYmIChnICs9IExbcysrXSA8PCB2LCAodiArPSA4KSA8IEEgJiYgKGcgKz0gTFtzKytdIDw8IHYsIHYgKz0gOCkpLCAoUyArPSBnICYgKDEgPDwgQSkgLSAxKSA+IGgpIHsKICAgICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIiwgci5tb2RlID0gMzA7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZyA+Pj49IEEsIHYgLT0gQSwgUyA+IChBID0gbiAtIG8pKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoKEEgPSBTIC0gQSkgPiB1ICYmIHIuc2FuZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIHIubW9kZSA9IDMwOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKE0gPSAwLCB6ID0gcCwgMCA9PT0gZikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoTSArPSBjIC0gQSwgQSA8IEMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBDIC09IEE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgRVtuKytdID0gcFtNKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tQSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgTSA9IG4gLSBTLCB6ID0gRTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmIDwgQSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoTSArPSBjICsgZiAtIEEsIChBIC09IGYpIDwgQykgewogICAgICAgICAgICAgICAgICAgICAgICAgIEMgLT0gQTsKICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFW24rK10gPSBwW00rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1BKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTSA9IDAsIGYgPCBDKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDIC09IEEgPSBmOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFW24rK10gPSBwW00rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLUEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTSA9IG4gLSBTLCB6ID0gRTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTSArPSBmIC0gQSwgQSA8IEMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgQyAtPSBBOwogICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgRVtuKytdID0gcFtNKytdOwogICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLUEpOwogICAgICAgICAgICAgICAgICAgICAgICBNID0gbiAtIFMsIHogPSBFOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZm9yICg7IEMgPiAyOykgRVtuKytdID0geltNKytdLCBFW24rK10gPSB6W00rK10sIEVbbisrXSA9IHpbTSsrXSwgQyAtPSAzOwogICAgICAgICAgICAgICAgICAgICAgQyAmJiAoRVtuKytdID0geltNKytdLCBDID4gMSAmJiAoRVtuKytdID0geltNKytdKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIE0gPSBuIC0gUzsKICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgRVtuKytdID0gRVtNKytdLCBFW24rK10gPSBFW00rK10sIEVbbisrXSA9IEVbTSsrXSwgQyAtPSAzOwogICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoQyA+IDIpOwogICAgICAgICAgICAgICAgICAgICAgQyAmJiAoRVtuKytdID0gRVtNKytdLCBDID4gMSAmJiAoRVtuKytdID0gRVtNKytdKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gd2hpbGUgKHMgPCBhICYmIG4gPCBsKTsKICAgICAgICAgICAgcyAtPSBDID0gdiA+PiAzLCBnICY9ICgxIDw8ICh2IC09IEMgPDwgMykpIC0gMSwgZS5uZXh0X2luID0gcywgZS5uZXh0X291dCA9IG4sIGUuYXZhaWxfaW4gPSBzIDwgYSA/IGEgLSBzICsgNSA6IDUgLSAocyAtIGEpLCBlLmF2YWlsX291dCA9IG4gPCBsID8gbCAtIG4gKyAyNTcgOiAyNTcgLSAobiAtIGwpLCByLmhvbGQgPSBnLCByLmJpdHMgPSB2OwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDUzNTY6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHZhciBzID0gcig2Mjk2KSwKICAgICAgICAgICAgYSA9IHIoNzg1MyksCiAgICAgICAgICAgIG4gPSByKDU2ODQpLAogICAgICAgICAgICBvID0gcig3OTMzKSwKICAgICAgICAgICAgbCA9IHIoNjIxNSksCiAgICAgICAgICAgIGggPSAtMiwKICAgICAgICAgICAgYyA9IDEyLAogICAgICAgICAgICB1ID0gMzA7CiAgICAgICAgICBmdW5jdGlvbiBmKGUpIHsKICAgICAgICAgICAgcmV0dXJuIChlID4+PiAyNCAmIDI1NSkgKyAoZSA+Pj4gOCAmIDY1MjgwKSArICgoNjUyODAgJiBlKSA8PCA4KSArICgoMjU1ICYgZSkgPDwgMjQpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcCgpIHsKICAgICAgICAgICAgdGhpcy5tb2RlID0gMCwgdGhpcy5sYXN0ID0gITEsIHRoaXMud3JhcCA9IDAsIHRoaXMuaGF2ZWRpY3QgPSAhMSwgdGhpcy5mbGFncyA9IDAsIHRoaXMuZG1heCA9IDAsIHRoaXMuY2hlY2sgPSAwLCB0aGlzLnRvdGFsID0gMCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy53Yml0cyA9IDAsIHRoaXMud3NpemUgPSAwLCB0aGlzLndoYXZlID0gMCwgdGhpcy53bmV4dCA9IDAsIHRoaXMud2luZG93ID0gbnVsbCwgdGhpcy5ob2xkID0gMCwgdGhpcy5iaXRzID0gMCwgdGhpcy5sZW5ndGggPSAwLCB0aGlzLm9mZnNldCA9IDAsIHRoaXMuZXh0cmEgPSAwLCB0aGlzLmxlbmNvZGUgPSBudWxsLCB0aGlzLmRpc3Rjb2RlID0gbnVsbCwgdGhpcy5sZW5iaXRzID0gMCwgdGhpcy5kaXN0Yml0cyA9IDAsIHRoaXMubmNvZGUgPSAwLCB0aGlzLm5sZW4gPSAwLCB0aGlzLm5kaXN0ID0gMCwgdGhpcy5oYXZlID0gMCwgdGhpcy5uZXh0ID0gbnVsbCwgdGhpcy5sZW5zID0gbmV3IHMuQnVmMTYoMzIwKSwgdGhpcy53b3JrID0gbmV3IHMuQnVmMTYoMjg4KSwgdGhpcy5sZW5keW4gPSBudWxsLCB0aGlzLmRpc3RkeW4gPSBudWxsLCB0aGlzLnNhbmUgPSAwLCB0aGlzLmJhY2sgPSAwLCB0aGlzLndhcyA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnKGUpIHsKICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgIHJldHVybiBlICYmIGUuc3RhdGUgPyAodCA9IGUuc3RhdGUsIGUudG90YWxfaW4gPSBlLnRvdGFsX291dCA9IHQudG90YWwgPSAwLCBlLm1zZyA9ICIiLCB0LndyYXAgJiYgKGUuYWRsZXIgPSAxICYgdC53cmFwKSwgdC5tb2RlID0gMSwgdC5sYXN0ID0gMCwgdC5oYXZlZGljdCA9IDAsIHQuZG1heCA9IDMyNzY4LCB0LmhlYWQgPSBudWxsLCB0LmhvbGQgPSAwLCB0LmJpdHMgPSAwLCB0LmxlbmNvZGUgPSB0LmxlbmR5biA9IG5ldyBzLkJ1ZjMyKDg1MiksIHQuZGlzdGNvZGUgPSB0LmRpc3RkeW4gPSBuZXcgcy5CdWYzMig1OTIpLCB0LnNhbmUgPSAxLCB0LmJhY2sgPSAtMSwgMCkgOiBoOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdihlKSB7CiAgICAgICAgICAgIHZhciB0OwogICAgICAgICAgICByZXR1cm4gZSAmJiBlLnN0YXRlID8gKCh0ID0gZS5zdGF0ZSkud3NpemUgPSAwLCB0LndoYXZlID0gMCwgdC53bmV4dCA9IDAsIGcoZSkpIDogaDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF8oZSwgdCkgewogICAgICAgICAgICB2YXIgciwgczsKICAgICAgICAgICAgcmV0dXJuIGUgJiYgZS5zdGF0ZSA/IChzID0gZS5zdGF0ZSwgdCA8IDAgPyAociA9IDAsIHQgPSAtdCkgOiAociA9IDEgKyAodCA+PiA0KSwgdCA8IDQ4ICYmICh0ICY9IDE1KSksIHQgJiYgKHQgPCA4IHx8IHQgPiAxNSkgPyBoIDogKG51bGwgIT09IHMud2luZG93ICYmIHMud2JpdHMgIT09IHQgJiYgKHMud2luZG93ID0gbnVsbCksIHMud3JhcCA9IHIsIHMud2JpdHMgPSB0LCB2KGUpKSkgOiBoOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geShlLCB0KSB7CiAgICAgICAgICAgIHZhciByLCBzOwogICAgICAgICAgICByZXR1cm4gZSA/IChzID0gbmV3IHAoKSwgZS5zdGF0ZSA9IHMsIHMud2luZG93ID0gbnVsbCwgMCAhPT0gKHIgPSBfKGUsIHQpKSAmJiAoZS5zdGF0ZSA9IG51bGwpLCByKSA6IGg7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgYiwKICAgICAgICAgICAgdywKICAgICAgICAgICAgeCA9ICEwOwogICAgICAgICAgZnVuY3Rpb24gQShlKSB7CiAgICAgICAgICAgIGlmICh4KSB7CiAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgZm9yIChiID0gbmV3IHMuQnVmMzIoNTEyKSwgdyA9IG5ldyBzLkJ1ZjMyKDMyKSwgdCA9IDA7IHQgPCAxNDQ7KSBlLmxlbnNbdCsrXSA9IDg7CiAgICAgICAgICAgICAgZm9yICg7IHQgPCAyNTY7KSBlLmxlbnNbdCsrXSA9IDk7CiAgICAgICAgICAgICAgZm9yICg7IHQgPCAyODA7KSBlLmxlbnNbdCsrXSA9IDc7CiAgICAgICAgICAgICAgZm9yICg7IHQgPCAyODg7KSBlLmxlbnNbdCsrXSA9IDg7CiAgICAgICAgICAgICAgZm9yIChsKDEsIGUubGVucywgMCwgMjg4LCBiLCAwLCBlLndvcmssIHsKICAgICAgICAgICAgICAgIGJpdHM6IDkKICAgICAgICAgICAgICB9KSwgdCA9IDA7IHQgPCAzMjspIGUubGVuc1t0KytdID0gNTsKICAgICAgICAgICAgICBsKDIsIGUubGVucywgMCwgMzIsIHcsIDAsIGUud29yaywgewogICAgICAgICAgICAgICAgYml0czogNQogICAgICAgICAgICAgIH0pLCB4ID0gITE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZS5sZW5jb2RlID0gYiwgZS5sZW5iaXRzID0gOSwgZS5kaXN0Y29kZSA9IHcsIGUuZGlzdGJpdHMgPSA1OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQyhlLCB0LCByLCBhKSB7CiAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgIG8gPSBlLnN0YXRlOwogICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gby53aW5kb3cgJiYgKG8ud3NpemUgPSAxIDw8IG8ud2JpdHMsIG8ud25leHQgPSAwLCBvLndoYXZlID0gMCwgby53aW5kb3cgPSBuZXcgcy5CdWY4KG8ud3NpemUpKSwgYSA+PSBvLndzaXplID8gKHMuYXJyYXlTZXQoby53aW5kb3csIHQsIHIgLSBvLndzaXplLCBvLndzaXplLCAwKSwgby53bmV4dCA9IDAsIG8ud2hhdmUgPSBvLndzaXplKSA6ICgobiA9IG8ud3NpemUgLSBvLnduZXh0KSA+IGEgJiYgKG4gPSBhKSwgcy5hcnJheVNldChvLndpbmRvdywgdCwgciAtIGEsIG4sIG8ud25leHQpLCAoYSAtPSBuKSA/IChzLmFycmF5U2V0KG8ud2luZG93LCB0LCByIC0gYSwgYSwgMCksIG8ud25leHQgPSBhLCBvLndoYXZlID0gby53c2l6ZSkgOiAoby53bmV4dCArPSBuLCBvLnduZXh0ID09PSBvLndzaXplICYmIChvLnduZXh0ID0gMCksIG8ud2hhdmUgPCBvLndzaXplICYmIChvLndoYXZlICs9IG4pKSksIDA7CiAgICAgICAgICB9CiAgICAgICAgICB0LmluZmxhdGVSZXNldCA9IHYsIHQuaW5mbGF0ZVJlc2V0MiA9IF8sIHQuaW5mbGF0ZVJlc2V0S2VlcCA9IGcsIHQuaW5mbGF0ZUluaXQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4geShlLCAxNSk7CiAgICAgICAgICB9LCB0LmluZmxhdGVJbml0MiA9IHksIHQuaW5mbGF0ZSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIHAsCiAgICAgICAgICAgICAgZywKICAgICAgICAgICAgICB2LAogICAgICAgICAgICAgIF8sCiAgICAgICAgICAgICAgeSwKICAgICAgICAgICAgICBiLAogICAgICAgICAgICAgIHcsCiAgICAgICAgICAgICAgeCwKICAgICAgICAgICAgICBTLAogICAgICAgICAgICAgIE0sCiAgICAgICAgICAgICAgeiwKICAgICAgICAgICAgICBMLAogICAgICAgICAgICAgIEUsCiAgICAgICAgICAgICAgVCwKICAgICAgICAgICAgICBrLAogICAgICAgICAgICAgIEksCiAgICAgICAgICAgICAgTywKICAgICAgICAgICAgICBELAogICAgICAgICAgICAgIEYsCiAgICAgICAgICAgICAgUiwKICAgICAgICAgICAgICBQLAogICAgICAgICAgICAgIEcsCiAgICAgICAgICAgICAgQiwKICAgICAgICAgICAgICBVID0gMCwKICAgICAgICAgICAgICBOID0gbmV3IHMuQnVmOCg0KSwKICAgICAgICAgICAgICBWID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdOwogICAgICAgICAgICBpZiAoIWUgfHwgIWUuc3RhdGUgfHwgIWUub3V0cHV0IHx8ICFlLmlucHV0ICYmIDAgIT09IGUuYXZhaWxfaW4pIHJldHVybiBoOwogICAgICAgICAgICAociA9IGUuc3RhdGUpLm1vZGUgPT09IGMgJiYgKHIubW9kZSA9IDEzKSwgXyA9IGUubmV4dF9vdXQsIGcgPSBlLm91dHB1dCwgYiA9IGUuYXZhaWxfb3V0LCB2ID0gZS5uZXh0X2luLCBwID0gZS5pbnB1dCwgeSA9IGUuYXZhaWxfaW4sIHcgPSByLmhvbGQsIHggPSByLmJpdHMsIFMgPSB5LCBNID0gYiwgUCA9IDA7CiAgICAgICAgICAgIGU6IGZvciAoOzspIHN3aXRjaCAoci5tb2RlKSB7CiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgaWYgKDAgPT09IHIud3JhcCkgewogICAgICAgICAgICAgICAgICByLm1vZGUgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKDsgeCA8IDE2OykgewogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0geSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMiAmIHIud3JhcCAmJiAzNTYxNSA9PT0gdykgewogICAgICAgICAgICAgICAgICByLmNoZWNrID0gMCwgTlswXSA9IDI1NSAmIHcsIE5bMV0gPSB3ID4+PiA4ICYgMjU1LCByLmNoZWNrID0gbihyLmNoZWNrLCBOLCAyLCAwKSwgdyA9IDAsIHggPSAwLCByLm1vZGUgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyLmZsYWdzID0gMCwgci5oZWFkICYmIChyLmhlYWQuZG9uZSA9ICExKSwgISgxICYgci53cmFwKSB8fCAoKCgyNTUgJiB3KSA8PCA4KSArICh3ID4+IDgpKSAlIDMxKSB7CiAgICAgICAgICAgICAgICAgIGUubXNnID0gImluY29ycmVjdCBoZWFkZXIgY2hlY2siLCByLm1vZGUgPSB1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICg4ICE9ICgxNSAmIHcpKSB7CiAgICAgICAgICAgICAgICAgIGUubXNnID0gInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeCAtPSA0LCBSID0gOCArICgxNSAmICh3ID4+Pj0gNCkpLCAwID09PSByLndiaXRzKSByLndiaXRzID0gUjtlbHNlIGlmIChSID4gci53Yml0cykgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIHdpbmRvdyBzaXplIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLmRtYXggPSAxIDw8IFIsIGUuYWRsZXIgPSByLmNoZWNrID0gMSwgci5tb2RlID0gNTEyICYgdyA/IDEwIDogYywgdyA9IDAsIHggPSAwOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgZm9yICg7IHggPCAxNjspIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIuZmxhZ3MgPSB3LCA4ICE9ICgyNTUgJiByLmZsYWdzKSkgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKDU3MzQ0ICYgci5mbGFncykgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJ1bmtub3duIGhlYWRlciBmbGFncyBzZXQiLCByLm1vZGUgPSB1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIuaGVhZCAmJiAoci5oZWFkLnRleHQgPSB3ID4+IDggJiAxKSwgNTEyICYgci5mbGFncyAmJiAoTlswXSA9IDI1NSAmIHcsIE5bMV0gPSB3ID4+PiA4ICYgMjU1LCByLmNoZWNrID0gbihyLmNoZWNrLCBOLCAyLCAwKSksIHcgPSAwLCB4ID0gMCwgci5tb2RlID0gMzsKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBmb3IgKDsgeCA8IDMyOykgewogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0geSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLmhlYWQgJiYgKHIuaGVhZC50aW1lID0gdyksIDUxMiAmIHIuZmxhZ3MgJiYgKE5bMF0gPSAyNTUgJiB3LCBOWzFdID0gdyA+Pj4gOCAmIDI1NSwgTlsyXSA9IHcgPj4+IDE2ICYgMjU1LCBOWzNdID0gdyA+Pj4gMjQgJiAyNTUsIHIuY2hlY2sgPSBuKHIuY2hlY2ssIE4sIDQsIDApKSwgdyA9IDAsIHggPSAwLCByLm1vZGUgPSA0OwogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGZvciAoOyB4IDwgMTY7KSB7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIuaGVhZCAmJiAoci5oZWFkLnhmbGFncyA9IDI1NSAmIHcsIHIuaGVhZC5vcyA9IHcgPj4gOCksIDUxMiAmIHIuZmxhZ3MgJiYgKE5bMF0gPSAyNTUgJiB3LCBOWzFdID0gdyA+Pj4gOCAmIDI1NSwgci5jaGVjayA9IG4oci5jaGVjaywgTiwgMiwgMCkpLCB3ID0gMCwgeCA9IDAsIHIubW9kZSA9IDU7CiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgaWYgKDEwMjQgJiByLmZsYWdzKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyB4IDwgMTY7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5sZW5ndGggPSB3LCByLmhlYWQgJiYgKHIuaGVhZC5leHRyYV9sZW4gPSB3KSwgNTEyICYgci5mbGFncyAmJiAoTlswXSA9IDI1NSAmIHcsIE5bMV0gPSB3ID4+PiA4ICYgMjU1LCByLmNoZWNrID0gbihyLmNoZWNrLCBOLCAyLCAwKSksIHcgPSAwLCB4ID0gMDsKICAgICAgICAgICAgICAgIH0gZWxzZSByLmhlYWQgJiYgKHIuaGVhZC5leHRyYSA9IG51bGwpOwogICAgICAgICAgICAgICAgci5tb2RlID0gNjsKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBpZiAoMTAyNCAmIHIuZmxhZ3MgJiYgKCh6ID0gci5sZW5ndGgpID4geSAmJiAoeiA9IHkpLCB6ICYmIChyLmhlYWQgJiYgKFIgPSByLmhlYWQuZXh0cmFfbGVuIC0gci5sZW5ndGgsIHIuaGVhZC5leHRyYSB8fCAoci5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHIuaGVhZC5leHRyYV9sZW4pKSwgcy5hcnJheVNldChyLmhlYWQuZXh0cmEsIHAsIHYsIHosIFIpKSwgNTEyICYgci5mbGFncyAmJiAoci5jaGVjayA9IG4oci5jaGVjaywgcCwgeiwgdikpLCB5IC09IHosIHYgKz0geiwgci5sZW5ndGggLT0geiksIHIubGVuZ3RoKSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgIHIubGVuZ3RoID0gMCwgci5tb2RlID0gNzsKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBpZiAoMjA0OCAmIHIuZmxhZ3MpIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIHogPSAwOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgUiA9IHBbdiArIHorK10sIHIuaGVhZCAmJiBSICYmIHIubGVuZ3RoIDwgNjU1MzYgJiYgKHIuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoUikpOwogICAgICAgICAgICAgICAgICB9IHdoaWxlIChSICYmIHogPCB5KTsKICAgICAgICAgICAgICAgICAgaWYgKDUxMiAmIHIuZmxhZ3MgJiYgKHIuY2hlY2sgPSBuKHIuY2hlY2ssIHAsIHosIHYpKSwgeSAtPSB6LCB2ICs9IHosIFIpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICB9IGVsc2Ugci5oZWFkICYmIChyLmhlYWQubmFtZSA9IG51bGwpOwogICAgICAgICAgICAgICAgci5sZW5ndGggPSAwLCByLm1vZGUgPSA4OwogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIGlmICg0MDk2ICYgci5mbGFncykgewogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0geSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgeiA9IDA7CiAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICBSID0gcFt2ICsgeisrXSwgci5oZWFkICYmIFIgJiYgci5sZW5ndGggPCA2NTUzNiAmJiAoci5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShSKSk7CiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKFIgJiYgeiA8IHkpOwogICAgICAgICAgICAgICAgICBpZiAoNTEyICYgci5mbGFncyAmJiAoci5jaGVjayA9IG4oci5jaGVjaywgcCwgeiwgdikpLCB5IC09IHosIHYgKz0geiwgUikgYnJlYWsgZTsKICAgICAgICAgICAgICAgIH0gZWxzZSByLmhlYWQgJiYgKHIuaGVhZC5jb21tZW50ID0gbnVsbCk7CiAgICAgICAgICAgICAgICByLm1vZGUgPSA5OwogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIGlmICg1MTIgJiByLmZsYWdzKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyB4IDwgMTY7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHcgIT09ICg2NTUzNSAmIHIuY2hlY2spKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaGVhZGVyIGNyYyBtaXNtYXRjaCIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdyA9IDAsIHggPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgci5oZWFkICYmIChyLmhlYWQuaGNyYyA9IHIuZmxhZ3MgPj4gOSAmIDEsIHIuaGVhZC5kb25lID0gITApLCBlLmFkbGVyID0gci5jaGVjayA9IDAsIHIubW9kZSA9IGM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgZm9yICg7IHggPCAzMjspIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZS5hZGxlciA9IHIuY2hlY2sgPSBmKHcpLCB3ID0gMCwgeCA9IDAsIHIubW9kZSA9IDExOwogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gci5oYXZlZGljdCkgcmV0dXJuIGUubmV4dF9vdXQgPSBfLCBlLmF2YWlsX291dCA9IGIsIGUubmV4dF9pbiA9IHYsIGUuYXZhaWxfaW4gPSB5LCByLmhvbGQgPSB3LCByLmJpdHMgPSB4LCAyOwogICAgICAgICAgICAgICAgZS5hZGxlciA9IHIuY2hlY2sgPSAxLCByLm1vZGUgPSBjOwogICAgICAgICAgICAgIGNhc2UgYzoKICAgICAgICAgICAgICAgIGlmICg1ID09PSB0IHx8IDYgPT09IHQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIGlmIChyLmxhc3QpIHsKICAgICAgICAgICAgICAgICAgdyA+Pj49IDcgJiB4LCB4IC09IDcgJiB4LCByLm1vZGUgPSAyNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKDsgeCA8IDM7KSB7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN3aXRjaCAoci5sYXN0ID0gMSAmIHcsIHggLT0gMSwgMyAmICh3ID4+Pj0gMSkpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHIubW9kZSA9IDE0OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgaWYgKEEociksIHIubW9kZSA9IDIwLCA2ID09PSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICB3ID4+Pj0gMiwgeCAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICByLm1vZGUgPSAxNzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgYmxvY2sgdHlwZSIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3ID4+Pj0gMiwgeCAtPSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIGZvciAodyA+Pj49IDcgJiB4LCB4IC09IDcgJiB4OyB4IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgoNjU1MzUgJiB3KSAhPSAodyA+Pj4gMTYgXiA2NTUzNSkpIHsKICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3RocyIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIubGVuZ3RoID0gNjU1MzUgJiB3LCB3ID0gMCwgeCA9IDAsIHIubW9kZSA9IDE1LCA2ID09PSB0KSBicmVhayBlOwogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICByLm1vZGUgPSAxNjsKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgaWYgKHogPSByLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICBpZiAoeiA+IHkgJiYgKHogPSB5KSwgeiA+IGIgJiYgKHogPSBiKSwgMCA9PT0geikgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgcy5hcnJheVNldChnLCBwLCB2LCB6LCBfKSwgeSAtPSB6LCB2ICs9IHosIGIgLT0geiwgXyArPSB6LCByLmxlbmd0aCAtPSB6OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIubW9kZSA9IGM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgZm9yICg7IHggPCAxNDspIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIubmxlbiA9IDI1NyArICgzMSAmIHcpLCB3ID4+Pj0gNSwgeCAtPSA1LCByLm5kaXN0ID0gMSArICgzMSAmIHcpLCB3ID4+Pj0gNSwgeCAtPSA1LCByLm5jb2RlID0gNCArICgxNSAmIHcpLCB3ID4+Pj0gNCwgeCAtPSA0LCByLm5sZW4gPiAyODYgfHwgci5uZGlzdCA+IDMwKSB7CiAgICAgICAgICAgICAgICAgIGUubXNnID0gInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLmhhdmUgPSAwLCByLm1vZGUgPSAxODsKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgZm9yICg7IHIuaGF2ZSA8IHIubmNvZGU7KSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyB4IDwgMzspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0geSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByLmxlbnNbVltyLmhhdmUrK11dID0gNyAmIHcsIHcgPj4+PSAzLCB4IC09IDM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKDsgci5oYXZlIDwgMTk7KSByLmxlbnNbVltyLmhhdmUrK11dID0gMDsKICAgICAgICAgICAgICAgIGlmIChyLmxlbmNvZGUgPSByLmxlbmR5biwgci5sZW5iaXRzID0gNywgRyA9IHsKICAgICAgICAgICAgICAgICAgYml0czogci5sZW5iaXRzCiAgICAgICAgICAgICAgICB9LCBQID0gbCgwLCByLmxlbnMsIDAsIDE5LCByLmxlbmNvZGUsIDAsIHIud29yaywgRyksIHIubGVuYml0cyA9IEcuYml0cywgUCkgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQiLCByLm1vZGUgPSB1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIuaGF2ZSA9IDAsIHIubW9kZSA9IDE5OwogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBmb3IgKDsgci5oYXZlIDwgci5ubGVuICsgci5uZGlzdDspIHsKICAgICAgICAgICAgICAgICAgZm9yICg7IGsgPSAoVSA9IHIubGVuY29kZVt3ICYgKDEgPDwgci5sZW5iaXRzKSAtIDFdKSA+Pj4gMTYgJiAyNTUsIEkgPSA2NTUzNSAmIFUsICEoKFQgPSBVID4+PiAyNCkgPD0geCk7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKEkgPCAxNikgdyA+Pj49IFQsIHggLT0gVCwgci5sZW5zW3IuaGF2ZSsrXSA9IEk7ZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDE2ID09PSBJKSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKEIgPSBUICsgMjsgeCA8IEI7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmICh3ID4+Pj0gVCwgeCAtPSBULCAwID09PSByLmhhdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgUiA9IHIubGVuc1tyLmhhdmUgLSAxXSwgeiA9IDMgKyAoMyAmIHcpLCB3ID4+Pj0gMiwgeCAtPSAyOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMTcgPT09IEkpIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoQiA9IFQgKyAzOyB4IDwgQjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgeCAtPSBULCBSID0gMCwgeiA9IDMgKyAoNyAmICh3ID4+Pj0gVCkpLCB3ID4+Pj0gMywgeCAtPSAzOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKEIgPSBUICsgNzsgeCA8IEI7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHggLT0gVCwgUiA9IDAsIHogPSAxMSArICgxMjcgJiAodyA+Pj49IFQpKSwgdyA+Pj49IDcsIHggLT0gNzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHIuaGF2ZSArIHogPiByLm5sZW4gKyByLm5kaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0Iiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmb3IgKDsgei0tOykgci5sZW5zW3IuaGF2ZSsrXSA9IFI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyLm1vZGUgPT09IHUpIGJyZWFrOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IHIubGVuc1syNTZdKSB7CiAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIubGVuYml0cyA9IDksIEcgPSB7CiAgICAgICAgICAgICAgICAgIGJpdHM6IHIubGVuYml0cwogICAgICAgICAgICAgICAgfSwgUCA9IGwoMSwgci5sZW5zLCAwLCByLm5sZW4sIHIubGVuY29kZSwgMCwgci53b3JrLCBHKSwgci5sZW5iaXRzID0gRy5iaXRzLCBQKSB7CiAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldCIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIuZGlzdGJpdHMgPSA2LCByLmRpc3Rjb2RlID0gci5kaXN0ZHluLCBHID0gewogICAgICAgICAgICAgICAgICBiaXRzOiByLmRpc3RiaXRzCiAgICAgICAgICAgICAgICB9LCBQID0gbCgyLCByLmxlbnMsIHIubmxlbiwgci5uZGlzdCwgci5kaXN0Y29kZSwgMCwgci53b3JrLCBHKSwgci5kaXN0Yml0cyA9IEcuYml0cywgUCkgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlcyBzZXQiLCByLm1vZGUgPSB1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyLm1vZGUgPSAyMCwgNiA9PT0gdCkgYnJlYWsgZTsKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgci5tb2RlID0gMjE7CiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIGlmICh5ID49IDYgJiYgYiA+PSAyNTgpIHsKICAgICAgICAgICAgICAgICAgZS5uZXh0X291dCA9IF8sIGUuYXZhaWxfb3V0ID0gYiwgZS5uZXh0X2luID0gdiwgZS5hdmFpbF9pbiA9IHksIHIuaG9sZCA9IHcsIHIuYml0cyA9IHgsIG8oZSwgTSksIF8gPSBlLm5leHRfb3V0LCBnID0gZS5vdXRwdXQsIGIgPSBlLmF2YWlsX291dCwgdiA9IGUubmV4dF9pbiwgcCA9IGUuaW5wdXQsIHkgPSBlLmF2YWlsX2luLCB3ID0gci5ob2xkLCB4ID0gci5iaXRzLCByLm1vZGUgPT09IGMgJiYgKHIuYmFjayA9IC0xKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHIuYmFjayA9IDA7IGsgPSAoVSA9IHIubGVuY29kZVt3ICYgKDEgPDwgci5sZW5iaXRzKSAtIDFdKSA+Pj4gMTYgJiAyNTUsIEkgPSA2NTUzNSAmIFUsICEoKFQgPSBVID4+PiAyNCkgPD0geCk7KSB7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChrICYmIDAgPT0gKDI0MCAmIGspKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoTyA9IFQsIEQgPSBrLCBGID0gSTsgayA9IChVID0gci5sZW5jb2RlW0YgKyAoKHcgJiAoMSA8PCBPICsgRCkgLSAxKSA+PiBPKV0pID4+PiAxNiAmIDI1NSwgSSA9IDY1NTM1ICYgVSwgIShPICsgKFQgPSBVID4+PiAyNCkgPD0geCk7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdyA+Pj49IE8sIHggLT0gTywgci5iYWNrICs9IE87CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodyA+Pj49IFQsIHggLT0gVCwgci5iYWNrICs9IFQsIHIubGVuZ3RoID0gSSwgMCA9PT0gaykgewogICAgICAgICAgICAgICAgICByLm1vZGUgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMzIgJiBrKSB7CiAgICAgICAgICAgICAgICAgIHIuYmFjayA9IC0xLCByLm1vZGUgPSBjOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICg2NCAmIGspIHsKICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLmV4dHJhID0gMTUgJiBrLCByLm1vZGUgPSAyMjsKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgaWYgKHIuZXh0cmEpIHsKICAgICAgICAgICAgICAgICAgZm9yIChCID0gci5leHRyYTsgeCA8IEI7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5sZW5ndGggKz0gdyAmICgxIDw8IHIuZXh0cmEpIC0gMSwgdyA+Pj49IHIuZXh0cmEsIHggLT0gci5leHRyYSwgci5iYWNrICs9IHIuZXh0cmE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLndhcyA9IHIubGVuZ3RoLCByLm1vZGUgPSAyMzsKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgZm9yICg7IGsgPSAoVSA9IHIuZGlzdGNvZGVbdyAmICgxIDw8IHIuZGlzdGJpdHMpIC0gMV0pID4+PiAxNiAmIDI1NSwgSSA9IDY1NTM1ICYgVSwgISgoVCA9IFUgPj4+IDI0KSA8PSB4KTspIHsKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKDAgPT0gKDI0MCAmIGspKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoTyA9IFQsIEQgPSBrLCBGID0gSTsgayA9IChVID0gci5kaXN0Y29kZVtGICsgKCh3ICYgKDEgPDwgTyArIEQpIC0gMSkgPj4gTyldKSA+Pj4gMTYgJiAyNTUsIEkgPSA2NTUzNSAmIFUsICEoTyArIChUID0gVSA+Pj4gMjQpIDw9IHgpOykgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIHktLSwgdyArPSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHcgPj4+PSBPLCB4IC09IE8sIHIuYmFjayArPSBPOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHcgPj4+PSBULCB4IC09IFQsIHIuYmFjayArPSBULCA2NCAmIGspIHsKICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLm9mZnNldCA9IEksIHIuZXh0cmEgPSAxNSAmIGssIHIubW9kZSA9IDI0OwogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgICBpZiAoci5leHRyYSkgewogICAgICAgICAgICAgICAgICBmb3IgKEIgPSByLmV4dHJhOyB4IDwgQjspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0geSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICB5LS0sIHcgKz0gcFt2KytdIDw8IHgsIHggKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByLm9mZnNldCArPSB3ICYgKDEgPDwgci5leHRyYSkgLSAxLCB3ID4+Pj0gci5leHRyYSwgeCAtPSByLmV4dHJhLCByLmJhY2sgKz0gci5leHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyLm9mZnNldCA+IHIuZG1heCkgewogICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIHIubW9kZSA9IHU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgci5tb2RlID0gMjU7CiAgICAgICAgICAgICAgY2FzZSAyNToKICAgICAgICAgICAgICAgIGlmICgwID09PSBiKSBicmVhayBlOwogICAgICAgICAgICAgICAgaWYgKHogPSBNIC0gYiwgci5vZmZzZXQgPiB6KSB7CiAgICAgICAgICAgICAgICAgIGlmICgoeiA9IHIub2Zmc2V0IC0geikgPiByLndoYXZlICYmIHIuc2FuZSkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB6ID4gci53bmV4dCA/ICh6IC09IHIud25leHQsIEwgPSByLndzaXplIC0geikgOiBMID0gci53bmV4dCAtIHosIHogPiByLmxlbmd0aCAmJiAoeiA9IHIubGVuZ3RoKSwgRSA9IHIud2luZG93OwogICAgICAgICAgICAgICAgfSBlbHNlIEUgPSBnLCBMID0gXyAtIHIub2Zmc2V0LCB6ID0gci5sZW5ndGg7CiAgICAgICAgICAgICAgICB6ID4gYiAmJiAoeiA9IGIpLCBiIC09IHosIHIubGVuZ3RoIC09IHo7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIGdbXysrXSA9IEVbTCsrXTsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0teik7CiAgICAgICAgICAgICAgICAwID09PSByLmxlbmd0aCAmJiAoci5tb2RlID0gMjEpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGlmICgwID09PSBiKSBicmVhayBlOwogICAgICAgICAgICAgICAgZ1tfKytdID0gci5sZW5ndGgsIGItLSwgci5tb2RlID0gMjE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgaWYgKHIud3JhcCkgewogICAgICAgICAgICAgICAgICBmb3IgKDsgeCA8IDMyOykgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB5KSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIHktLSwgdyB8PSBwW3YrK10gPDwgeCwgeCArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChNIC09IGIsIGUudG90YWxfb3V0ICs9IE0sIHIudG90YWwgKz0gTSwgTSAmJiAoZS5hZGxlciA9IHIuY2hlY2sgPSByLmZsYWdzID8gbihyLmNoZWNrLCBnLCBNLCBfIC0gTSkgOiBhKHIuY2hlY2ssIGcsIE0sIF8gLSBNKSksIE0gPSBiLCAoci5mbGFncyA/IHcgOiBmKHcpKSAhPT0gci5jaGVjaykgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImluY29ycmVjdCBkYXRhIGNoZWNrIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB3ID0gMCwgeCA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLm1vZGUgPSAyODsKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgICAgaWYgKHIud3JhcCAmJiByLmZsYWdzKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyB4IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgeS0tLCB3ICs9IHBbdisrXSA8PCB4LCB4ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHcgIT09ICg0Mjk0OTY3Mjk1ICYgci50b3RhbCkpIHsKICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrIiwgci5tb2RlID0gdTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB3ID0gMCwgeCA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLm1vZGUgPSAyOTsKICAgICAgICAgICAgICBjYXNlIDI5OgogICAgICAgICAgICAgICAgUCA9IDE7CiAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgIGNhc2UgdToKICAgICAgICAgICAgICAgIFAgPSAtMzsKICAgICAgICAgICAgICAgIGJyZWFrIGU7CiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgIHJldHVybiAtNDsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGUubmV4dF9vdXQgPSBfLCBlLmF2YWlsX291dCA9IGIsIGUubmV4dF9pbiA9IHYsIGUuYXZhaWxfaW4gPSB5LCByLmhvbGQgPSB3LCByLmJpdHMgPSB4LCAoci53c2l6ZSB8fCBNICE9PSBlLmF2YWlsX291dCAmJiByLm1vZGUgPCB1ICYmIChyLm1vZGUgPCAyNyB8fCA0ICE9PSB0KSkgJiYgQyhlLCBlLm91dHB1dCwgZS5uZXh0X291dCwgTSAtIGUuYXZhaWxfb3V0KSA/IChyLm1vZGUgPSAzMSwgLTQpIDogKFMgLT0gZS5hdmFpbF9pbiwgTSAtPSBlLmF2YWlsX291dCwgZS50b3RhbF9pbiArPSBTLCBlLnRvdGFsX291dCArPSBNLCByLnRvdGFsICs9IE0sIHIud3JhcCAmJiBNICYmIChlLmFkbGVyID0gci5jaGVjayA9IHIuZmxhZ3MgPyBuKHIuY2hlY2ssIGcsIE0sIGUubmV4dF9vdXQgLSBNKSA6IGEoci5jaGVjaywgZywgTSwgZS5uZXh0X291dCAtIE0pKSwgZS5kYXRhX3R5cGUgPSByLmJpdHMgKyAoci5sYXN0ID8gNjQgOiAwKSArIChyLm1vZGUgPT09IGMgPyAxMjggOiAwKSArICgyMCA9PT0gci5tb2RlIHx8IDE1ID09PSByLm1vZGUgPyAyNTYgOiAwKSwgKDAgPT09IFMgJiYgMCA9PT0gTSB8fCA0ID09PSB0KSAmJiAwID09PSBQICYmIChQID0gLTUpLCBQKTsKICAgICAgICAgIH0sIHQuaW5mbGF0ZUVuZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmICghZSB8fCAhZS5zdGF0ZSkgcmV0dXJuIGg7CiAgICAgICAgICAgIHZhciB0ID0gZS5zdGF0ZTsKICAgICAgICAgICAgcmV0dXJuIHQud2luZG93ICYmICh0LndpbmRvdyA9IG51bGwpLCBlLnN0YXRlID0gbnVsbCwgMDsKICAgICAgICAgIH0sIHQuaW5mbGF0ZUdldEhlYWRlciA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICByZXR1cm4gZSAmJiBlLnN0YXRlID8gMCA9PSAoMiAmIChyID0gZS5zdGF0ZSkud3JhcCkgPyBoIDogKHIuaGVhZCA9IHQsIHQuZG9uZSA9ICExLCAwKSA6IGg7CiAgICAgICAgICB9LCB0LmluZmxhdGVTZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgcyA9IHQubGVuZ3RoOwogICAgICAgICAgICByZXR1cm4gZSAmJiBlLnN0YXRlID8gMCAhPT0gKHIgPSBlLnN0YXRlKS53cmFwICYmIDExICE9PSByLm1vZGUgPyBoIDogMTEgPT09IHIubW9kZSAmJiBhKDEsIHQsIHMsIDApICE9PSByLmNoZWNrID8gLTMgOiBDKGUsIHQsIHMsIHMpID8gKHIubW9kZSA9IDMxLCAtNCkgOiAoci5oYXZlZGljdCA9IDEsIDApIDogaDsKICAgICAgICAgIH0sIHQuaW5mbGF0ZUluZm8gPSAicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSI7CiAgICAgICAgfSwKICAgICAgICA2MjE1OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICB2YXIgcyA9IHIoNjI5NiksCiAgICAgICAgICAgIGEgPSAxNSwKICAgICAgICAgICAgbiA9IFszLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLCAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF0sCiAgICAgICAgICAgIG8gPSBbMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhdLAogICAgICAgICAgICBsID0gWzEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MywgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LCA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXSwKICAgICAgICAgICAgaCA9IFsxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMiwgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRdOwogICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKGUsIHQsIHIsIGMsIHUsIGYsIHAsIGcpIHsKICAgICAgICAgICAgdmFyIHYsCiAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICB5LAogICAgICAgICAgICAgIGIsCiAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICB4LAogICAgICAgICAgICAgIEEsCiAgICAgICAgICAgICAgQywKICAgICAgICAgICAgICBTLAogICAgICAgICAgICAgIE0gPSBnLmJpdHMsCiAgICAgICAgICAgICAgeiA9IDAsCiAgICAgICAgICAgICAgTCA9IDAsCiAgICAgICAgICAgICAgRSA9IDAsCiAgICAgICAgICAgICAgVCA9IDAsCiAgICAgICAgICAgICAgayA9IDAsCiAgICAgICAgICAgICAgSSA9IDAsCiAgICAgICAgICAgICAgTyA9IDAsCiAgICAgICAgICAgICAgRCA9IDAsCiAgICAgICAgICAgICAgRiA9IDAsCiAgICAgICAgICAgICAgUiA9IDAsCiAgICAgICAgICAgICAgUCA9IG51bGwsCiAgICAgICAgICAgICAgRyA9IDAsCiAgICAgICAgICAgICAgQiA9IG5ldyBzLkJ1ZjE2KDE2KSwKICAgICAgICAgICAgICBVID0gbmV3IHMuQnVmMTYoMTYpLAogICAgICAgICAgICAgIE4gPSBudWxsLAogICAgICAgICAgICAgIFYgPSAwOwogICAgICAgICAgICBmb3IgKHogPSAwOyB6IDw9IGE7IHorKykgQlt6XSA9IDA7CiAgICAgICAgICAgIGZvciAoTCA9IDA7IEwgPCBjOyBMKyspIEJbdFtyICsgTF1dKys7CiAgICAgICAgICAgIGZvciAoayA9IE0sIFQgPSBhOyBUID49IDEgJiYgMCA9PT0gQltUXTsgVC0tKTsKICAgICAgICAgICAgaWYgKGsgPiBUICYmIChrID0gVCksIDAgPT09IFQpIHJldHVybiB1W2YrK10gPSAyMDk3MTUyMCwgdVtmKytdID0gMjA5NzE1MjAsIGcuYml0cyA9IDEsIDA7CiAgICAgICAgICAgIGZvciAoRSA9IDE7IEUgPCBUICYmIDAgPT09IEJbRV07IEUrKyk7CiAgICAgICAgICAgIGZvciAoayA8IEUgJiYgKGsgPSBFKSwgRCA9IDEsIHogPSAxOyB6IDw9IGE7IHorKykgaWYgKEQgPDw9IDEsIChEIC09IEJbel0pIDwgMCkgcmV0dXJuIC0xOwogICAgICAgICAgICBpZiAoRCA+IDAgJiYgKDAgPT09IGUgfHwgMSAhPT0gVCkpIHJldHVybiAtMTsKICAgICAgICAgICAgZm9yIChVWzFdID0gMCwgeiA9IDE7IHogPCBhOyB6KyspIFVbeiArIDFdID0gVVt6XSArIEJbel07CiAgICAgICAgICAgIGZvciAoTCA9IDA7IEwgPCBjOyBMKyspIDAgIT09IHRbciArIExdICYmIChwW1VbdFtyICsgTF1dKytdID0gTCk7CiAgICAgICAgICAgIGlmICgwID09PSBlID8gKFAgPSBOID0gcCwgeCA9IDE5KSA6IDEgPT09IGUgPyAoUCA9IG4sIEcgLT0gMjU3LCBOID0gbywgViAtPSAyNTcsIHggPSAyNTYpIDogKFAgPSBsLCBOID0gaCwgeCA9IC0xKSwgUiA9IDAsIEwgPSAwLCB6ID0gRSwgdyA9IGYsIEkgPSBrLCBPID0gMCwgeSA9IC0xLCBiID0gKEYgPSAxIDw8IGspIC0gMSwgMSA9PT0gZSAmJiBGID4gODUyIHx8IDIgPT09IGUgJiYgRiA+IDU5MikgcmV0dXJuIDE7CiAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICBBID0geiAtIE8sIHBbTF0gPCB4ID8gKEMgPSAwLCBTID0gcFtMXSkgOiBwW0xdID4geCA/IChDID0gTltWICsgcFtMXV0sIFMgPSBQW0cgKyBwW0xdXSkgOiAoQyA9IDk2LCBTID0gMCksIHYgPSAxIDw8IHogLSBPLCBFID0gXyA9IDEgPDwgSTsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICB1W3cgKyAoUiA+PiBPKSArIChfIC09IHYpXSA9IEEgPDwgMjQgfCBDIDw8IDE2IHwgUyB8IDA7CiAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPT0gXyk7CiAgICAgICAgICAgICAgZm9yICh2ID0gMSA8PCB6IC0gMTsgUiAmIHY7KSB2ID4+PSAxOwogICAgICAgICAgICAgIGlmICgwICE9PSB2ID8gKFIgJj0gdiAtIDEsIFIgKz0gdikgOiBSID0gMCwgTCsrLCAwID09IC0tQlt6XSkgewogICAgICAgICAgICAgICAgaWYgKHogPT09IFQpIGJyZWFrOwogICAgICAgICAgICAgICAgeiA9IHRbciArIHBbTF1dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoeiA+IGsgJiYgKFIgJiBiKSAhPT0geSkgewogICAgICAgICAgICAgICAgZm9yICgwID09PSBPICYmIChPID0gayksIHcgKz0gRSwgRCA9IDEgPDwgKEkgPSB6IC0gTyk7IEkgKyBPIDwgVCAmJiAhKChEIC09IEJbSSArIE9dKSA8PSAwKTspIEkrKywgRCA8PD0gMTsKICAgICAgICAgICAgICAgIGlmIChGICs9IDEgPDwgSSwgMSA9PT0gZSAmJiBGID4gODUyIHx8IDIgPT09IGUgJiYgRiA+IDU5MikgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICB1W3kgPSBSICYgYl0gPSBrIDw8IDI0IHwgSSA8PCAxNiB8IHcgLSBmIHwgMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIDAgIT09IFIgJiYgKHVbdyArIFJdID0geiAtIE8gPDwgMjQgfCA2NCA8PCAxNiB8IDApLCBnLmJpdHMgPSBrLCAwOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDU3OTU6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIGUuZXhwb3J0cyA9IHsKICAgICAgICAgICAgMjogIm5lZWQgZGljdGlvbmFyeSIsCiAgICAgICAgICAgIDE6ICJzdHJlYW0gZW5kIiwKICAgICAgICAgICAgMDogIiIsCiAgICAgICAgICAgICItMSI6ICJmaWxlIGVycm9yIiwKICAgICAgICAgICAgIi0yIjogInN0cmVhbSBlcnJvciIsCiAgICAgICAgICAgICItMyI6ICJkYXRhIGVycm9yIiwKICAgICAgICAgICAgIi00IjogImluc3VmZmljaWVudCBtZW1vcnkiLAogICAgICAgICAgICAiLTUiOiAiYnVmZmVyIGVycm9yIiwKICAgICAgICAgICAgIi02IjogImluY29tcGF0aWJsZSB2ZXJzaW9uIgogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDUzMTM6IGZ1bmN0aW9uIF8oZSwgdCwgcikgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIHZhciBzID0gcig2Mjk2KTsKICAgICAgICAgIGZ1bmN0aW9uIGEoZSkgewogICAgICAgICAgICBmb3IgKHZhciB0ID0gZS5sZW5ndGg7IC0tdCA+PSAwOykgZVt0XSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbiA9IDI1NiwKICAgICAgICAgICAgbyA9IDI4NiwKICAgICAgICAgICAgbCA9IDMwLAogICAgICAgICAgICBoID0gMTUsCiAgICAgICAgICAgIGMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMF0sCiAgICAgICAgICAgIHUgPSBbMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNiwgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsIDEyLCAxMiwgMTMsIDEzXSwKICAgICAgICAgICAgZiA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAyLCAzLCA3XSwKICAgICAgICAgICAgcCA9IFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSwKICAgICAgICAgICAgZyA9IG5ldyBBcnJheSg1NzYpOwogICAgICAgICAgYShnKTsKICAgICAgICAgIHZhciB2ID0gbmV3IEFycmF5KDYwKTsKICAgICAgICAgIGEodik7CiAgICAgICAgICB2YXIgXyA9IG5ldyBBcnJheSg1MTIpOwogICAgICAgICAgYShfKTsKICAgICAgICAgIHZhciB5ID0gbmV3IEFycmF5KDI1Nik7CiAgICAgICAgICBhKHkpOwogICAgICAgICAgdmFyIGIgPSBuZXcgQXJyYXkoMjkpOwogICAgICAgICAgYShiKTsKICAgICAgICAgIHZhciB3LAogICAgICAgICAgICB4LAogICAgICAgICAgICBBLAogICAgICAgICAgICBDID0gbmV3IEFycmF5KGwpOwogICAgICAgICAgZnVuY3Rpb24gUyhlLCB0LCByLCBzLCBhKSB7CiAgICAgICAgICAgIHRoaXMuc3RhdGljX3RyZWUgPSBlLCB0aGlzLmV4dHJhX2JpdHMgPSB0LCB0aGlzLmV4dHJhX2Jhc2UgPSByLCB0aGlzLmVsZW1zID0gcywgdGhpcy5tYXhfbGVuZ3RoID0gYSwgdGhpcy5oYXNfc3RyZWUgPSBlICYmIGUubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTShlLCB0KSB7CiAgICAgICAgICAgIHRoaXMuZHluX3RyZWUgPSBlLCB0aGlzLm1heF9jb2RlID0gMCwgdGhpcy5zdGF0X2Rlc2MgPSB0OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geihlKSB7CiAgICAgICAgICAgIHJldHVybiBlIDwgMjU2ID8gX1tlXSA6IF9bMjU2ICsgKGUgPj4+IDcpXTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEwoZSwgdCkgewogICAgICAgICAgICBlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXSA9IDI1NSAmIHQsIGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gdCA+Pj4gOCAmIDI1NTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEUoZSwgdCwgcikgewogICAgICAgICAgICBlLmJpX3ZhbGlkID4gMTYgLSByID8gKGUuYmlfYnVmIHw9IHQgPDwgZS5iaV92YWxpZCAmIDY1NTM1LCBMKGUsIGUuYmlfYnVmKSwgZS5iaV9idWYgPSB0ID4+IDE2IC0gZS5iaV92YWxpZCwgZS5iaV92YWxpZCArPSByIC0gMTYpIDogKGUuYmlfYnVmIHw9IHQgPDwgZS5iaV92YWxpZCAmIDY1NTM1LCBlLmJpX3ZhbGlkICs9IHIpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVChlLCB0LCByKSB7CiAgICAgICAgICAgIEUoZSwgclsyICogdF0sIHJbMiAqIHQgKyAxXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBrKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSAwOwogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgciB8PSAxICYgZSwgZSA+Pj49IDEsIHIgPDw9IDE7CiAgICAgICAgICAgIH0gd2hpbGUgKC0tdCA+IDApOwogICAgICAgICAgICByZXR1cm4gciA+Pj4gMTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEkoZSwgdCwgcikgewogICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgIG4gPSBuZXcgQXJyYXkoMTYpLAogICAgICAgICAgICAgIG8gPSAwOwogICAgICAgICAgICBmb3IgKHMgPSAxOyBzIDw9IGg7IHMrKykgbltzXSA9IG8gPSBvICsgcltzIC0gMV0gPDwgMTsKICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8PSB0OyBhKyspIHsKICAgICAgICAgICAgICB2YXIgbCA9IGVbMiAqIGEgKyAxXTsKICAgICAgICAgICAgICAwICE9PSBsICYmIChlWzIgKiBhXSA9IGsobltsXSsrLCBsKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIE8oZSkgewogICAgICAgICAgICB2YXIgdDsKICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IG87IHQrKykgZS5keW5fbHRyZWVbMiAqIHRdID0gMDsKICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IGw7IHQrKykgZS5keW5fZHRyZWVbMiAqIHRdID0gMDsKICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IDE5OyB0KyspIGUuYmxfdHJlZVsyICogdF0gPSAwOwogICAgICAgICAgICBlLmR5bl9sdHJlZVs1MTJdID0gMSwgZS5vcHRfbGVuID0gZS5zdGF0aWNfbGVuID0gMCwgZS5sYXN0X2xpdCA9IGUubWF0Y2hlcyA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBEKGUpIHsKICAgICAgICAgICAgZS5iaV92YWxpZCA+IDggPyBMKGUsIGUuYmlfYnVmKSA6IGUuYmlfdmFsaWQgPiAwICYmIChlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXSA9IGUuYmlfYnVmKSwgZS5iaV9idWYgPSAwLCBlLmJpX3ZhbGlkID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEYoZSwgdCwgciwgcykgewogICAgICAgICAgICB2YXIgYSA9IDIgKiB0LAogICAgICAgICAgICAgIG4gPSAyICogcjsKICAgICAgICAgICAgcmV0dXJuIGVbYV0gPCBlW25dIHx8IGVbYV0gPT09IGVbbl0gJiYgc1t0XSA8PSBzW3JdOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUihlLCB0LCByKSB7CiAgICAgICAgICAgIGZvciAodmFyIHMgPSBlLmhlYXBbcl0sIGEgPSByIDw8IDE7IGEgPD0gZS5oZWFwX2xlbiAmJiAoYSA8IGUuaGVhcF9sZW4gJiYgRih0LCBlLmhlYXBbYSArIDFdLCBlLmhlYXBbYV0sIGUuZGVwdGgpICYmIGErKywgIUYodCwgcywgZS5oZWFwW2FdLCBlLmRlcHRoKSk7KSBlLmhlYXBbcl0gPSBlLmhlYXBbYV0sIHIgPSBhLCBhIDw8PSAxOwogICAgICAgICAgICBlLmhlYXBbcl0gPSBzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUChlLCB0LCByKSB7CiAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgIGggPSAwOwogICAgICAgICAgICBpZiAoMCAhPT0gZS5sYXN0X2xpdCkgZG8gewogICAgICAgICAgICAgIHMgPSBlLnBlbmRpbmdfYnVmW2UuZF9idWYgKyAyICogaF0gPDwgOCB8IGUucGVuZGluZ19idWZbZS5kX2J1ZiArIDIgKiBoICsgMV0sIGEgPSBlLnBlbmRpbmdfYnVmW2UubF9idWYgKyBoXSwgaCsrLCAwID09PSBzID8gVChlLCBhLCB0KSA6IChUKGUsIChvID0geVthXSkgKyBuICsgMSwgdCksIDAgIT09IChsID0gY1tvXSkgJiYgRShlLCBhIC09IGJbb10sIGwpLCBUKGUsIG8gPSB6KC0tcyksIHIpLCAwICE9PSAobCA9IHVbb10pICYmIEUoZSwgcyAtPSBDW29dLCBsKSk7CiAgICAgICAgICAgIH0gd2hpbGUgKGggPCBlLmxhc3RfbGl0KTsKICAgICAgICAgICAgVChlLCAyNTYsIHQpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRyhlLCB0KSB7CiAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgIHMsCiAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICBuID0gdC5keW5fdHJlZSwKICAgICAgICAgICAgICBvID0gdC5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsCiAgICAgICAgICAgICAgbCA9IHQuc3RhdF9kZXNjLmhhc19zdHJlZSwKICAgICAgICAgICAgICBjID0gdC5zdGF0X2Rlc2MuZWxlbXMsCiAgICAgICAgICAgICAgdSA9IC0xOwogICAgICAgICAgICBmb3IgKGUuaGVhcF9sZW4gPSAwLCBlLmhlYXBfbWF4ID0gNTczLCByID0gMDsgciA8IGM7IHIrKykgMCAhPT0gblsyICogcl0gPyAoZS5oZWFwWysrZS5oZWFwX2xlbl0gPSB1ID0gciwgZS5kZXB0aFtyXSA9IDApIDogblsyICogciArIDFdID0gMDsKICAgICAgICAgICAgZm9yICg7IGUuaGVhcF9sZW4gPCAyOykgblsyICogKGEgPSBlLmhlYXBbKytlLmhlYXBfbGVuXSA9IHUgPCAyID8gKyt1IDogMCldID0gMSwgZS5kZXB0aFthXSA9IDAsIGUub3B0X2xlbi0tLCBsICYmIChlLnN0YXRpY19sZW4gLT0gb1syICogYSArIDFdKTsKICAgICAgICAgICAgZm9yICh0Lm1heF9jb2RlID0gdSwgciA9IGUuaGVhcF9sZW4gPj4gMTsgciA+PSAxOyByLS0pIFIoZSwgbiwgcik7CiAgICAgICAgICAgIGEgPSBjOwogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgciA9IGUuaGVhcFsxXSwgZS5oZWFwWzFdID0gZS5oZWFwW2UuaGVhcF9sZW4tLV0sIFIoZSwgbiwgMSksIHMgPSBlLmhlYXBbMV0sIGUuaGVhcFstLWUuaGVhcF9tYXhdID0gciwgZS5oZWFwWy0tZS5oZWFwX21heF0gPSBzLCBuWzIgKiBhXSA9IG5bMiAqIHJdICsgblsyICogc10sIGUuZGVwdGhbYV0gPSAoZS5kZXB0aFtyXSA+PSBlLmRlcHRoW3NdID8gZS5kZXB0aFtyXSA6IGUuZGVwdGhbc10pICsgMSwgblsyICogciArIDFdID0gblsyICogcyArIDFdID0gYSwgZS5oZWFwWzFdID0gYSsrLCBSKGUsIG4sIDEpOwogICAgICAgICAgICB9IHdoaWxlIChlLmhlYXBfbGVuID49IDIpOwogICAgICAgICAgICBlLmhlYXBbLS1lLmhlYXBfbWF4XSA9IGUuaGVhcFsxXSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgIHMsCiAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgYyA9IHQuZHluX3RyZWUsCiAgICAgICAgICAgICAgICB1ID0gdC5tYXhfY29kZSwKICAgICAgICAgICAgICAgIGYgPSB0LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSwKICAgICAgICAgICAgICAgIHAgPSB0LnN0YXRfZGVzYy5oYXNfc3RyZWUsCiAgICAgICAgICAgICAgICBnID0gdC5zdGF0X2Rlc2MuZXh0cmFfYml0cywKICAgICAgICAgICAgICAgIHYgPSB0LnN0YXRfZGVzYy5leHRyYV9iYXNlLAogICAgICAgICAgICAgICAgXyA9IHQuc3RhdF9kZXNjLm1heF9sZW5ndGgsCiAgICAgICAgICAgICAgICB5ID0gMDsKICAgICAgICAgICAgICBmb3IgKG4gPSAwOyBuIDw9IGg7IG4rKykgZS5ibF9jb3VudFtuXSA9IDA7CiAgICAgICAgICAgICAgZm9yIChjWzIgKiBlLmhlYXBbZS5oZWFwX21heF0gKyAxXSA9IDAsIHIgPSBlLmhlYXBfbWF4ICsgMTsgciA8IDU3MzsgcisrKSAobiA9IGNbMiAqIGNbMiAqIChzID0gZS5oZWFwW3JdKSArIDFdICsgMV0gKyAxKSA+IF8gJiYgKG4gPSBfLCB5KyspLCBjWzIgKiBzICsgMV0gPSBuLCBzID4gdSB8fCAoZS5ibF9jb3VudFtuXSsrLCBvID0gMCwgcyA+PSB2ICYmIChvID0gZ1tzIC0gdl0pLCBsID0gY1syICogc10sIGUub3B0X2xlbiArPSBsICogKG4gKyBvKSwgcCAmJiAoZS5zdGF0aWNfbGVuICs9IGwgKiAoZlsyICogcyArIDFdICsgbykpKTsKICAgICAgICAgICAgICBpZiAoMCAhPT0geSkgewogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBmb3IgKG4gPSBfIC0gMTsgMCA9PT0gZS5ibF9jb3VudFtuXTspIG4tLTsKICAgICAgICAgICAgICAgICAgZS5ibF9jb3VudFtuXS0tLCBlLmJsX2NvdW50W24gKyAxXSArPSAyLCBlLmJsX2NvdW50W19dLS0sIHkgLT0gMjsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKHkgPiAwKTsKICAgICAgICAgICAgICAgIGZvciAobiA9IF87IDAgIT09IG47IG4tLSkgZm9yIChzID0gZS5ibF9jb3VudFtuXTsgMCAhPT0gczspIChhID0gZS5oZWFwWy0tcl0pID4gdSB8fCAoY1syICogYSArIDFdICE9PSBuICYmIChlLm9wdF9sZW4gKz0gKG4gLSBjWzIgKiBhICsgMV0pICogY1syICogYV0sIGNbMiAqIGEgKyAxXSA9IG4pLCBzLS0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfShlLCB0KSwgSShuLCB1LCBlLmJsX2NvdW50KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEIoZSwgdCwgcikgewogICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgIG4gPSAtMSwKICAgICAgICAgICAgICBvID0gdFsxXSwKICAgICAgICAgICAgICBsID0gMCwKICAgICAgICAgICAgICBoID0gNywKICAgICAgICAgICAgICBjID0gNDsKICAgICAgICAgICAgZm9yICgwID09PSBvICYmIChoID0gMTM4LCBjID0gMyksIHRbMiAqIChyICsgMSkgKyAxXSA9IDY1NTM1LCBzID0gMDsgcyA8PSByOyBzKyspIGEgPSBvLCBvID0gdFsyICogKHMgKyAxKSArIDFdLCArK2wgPCBoICYmIGEgPT09IG8gfHwgKGwgPCBjID8gZS5ibF90cmVlWzIgKiBhXSArPSBsIDogMCAhPT0gYSA/IChhICE9PSBuICYmIGUuYmxfdHJlZVsyICogYV0rKywgZS5ibF90cmVlWzMyXSsrKSA6IGwgPD0gMTAgPyBlLmJsX3RyZWVbMzRdKysgOiBlLmJsX3RyZWVbMzZdKyssIGwgPSAwLCBuID0gYSwgMCA9PT0gbyA/IChoID0gMTM4LCBjID0gMykgOiBhID09PSBvID8gKGggPSA2LCBjID0gMykgOiAoaCA9IDcsIGMgPSA0KSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBVKGUsIHQsIHIpIHsKICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICBuID0gLTEsCiAgICAgICAgICAgICAgbyA9IHRbMV0sCiAgICAgICAgICAgICAgbCA9IDAsCiAgICAgICAgICAgICAgaCA9IDcsCiAgICAgICAgICAgICAgYyA9IDQ7CiAgICAgICAgICAgIGZvciAoMCA9PT0gbyAmJiAoaCA9IDEzOCwgYyA9IDMpLCBzID0gMDsgcyA8PSByOyBzKyspIGlmIChhID0gbywgbyA9IHRbMiAqIChzICsgMSkgKyAxXSwgISgrK2wgPCBoICYmIGEgPT09IG8pKSB7CiAgICAgICAgICAgICAgaWYgKGwgPCBjKSBkbyB7CiAgICAgICAgICAgICAgICBUKGUsIGEsIGUuYmxfdHJlZSk7CiAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPSAtLWwpO2Vsc2UgMCAhPT0gYSA/IChhICE9PSBuICYmIChUKGUsIGEsIGUuYmxfdHJlZSksIGwtLSksIFQoZSwgMTYsIGUuYmxfdHJlZSksIEUoZSwgbCAtIDMsIDIpKSA6IGwgPD0gMTAgPyAoVChlLCAxNywgZS5ibF90cmVlKSwgRShlLCBsIC0gMywgMykpIDogKFQoZSwgMTgsIGUuYmxfdHJlZSksIEUoZSwgbCAtIDExLCA3KSk7CiAgICAgICAgICAgICAgbCA9IDAsIG4gPSBhLCAwID09PSBvID8gKGggPSAxMzgsIGMgPSAzKSA6IGEgPT09IG8gPyAoaCA9IDYsIGMgPSAzKSA6IChoID0gNywgYyA9IDQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBhKEMpOwogICAgICAgICAgdmFyIE4gPSAhMTsKICAgICAgICAgIGZ1bmN0aW9uIFYoZSwgdCwgciwgYSkgewogICAgICAgICAgICBFKGUsIDAgKyAoYSA/IDEgOiAwKSwgMyksIGZ1bmN0aW9uIChlLCB0LCByLCBhKSB7CiAgICAgICAgICAgICAgRChlKSwgYSAmJiAoTChlLCByKSwgTChlLCB+cikpLCBzLmFycmF5U2V0KGUucGVuZGluZ19idWYsIGUud2luZG93LCB0LCByLCBlLnBlbmRpbmcpLCBlLnBlbmRpbmcgKz0gcjsKICAgICAgICAgICAgfShlLCB0LCByLCAhMCk7CiAgICAgICAgICB9CiAgICAgICAgICB0Ll90cl9pbml0ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgTiB8fCAoIWZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgZSwKICAgICAgICAgICAgICAgIHQsCiAgICAgICAgICAgICAgICByLAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICBuID0gbmV3IEFycmF5KDE2KTsKICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBzID0gMDsgcyA8IDI4OyBzKyspIGZvciAoYltzXSA9IHIsIGUgPSAwOyBlIDwgMSA8PCBjW3NdOyBlKyspIHlbcisrXSA9IHM7CiAgICAgICAgICAgICAgZm9yICh5W3IgLSAxXSA9IHMsIGEgPSAwLCBzID0gMDsgcyA8IDE2OyBzKyspIGZvciAoQ1tzXSA9IGEsIGUgPSAwOyBlIDwgMSA8PCB1W3NdOyBlKyspIF9bYSsrXSA9IHM7CiAgICAgICAgICAgICAgZm9yIChhID4+PSA3OyBzIDwgbDsgcysrKSBmb3IgKENbc10gPSBhIDw8IDcsIGUgPSAwOyBlIDwgMSA8PCB1W3NdIC0gNzsgZSsrKSBfWzI1NiArIGErK10gPSBzOwogICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPD0gaDsgdCsrKSBuW3RdID0gMDsKICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBlIDw9IDE0MzspIGdbMiAqIGUgKyAxXSA9IDgsIGUrKywgbls4XSsrOwogICAgICAgICAgICAgIGZvciAoOyBlIDw9IDI1NTspIGdbMiAqIGUgKyAxXSA9IDksIGUrKywgbls5XSsrOwogICAgICAgICAgICAgIGZvciAoOyBlIDw9IDI3OTspIGdbMiAqIGUgKyAxXSA9IDcsIGUrKywgbls3XSsrOwogICAgICAgICAgICAgIGZvciAoOyBlIDw9IDI4NzspIGdbMiAqIGUgKyAxXSA9IDgsIGUrKywgbls4XSsrOwogICAgICAgICAgICAgIGZvciAoSShnLCAyODcsIG4pLCBlID0gMDsgZSA8IGw7IGUrKykgdlsyICogZSArIDFdID0gNSwgdlsyICogZV0gPSBrKGUsIDUpOwogICAgICAgICAgICAgIHcgPSBuZXcgUyhnLCBjLCAyNTcsIG8sIGgpLCB4ID0gbmV3IFModiwgdSwgMCwgbCwgaCksIEEgPSBuZXcgUyhuZXcgQXJyYXkoMCksIGYsIDAsIDE5LCA3KTsKICAgICAgICAgICAgfSgpLCBOID0gITApLCBlLmxfZGVzYyA9IG5ldyBNKGUuZHluX2x0cmVlLCB3KSwgZS5kX2Rlc2MgPSBuZXcgTShlLmR5bl9kdHJlZSwgeCksIGUuYmxfZGVzYyA9IG5ldyBNKGUuYmxfdHJlZSwgQSksIGUuYmlfYnVmID0gMCwgZS5iaV92YWxpZCA9IDAsIE8oZSk7CiAgICAgICAgICB9LCB0Ll90cl9zdG9yZWRfYmxvY2sgPSBWLCB0Ll90cl9mbHVzaF9ibG9jayA9IGZ1bmN0aW9uIChlLCB0LCByLCBzKSB7CiAgICAgICAgICAgIHZhciBhLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgbCA9IDA7CiAgICAgICAgICAgIGUubGV2ZWwgPiAwID8gKDIgPT09IGUuc3RybS5kYXRhX3R5cGUgJiYgKGUuc3RybS5kYXRhX3R5cGUgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgciA9IDQwOTM2MjQ0NDc7CiAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8PSAzMTsgdCsrLCByID4+Pj0gMSkgaWYgKDEgJiByICYmIDAgIT09IGUuZHluX2x0cmVlWzIgKiB0XSkgcmV0dXJuIDA7CiAgICAgICAgICAgICAgaWYgKDAgIT09IGUuZHluX2x0cmVlWzE4XSB8fCAwICE9PSBlLmR5bl9sdHJlZVsyMF0gfHwgMCAhPT0gZS5keW5fbHRyZWVbMjZdKSByZXR1cm4gMTsKICAgICAgICAgICAgICBmb3IgKHQgPSAzMjsgdCA8IG47IHQrKykgaWYgKDAgIT09IGUuZHluX2x0cmVlWzIgKiB0XSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0oZSkpLCBHKGUsIGUubF9kZXNjKSwgRyhlLCBlLmRfZGVzYyksIGwgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHZhciB0OwogICAgICAgICAgICAgIGZvciAoQihlLCBlLmR5bl9sdHJlZSwgZS5sX2Rlc2MubWF4X2NvZGUpLCBCKGUsIGUuZHluX2R0cmVlLCBlLmRfZGVzYy5tYXhfY29kZSksIEcoZSwgZS5ibF9kZXNjKSwgdCA9IDE4OyB0ID49IDMgJiYgMCA9PT0gZS5ibF90cmVlWzIgKiBwW3RdICsgMV07IHQtLSk7CiAgICAgICAgICAgICAgcmV0dXJuIGUub3B0X2xlbiArPSAzICogKHQgKyAxKSArIDUgKyA1ICsgNCwgdDsKICAgICAgICAgICAgfShlKSwgYSA9IGUub3B0X2xlbiArIDMgKyA3ID4+PiAzLCAobyA9IGUuc3RhdGljX2xlbiArIDMgKyA3ID4+PiAzKSA8PSBhICYmIChhID0gbykpIDogYSA9IG8gPSByICsgNSwgciArIDQgPD0gYSAmJiAtMSAhPT0gdCA/IFYoZSwgdCwgciwgcykgOiA0ID09PSBlLnN0cmF0ZWd5IHx8IG8gPT09IGEgPyAoRShlLCAyICsgKHMgPyAxIDogMCksIDMpLCBQKGUsIGcsIHYpKSA6IChFKGUsIDQgKyAocyA/IDEgOiAwKSwgMyksIGZ1bmN0aW9uIChlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgZm9yIChFKGUsIHQgLSAyNTcsIDUpLCBFKGUsIHIgLSAxLCA1KSwgRShlLCBzIC0gNCwgNCksIGEgPSAwOyBhIDwgczsgYSsrKSBFKGUsIGUuYmxfdHJlZVsyICogcFthXSArIDFdLCAzKTsKICAgICAgICAgICAgICBVKGUsIGUuZHluX2x0cmVlLCB0IC0gMSksIFUoZSwgZS5keW5fZHRyZWUsIHIgLSAxKTsKICAgICAgICAgICAgfShlLCBlLmxfZGVzYy5tYXhfY29kZSArIDEsIGUuZF9kZXNjLm1heF9jb2RlICsgMSwgbCArIDEpLCBQKGUsIGUuZHluX2x0cmVlLCBlLmR5bl9kdHJlZSkpLCBPKGUpLCBzICYmIEQoZSk7CiAgICAgICAgICB9LCB0Ll90cl90YWxseSA9IGZ1bmN0aW9uIChlLCB0LCByKSB7CiAgICAgICAgICAgIHJldHVybiBlLnBlbmRpbmdfYnVmW2UuZF9idWYgKyAyICogZS5sYXN0X2xpdF0gPSB0ID4+PiA4ICYgMjU1LCBlLnBlbmRpbmdfYnVmW2UuZF9idWYgKyAyICogZS5sYXN0X2xpdCArIDFdID0gMjU1ICYgdCwgZS5wZW5kaW5nX2J1ZltlLmxfYnVmICsgZS5sYXN0X2xpdF0gPSAyNTUgJiByLCBlLmxhc3RfbGl0KyssIDAgPT09IHQgPyBlLmR5bl9sdHJlZVsyICogcl0rKyA6IChlLm1hdGNoZXMrKywgdC0tLCBlLmR5bl9sdHJlZVsyICogKHlbcl0gKyBuICsgMSldKyssIGUuZHluX2R0cmVlWzIgKiB6KHQpXSsrKSwgZS5sYXN0X2xpdCA9PT0gZS5saXRfYnVmc2l6ZSAtIDE7CiAgICAgICAgICB9LCB0Ll90cl9hbGlnbiA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIEUoZSwgMiwgMyksIFQoZSwgMjU2LCBnKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAxNiA9PT0gZS5iaV92YWxpZCA/IChMKGUsIGUuYmlfYnVmKSwgZS5iaV9idWYgPSAwLCBlLmJpX3ZhbGlkID0gMCkgOiBlLmJpX3ZhbGlkID49IDggJiYgKGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gMjU1ICYgZS5iaV9idWYsIGUuYmlfYnVmID4+PSA4LCBlLmJpX3ZhbGlkIC09IDgpOwogICAgICAgICAgICB9KGUpOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDY4NjY6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgInVzZSBzdHJpY3QiOwoKICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5pbnB1dCA9IG51bGwsIHRoaXMubmV4dF9pbiA9IDAsIHRoaXMuYXZhaWxfaW4gPSAwLCB0aGlzLnRvdGFsX2luID0gMCwgdGhpcy5vdXRwdXQgPSBudWxsLCB0aGlzLm5leHRfb3V0ID0gMCwgdGhpcy5hdmFpbF9vdXQgPSAwLCB0aGlzLnRvdGFsX291dCA9IDAsIHRoaXMubXNnID0gIiIsIHRoaXMuc3RhdGUgPSBudWxsLCB0aGlzLmRhdGFfdHlwZSA9IDIsIHRoaXMuYWRsZXIgPSAwOwogICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDc4ODI6IGZ1bmN0aW9uIF8oKSB7CiAgICAgICAgICAkM0Rtb2wud29ya2VyU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBlLmRhdGEsCiAgICAgICAgICAgICAgICByID0gdC50eXBlOwogICAgICAgICAgICAgIGlmIChyIDwgMCkgc2VsZi5hdG9tRGF0YSA9IHQuYXRvbXMsIHNlbGYudm9sdW1lID0gdC52b2x1bWUsIHNlbGYucHMgPSBuZXcgUHJvdGVpblN1cmZhY2UoKTtlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBzID0gc2VsZi5wczsKICAgICAgICAgICAgICAgIHMuaW5pdHBhcm0odC5leHBhbmRlZEV4dGVudCwgMSAhPSByLCBzZWxmLnZvbHVtZSksIHMuZmlsbHZveGVscyhzZWxmLmF0b21EYXRhLCB0LmV4dGVuZGVkQXRvbXMpLCBzLmJ1aWxkYm91bmRhcnkoKSwgNCAhPT0gciAmJiAyICE9PSByIHx8IChzLmZhc3RkaXN0YW5jZW1hcCgpLCBzLmJvdW5kaW5nYXRvbSghMSksIHMuZmlsbHZveGVsc3dhYWxzKHNlbGYuYXRvbURhdGEsIHQuZXh0ZW5kZWRBdG9tcykpLCBzLm1hcmNoaW5nY3ViZShyKTsKICAgICAgICAgICAgICAgIHZhciBhID0gcy5nZXRGYWNlc0FuZFZlcnRpY2VzKHQuYXRvbXNUb1Nob3cpOwogICAgICAgICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZShhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9LnRvU3RyaW5nKCkucmVwbGFjZSgvKF4uKj9ce3xcfSQpL2csICIiKSwgJDNEbW9sLndvcmtlclN0cmluZyArPSAiO1xuIiArICQzRG1vbC5WZWN0b3IzLnRvU3RyaW5nKCksICQzRG1vbC53b3JrZXJTdHJpbmcgKz0gIjtcbiIgKyAkM0Rtb2wuTWFyY2hpbmdDdWJlSW5pdGlhbGl6ZXIudG9TdHJpbmcoKSArICI7XG52YXIgTWFyY2hpbmdDdWJlID0gbmV3IE1hcmNoaW5nQ3ViZUluaXRpYWxpemVyKCk7IiwgJDNEbW9sLndvcmtlclN0cmluZyArPSAiO1xuIiArICQzRG1vbC5Qb2ludEdyaWQudG9TdHJpbmcoKSArICI7XG4iLCAkM0Rtb2wud29ya2VyU3RyaW5nICs9ICI7XG4iICsgJDNEbW9sLlByb3RlaW5TdXJmYWNlLnRvU3RyaW5nKCkgKyAiO1xuIiwgJDNEbW9sLndvcmtlclN0cmluZyA9ICQzRG1vbC53b3JrZXJTdHJpbmcucmVwbGFjZSgvW2EtekEtWl8kXXsxfVswLTlhLXpBLVpfJF0qV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfWzAtOV1fX1wuL2csICIiKSwgJDNEbW9sLlN1cmZhY2VXb3JrZXIgPSB3aW5kb3cuVVJMID8gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoWyQzRG1vbC53b3JrZXJTdHJpbmddLCB7CiAgICAgICAgICAgIHR5cGU6ICJ0ZXh0L2phdmFzY3JpcHQiCiAgICAgICAgICB9KSkgOiB2b2lkIDA7CiAgICAgICAgfSwKICAgICAgICA2Mjc5OiBmdW5jdGlvbiBfKGUpIHsKICAgICAgICAgICJvYmplY3QiID09IF90eXBlb2YoZS5leHBvcnRzKSAmJiAoZS5leHBvcnRzID0gd2luZG93LiQzRG1vbCk7CiAgICAgICAgfSwKICAgICAgICA3NDIwOiBmdW5jdGlvbiBfKGUsIHQpIHsKICAgICAgICAgICFmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgICBmdW5jdGlvbiB0KGUsIHQsIHIpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBzID0gKGUuYnl0ZUxlbmd0aCwgMCksIGEgPSByLmxlbmd0aDsgYSA+IHM7IHMrKykgewogICAgICAgICAgICAgICAgdmFyIG4gPSByLmNoYXJDb2RlQXQocyk7CiAgICAgICAgICAgICAgICBpZiAoMTI4ID4gbikgZS5zZXRVaW50OCh0KyssIG4gPj4+IDAgJiAxMjcgfCAwKTtlbHNlIGlmICgyMDQ4ID4gbikgZS5zZXRVaW50OCh0KyssIG4gPj4+IDYgJiAzMSB8IDE5MiksIGUuc2V0VWludDgodCsrLCBuID4+PiAwICYgNjMgfCAxMjgpO2Vsc2UgaWYgKDY1NTM2ID4gbikgZS5zZXRVaW50OCh0KyssIG4gPj4+IDEyICYgMTUgfCAyMjQpLCBlLnNldFVpbnQ4KHQrKywgbiA+Pj4gNiAmIDYzIHwgMTI4KSwgZS5zZXRVaW50OCh0KyssIG4gPj4+IDAgJiA2MyB8IDEyOCk7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIGlmICghKDExMTQxMTIgPiBuKSkgdGhyb3cgbmV3IEVycm9yKCJiYWQgY29kZXBvaW50ICIgKyBuKTsKICAgICAgICAgICAgICAgICAgZS5zZXRVaW50OCh0KyssIG4gPj4+IDE4ICYgNyB8IDI0MCksIGUuc2V0VWludDgodCsrLCBuID4+PiAxMiAmIDYzIHwgMTI4KSwgZS5zZXRVaW50OCh0KyssIG4gPj4+IDYgJiA2MyB8IDEyOCksIGUuc2V0VWludDgodCsrLCBuID4+PiAwICYgNjMgfCAxMjgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gMCwgciA9IDAsIHMgPSBlLmxlbmd0aDsgcyA+IHI7IHIrKykgewogICAgICAgICAgICAgICAgdmFyIGEgPSBlLmNoYXJDb2RlQXQocik7CiAgICAgICAgICAgICAgICBpZiAoMTI4ID4gYSkgdCArPSAxO2Vsc2UgaWYgKDIwNDggPiBhKSB0ICs9IDI7ZWxzZSBpZiAoNjU1MzYgPiBhKSB0ICs9IDM7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIGlmICghKDExMTQxMTIgPiBhKSkgdGhyb3cgbmV3IEVycm9yKCJiYWQgY29kZXBvaW50ICIgKyBhKTsKICAgICAgICAgICAgICAgICAgdCArPSA0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzKGUsIGEsIG4pIHsKICAgICAgICAgICAgICB2YXIgbyA9IF90eXBlb2YoZSk7CiAgICAgICAgICAgICAgaWYgKCJzdHJpbmciID09PSBvKSB7CiAgICAgICAgICAgICAgICBpZiAoMzIgPiAobCA9IHIoZSkpKSByZXR1cm4gYS5zZXRVaW50OChuLCAxNjAgfCBsKSwgdChhLCBuICsgMSwgZSksIDEgKyBsOwogICAgICAgICAgICAgICAgaWYgKDI1NiA+IGwpIHJldHVybiBhLnNldFVpbnQ4KG4sIDIxNyksIGEuc2V0VWludDgobiArIDEsIGwpLCB0KGEsIG4gKyAyLCBlKSwgMiArIGw7CiAgICAgICAgICAgICAgICBpZiAoNjU1MzYgPiBsKSByZXR1cm4gYS5zZXRVaW50OChuLCAyMTgpLCBhLnNldFVpbnQxNihuICsgMSwgbCksIHQoYSwgbiArIDMsIGUpLCAzICsgbDsKICAgICAgICAgICAgICAgIGlmICg0Mjk0OTY3Mjk2ID4gbCkgcmV0dXJuIGEuc2V0VWludDgobiwgMjE5KSwgYS5zZXRVaW50MzIobiArIDEsIGwpLCB0KGEsIG4gKyA1LCBlKSwgNSArIGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgICAgICAgICAgICAgdmFyIGwgPSBlLmJ5dGVMZW5ndGgsCiAgICAgICAgICAgICAgICAgIGggPSBuZXcgVWludDhBcnJheShhLmJ1ZmZlcik7CiAgICAgICAgICAgICAgICBpZiAoMjU2ID4gbCkgcmV0dXJuIGEuc2V0VWludDgobiwgMTk2KSwgYS5zZXRVaW50OChuICsgMSwgbCksIGguc2V0KGUsIG4gKyAyKSwgMiArIGw7CiAgICAgICAgICAgICAgICBpZiAoNjU1MzYgPiBsKSByZXR1cm4gYS5zZXRVaW50OChuLCAxOTcpLCBhLnNldFVpbnQxNihuICsgMSwgbCksIGguc2V0KGUsIG4gKyAzKSwgMyArIGw7CiAgICAgICAgICAgICAgICBpZiAoNDI5NDk2NzI5NiA+IGwpIHJldHVybiBhLnNldFVpbnQ4KG4sIDE5OCksIGEuc2V0VWludDMyKG4gKyAxLCBsKSwgaC5zZXQoZSwgbiArIDUpLCA1ICsgbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCJudW1iZXIiID09PSBvKSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGUpKSB0aHJvdyBuZXcgRXJyb3IoIk51bWJlciBub3QgZmluaXRlOiAiICsgZSk7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihlKSAhPT0gZSkgcmV0dXJuIGEuc2V0VWludDgobiwgMjAzKSwgYS5zZXRGbG9hdDY0KG4gKyAxLCBlKSwgOTsKICAgICAgICAgICAgICAgIGlmIChlID49IDApIHsKICAgICAgICAgICAgICAgICAgaWYgKDEyOCA+IGUpIHJldHVybiBhLnNldFVpbnQ4KG4sIGUpLCAxOwogICAgICAgICAgICAgICAgICBpZiAoMjU2ID4gZSkgcmV0dXJuIGEuc2V0VWludDgobiwgMjA0KSwgYS5zZXRVaW50OChuICsgMSwgZSksIDI7CiAgICAgICAgICAgICAgICAgIGlmICg2NTUzNiA+IGUpIHJldHVybiBhLnNldFVpbnQ4KG4sIDIwNSksIGEuc2V0VWludDE2KG4gKyAxLCBlKSwgMzsKICAgICAgICAgICAgICAgICAgaWYgKDQyOTQ5NjcyOTYgPiBlKSByZXR1cm4gYS5zZXRVaW50OChuLCAyMDYpLCBhLnNldFVpbnQzMihuICsgMSwgZSksIDU7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTnVtYmVyIHRvbyBiaWcgMHgiICsgZS50b1N0cmluZygxNikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGUgPj0gLTMyKSByZXR1cm4gYS5zZXRJbnQ4KG4sIGUpLCAxOwogICAgICAgICAgICAgICAgaWYgKGUgPj0gLTEyOCkgcmV0dXJuIGEuc2V0VWludDgobiwgMjA4KSwgYS5zZXRJbnQ4KG4gKyAxLCBlKSwgMjsKICAgICAgICAgICAgICAgIGlmIChlID49IC0zMjc2OCkgcmV0dXJuIGEuc2V0VWludDgobiwgMjA5KSwgYS5zZXRJbnQxNihuICsgMSwgZSksIDM7CiAgICAgICAgICAgICAgICBpZiAoZSA+PSAtMjE0NzQ4MzY0OCkgcmV0dXJuIGEuc2V0VWludDgobiwgMjEwKSwgYS5zZXRJbnQzMihuICsgMSwgZSksIDU7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk51bWJlciB0b28gc21hbGwgLTB4IiArICgtZSkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChudWxsID09PSBlKSByZXR1cm4gYS5zZXRVaW50OChuLCAxOTIpLCAxOwogICAgICAgICAgICAgIGlmICgiYm9vbGVhbiIgPT09IG8pIHJldHVybiBhLnNldFVpbnQ4KG4sIGUgPyAxOTUgOiAxOTQpLCAxOwogICAgICAgICAgICAgIGlmICgib2JqZWN0IiA9PT0gbykgewogICAgICAgICAgICAgICAgdmFyIGMgPSAwLAogICAgICAgICAgICAgICAgICB1ID0gQXJyYXkuaXNBcnJheShlKTsKICAgICAgICAgICAgICAgIGlmICh1KSBsID0gZS5sZW5ndGg7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBmID0gT2JqZWN0LmtleXMoZSk7CiAgICAgICAgICAgICAgICAgIGwgPSBmLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgxNiA+IGwgPyAoYS5zZXRVaW50OChuLCBsIHwgKHUgPyAxNDQgOiAxMjgpKSwgYyA9IDEpIDogNjU1MzYgPiBsID8gKGEuc2V0VWludDgobiwgdSA/IDIyMCA6IDIyMiksIGEuc2V0VWludDE2KG4gKyAxLCBsKSwgYyA9IDMpIDogNDI5NDk2NzI5NiA+IGwgJiYgKGEuc2V0VWludDgobiwgdSA/IDIyMSA6IDIyMyksIGEuc2V0VWludDMyKG4gKyAxLCBsKSwgYyA9IDUpLCB1KSBmb3IgKHZhciBwID0gMDsgbCA+IHA7IHArKykgYyArPSBzKGVbcF0sIGEsIG4gKyBjKTtlbHNlIGZvciAocCA9IDA7IGwgPiBwOyBwKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIGcgPSBmW3BdOwogICAgICAgICAgICAgICAgICBjICs9IHMoZywgYSwgbiArIGMpLCBjICs9IHMoZVtnXSwgYSwgbiArIGMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biB0eXBlICIgKyBvKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgICAgICAgICB2YXIgdCA9IF90eXBlb2YoZSk7CiAgICAgICAgICAgICAgaWYgKCJzdHJpbmciID09PSB0KSB7CiAgICAgICAgICAgICAgICBpZiAoMzIgPiAocyA9IHIoZSkpKSByZXR1cm4gMSArIHM7CiAgICAgICAgICAgICAgICBpZiAoMjU2ID4gcykgcmV0dXJuIDIgKyBzOwogICAgICAgICAgICAgICAgaWYgKDY1NTM2ID4gcykgcmV0dXJuIDMgKyBzOwogICAgICAgICAgICAgICAgaWYgKDQyOTQ5NjcyOTYgPiBzKSByZXR1cm4gNSArIHM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgICAgICAgICAgICAgaWYgKDI1NiA+IChzID0gZS5ieXRlTGVuZ3RoKSkgcmV0dXJuIDIgKyBzOwogICAgICAgICAgICAgICAgaWYgKDY1NTM2ID4gcykgcmV0dXJuIDMgKyBzOwogICAgICAgICAgICAgICAgaWYgKDQyOTQ5NjcyOTYgPiBzKSByZXR1cm4gNSArIHM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICgibnVtYmVyIiA9PT0gdCkgewogICAgICAgICAgICAgICAgaWYgKE1hdGguZmxvb3IoZSkgIT09IGUpIHJldHVybiA5OwogICAgICAgICAgICAgICAgaWYgKGUgPj0gMCkgewogICAgICAgICAgICAgICAgICBpZiAoMTI4ID4gZSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgIGlmICgyNTYgPiBlKSByZXR1cm4gMjsKICAgICAgICAgICAgICAgICAgaWYgKDY1NTM2ID4gZSkgcmV0dXJuIDM7CiAgICAgICAgICAgICAgICAgIGlmICg0Mjk0OTY3Mjk2ID4gZSkgcmV0dXJuIDU7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTnVtYmVyIHRvbyBiaWcgMHgiICsgZS50b1N0cmluZygxNikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGUgPj0gLTMyKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgIGlmIChlID49IC0xMjgpIHJldHVybiAyOwogICAgICAgICAgICAgICAgaWYgKGUgPj0gLTMyNzY4KSByZXR1cm4gMzsKICAgICAgICAgICAgICAgIGlmIChlID49IC0yMTQ3NDgzNjQ4KSByZXR1cm4gNTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTnVtYmVyIHRvbyBzbWFsbCAtMHgiICsgZS50b1N0cmluZygxNikuc3Vic3RyKDEpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCJib29sZWFuIiA9PT0gdCB8fCBudWxsID09PSBlKSByZXR1cm4gMTsKICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgPT09IHQpIHsKICAgICAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgICAgICBuID0gMDsKICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7CiAgICAgICAgICAgICAgICAgIHMgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IDA7IHMgPiBvOyBvKyspIG4gKz0gYShlW29dKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBsID0gT2JqZWN0LmtleXMoZSk7CiAgICAgICAgICAgICAgICAgIGZvciAocyA9IGwubGVuZ3RoLCBvID0gMDsgcyA+IG87IG8rKykgewogICAgICAgICAgICAgICAgICAgIHZhciBoID0gbFtvXTsKICAgICAgICAgICAgICAgICAgICBuICs9IGEoaCkgKyBhKGVbaF0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMTYgPiBzKSByZXR1cm4gMSArIG47CiAgICAgICAgICAgICAgICBpZiAoNjU1MzYgPiBzKSByZXR1cm4gMyArIG47CiAgICAgICAgICAgICAgICBpZiAoNDI5NDk2NzI5NiA+IHMpIHJldHVybiA1ICsgbjsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQXJyYXkgb3Igb2JqZWN0IHRvbyBsb25nIDB4IiArIHMudG9TdHJpbmcoMTYpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIHR5cGUgIiArIHQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICAgICAgICAgIHZhciB0ID0gbmV3IEFycmF5QnVmZmVyKGEoZSkpOwogICAgICAgICAgICAgIHJldHVybiBzKGUsIG5ldyBEYXRhVmlldyh0KSwgMCksIG5ldyBVaW50OEFycmF5KHQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIG8oZSwgdCwgcikgewogICAgICAgICAgICAgIHJldHVybiB0ID8gbmV3IGUodC5idWZmZXIsIHQuYnl0ZU9mZnNldCwgdC5ieXRlTGVuZ3RoIC8gKHIgfHwgMSkpIDogdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGwoZSkgewogICAgICAgICAgICAgIHJldHVybiBvKERhdGFWaWV3LCBlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBoKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gbyhVaW50OEFycmF5LCBlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBjKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gbyhJbnQ4QXJyYXksIGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHUoZSkgewogICAgICAgICAgICAgIHJldHVybiBvKEludDMyQXJyYXksIGUsIDQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGYoZSkgewogICAgICAgICAgICAgIHJldHVybiBvKEZsb2F0MzJBcnJheSwgZSwgNCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBlLmxlbmd0aCAvIDI7CiAgICAgICAgICAgICAgdCB8fCAodCA9IG5ldyBJbnQxNkFycmF5KHIpKTsKICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMCwgYSA9IDA7IHIgPiBzOyArK3MsIGEgKz0gMikgdFtzXSA9IGVbYV0gPDwgOCBeIGVbYSArIDFdIDw8IDA7CiAgICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZyhlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICB0IHx8ICh0ID0gbmV3IFVpbnQ4QXJyYXkoMiAqIHIpKTsKICAgICAgICAgICAgICBmb3IgKHZhciBzID0gbCh0KSwgYSA9IDA7IHIgPiBhOyArK2EpIHMuc2V0SW50MTYoMiAqIGEsIGVbYV0pOwogICAgICAgICAgICAgIHJldHVybiBoKHQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHYoZSwgdCkgewogICAgICAgICAgICAgIHZhciByID0gZS5sZW5ndGggLyA0OwogICAgICAgICAgICAgIHQgfHwgKHQgPSBuZXcgSW50MzJBcnJheShyKSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDAsIGEgPSAwOyByID4gczsgKytzLCBhICs9IDQpIHRbc10gPSBlW2FdIDw8IDI0IF4gZVthICsgMV0gPDwgMTYgXiBlW2EgKyAyXSA8PCA4IF4gZVthICsgM10gPDwgMDsKICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBfKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciA9IGUubGVuZ3RoOwogICAgICAgICAgICAgIHQgfHwgKHQgPSBuZXcgVWludDhBcnJheSg0ICogcikpOwogICAgICAgICAgICAgIGZvciAodmFyIHMgPSBsKHQpLCBhID0gMDsgciA+IGE7ICsrYSkgcy5zZXRJbnQzMig0ICogYSwgZVthXSk7CiAgICAgICAgICAgICAgcmV0dXJuIGgodCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24geShlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICB0IHx8ICh0ID0gbmV3IEZsb2F0MzJBcnJheShyIC8gNCkpOwogICAgICAgICAgICAgIGZvciAodmFyIHMgPSBsKHQpLCBhID0gbChlKSwgbiA9IDAsIG8gPSAwLCBoID0gciAvIDQ7IGggPiBuOyArK24sIG8gKz0gNCkgcy5zZXRGbG9hdDMyKG8sIGEuZ2V0RmxvYXQzMihvKSwgITApOwogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGIoZSwgdCwgcikgewogICAgICAgICAgICAgIHZhciBzID0gZS5sZW5ndGgsCiAgICAgICAgICAgICAgICBhID0gMSAvIHQ7CiAgICAgICAgICAgICAgciB8fCAociA9IG5ldyBGbG9hdDMyQXJyYXkocykpOwogICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBzID4gbjsgKytuKSByW25dID0gZVtuXSAqIGE7CiAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdyhlLCB0LCByKSB7CiAgICAgICAgICAgICAgdmFyIHMgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICByIHx8IChyID0gbmV3IEludDMyQXJyYXkocykpOwogICAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBzID4gYTsgKythKSByW2FdID0gTWF0aC5yb3VuZChlW2FdICogdCk7CiAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24geChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIsIHM7CiAgICAgICAgICAgICAgaWYgKCF0KSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBzID0gZS5sZW5ndGg7IHMgPiByOyByICs9IDIpIGEgKz0gZVtyICsgMV07CiAgICAgICAgICAgICAgICB0ID0gbmV3IGUuY29uc3RydWN0b3IoYSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBuID0gMDsKICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBzID0gZS5sZW5ndGg7IHMgPiByOyByICs9IDIpIGZvciAodmFyIG8gPSBlW3JdLCBsID0gZVtyICsgMV0sIGggPSAwOyBsID4gaDsgKytoKSB0W25dID0gbywgKytuOwogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIEEoZSkgewogICAgICAgICAgICAgIGlmICgwID09PSBlLmxlbmd0aCkgcmV0dXJuIG5ldyBJbnQzMkFycmF5KCk7CiAgICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICByLAogICAgICAgICAgICAgICAgcyA9IDI7CiAgICAgICAgICAgICAgZm9yICh0ID0gMSwgciA9IGUubGVuZ3RoOyByID4gdDsgKyt0KSBlW3QgLSAxXSAhPT0gZVt0XSAmJiAocyArPSAyKTsKICAgICAgICAgICAgICB2YXIgYSA9IG5ldyBJbnQzMkFycmF5KHMpLAogICAgICAgICAgICAgICAgbiA9IDAsCiAgICAgICAgICAgICAgICBvID0gMTsKICAgICAgICAgICAgICBmb3IgKHQgPSAxLCByID0gZS5sZW5ndGg7IHIgPiB0OyArK3QpIGVbdCAtIDFdICE9PSBlW3RdID8gKGFbbl0gPSBlW3QgLSAxXSwgYVtuICsgMV0gPSBvLCBvID0gMSwgbiArPSAyKSA6ICsrbzsKICAgICAgICAgICAgICByZXR1cm4gYVtuXSA9IGVbZS5sZW5ndGggLSAxXSwgYVtuICsgMV0gPSBvLCBhOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIEMoZSwgdCkgewogICAgICAgICAgICAgIHZhciByID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgdCB8fCAodCA9IG5ldyBlLmNvbnN0cnVjdG9yKHIpKSwgciAmJiAodFswXSA9IGVbMF0pOwogICAgICAgICAgICAgIGZvciAodmFyIHMgPSAxOyByID4gczsgKytzKSB0W3NdID0gZVtzXSArIHRbcyAtIDFdOwogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIFMoZSwgdCkgewogICAgICAgICAgICAgIHZhciByID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgdCB8fCAodCA9IG5ldyBlLmNvbnN0cnVjdG9yKHIpKSwgdFswXSA9IGVbMF07CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDE7IHIgPiBzOyArK3MpIHRbc10gPSBlW3NdIC0gZVtzIC0gMV07CiAgICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gTShlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgICAgYSA9IGUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgPyAxMjcgOiAzMjc2NywKICAgICAgICAgICAgICAgIG4gPSAtYSAtIDEsCiAgICAgICAgICAgICAgICBvID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgaWYgKCF0KSB7CiAgICAgICAgICAgICAgICB2YXIgbCA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKHIgPSAwOyBvID4gcjsgKytyKSBlW3JdIDwgYSAmJiBlW3JdID4gbiAmJiArK2w7CiAgICAgICAgICAgICAgICB0ID0gbmV3IEludDMyQXJyYXkobCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAociA9IDAsIHMgPSAwOyBvID4gcjspIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBlW3JdID09PSBhIHx8IGVbcl0gPT09IG47KSBoICs9IGVbcl0sICsrcjsKICAgICAgICAgICAgICAgIGggKz0gZVtyXSwgKytyLCB0W3NdID0gaCwgKytzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB6KGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgIHMgPSB0ID8gMTI3IDogMzI3NjcsCiAgICAgICAgICAgICAgICBhID0gLXMgLSAxLAogICAgICAgICAgICAgICAgbiA9IGUubGVuZ3RoLAogICAgICAgICAgICAgICAgbyA9IDA7CiAgICAgICAgICAgICAgZm9yIChyID0gMDsgbiA+IHI7ICsrcikgMCA9PT0gKGMgPSBlW3JdKSA/ICsrbyA6IGMgPiAwID8gKG8gKz0gTWF0aC5jZWlsKGMgLyBzKSwgYyAlIHMgPT0gMCAmJiAobyArPSAxKSkgOiAobyArPSBNYXRoLmNlaWwoYyAvIGEpLCBjICUgYSA9PSAwICYmIChvICs9IDEpKTsKICAgICAgICAgICAgICB2YXIgbCA9IHQgPyBuZXcgSW50OEFycmF5KG8pIDogbmV3IEludDE2QXJyYXkobyksCiAgICAgICAgICAgICAgICBoID0gMDsKICAgICAgICAgICAgICBmb3IgKHIgPSAwOyBuID4gcjsgKytyKSB7CiAgICAgICAgICAgICAgICB2YXIgYzsKICAgICAgICAgICAgICAgIGlmICgoYyA9IGVbcl0pID49IDApIGZvciAoOyBjID49IHM7KSBsW2hdID0gcywgKytoLCBjIC09IHM7ZWxzZSBmb3IgKDsgYSA+PSBjOykgbFtoXSA9IGEsICsraCwgYyAtPSBhOwogICAgICAgICAgICAgICAgbFtoXSA9IGMsICsraDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gTChlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIEMoeChlKSwgdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gRShlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEEoUyhlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gVChlLCB0LCByKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGIoeChlLCB1KHIpKSwgdCwgcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gayhlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIEEodyhlLCB0KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gSShlLCB0LCByKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGIoQyhlLCB1KHIpKSwgdCwgcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gTyhlLCB0LCByKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFModyhlLCB0KSwgcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gRChlLCB0LCByKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGIoTShlLCB1KHIpKSwgdCwgcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gRihlLCB0LCByKSB7CiAgICAgICAgICAgICAgdmFyIHMgPSBNKGUsIHUocikpOwogICAgICAgICAgICAgIHJldHVybiBJKHMsIHQsIGYocykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIFIoZSwgdCwgcikgewogICAgICAgICAgICAgIHJldHVybiB6KE8oZSwgdCksIHIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIFAoZSkgewogICAgICAgICAgICAgIHZhciB0ID0gbChlKSwKICAgICAgICAgICAgICAgIHIgPSB0LmdldEludDMyKDApLAogICAgICAgICAgICAgICAgcyA9IHQuZ2V0SW50MzIoNCksCiAgICAgICAgICAgICAgICBhID0gZS5zdWJhcnJheSg4LCAxMik7CiAgICAgICAgICAgICAgcmV0dXJuIFtyLCBlID0gZS5zdWJhcnJheSgxMiksIHMsIGFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIEcoZSwgdCwgciwgcykgewogICAgICAgICAgICAgIHZhciBhID0gbmV3IEFycmF5QnVmZmVyKDEyICsgcy5ieXRlTGVuZ3RoKSwKICAgICAgICAgICAgICAgIG4gPSBuZXcgVWludDhBcnJheShhKSwKICAgICAgICAgICAgICAgIG8gPSBuZXcgRGF0YVZpZXcoYSk7CiAgICAgICAgICAgICAgcmV0dXJuIG8uc2V0SW50MzIoMCwgZSksIG8uc2V0SW50MzIoNCwgdCksIHIgJiYgbi5zZXQociwgOCksIG4uc2V0KHMsIDEyKSwgbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBCKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gRygyLCBlLmxlbmd0aCwgdm9pZCAwLCBoKGUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBVKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gRyg0LCBlLmxlbmd0aCwgdm9pZCAwLCBfKGUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBOKGUsIHQpIHsKICAgICAgICAgICAgICByZXR1cm4gRyg1LCBlLmxlbmd0aCAvIHQsIF8oW3RdKSwgaChlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gVihlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEcoNiwgZS5sZW5ndGgsIHZvaWQgMCwgXyhBKGUpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaihlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEcoOCwgZS5sZW5ndGgsIHZvaWQgMCwgXyhFKGUpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gSChlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIEcoOSwgZS5sZW5ndGgsIF8oW3RdKSwgXyhrKGUsIHQpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gVyhlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIEcoMTAsIGUubGVuZ3RoLCBfKFt0XSksIGcoUihlLCB0KSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHEoZSkgewogICAgICAgICAgICAgIHZhciB0ID0ge307CiAgICAgICAgICAgICAgcmV0dXJuIGllLmZvckVhY2goZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZVtyXSAmJiAodFtyXSA9IGVbcl0pOwogICAgICAgICAgICAgIH0pLCBlLmJvbmRBdG9tTGlzdCAmJiAodC5ib25kQXRvbUxpc3QgPSBVKGUuYm9uZEF0b21MaXN0KSksIGUuYm9uZE9yZGVyTGlzdCAmJiAodC5ib25kT3JkZXJMaXN0ID0gQihlLmJvbmRPcmRlckxpc3QpKSwgdC54Q29vcmRMaXN0ID0gVyhlLnhDb29yZExpc3QsIDFlMyksIHQueUNvb3JkTGlzdCA9IFcoZS55Q29vcmRMaXN0LCAxZTMpLCB0LnpDb29yZExpc3QgPSBXKGUuekNvb3JkTGlzdCwgMWUzKSwgZS5iRmFjdG9yTGlzdCAmJiAodC5iRmFjdG9yTGlzdCA9IFcoZS5iRmFjdG9yTGlzdCwgMTAwKSksIGUuYXRvbUlkTGlzdCAmJiAodC5hdG9tSWRMaXN0ID0gaihlLmF0b21JZExpc3QpKSwgZS5hbHRMb2NMaXN0ICYmICh0LmFsdExvY0xpc3QgPSBWKGUuYWx0TG9jTGlzdCkpLCBlLm9jY3VwYW5jeUxpc3QgJiYgKHQub2NjdXBhbmN5TGlzdCA9IEgoZS5vY2N1cGFuY3lMaXN0LCAxMDApKSwgdC5ncm91cElkTGlzdCA9IGooZS5ncm91cElkTGlzdCksIHQuZ3JvdXBUeXBlTGlzdCA9IFUoZS5ncm91cFR5cGVMaXN0KSwgZS5zZWNTdHJ1Y3RMaXN0ICYmICh0LnNlY1N0cnVjdExpc3QgPSBCKGUuc2VjU3RydWN0TGlzdCkpLCBlLmluc0NvZGVMaXN0ICYmICh0Lmluc0NvZGVMaXN0ID0gVihlLmluc0NvZGVMaXN0KSksIGUuc2VxdWVuY2VJbmRleExpc3QgJiYgKHQuc2VxdWVuY2VJbmRleExpc3QgPSBqKGUuc2VxdWVuY2VJbmRleExpc3QpKSwgdC5jaGFpbklkTGlzdCA9IE4oZS5jaGFpbklkTGlzdCwgNCksIGUuY2hhaW5OYW1lTGlzdCAmJiAodC5jaGFpbk5hbWVMaXN0ID0gTihlLmNoYWluTmFtZUxpc3QsIDQpKSwgdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBZKGUpIHsKICAgICAgICAgICAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSB7fSwgciA9IDA7IGUgPiByOyByKyspIHRbbigpXSA9IG4oKTsKICAgICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gZS5zdWJhcnJheShvLCBvICsgdCk7CiAgICAgICAgICAgICAgICByZXR1cm4gbyArPSB0LCByOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmdW5jdGlvbiBzKHQpIHsKICAgICAgICAgICAgICAgIHZhciByID0gZS5zdWJhcnJheShvLCBvICsgdCk7CiAgICAgICAgICAgICAgICBvICs9IHQ7CiAgICAgICAgICAgICAgICB2YXIgcyA9IDY1NTM1OwogICAgICAgICAgICAgICAgaWYgKHQgPiBzKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBbXSwgbiA9IDA7IG4gPCByLmxlbmd0aDsgbiArPSBzKSBhLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCByLnN1YmFycmF5KG4sIG4gKyBzKSkpOwogICAgICAgICAgICAgICAgICByZXR1cm4gYS5qb2luKCIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSBuZXcgQXJyYXkoZSksIHIgPSAwOyBlID4gcjsgcisrKSB0W3JdID0gbigpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgICAgICB2YXIgbiwKICAgICAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICAgICAgYyA9IGVbb107CiAgICAgICAgICAgICAgICBpZiAoMCA9PSAoMTI4ICYgYykpIHJldHVybiBvKyssIGM7CiAgICAgICAgICAgICAgICBpZiAoMTI4ID09ICgyNDAgJiBjKSkgcmV0dXJuIG8rKywgdChoID0gMTUgJiBjKTsKICAgICAgICAgICAgICAgIGlmICgxNDQgPT0gKDI0MCAmIGMpKSByZXR1cm4gbysrLCBhKGggPSAxNSAmIGMpOwogICAgICAgICAgICAgICAgaWYgKDE2MCA9PSAoMjI0ICYgYykpIHJldHVybiBvKyssIHMoaCA9IDMxICYgYyk7CiAgICAgICAgICAgICAgICBpZiAoMjI0ID09ICgyMjQgJiBjKSkgcmV0dXJuIG4gPSBsLmdldEludDgobyksIG8rKywgbjsKICAgICAgICAgICAgICAgIHN3aXRjaCAoYykgewogICAgICAgICAgICAgICAgICBjYXNlIDE5MjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbysrLCBudWxsOwogICAgICAgICAgICAgICAgICBjYXNlIDE5NDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbysrLCAhMTsKICAgICAgICAgICAgICAgICAgY2FzZSAxOTU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8rKywgITA7CiAgICAgICAgICAgICAgICAgIGNhc2UgMTk2OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBoID0gbC5nZXRVaW50OChvICsgMSksIG8gKz0gMiwgcihoKTsKICAgICAgICAgICAgICAgICAgY2FzZSAxOTc6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGggPSBsLmdldFVpbnQxNihvICsgMSksIG8gKz0gMywgcihoKTsKICAgICAgICAgICAgICAgICAgY2FzZSAxOTg6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGggPSBsLmdldFVpbnQzMihvICsgMSksIG8gKz0gNSwgcihoKTsKICAgICAgICAgICAgICAgICAgY2FzZSAyMDI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBsLmdldEZsb2F0MzIobyArIDEpLCBvICs9IDUsIG47CiAgICAgICAgICAgICAgICAgIGNhc2UgMjAzOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gbC5nZXRGbG9hdDY0KG8gKyAxKSwgbyArPSA5LCBuOwogICAgICAgICAgICAgICAgICBjYXNlIDIwNDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA9IGVbbyArIDFdLCBvICs9IDIsIG47CiAgICAgICAgICAgICAgICAgIGNhc2UgMjA1OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gbC5nZXRVaW50MTYobyArIDEpLCBvICs9IDMsIG47CiAgICAgICAgICAgICAgICAgIGNhc2UgMjA2OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gbC5nZXRVaW50MzIobyArIDEpLCBvICs9IDUsIG47CiAgICAgICAgICAgICAgICAgIGNhc2UgMjA4OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gbC5nZXRJbnQ4KG8gKyAxKSwgbyArPSAyLCBuOwogICAgICAgICAgICAgICAgICBjYXNlIDIwOToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA9IGwuZ2V0SW50MTYobyArIDEpLCBvICs9IDMsIG47CiAgICAgICAgICAgICAgICAgIGNhc2UgMjEwOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gbC5nZXRJbnQzMihvICsgMSksIG8gKz0gNSwgbjsKICAgICAgICAgICAgICAgICAgY2FzZSAyMTc6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGggPSBsLmdldFVpbnQ4KG8gKyAxKSwgbyArPSAyLCBzKGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIxODoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDE2KG8gKyAxKSwgbyArPSAzLCBzKGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIxOToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDMyKG8gKyAxKSwgbyArPSA1LCBzKGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIyMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDE2KG8gKyAxKSwgbyArPSAzLCBhKGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIyMToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDMyKG8gKyAxKSwgbyArPSA1LCBhKGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIyMjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDE2KG8gKyAxKSwgbyArPSAzLCB0KGgpOwogICAgICAgICAgICAgICAgICBjYXNlIDIyMzoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IGwuZ2V0VWludDMyKG8gKyAxKSwgbyArPSA1LCB0KGgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIHR5cGUgMHgiICsgYy50b1N0cmluZygxNikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgbyA9IDAsCiAgICAgICAgICAgICAgICBsID0gbmV3IERhdGFWaWV3KGUuYnVmZmVyKTsKICAgICAgICAgICAgICByZXR1cm4gbigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIFooZSwgdCwgciwgcykgewogICAgICAgICAgICAgIHN3aXRjaCAoZSkgewogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICByZXR1cm4geSh0KTsKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGModCk7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHJldHVybiBwKHQpOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICByZXR1cm4gdih0KTsKICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgcmV0dXJuIGgodCk7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIHJldHVybiB4KHYodCksIG5ldyBVaW50OEFycmF5KHIpKTsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgcmV0dXJuIHgodih0KSk7CiAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgIHJldHVybiBMKHYodCkpOwogICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgICByZXR1cm4gVCh2KHQpLCB2KHMpWzBdKTsKICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgIHJldHVybiBGKHAodCksIHYocylbMF0pOwogICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgcmV0dXJuIGIocCh0KSwgdihzKVswXSk7CiAgICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgICByZXR1cm4gRChwKHQpLCB2KHMpWzBdKTsKICAgICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICAgIHJldHVybiBEKGModCksIHYocylbMF0pOwogICAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgICAgcmV0dXJuIE0ocCh0KSk7CiAgICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgICByZXR1cm4gTShjKHQpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gWChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSAodCA9IHQgfHwge30pLmlnbm9yZUZpZWxkcywKICAgICAgICAgICAgICAgIHMgPSB7fTsKICAgICAgICAgICAgICByZXR1cm4gYWUuZm9yRWFjaChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgdmFyIGEgPSAhIXIgJiYgLTEgIT09IHIuaW5kZXhPZih0KSwKICAgICAgICAgICAgICAgICAgbiA9IGVbdF07CiAgICAgICAgICAgICAgICBhIHx8IHZvaWQgMCA9PT0gbiB8fCAobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBzW3RdID0gWi5hcHBseShudWxsLCBQKG4pKSA6IHNbdF0gPSBuKTsKICAgICAgICAgICAgICB9KSwgczsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBLKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBlKS5yZXBsYWNlKC9cMC9nLCAiIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gJChlLCB0LCByKSB7CiAgICAgICAgICAgICAgdmFyIHMsCiAgICAgICAgICAgICAgICBhLAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgaCwKICAgICAgICAgICAgICAgIGMgPSAociA9IHIgfHwge30pLmZpcnN0TW9kZWxPbmx5LAogICAgICAgICAgICAgICAgdSA9IHQub25Nb2RlbCwKICAgICAgICAgICAgICAgIGYgPSB0Lm9uQ2hhaW4sCiAgICAgICAgICAgICAgICBwID0gdC5vbkdyb3VwLAogICAgICAgICAgICAgICAgZyA9IHQub25BdG9tLAogICAgICAgICAgICAgICAgdiA9IHQub25Cb25kLAogICAgICAgICAgICAgICAgXyA9IDAsCiAgICAgICAgICAgICAgICB5ID0gMCwKICAgICAgICAgICAgICAgIGIgPSAwLAogICAgICAgICAgICAgICAgdyA9IDAsCiAgICAgICAgICAgICAgICB4ID0gMCwKICAgICAgICAgICAgICAgIEEgPSAtMSwKICAgICAgICAgICAgICAgIEMgPSBlLmNoYWluTmFtZUxpc3QsCiAgICAgICAgICAgICAgICBTID0gZS5zZWNTdHJ1Y3RMaXN0LAogICAgICAgICAgICAgICAgTSA9IGUuaW5zQ29kZUxpc3QsCiAgICAgICAgICAgICAgICB6ID0gZS5zZXF1ZW5jZUluZGV4TGlzdCwKICAgICAgICAgICAgICAgIEwgPSBlLmF0b21JZExpc3QsCiAgICAgICAgICAgICAgICBFID0gZS5iRmFjdG9yTGlzdCwKICAgICAgICAgICAgICAgIFQgPSBlLmFsdExvY0xpc3QsCiAgICAgICAgICAgICAgICBrID0gZS5vY2N1cGFuY3lMaXN0LAogICAgICAgICAgICAgICAgSSA9IGUuYm9uZEF0b21MaXN0LAogICAgICAgICAgICAgICAgTyA9IGUuYm9uZE9yZGVyTGlzdDsKICAgICAgICAgICAgICBmb3IgKHMgPSAwLCBhID0gZS5jaGFpbnNQZXJNb2RlbC5sZW5ndGg7IGEgPiBzICYmICEoYyAmJiBfID4gMCk7ICsrcykgewogICAgICAgICAgICAgICAgdmFyIEQgPSBlLmNoYWluc1Blck1vZGVsW19dOwogICAgICAgICAgICAgICAgZm9yICh1ICYmIHUoewogICAgICAgICAgICAgICAgICBjaGFpbkNvdW50OiBELAogICAgICAgICAgICAgICAgICBtb2RlbEluZGV4OiBfCiAgICAgICAgICAgICAgICB9KSwgbiA9IDA7IEQgPiBuOyArK24pIHsKICAgICAgICAgICAgICAgICAgdmFyIEYgPSBlLmdyb3Vwc1BlckNoYWluW3ldOwogICAgICAgICAgICAgICAgICBpZiAoZikgewogICAgICAgICAgICAgICAgICAgIHZhciBSID0gSyhlLmNoYWluSWRMaXN0LnN1YmFycmF5KDQgKiB5LCA0ICogeSArIDQpKSwKICAgICAgICAgICAgICAgICAgICAgIFAgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIEMgJiYgKFAgPSBLKEMuc3ViYXJyYXkoNCAqIHksIDQgKiB5ICsgNCkpKSwgZih7CiAgICAgICAgICAgICAgICAgICAgICBncm91cENvdW50OiBGLAogICAgICAgICAgICAgICAgICAgICAgY2hhaW5JbmRleDogeSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsSW5kZXg6IF8sCiAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBSLAogICAgICAgICAgICAgICAgICAgICAgY2hhaW5OYW1lOiBQCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsgRiA+IG87ICsrbykgewogICAgICAgICAgICAgICAgICAgIHZhciBHID0gZS5ncm91cExpc3RbZS5ncm91cFR5cGVMaXN0W2JdXSwKICAgICAgICAgICAgICAgICAgICAgIEIgPSBHLmF0b21OYW1lTGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgaWYgKHApIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBVID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgIFMgJiYgKFUgPSBTW2JdKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBOID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgIGUuaW5zQ29kZUxpc3QgJiYgKE4gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKE1bYl0pKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBWID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgIHogJiYgKFYgPSB6W2JdKSwgcCh7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0b21Db3VudDogQiwKICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJbmRleDogYiwKICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JbmRleDogeSwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxJbmRleDogXywKICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogZS5ncm91cElkTGlzdFtiXSwKICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUeXBlOiBlLmdyb3VwVHlwZUxpc3RbYl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogRy5ncm91cE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZUxldHRlckNvZGU6IEcuc2luZ2xlTGV0dGVyQ29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlbUNvbXBUeXBlOiBHLmNoZW1Db21wVHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2VjU3RydWN0OiBVLAogICAgICAgICAgICAgICAgICAgICAgICBpbnNDb2RlOiBOLAogICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZUluZGV4OiBWCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gMDsgQiA+IGw7ICsrbCkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKGcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGogPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBMICYmIChqID0gTFt3XSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBIID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgRSAmJiAoSCA9IEVbd10pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgVyA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIFQgJiYgKFcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFRbd10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBrICYmIChxID0ga1t3XSksIGcoewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0b21JbmRleDogdywKICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEluZGV4OiBiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSW5kZXg6IHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxJbmRleDogXywKICAgICAgICAgICAgICAgICAgICAgICAgICBhdG9tSWQ6IGosCiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogRy5lbGVtZW50TGlzdFtsXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdG9tTmFtZTogRy5hdG9tTmFtZUxpc3RbbF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWFsQ2hhcmdlOiBHLmZvcm1hbENoYXJnZUxpc3RbbF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgeENvb3JkOiBlLnhDb29yZExpc3Rbd10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgeUNvb3JkOiBlLnlDb29yZExpc3Rbd10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgekNvb3JkOiBlLnpDb29yZExpc3Rbd10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYkZhY3RvcjogSCwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRMb2M6IFcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb2NjdXBhbmN5OiBxCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgdyArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgICAgICAgdmFyIFkgPSBHLmJvbmRBdG9tTGlzdDsKICAgICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDAsIGggPSBHLmJvbmRPcmRlckxpc3QubGVuZ3RoOyBoID4gbDsgKytsKSB2KHsKICAgICAgICAgICAgICAgICAgICAgICAgYXRvbUluZGV4MTogdyAtIEIgKyBZWzIgKiBsXSwKICAgICAgICAgICAgICAgICAgICAgICAgYXRvbUluZGV4MjogdyAtIEIgKyBZWzIgKiBsICsgMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGJvbmRPcmRlcjogRy5ib25kT3JkZXJMaXN0W2xdCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYiArPSAxOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHkgKz0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh4ID0gQSArIDEsIEEgPSB3IC0gMSwgdiAmJiBJKSBmb3IgKGwgPSAwLCBoID0gSS5sZW5ndGg7IGggPiBsOyBsICs9IDIpIHsKICAgICAgICAgICAgICAgICAgdmFyIFogPSBJW2xdLAogICAgICAgICAgICAgICAgICAgIFggPSBJW2wgKyAxXTsKICAgICAgICAgICAgICAgICAgKFogPj0geCAmJiBBID49IFogfHwgWCA+PSB4ICYmIEEgPj0gWCkgJiYgdih7CiAgICAgICAgICAgICAgICAgICAgYXRvbUluZGV4MTogWiwKICAgICAgICAgICAgICAgICAgICBhdG9tSW5kZXgyOiBYLAogICAgICAgICAgICAgICAgICAgIGJvbmRPcmRlcjogTyA/IE9bbCAvIDJdIDogbnVsbAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF8gKz0gMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gUShlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG4ocShlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gSihlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciAmJiAoZSA9IG5ldyBVaW50OEFycmF5KGUpKSwgWChlIGluc3RhbmNlb2YgVWludDhBcnJheSA/IFkoZSkgOiBlLCB0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBlZShlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgZnVuY3Rpb24gYSgpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIHZhciBlID0gSihuLnJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgcihlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgcyhlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICBuLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCBhLCAhMCksIG4uYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBzLCAhMCksIG4ucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIiwgbi5vcGVuKCJHRVQiLCB0ICsgZS50b1VwcGVyQ2FzZSgpKSwgbi5zZW5kKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdGUoZSwgdCwgcikgewogICAgICAgICAgICAgIGVlKGUsIGxlLCB0LCByKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiByZShlLCB0LCByKSB7CiAgICAgICAgICAgICAgZWUoZSwgaGUsIHQsIHIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpZSA9IFsibW10ZlZlcnNpb24iLCAibW10ZlByb2R1Y2VyIiwgInVuaXRDZWxsIiwgInNwYWNlR3JvdXAiLCAic3RydWN0dXJlSWQiLCAidGl0bGUiLCAiZGVwb3NpdGlvbkRhdGUiLCAicmVsZWFzZURhdGUiLCAiZXhwZXJpbWVudGFsTWV0aG9kcyIsICJyZXNvbHV0aW9uIiwgInJGcmVlIiwgInJXb3JrIiwgImJpb0Fzc2VtYmx5TGlzdCIsICJuY3NPcGVyYXRvckxpc3QiLCAiZW50aXR5TGlzdCIsICJncm91cExpc3QiLCAibnVtQm9uZHMiLCAibnVtQXRvbXMiLCAibnVtR3JvdXBzIiwgIm51bUNoYWlucyIsICJudW1Nb2RlbHMiLCAiZ3JvdXBzUGVyQ2hhaW4iLCAiY2hhaW5zUGVyTW9kZWwiXSwKICAgICAgICAgICAgICBzZSA9IFsieENvb3JkTGlzdCIsICJ5Q29vcmRMaXN0IiwgInpDb29yZExpc3QiLCAiZ3JvdXBJZExpc3QiLCAiZ3JvdXBUeXBlTGlzdCIsICJjaGFpbklkTGlzdCIsICJiRmFjdG9yTGlzdCIsICJhdG9tSWRMaXN0IiwgImFsdExvY0xpc3QiLCAib2NjdXBhbmN5TGlzdCIsICJzZWNTdHJ1Y3RMaXN0IiwgImluc0NvZGVMaXN0IiwgInNlcXVlbmNlSW5kZXhMaXN0IiwgImNoYWluTmFtZUxpc3QiLCAiYm9uZEF0b21MaXN0IiwgImJvbmRPcmRlckxpc3QiXSwKICAgICAgICAgICAgICBhZSA9IGllLmNvbmNhdChzZSksCiAgICAgICAgICAgICAgbmUgPSAidjEuMC4xIiwKICAgICAgICAgICAgICBvZSA9ICIvL21tdGYucmNzYi5vcmcvdjEuMC8iLAogICAgICAgICAgICAgIGxlID0gb2UgKyAiZnVsbC8iLAogICAgICAgICAgICAgIGhlID0gb2UgKyAicmVkdWNlZC8iOwogICAgICAgICAgICBlLmVuY29kZSA9IFEsIGUuZGVjb2RlID0gSiwgZS50cmF2ZXJzZSA9ICQsIGUuZmV0Y2ggPSB0ZSwgZS5mZXRjaFJlZHVjZWQgPSByZSwgZS52ZXJzaW9uID0gbmUsIGUuZmV0Y2hVcmwgPSBsZSwgZS5mZXRjaFJlZHVjZWRVcmwgPSBoZSwgZS5lbmNvZGVNc2dwYWNrID0gbiwgZS5lbmNvZGVNbXRmID0gcSwgZS5kZWNvZGVNc2dwYWNrID0gWSwgZS5kZWNvZGVNbXRmID0gWDsKICAgICAgICAgIH0odCk7CiAgICAgICAgfSwKICAgICAgICA3ODg1OiBmdW5jdGlvbiBfKGUsIHQsIHIpIHsKICAgICAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICByLnIodCksIHIuZCh0LCB7CiAgICAgICAgICAgIERlZmxhdGU6IGZ1bmN0aW9uIERlZmxhdGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHhyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBJbmZsYXRlOiBmdW5jdGlvbiBJbmZsYXRlKCkgewogICAgICAgICAgICAgIHJldHVybiBNcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29uc3RhbnRzOiBmdW5jdGlvbiBjb25zdGFudHMoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFRyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICAgICAgICByZXR1cm4ga3I7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmxhdGU6IGZ1bmN0aW9uIGRlZmxhdGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEFyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZsYXRlUmF3OiBmdW5jdGlvbiBkZWZsYXRlUmF3KCkgewogICAgICAgICAgICAgIHJldHVybiBDcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ3ppcDogZnVuY3Rpb24gZ3ppcCgpIHsKICAgICAgICAgICAgICByZXR1cm4gU3I7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluZmxhdGU6IGZ1bmN0aW9uIGluZmxhdGUoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHpyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmZsYXRlUmF3OiBmdW5jdGlvbiBpbmZsYXRlUmF3KCkgewogICAgICAgICAgICAgIHJldHVybiBMcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdW5nemlwOiBmdW5jdGlvbiB1bmd6aXAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEVyOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGZ1bmN0aW9uIHMoZSkgewogICAgICAgICAgICB2YXIgdCA9IGUubGVuZ3RoOwogICAgICAgICAgICBmb3IgKDsgLS10ID49IDA7KSBlW3RdID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBhID0gMjU2LAogICAgICAgICAgICBuID0gMjg2LAogICAgICAgICAgICBvID0gMzAsCiAgICAgICAgICAgIGwgPSAxNSwKICAgICAgICAgICAgaCA9IG5ldyBVaW50OEFycmF5KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAxLCAxLCAxLCAyLCAyLCAyLCAyLCAzLCAzLCAzLCAzLCA0LCA0LCA0LCA0LCA1LCA1LCA1LCA1LCAwXSksCiAgICAgICAgICAgIGMgPSBuZXcgVWludDhBcnJheShbMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNiwgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsIDEyLCAxMiwgMTMsIDEzXSksCiAgICAgICAgICAgIHUgPSBuZXcgVWludDhBcnJheShbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMywgN10pLAogICAgICAgICAgICBmID0gbmV3IFVpbnQ4QXJyYXkoWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdKSwKICAgICAgICAgICAgcCA9IG5ldyBBcnJheSg1NzYpOwogICAgICAgICAgcyhwKTsKICAgICAgICAgIHZhciBnID0gbmV3IEFycmF5KDYwKTsKICAgICAgICAgIHMoZyk7CiAgICAgICAgICB2YXIgdiA9IG5ldyBBcnJheSg1MTIpOwogICAgICAgICAgcyh2KTsKICAgICAgICAgIHZhciBfID0gbmV3IEFycmF5KDI1Nik7CiAgICAgICAgICBzKF8pOwogICAgICAgICAgdmFyIHkgPSBuZXcgQXJyYXkoMjkpOwogICAgICAgICAgcyh5KTsKICAgICAgICAgIHZhciBiID0gbmV3IEFycmF5KG8pOwogICAgICAgICAgZnVuY3Rpb24gdyhlLCB0LCByLCBzLCBhKSB7CiAgICAgICAgICAgIHRoaXMuc3RhdGljX3RyZWUgPSBlLCB0aGlzLmV4dHJhX2JpdHMgPSB0LCB0aGlzLmV4dHJhX2Jhc2UgPSByLCB0aGlzLmVsZW1zID0gcywgdGhpcy5tYXhfbGVuZ3RoID0gYSwgdGhpcy5oYXNfc3RyZWUgPSBlICYmIGUubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHgsIEEsIEM7CiAgICAgICAgICBmdW5jdGlvbiBTKGUsIHQpIHsKICAgICAgICAgICAgdGhpcy5keW5fdHJlZSA9IGUsIHRoaXMubWF4X2NvZGUgPSAwLCB0aGlzLnN0YXRfZGVzYyA9IHQ7CiAgICAgICAgICB9CiAgICAgICAgICBzKGIpOwogICAgICAgICAgdmFyIE0gPSBmdW5jdGlvbiBNKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gZSA8IDI1NiA/IHZbZV0gOiB2WzI1NiArIChlID4+PiA3KV07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHogPSBmdW5jdGlvbiB6KGUsIHQpIHsKICAgICAgICAgICAgICBlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXSA9IDI1NSAmIHQsIGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gdCA+Pj4gOCAmIDI1NTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTCA9IGZ1bmN0aW9uIEwoZSwgdCwgcikgewogICAgICAgICAgICAgIGUuYmlfdmFsaWQgPiAxNiAtIHIgPyAoZS5iaV9idWYgfD0gdCA8PCBlLmJpX3ZhbGlkICYgNjU1MzUsIHooZSwgZS5iaV9idWYpLCBlLmJpX2J1ZiA9IHQgPj4gMTYgLSBlLmJpX3ZhbGlkLCBlLmJpX3ZhbGlkICs9IHIgLSAxNikgOiAoZS5iaV9idWYgfD0gdCA8PCBlLmJpX3ZhbGlkICYgNjU1MzUsIGUuYmlfdmFsaWQgKz0gcik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEUgPSBmdW5jdGlvbiBFKGUsIHQsIHIpIHsKICAgICAgICAgICAgICBMKGUsIHJbMiAqIHRdLCByWzIgKiB0ICsgMV0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBUID0gZnVuY3Rpb24gVChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSAwOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIHIgfD0gMSAmIGUsIGUgPj4+PSAxLCByIDw8PSAxOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tdCA+IDApOwogICAgICAgICAgICAgIHJldHVybiByID4+PiAxOwogICAgICAgICAgICB9LAogICAgICAgICAgICBrID0gZnVuY3Rpb24gayhlLCB0LCByKSB7CiAgICAgICAgICAgICAgdmFyIHMgPSBuZXcgQXJyYXkoMTYpOwogICAgICAgICAgICAgIHZhciBhLAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIG8gPSAwOwogICAgICAgICAgICAgIGZvciAoYSA9IDE7IGEgPD0gbDsgYSsrKSBvID0gbyArIHJbYSAtIDFdIDw8IDEsIHNbYV0gPSBvOwogICAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPD0gdDsgbisrKSB7CiAgICAgICAgICAgICAgICB2YXIgX3QxMjMgPSBlWzIgKiBuICsgMV07CiAgICAgICAgICAgICAgICAwICE9PSBfdDEyMyAmJiAoZVsyICogbl0gPSBUKHNbX3QxMjNdKyssIF90MTIzKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBJID0gZnVuY3Rpb24gSShlKSB7CiAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IG47IHQrKykgZS5keW5fbHRyZWVbMiAqIHRdID0gMDsKICAgICAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgbzsgdCsrKSBlLmR5bl9kdHJlZVsyICogdF0gPSAwOwogICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCAxOTsgdCsrKSBlLmJsX3RyZWVbMiAqIHRdID0gMDsKICAgICAgICAgICAgICBlLmR5bl9sdHJlZVs1MTJdID0gMSwgZS5vcHRfbGVuID0gZS5zdGF0aWNfbGVuID0gMCwgZS5zeW1fbmV4dCA9IGUubWF0Y2hlcyA9IDA7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE8gPSBmdW5jdGlvbiBPKGUpIHsKICAgICAgICAgICAgICBlLmJpX3ZhbGlkID4gOCA/IHooZSwgZS5iaV9idWYpIDogZS5iaV92YWxpZCA+IDAgJiYgKGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gZS5iaV9idWYpLCBlLmJpX2J1ZiA9IDAsIGUuYmlfdmFsaWQgPSAwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBEID0gZnVuY3Rpb24gRChlLCB0LCByLCBzKSB7CiAgICAgICAgICAgICAgdmFyIGEgPSAyICogdCwKICAgICAgICAgICAgICAgIG4gPSAyICogcjsKICAgICAgICAgICAgICByZXR1cm4gZVthXSA8IGVbbl0gfHwgZVthXSA9PT0gZVtuXSAmJiBzW3RdIDw9IHNbcl07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEYgPSBmdW5jdGlvbiBGKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgcyA9IGUuaGVhcFtyXTsKICAgICAgICAgICAgICB2YXIgYSA9IHIgPDwgMTsKICAgICAgICAgICAgICBmb3IgKDsgYSA8PSBlLmhlYXBfbGVuICYmIChhIDwgZS5oZWFwX2xlbiAmJiBEKHQsIGUuaGVhcFthICsgMV0sIGUuaGVhcFthXSwgZS5kZXB0aCkgJiYgYSsrLCAhRCh0LCBzLCBlLmhlYXBbYV0sIGUuZGVwdGgpKTspIGUuaGVhcFtyXSA9IGUuaGVhcFthXSwgciA9IGEsIGEgPDw9IDE7CiAgICAgICAgICAgICAgZS5oZWFwW3JdID0gczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUiA9IGZ1bmN0aW9uIFIoZSwgdCwgcikgewogICAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgdSA9IDA7CiAgICAgICAgICAgICAgaWYgKDAgIT09IGUuc3ltX25leHQpIGRvIHsKICAgICAgICAgICAgICAgIHMgPSAyNTUgJiBlLnBlbmRpbmdfYnVmW2Uuc3ltX2J1ZiArIHUrK10sIHMgKz0gKDI1NSAmIGUucGVuZGluZ19idWZbZS5zeW1fYnVmICsgdSsrXSkgPDwgOCwgbiA9IGUucGVuZGluZ19idWZbZS5zeW1fYnVmICsgdSsrXSwgMCA9PT0gcyA/IEUoZSwgbiwgdCkgOiAobyA9IF9bbl0sIEUoZSwgbyArIGEgKyAxLCB0KSwgbCA9IGhbb10sIDAgIT09IGwgJiYgKG4gLT0geVtvXSwgTChlLCBuLCBsKSksIHMtLSwgbyA9IE0ocyksIEUoZSwgbywgciksIGwgPSBjW29dLCAwICE9PSBsICYmIChzIC09IGJbb10sIEwoZSwgcywgbCkpKTsKICAgICAgICAgICAgICB9IHdoaWxlICh1IDwgZS5zeW1fbmV4dCk7CiAgICAgICAgICAgICAgRShlLCAyNTYsIHQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBQID0gZnVuY3Rpb24gUChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIHIgPSB0LmR5bl90cmVlLAogICAgICAgICAgICAgICAgcyA9IHQuc3RhdF9kZXNjLnN0YXRpY190cmVlLAogICAgICAgICAgICAgICAgYSA9IHQuc3RhdF9kZXNjLmhhc19zdHJlZSwKICAgICAgICAgICAgICAgIG4gPSB0LnN0YXRfZGVzYy5lbGVtczsKICAgICAgICAgICAgICB2YXIgbywKICAgICAgICAgICAgICAgIGgsCiAgICAgICAgICAgICAgICBjLAogICAgICAgICAgICAgICAgdSA9IC0xOwogICAgICAgICAgICAgIGZvciAoZS5oZWFwX2xlbiA9IDAsIGUuaGVhcF9tYXggPSA1NzMsIG8gPSAwOyBvIDwgbjsgbysrKSAwICE9PSByWzIgKiBvXSA/IChlLmhlYXBbKytlLmhlYXBfbGVuXSA9IHUgPSBvLCBlLmRlcHRoW29dID0gMCkgOiByWzIgKiBvICsgMV0gPSAwOwogICAgICAgICAgICAgIGZvciAoOyBlLmhlYXBfbGVuIDwgMjspIGMgPSBlLmhlYXBbKytlLmhlYXBfbGVuXSA9IHUgPCAyID8gKyt1IDogMCwgclsyICogY10gPSAxLCBlLmRlcHRoW2NdID0gMCwgZS5vcHRfbGVuLS0sIGEgJiYgKGUuc3RhdGljX2xlbiAtPSBzWzIgKiBjICsgMV0pOwogICAgICAgICAgICAgIGZvciAodC5tYXhfY29kZSA9IHUsIG8gPSBlLmhlYXBfbGVuID4+IDE7IG8gPj0gMTsgby0tKSBGKGUsIHIsIG8pOwogICAgICAgICAgICAgIGMgPSBuOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIG8gPSBlLmhlYXBbMV0sIGUuaGVhcFsxXSA9IGUuaGVhcFtlLmhlYXBfbGVuLS1dLCBGKGUsIHIsIDEpLCBoID0gZS5oZWFwWzFdLCBlLmhlYXBbLS1lLmhlYXBfbWF4XSA9IG8sIGUuaGVhcFstLWUuaGVhcF9tYXhdID0gaCwgclsyICogY10gPSByWzIgKiBvXSArIHJbMiAqIGhdLCBlLmRlcHRoW2NdID0gKGUuZGVwdGhbb10gPj0gZS5kZXB0aFtoXSA/IGUuZGVwdGhbb10gOiBlLmRlcHRoW2hdKSArIDEsIHJbMiAqIG8gKyAxXSA9IHJbMiAqIGggKyAxXSA9IGMsIGUuaGVhcFsxXSA9IGMrKywgRihlLCByLCAxKTsKICAgICAgICAgICAgICB9IHdoaWxlIChlLmhlYXBfbGVuID49IDIpOwogICAgICAgICAgICAgIGUuaGVhcFstLWUuaGVhcF9tYXhdID0gZS5oZWFwWzFdLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIHIgPSB0LmR5bl90cmVlLAogICAgICAgICAgICAgICAgICBzID0gdC5tYXhfY29kZSwKICAgICAgICAgICAgICAgICAgYSA9IHQuc3RhdF9kZXNjLnN0YXRpY190cmVlLAogICAgICAgICAgICAgICAgICBuID0gdC5zdGF0X2Rlc2MuaGFzX3N0cmVlLAogICAgICAgICAgICAgICAgICBvID0gdC5zdGF0X2Rlc2MuZXh0cmFfYml0cywKICAgICAgICAgICAgICAgICAgaCA9IHQuc3RhdF9kZXNjLmV4dHJhX2Jhc2UsCiAgICAgICAgICAgICAgICAgIGMgPSB0LnN0YXRfZGVzYy5tYXhfbGVuZ3RoOwogICAgICAgICAgICAgICAgdmFyIHUsCiAgICAgICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgICAgIHAsCiAgICAgICAgICAgICAgICAgIGcsCiAgICAgICAgICAgICAgICAgIHYsCiAgICAgICAgICAgICAgICAgIF8sCiAgICAgICAgICAgICAgICAgIHkgPSAwOwogICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8PSBsOyBnKyspIGUuYmxfY291bnRbZ10gPSAwOwogICAgICAgICAgICAgICAgZm9yIChyWzIgKiBlLmhlYXBbZS5oZWFwX21heF0gKyAxXSA9IDAsIHUgPSBlLmhlYXBfbWF4ICsgMTsgdSA8IDU3MzsgdSsrKSBmID0gZS5oZWFwW3VdLCBnID0gclsyICogclsyICogZiArIDFdICsgMV0gKyAxLCBnID4gYyAmJiAoZyA9IGMsIHkrKyksIHJbMiAqIGYgKyAxXSA9IGcsIGYgPiBzIHx8IChlLmJsX2NvdW50W2ddKyssIHYgPSAwLCBmID49IGggJiYgKHYgPSBvW2YgLSBoXSksIF8gPSByWzIgKiBmXSwgZS5vcHRfbGVuICs9IF8gKiAoZyArIHYpLCBuICYmIChlLnN0YXRpY19sZW4gKz0gXyAqIChhWzIgKiBmICsgMV0gKyB2KSkpOwogICAgICAgICAgICAgICAgaWYgKDAgIT09IHkpIHsKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IGMgLSAxOyAwID09PSBlLmJsX2NvdW50W2ddOykgZy0tOwogICAgICAgICAgICAgICAgICAgIGUuYmxfY291bnRbZ10tLSwgZS5ibF9jb3VudFtnICsgMV0gKz0gMiwgZS5ibF9jb3VudFtjXS0tLCB5IC09IDI7CiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHkgPiAwKTsKICAgICAgICAgICAgICAgICAgZm9yIChnID0gYzsgMCAhPT0gZzsgZy0tKSBmb3IgKGYgPSBlLmJsX2NvdW50W2ddOyAwICE9PSBmOykgcCA9IGUuaGVhcFstLXVdLCBwID4gcyB8fCAoclsyICogcCArIDFdICE9PSBnICYmIChlLm9wdF9sZW4gKz0gKGcgLSByWzIgKiBwICsgMV0pICogclsyICogcF0sIHJbMiAqIHAgKyAxXSA9IGcpLCBmLS0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0oZSwgdCksIGsociwgdSwgZS5ibF9jb3VudCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEcgPSBmdW5jdGlvbiBHKGUsIHQsIHIpIHsKICAgICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICBuID0gLTEsCiAgICAgICAgICAgICAgICBvID0gdFsxXSwKICAgICAgICAgICAgICAgIGwgPSAwLAogICAgICAgICAgICAgICAgaCA9IDcsCiAgICAgICAgICAgICAgICBjID0gNDsKICAgICAgICAgICAgICBmb3IgKDAgPT09IG8gJiYgKGggPSAxMzgsIGMgPSAzKSwgdFsyICogKHIgKyAxKSArIDFdID0gNjU1MzUsIHMgPSAwOyBzIDw9IHI7IHMrKykgYSA9IG8sIG8gPSB0WzIgKiAocyArIDEpICsgMV0sICsrbCA8IGggJiYgYSA9PT0gbyB8fCAobCA8IGMgPyBlLmJsX3RyZWVbMiAqIGFdICs9IGwgOiAwICE9PSBhID8gKGEgIT09IG4gJiYgZS5ibF90cmVlWzIgKiBhXSsrLCBlLmJsX3RyZWVbMzJdKyspIDogbCA8PSAxMCA/IGUuYmxfdHJlZVszNF0rKyA6IGUuYmxfdHJlZVszNl0rKywgbCA9IDAsIG4gPSBhLCAwID09PSBvID8gKGggPSAxMzgsIGMgPSAzKSA6IGEgPT09IG8gPyAoaCA9IDYsIGMgPSAzKSA6IChoID0gNywgYyA9IDQpKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQiA9IGZ1bmN0aW9uIEIoZSwgdCwgcikgewogICAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgIG4gPSAtMSwKICAgICAgICAgICAgICAgIG8gPSB0WzFdLAogICAgICAgICAgICAgICAgbCA9IDAsCiAgICAgICAgICAgICAgICBoID0gNywKICAgICAgICAgICAgICAgIGMgPSA0OwogICAgICAgICAgICAgIGZvciAoMCA9PT0gbyAmJiAoaCA9IDEzOCwgYyA9IDMpLCBzID0gMDsgcyA8PSByOyBzKyspIGlmIChhID0gbywgbyA9IHRbMiAqIChzICsgMSkgKyAxXSwgISgrK2wgPCBoICYmIGEgPT09IG8pKSB7CiAgICAgICAgICAgICAgICBpZiAobCA8IGMpIGRvIHsKICAgICAgICAgICAgICAgICAgRShlLCBhLCBlLmJsX3RyZWUpOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPSAtLWwpO2Vsc2UgMCAhPT0gYSA/IChhICE9PSBuICYmIChFKGUsIGEsIGUuYmxfdHJlZSksIGwtLSksIEUoZSwgMTYsIGUuYmxfdHJlZSksIEwoZSwgbCAtIDMsIDIpKSA6IGwgPD0gMTAgPyAoRShlLCAxNywgZS5ibF90cmVlKSwgTChlLCBsIC0gMywgMykpIDogKEUoZSwgMTgsIGUuYmxfdHJlZSksIEwoZSwgbCAtIDExLCA3KSk7CiAgICAgICAgICAgICAgICBsID0gMCwgbiA9IGEsIDAgPT09IG8gPyAoaCA9IDEzOCwgYyA9IDMpIDogYSA9PT0gbyA/IChoID0gNiwgYyA9IDMpIDogKGggPSA3LCBjID0gNCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgdmFyIFUgPSAhMTsKICAgICAgICAgIHZhciBOID0gZnVuY3Rpb24gTihlLCB0LCByLCBzKSB7CiAgICAgICAgICAgIEwoZSwgMCArIChzID8gMSA6IDApLCAzKSwgTyhlKSwgeihlLCByKSwgeihlLCB+ciksIHIgJiYgZS5wZW5kaW5nX2J1Zi5zZXQoZS53aW5kb3cuc3ViYXJyYXkodCwgdCArIHIpLCBlLnBlbmRpbmcpLCBlLnBlbmRpbmcgKz0gcjsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgViA9IGZ1bmN0aW9uIFYoZSwgdCwgciwgcykgewogICAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgIGwgPSAwOwogICAgICAgICAgICAgIGUubGV2ZWwgPiAwID8gKDIgPT09IGUuc3RybS5kYXRhX3R5cGUgJiYgKGUuc3RybS5kYXRhX3R5cGUgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICAgIHIgPSA0MDkzNjI0NDQ3OwogICAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8PSAzMTsgdCsrLCByID4+Pj0gMSkgaWYgKDEgJiByICYmIDAgIT09IGUuZHluX2x0cmVlWzIgKiB0XSkgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gZS5keW5fbHRyZWVbMThdIHx8IDAgIT09IGUuZHluX2x0cmVlWzIwXSB8fCAwICE9PSBlLmR5bl9sdHJlZVsyNl0pIHJldHVybiAxOwogICAgICAgICAgICAgICAgZm9yICh0ID0gMzI7IHQgPCBhOyB0KyspIGlmICgwICE9PSBlLmR5bl9sdHJlZVsyICogdF0pIHJldHVybiAxOwogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgfShlKSksIFAoZSwgZS5sX2Rlc2MpLCBQKGUsIGUuZF9kZXNjKSwgbCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdDsKICAgICAgICAgICAgICAgIGZvciAoRyhlLCBlLmR5bl9sdHJlZSwgZS5sX2Rlc2MubWF4X2NvZGUpLCBHKGUsIGUuZHluX2R0cmVlLCBlLmRfZGVzYy5tYXhfY29kZSksIFAoZSwgZS5ibF9kZXNjKSwgdCA9IDE4OyB0ID49IDMgJiYgMCA9PT0gZS5ibF90cmVlWzIgKiBmW3RdICsgMV07IHQtLSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZS5vcHRfbGVuICs9IDMgKiAodCArIDEpICsgNSArIDUgKyA0LCB0OwogICAgICAgICAgICAgIH0oZSksIG4gPSBlLm9wdF9sZW4gKyAzICsgNyA+Pj4gMywgbyA9IGUuc3RhdGljX2xlbiArIDMgKyA3ID4+PiAzLCBvIDw9IG4gJiYgKG4gPSBvKSkgOiBuID0gbyA9IHIgKyA1LCByICsgNCA8PSBuICYmIC0xICE9PSB0ID8gTihlLCB0LCByLCBzKSA6IDQgPT09IGUuc3RyYXRlZ3kgfHwgbyA9PT0gbiA/IChMKGUsIDIgKyAocyA/IDEgOiAwKSwgMyksIFIoZSwgcCwgZykpIDogKEwoZSwgNCArIChzID8gMSA6IDApLCAzKSwgZnVuY3Rpb24gKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICAgICAgZm9yIChMKGUsIHQgLSAyNTcsIDUpLCBMKGUsIHIgLSAxLCA1KSwgTChlLCBzIC0gNCwgNCksIGEgPSAwOyBhIDwgczsgYSsrKSBMKGUsIGUuYmxfdHJlZVsyICogZlthXSArIDFdLCAzKTsKICAgICAgICAgICAgICAgIEIoZSwgZS5keW5fbHRyZWUsIHQgLSAxKSwgQihlLCBlLmR5bl9kdHJlZSwgciAtIDEpOwogICAgICAgICAgICAgIH0oZSwgZS5sX2Rlc2MubWF4X2NvZGUgKyAxLCBlLmRfZGVzYy5tYXhfY29kZSArIDEsIGwgKyAxKSwgUihlLCBlLmR5bl9sdHJlZSwgZS5keW5fZHRyZWUpKSwgSShlKSwgcyAmJiBPKGUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBqID0gewogICAgICAgICAgICAgIF90cl9pbml0OiBmdW5jdGlvbiBfdHJfaW5pdChlKSB7CiAgICAgICAgICAgICAgICBVIHx8IChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBlLCB0LCByLCBzLCBhOwogICAgICAgICAgICAgICAgICB2YXIgZiA9IG5ldyBBcnJheSgxNik7CiAgICAgICAgICAgICAgICAgIGZvciAociA9IDAsIHMgPSAwOyBzIDwgMjg7IHMrKykgZm9yICh5W3NdID0gciwgZSA9IDA7IGUgPCAxIDw8IGhbc107IGUrKykgX1tyKytdID0gczsKICAgICAgICAgICAgICAgICAgZm9yIChfW3IgLSAxXSA9IHMsIGEgPSAwLCBzID0gMDsgcyA8IDE2OyBzKyspIGZvciAoYltzXSA9IGEsIGUgPSAwOyBlIDwgMSA8PCBjW3NdOyBlKyspIHZbYSsrXSA9IHM7CiAgICAgICAgICAgICAgICAgIGZvciAoYSA+Pj0gNzsgcyA8IG87IHMrKykgZm9yIChiW3NdID0gYSA8PCA3LCBlID0gMDsgZSA8IDEgPDwgY1tzXSAtIDc7IGUrKykgdlsyNTYgKyBhKytdID0gczsKICAgICAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8PSBsOyB0KyspIGZbdF0gPSAwOwogICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBlIDw9IDE0MzspIHBbMiAqIGUgKyAxXSA9IDgsIGUrKywgZls4XSsrOwogICAgICAgICAgICAgICAgICBmb3IgKDsgZSA8PSAyNTU7KSBwWzIgKiBlICsgMV0gPSA5LCBlKyssIGZbOV0rKzsKICAgICAgICAgICAgICAgICAgZm9yICg7IGUgPD0gMjc5OykgcFsyICogZSArIDFdID0gNywgZSsrLCBmWzddKys7CiAgICAgICAgICAgICAgICAgIGZvciAoOyBlIDw9IDI4NzspIHBbMiAqIGUgKyAxXSA9IDgsIGUrKywgZls4XSsrOwogICAgICAgICAgICAgICAgICBmb3IgKGsocCwgMjg3LCBmKSwgZSA9IDA7IGUgPCBvOyBlKyspIGdbMiAqIGUgKyAxXSA9IDUsIGdbMiAqIGVdID0gVChlLCA1KTsKICAgICAgICAgICAgICAgICAgeCA9IG5ldyB3KHAsIGgsIDI1NywgbiwgbCksIEEgPSBuZXcgdyhnLCBjLCAwLCBvLCBsKSwgQyA9IG5ldyB3KG5ldyBBcnJheSgwKSwgdSwgMCwgMTksIDcpOwogICAgICAgICAgICAgICAgfSgpLCBVID0gITApLCBlLmxfZGVzYyA9IG5ldyBTKGUuZHluX2x0cmVlLCB4KSwgZS5kX2Rlc2MgPSBuZXcgUyhlLmR5bl9kdHJlZSwgQSksIGUuYmxfZGVzYyA9IG5ldyBTKGUuYmxfdHJlZSwgQyksIGUuYmlfYnVmID0gMCwgZS5iaV92YWxpZCA9IDAsIEkoZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBfdHJfc3RvcmVkX2Jsb2NrOiBOLAogICAgICAgICAgICAgIF90cl9mbHVzaF9ibG9jazogViwKICAgICAgICAgICAgICBfdHJfdGFsbHk6IGZ1bmN0aW9uIF90cl90YWxseShlLCB0LCByKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZS5wZW5kaW5nX2J1ZltlLnN5bV9idWYgKyBlLnN5bV9uZXh0KytdID0gdCwgZS5wZW5kaW5nX2J1ZltlLnN5bV9idWYgKyBlLnN5bV9uZXh0KytdID0gdCA+PiA4LCBlLnBlbmRpbmdfYnVmW2Uuc3ltX2J1ZiArIGUuc3ltX25leHQrK10gPSByLCAwID09PSB0ID8gZS5keW5fbHRyZWVbMiAqIHJdKysgOiAoZS5tYXRjaGVzKyssIHQtLSwgZS5keW5fbHRyZWVbMiAqIChfW3JdICsgYSArIDEpXSsrLCBlLmR5bl9kdHJlZVsyICogTSh0KV0rKyksIGUuc3ltX25leHQgPT09IGUuc3ltX2VuZDsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIF90cl9hbGlnbjogZnVuY3Rpb24gX3RyX2FsaWduKGUpIHsKICAgICAgICAgICAgICAgIEwoZSwgMiwgMyksIEUoZSwgMjU2LCBwKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgMTYgPT09IGUuYmlfdmFsaWQgPyAoeihlLCBlLmJpX2J1ZiksIGUuYmlfYnVmID0gMCwgZS5iaV92YWxpZCA9IDApIDogZS5iaV92YWxpZCA+PSA4ICYmIChlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXSA9IDI1NSAmIGUuYmlfYnVmLCBlLmJpX2J1ZiA+Pj0gOCwgZS5iaV92YWxpZCAtPSA4KTsKICAgICAgICAgICAgICAgIH0oZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgdmFyIEggPSBmdW5jdGlvbiBIKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgdmFyIGEgPSA2NTUzNSAmIGUgfCAwLAogICAgICAgICAgICAgIG4gPSBlID4+PiAxNiAmIDY1NTM1IHwgMCwKICAgICAgICAgICAgICBvID0gMDsKICAgICAgICAgICAgZm9yICg7IDAgIT09IHI7KSB7CiAgICAgICAgICAgICAgbyA9IHIgPiAyZTMgPyAyZTMgOiByLCByIC09IG87CiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgYSA9IGEgKyB0W3MrK10gfCAwLCBuID0gbiArIGEgfCAwOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tbyk7CiAgICAgICAgICAgICAgYSAlPSA2NTUyMSwgbiAlPSA2NTUyMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYSB8IG4gPDwgMTYgfCAwOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBXID0gbmV3IFVpbnQzMkFycmF5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGUsCiAgICAgICAgICAgICAgdCA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IDI1NjsgcisrKSB7CiAgICAgICAgICAgICAgZSA9IHI7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCA4OyBzKyspIGUgPSAxICYgZSA/IDM5ODgyOTIzODQgXiBlID4+PiAxIDogZSA+Pj4gMTsKICAgICAgICAgICAgICB0W3JdID0gZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgIH0oKSk7CiAgICAgICAgICB2YXIgcSA9IGZ1bmN0aW9uIHEoZSwgdCwgciwgcykgewogICAgICAgICAgICAgIHZhciBhID0gVywKICAgICAgICAgICAgICAgIG4gPSBzICsgcjsKICAgICAgICAgICAgICBlIF49IC0xOwogICAgICAgICAgICAgIGZvciAodmFyIF9yNzIgPSBzOyBfcjcyIDwgbjsgX3I3MisrKSBlID0gZSA+Pj4gOCBeIGFbMjU1ICYgKGUgXiB0W19yNzJdKV07CiAgICAgICAgICAgICAgcmV0dXJuIC0xIF4gZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWSA9IHsKICAgICAgICAgICAgICAyOiAibmVlZCBkaWN0aW9uYXJ5IiwKICAgICAgICAgICAgICAxOiAic3RyZWFtIGVuZCIsCiAgICAgICAgICAgICAgMDogIiIsCiAgICAgICAgICAgICAgIi0xIjogImZpbGUgZXJyb3IiLAogICAgICAgICAgICAgICItMiI6ICJzdHJlYW0gZXJyb3IiLAogICAgICAgICAgICAgICItMyI6ICJkYXRhIGVycm9yIiwKICAgICAgICAgICAgICAiLTQiOiAiaW5zdWZmaWNpZW50IG1lbW9yeSIsCiAgICAgICAgICAgICAgIi01IjogImJ1ZmZlciBlcnJvciIsCiAgICAgICAgICAgICAgIi02IjogImluY29tcGF0aWJsZSB2ZXJzaW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICBaID0gewogICAgICAgICAgICAgIFpfTk9fRkxVU0g6IDAsCiAgICAgICAgICAgICAgWl9QQVJUSUFMX0ZMVVNIOiAxLAogICAgICAgICAgICAgIFpfU1lOQ19GTFVTSDogMiwKICAgICAgICAgICAgICBaX0ZVTExfRkxVU0g6IDMsCiAgICAgICAgICAgICAgWl9GSU5JU0g6IDQsCiAgICAgICAgICAgICAgWl9CTE9DSzogNSwKICAgICAgICAgICAgICBaX1RSRUVTOiA2LAogICAgICAgICAgICAgIFpfT0s6IDAsCiAgICAgICAgICAgICAgWl9TVFJFQU1fRU5EOiAxLAogICAgICAgICAgICAgIFpfTkVFRF9ESUNUOiAyLAogICAgICAgICAgICAgIFpfRVJSTk86IC0xLAogICAgICAgICAgICAgIFpfU1RSRUFNX0VSUk9SOiAtMiwKICAgICAgICAgICAgICBaX0RBVEFfRVJST1I6IC0zLAogICAgICAgICAgICAgIFpfTUVNX0VSUk9SOiAtNCwKICAgICAgICAgICAgICBaX0JVRl9FUlJPUjogLTUsCiAgICAgICAgICAgICAgWl9OT19DT01QUkVTU0lPTjogMCwKICAgICAgICAgICAgICBaX0JFU1RfU1BFRUQ6IDEsCiAgICAgICAgICAgICAgWl9CRVNUX0NPTVBSRVNTSU9OOiA5LAogICAgICAgICAgICAgIFpfREVGQVVMVF9DT01QUkVTU0lPTjogLTEsCiAgICAgICAgICAgICAgWl9GSUxURVJFRDogMSwKICAgICAgICAgICAgICBaX0hVRkZNQU5fT05MWTogMiwKICAgICAgICAgICAgICBaX1JMRTogMywKICAgICAgICAgICAgICBaX0ZJWEVEOiA0LAogICAgICAgICAgICAgIFpfREVGQVVMVF9TVFJBVEVHWTogMCwKICAgICAgICAgICAgICBaX0JJTkFSWTogMCwKICAgICAgICAgICAgICBaX1RFWFQ6IDEsCiAgICAgICAgICAgICAgWl9VTktOT1dOOiAyLAogICAgICAgICAgICAgIFpfREVGTEFURUQ6IDgKICAgICAgICAgICAgfTsKICAgICAgICAgIHZhciBYID0gai5fdHJfaW5pdCwKICAgICAgICAgICAgSyA9IGouX3RyX3N0b3JlZF9ibG9jaywKICAgICAgICAgICAgJCA9IGouX3RyX2ZsdXNoX2Jsb2NrLAogICAgICAgICAgICBRID0gai5fdHJfdGFsbHksCiAgICAgICAgICAgIEogPSBqLl90cl9hbGlnbiwKICAgICAgICAgICAgZWUgPSBaLlpfTk9fRkxVU0gsCiAgICAgICAgICAgIHRlID0gWi5aX1BBUlRJQUxfRkxVU0gsCiAgICAgICAgICAgIHJlID0gWi5aX0ZVTExfRkxVU0gsCiAgICAgICAgICAgIGllID0gWi5aX0ZJTklTSCwKICAgICAgICAgICAgc2UgPSBaLlpfQkxPQ0ssCiAgICAgICAgICAgIGFlID0gWi5aX09LLAogICAgICAgICAgICBuZSA9IFouWl9TVFJFQU1fRU5ELAogICAgICAgICAgICBvZSA9IFouWl9TVFJFQU1fRVJST1IsCiAgICAgICAgICAgIGxlID0gWi5aX0RBVEFfRVJST1IsCiAgICAgICAgICAgIGhlID0gWi5aX0JVRl9FUlJPUiwKICAgICAgICAgICAgY2UgPSBaLlpfREVGQVVMVF9DT01QUkVTU0lPTiwKICAgICAgICAgICAgZGUgPSBaLlpfRklMVEVSRUQsCiAgICAgICAgICAgIHVlID0gWi5aX0hVRkZNQU5fT05MWSwKICAgICAgICAgICAgZmUgPSBaLlpfUkxFLAogICAgICAgICAgICBwZSA9IFouWl9GSVhFRCwKICAgICAgICAgICAgbWUgPSBaLlpfREVGQVVMVF9TVFJBVEVHWSwKICAgICAgICAgICAgZ2UgPSBaLlpfVU5LTk9XTiwKICAgICAgICAgICAgdmUgPSBaLlpfREVGTEFURUQsCiAgICAgICAgICAgIF9lID0gMjU4LAogICAgICAgICAgICB5ZSA9IDI2MiwKICAgICAgICAgICAgYmUgPSA0MiwKICAgICAgICAgICAgd2UgPSAxMTMsCiAgICAgICAgICAgIHhlID0gNjY2LAogICAgICAgICAgICBBZSA9IGZ1bmN0aW9uIEFlKGUsIHQpIHsKICAgICAgICAgICAgICByZXR1cm4gZS5tc2cgPSBZW3RdLCB0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBDZSA9IGZ1bmN0aW9uIENlKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gMiAqIGUgLSAoZSA+IDQgPyA5IDogMCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNlID0gZnVuY3Rpb24gU2UoZSkgewogICAgICAgICAgICAgIHZhciB0ID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yICg7IC0tdCA+PSAwOykgZVt0XSA9IDA7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1lID0gZnVuY3Rpb24gTWUoZSkgewogICAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgIHMsCiAgICAgICAgICAgICAgICBhID0gZS53X3NpemU7CiAgICAgICAgICAgICAgdCA9IGUuaGFzaF9zaXplLCBzID0gdDsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICByID0gZS5oZWFkWy0tc10sIGUuaGVhZFtzXSA9IHIgPj0gYSA/IHIgLSBhIDogMDsKICAgICAgICAgICAgICB9IHdoaWxlICgtLXQpOwogICAgICAgICAgICAgIHQgPSBhLCBzID0gdDsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICByID0gZS5wcmV2Wy0tc10sIGUucHJldltzXSA9IHIgPj0gYSA/IHIgLSBhIDogMDsKICAgICAgICAgICAgICB9IHdoaWxlICgtLXQpOwogICAgICAgICAgICB9OwogICAgICAgICAgdmFyIHplID0gZnVuY3Rpb24gemUoZSwgdCwgcikgewogICAgICAgICAgICByZXR1cm4gKHQgPDwgZS5oYXNoX3NoaWZ0IF4gcikgJiBlLmhhc2hfbWFzazsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgTGUgPSBmdW5jdGlvbiBMZShlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBlLnN0YXRlOwogICAgICAgICAgICAgIHZhciByID0gdC5wZW5kaW5nOwogICAgICAgICAgICAgIHIgPiBlLmF2YWlsX291dCAmJiAociA9IGUuYXZhaWxfb3V0KSwgMCAhPT0gciAmJiAoZS5vdXRwdXQuc2V0KHQucGVuZGluZ19idWYuc3ViYXJyYXkodC5wZW5kaW5nX291dCwgdC5wZW5kaW5nX291dCArIHIpLCBlLm5leHRfb3V0KSwgZS5uZXh0X291dCArPSByLCB0LnBlbmRpbmdfb3V0ICs9IHIsIGUudG90YWxfb3V0ICs9IHIsIGUuYXZhaWxfb3V0IC09IHIsIHQucGVuZGluZyAtPSByLCAwID09PSB0LnBlbmRpbmcgJiYgKHQucGVuZGluZ19vdXQgPSAwKSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEVlID0gZnVuY3Rpb24gRWUoZSwgdCkgewogICAgICAgICAgICAgICQoZSwgZS5ibG9ja19zdGFydCA+PSAwID8gZS5ibG9ja19zdGFydCA6IC0xLCBlLnN0cnN0YXJ0IC0gZS5ibG9ja19zdGFydCwgdCksIGUuYmxvY2tfc3RhcnQgPSBlLnN0cnN0YXJ0LCBMZShlLnN0cm0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBUZSA9IGZ1bmN0aW9uIFRlKGUsIHQpIHsKICAgICAgICAgICAgICBlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXSA9IHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtlID0gZnVuY3Rpb24ga2UoZSwgdCkgewogICAgICAgICAgICAgIGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdID0gdCA+Pj4gOCAmIDI1NSwgZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK10gPSAyNTUgJiB0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBJZSA9IGZ1bmN0aW9uIEllKGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICB2YXIgYSA9IGUuYXZhaWxfaW47CiAgICAgICAgICAgICAgcmV0dXJuIGEgPiBzICYmIChhID0gcyksIDAgPT09IGEgPyAwIDogKGUuYXZhaWxfaW4gLT0gYSwgdC5zZXQoZS5pbnB1dC5zdWJhcnJheShlLm5leHRfaW4sIGUubmV4dF9pbiArIGEpLCByKSwgMSA9PT0gZS5zdGF0ZS53cmFwID8gZS5hZGxlciA9IEgoZS5hZGxlciwgdCwgYSwgcikgOiAyID09PSBlLnN0YXRlLndyYXAgJiYgKGUuYWRsZXIgPSBxKGUuYWRsZXIsIHQsIGEsIHIpKSwgZS5uZXh0X2luICs9IGEsIGUudG90YWxfaW4gKz0gYSwgYSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE9lID0gZnVuY3Rpb24gT2UoZSwgdCkgewogICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGEgPSBlLm1heF9jaGFpbl9sZW5ndGgsCiAgICAgICAgICAgICAgICBuID0gZS5zdHJzdGFydCwKICAgICAgICAgICAgICAgIG8gPSBlLnByZXZfbGVuZ3RoLAogICAgICAgICAgICAgICAgbCA9IGUubmljZV9tYXRjaDsKICAgICAgICAgICAgICB2YXIgaCA9IGUuc3Ryc3RhcnQgPiBlLndfc2l6ZSAtIHllID8gZS5zdHJzdGFydCAtIChlLndfc2l6ZSAtIHllKSA6IDAsCiAgICAgICAgICAgICAgICBjID0gZS53aW5kb3csCiAgICAgICAgICAgICAgICB1ID0gZS53X21hc2ssCiAgICAgICAgICAgICAgICBmID0gZS5wcmV2LAogICAgICAgICAgICAgICAgcCA9IGUuc3Ryc3RhcnQgKyBfZTsKICAgICAgICAgICAgICB2YXIgZyA9IGNbbiArIG8gLSAxXSwKICAgICAgICAgICAgICAgIHYgPSBjW24gKyBvXTsKICAgICAgICAgICAgICBlLnByZXZfbGVuZ3RoID49IGUuZ29vZF9tYXRjaCAmJiAoYSA+Pj0gMiksIGwgPiBlLmxvb2thaGVhZCAmJiAobCA9IGUubG9va2FoZWFkKTsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBpZiAociA9IHQsIGNbciArIG9dID09PSB2ICYmIGNbciArIG8gLSAxXSA9PT0gZyAmJiBjW3JdID09PSBjW25dICYmIGNbKytyXSA9PT0gY1tuICsgMV0pIHsKICAgICAgICAgICAgICAgICAgbiArPSAyLCByKys7CiAgICAgICAgICAgICAgICAgIGRvIHt9IHdoaWxlIChjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBjWysrbl0gPT09IGNbKytyXSAmJiBuIDwgcCk7CiAgICAgICAgICAgICAgICAgIGlmIChzID0gX2UgLSAocCAtIG4pLCBuID0gcCAtIF9lLCBzID4gbykgewogICAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoX3N0YXJ0ID0gdCwgbyA9IHMsIHMgPj0gbCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgZyA9IGNbbiArIG8gLSAxXSwgdiA9IGNbbiArIG9dOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSB3aGlsZSAoKHQgPSBmW3QgJiB1XSkgPiBoICYmIDAgIT0gLS1hKTsKICAgICAgICAgICAgICByZXR1cm4gbyA8PSBlLmxvb2thaGVhZCA/IG8gOiBlLmxvb2thaGVhZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRGUgPSBmdW5jdGlvbiBEZShlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBlLndfc2l6ZTsKICAgICAgICAgICAgICB2YXIgciwgcywgYTsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBpZiAocyA9IGUud2luZG93X3NpemUgLSBlLmxvb2thaGVhZCAtIGUuc3Ryc3RhcnQsIGUuc3Ryc3RhcnQgPj0gdCArICh0IC0geWUpICYmIChlLndpbmRvdy5zZXQoZS53aW5kb3cuc3ViYXJyYXkodCwgdCArIHQgLSBzKSwgMCksIGUubWF0Y2hfc3RhcnQgLT0gdCwgZS5zdHJzdGFydCAtPSB0LCBlLmJsb2NrX3N0YXJ0IC09IHQsIGUuaW5zZXJ0ID4gZS5zdHJzdGFydCAmJiAoZS5pbnNlcnQgPSBlLnN0cnN0YXJ0KSwgTWUoZSksIHMgKz0gdCksIDAgPT09IGUuc3RybS5hdmFpbF9pbikgYnJlYWs7CiAgICAgICAgICAgICAgICBpZiAociA9IEllKGUuc3RybSwgZS53aW5kb3csIGUuc3Ryc3RhcnQgKyBlLmxvb2thaGVhZCwgcyksIGUubG9va2FoZWFkICs9IHIsIGUubG9va2FoZWFkICsgZS5pbnNlcnQgPj0gMykgZm9yIChhID0gZS5zdHJzdGFydCAtIGUuaW5zZXJ0LCBlLmluc19oID0gZS53aW5kb3dbYV0sIGUuaW5zX2ggPSB6ZShlLCBlLmluc19oLCBlLndpbmRvd1thICsgMV0pOyBlLmluc2VydCAmJiAoZS5pbnNfaCA9IHplKGUsIGUuaW5zX2gsIGUud2luZG93W2EgKyAzIC0gMV0pLCBlLnByZXZbYSAmIGUud19tYXNrXSA9IGUuaGVhZFtlLmluc19oXSwgZS5oZWFkW2UuaW5zX2hdID0gYSwgYSsrLCBlLmluc2VydC0tLCAhKGUubG9va2FoZWFkICsgZS5pbnNlcnQgPCAzKSk7KTsKICAgICAgICAgICAgICB9IHdoaWxlIChlLmxvb2thaGVhZCA8IHllICYmIDAgIT09IGUuc3RybS5hdmFpbF9pbik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEZlID0gZnVuY3Rpb24gRmUoZSwgdCkgewogICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICBuID0gZS5wZW5kaW5nX2J1Zl9zaXplIC0gNSA+IGUud19zaXplID8gZS53X3NpemUgOiBlLnBlbmRpbmdfYnVmX3NpemUgLSA1LAogICAgICAgICAgICAgICAgbyA9IDAsCiAgICAgICAgICAgICAgICBsID0gZS5zdHJtLmF2YWlsX2luOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIGlmIChyID0gNjU1MzUsIGEgPSBlLmJpX3ZhbGlkICsgNDIgPj4gMywgZS5zdHJtLmF2YWlsX291dCA8IGEpIGJyZWFrOwogICAgICAgICAgICAgICAgaWYgKGEgPSBlLnN0cm0uYXZhaWxfb3V0IC0gYSwgcyA9IGUuc3Ryc3RhcnQgLSBlLmJsb2NrX3N0YXJ0LCByID4gcyArIGUuc3RybS5hdmFpbF9pbiAmJiAociA9IHMgKyBlLnN0cm0uYXZhaWxfaW4pLCByID4gYSAmJiAociA9IGEpLCByIDwgbiAmJiAoMCA9PT0gciAmJiB0ICE9PSBpZSB8fCB0ID09PSBlZSB8fCByICE9PSBzICsgZS5zdHJtLmF2YWlsX2luKSkgYnJlYWs7CiAgICAgICAgICAgICAgICBvID0gdCA9PT0gaWUgJiYgciA9PT0gcyArIGUuc3RybS5hdmFpbF9pbiA/IDEgOiAwLCBLKGUsIDAsIDAsIG8pLCBlLnBlbmRpbmdfYnVmW2UucGVuZGluZyAtIDRdID0gciwgZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcgLSAzXSA9IHIgPj4gOCwgZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcgLSAyXSA9IH5yLCBlLnBlbmRpbmdfYnVmW2UucGVuZGluZyAtIDFdID0gfnIgPj4gOCwgTGUoZS5zdHJtKSwgcyAmJiAocyA+IHIgJiYgKHMgPSByKSwgZS5zdHJtLm91dHB1dC5zZXQoZS53aW5kb3cuc3ViYXJyYXkoZS5ibG9ja19zdGFydCwgZS5ibG9ja19zdGFydCArIHMpLCBlLnN0cm0ubmV4dF9vdXQpLCBlLnN0cm0ubmV4dF9vdXQgKz0gcywgZS5zdHJtLmF2YWlsX291dCAtPSBzLCBlLnN0cm0udG90YWxfb3V0ICs9IHMsIGUuYmxvY2tfc3RhcnQgKz0gcywgciAtPSBzKSwgciAmJiAoSWUoZS5zdHJtLCBlLnN0cm0ub3V0cHV0LCBlLnN0cm0ubmV4dF9vdXQsIHIpLCBlLnN0cm0ubmV4dF9vdXQgKz0gciwgZS5zdHJtLmF2YWlsX291dCAtPSByLCBlLnN0cm0udG90YWxfb3V0ICs9IHIpOwogICAgICAgICAgICAgIH0gd2hpbGUgKDAgPT09IG8pOwogICAgICAgICAgICAgIHJldHVybiBsIC09IGUuc3RybS5hdmFpbF9pbiwgbCAmJiAobCA+PSBlLndfc2l6ZSA/IChlLm1hdGNoZXMgPSAyLCBlLndpbmRvdy5zZXQoZS5zdHJtLmlucHV0LnN1YmFycmF5KGUuc3RybS5uZXh0X2luIC0gZS53X3NpemUsIGUuc3RybS5uZXh0X2luKSwgMCksIGUuc3Ryc3RhcnQgPSBlLndfc2l6ZSwgZS5pbnNlcnQgPSBlLnN0cnN0YXJ0KSA6IChlLndpbmRvd19zaXplIC0gZS5zdHJzdGFydCA8PSBsICYmIChlLnN0cnN0YXJ0IC09IGUud19zaXplLCBlLndpbmRvdy5zZXQoZS53aW5kb3cuc3ViYXJyYXkoZS53X3NpemUsIGUud19zaXplICsgZS5zdHJzdGFydCksIDApLCBlLm1hdGNoZXMgPCAyICYmIGUubWF0Y2hlcysrLCBlLmluc2VydCA+IGUuc3Ryc3RhcnQgJiYgKGUuaW5zZXJ0ID0gZS5zdHJzdGFydCkpLCBlLndpbmRvdy5zZXQoZS5zdHJtLmlucHV0LnN1YmFycmF5KGUuc3RybS5uZXh0X2luIC0gbCwgZS5zdHJtLm5leHRfaW4pLCBlLnN0cnN0YXJ0KSwgZS5zdHJzdGFydCArPSBsLCBlLmluc2VydCArPSBsID4gZS53X3NpemUgLSBlLmluc2VydCA/IGUud19zaXplIC0gZS5pbnNlcnQgOiBsKSwgZS5ibG9ja19zdGFydCA9IGUuc3Ryc3RhcnQpLCBlLmhpZ2hfd2F0ZXIgPCBlLnN0cnN0YXJ0ICYmIChlLmhpZ2hfd2F0ZXIgPSBlLnN0cnN0YXJ0KSwgbyA/IDQgOiB0ICE9PSBlZSAmJiB0ICE9PSBpZSAmJiAwID09PSBlLnN0cm0uYXZhaWxfaW4gJiYgZS5zdHJzdGFydCA9PT0gZS5ibG9ja19zdGFydCA/IDIgOiAoYSA9IGUud2luZG93X3NpemUgLSBlLnN0cnN0YXJ0LCBlLnN0cm0uYXZhaWxfaW4gPiBhICYmIGUuYmxvY2tfc3RhcnQgPj0gZS53X3NpemUgJiYgKGUuYmxvY2tfc3RhcnQgLT0gZS53X3NpemUsIGUuc3Ryc3RhcnQgLT0gZS53X3NpemUsIGUud2luZG93LnNldChlLndpbmRvdy5zdWJhcnJheShlLndfc2l6ZSwgZS53X3NpemUgKyBlLnN0cnN0YXJ0KSwgMCksIGUubWF0Y2hlcyA8IDIgJiYgZS5tYXRjaGVzKyssIGEgKz0gZS53X3NpemUsIGUuaW5zZXJ0ID4gZS5zdHJzdGFydCAmJiAoZS5pbnNlcnQgPSBlLnN0cnN0YXJ0KSksIGEgPiBlLnN0cm0uYXZhaWxfaW4gJiYgKGEgPSBlLnN0cm0uYXZhaWxfaW4pLCBhICYmIChJZShlLnN0cm0sIGUud2luZG93LCBlLnN0cnN0YXJ0LCBhKSwgZS5zdHJzdGFydCArPSBhLCBlLmluc2VydCArPSBhID4gZS53X3NpemUgLSBlLmluc2VydCA/IGUud19zaXplIC0gZS5pbnNlcnQgOiBhKSwgZS5oaWdoX3dhdGVyIDwgZS5zdHJzdGFydCAmJiAoZS5oaWdoX3dhdGVyID0gZS5zdHJzdGFydCksIGEgPSBlLmJpX3ZhbGlkICsgNDIgPj4gMywgYSA9IGUucGVuZGluZ19idWZfc2l6ZSAtIGEgPiA2NTUzNSA/IDY1NTM1IDogZS5wZW5kaW5nX2J1Zl9zaXplIC0gYSwgbiA9IGEgPiBlLndfc2l6ZSA/IGUud19zaXplIDogYSwgcyA9IGUuc3Ryc3RhcnQgLSBlLmJsb2NrX3N0YXJ0LCAocyA+PSBuIHx8IChzIHx8IHQgPT09IGllKSAmJiB0ICE9PSBlZSAmJiAwID09PSBlLnN0cm0uYXZhaWxfaW4gJiYgcyA8PSBhKSAmJiAociA9IHMgPiBhID8gYSA6IHMsIG8gPSB0ID09PSBpZSAmJiAwID09PSBlLnN0cm0uYXZhaWxfaW4gJiYgciA9PT0gcyA/IDEgOiAwLCBLKGUsIGUuYmxvY2tfc3RhcnQsIHIsIG8pLCBlLmJsb2NrX3N0YXJ0ICs9IHIsIExlKGUuc3RybSkpLCBvID8gMyA6IDEpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBSZSA9IGZ1bmN0aW9uIFJlKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciwgczsKICAgICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICBpZiAoZS5sb29rYWhlYWQgPCB5ZSkgewogICAgICAgICAgICAgICAgICBpZiAoRGUoZSksIGUubG9va2FoZWFkIDwgeWUgJiYgdCA9PT0gZWUpIHJldHVybiAxOwogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5sb29rYWhlYWQpIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIgPSAwLCBlLmxvb2thaGVhZCA+PSAzICYmIChlLmluc19oID0gemUoZSwgZS5pbnNfaCwgZS53aW5kb3dbZS5zdHJzdGFydCArIDMgLSAxXSksIHIgPSBlLnByZXZbZS5zdHJzdGFydCAmIGUud19tYXNrXSA9IGUuaGVhZFtlLmluc19oXSwgZS5oZWFkW2UuaW5zX2hdID0gZS5zdHJzdGFydCksIDAgIT09IHIgJiYgZS5zdHJzdGFydCAtIHIgPD0gZS53X3NpemUgLSB5ZSAmJiAoZS5tYXRjaF9sZW5ndGggPSBPZShlLCByKSksIGUubWF0Y2hfbGVuZ3RoID49IDMpIHsKICAgICAgICAgICAgICAgICAgaWYgKHMgPSBRKGUsIGUuc3Ryc3RhcnQgLSBlLm1hdGNoX3N0YXJ0LCBlLm1hdGNoX2xlbmd0aCAtIDMpLCBlLmxvb2thaGVhZCAtPSBlLm1hdGNoX2xlbmd0aCwgZS5tYXRjaF9sZW5ndGggPD0gZS5tYXhfbGF6eV9tYXRjaCAmJiBlLmxvb2thaGVhZCA+PSAzKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tYXRjaF9sZW5ndGgtLTsKICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICBlLnN0cnN0YXJ0KyssIGUuaW5zX2ggPSB6ZShlLCBlLmluc19oLCBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMyAtIDFdKSwgciA9IGUucHJldltlLnN0cnN0YXJ0ICYgZS53X21hc2tdID0gZS5oZWFkW2UuaW5zX2hdLCBlLmhlYWRbZS5pbnNfaF0gPSBlLnN0cnN0YXJ0OwogICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKDAgIT0gLS1lLm1hdGNoX2xlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgZS5zdHJzdGFydCsrOwogICAgICAgICAgICAgICAgICB9IGVsc2UgZS5zdHJzdGFydCArPSBlLm1hdGNoX2xlbmd0aCwgZS5tYXRjaF9sZW5ndGggPSAwLCBlLmluc19oID0gZS53aW5kb3dbZS5zdHJzdGFydF0sIGUuaW5zX2ggPSB6ZShlLCBlLmluc19oLCBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMV0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHMgPSBRKGUsIDAsIGUud2luZG93W2Uuc3Ryc3RhcnRdKSwgZS5sb29rYWhlYWQtLSwgZS5zdHJzdGFydCsrOwogICAgICAgICAgICAgICAgaWYgKHMgJiYgKEVlKGUsICExKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCkpIHJldHVybiAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZS5pbnNlcnQgPSBlLnN0cnN0YXJ0IDwgMiA/IGUuc3Ryc3RhcnQgOiAyLCB0ID09PSBpZSA/IChFZShlLCAhMCksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQgPyAzIDogNCkgOiBlLnN5bV9uZXh0ICYmIChFZShlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpID8gMSA6IDI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFBlID0gZnVuY3Rpb24gUGUoZSwgdCkgewogICAgICAgICAgICAgIHZhciByLCBzLCBhOwogICAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgIGlmIChlLmxvb2thaGVhZCA8IHllKSB7CiAgICAgICAgICAgICAgICAgIGlmIChEZShlKSwgZS5sb29rYWhlYWQgPCB5ZSAmJiB0ID09PSBlZSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBlLmxvb2thaGVhZCkgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAociA9IDAsIGUubG9va2FoZWFkID49IDMgJiYgKGUuaW5zX2ggPSB6ZShlLCBlLmluc19oLCBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMyAtIDFdKSwgciA9IGUucHJldltlLnN0cnN0YXJ0ICYgZS53X21hc2tdID0gZS5oZWFkW2UuaW5zX2hdLCBlLmhlYWRbZS5pbnNfaF0gPSBlLnN0cnN0YXJ0KSwgZS5wcmV2X2xlbmd0aCA9IGUubWF0Y2hfbGVuZ3RoLCBlLnByZXZfbWF0Y2ggPSBlLm1hdGNoX3N0YXJ0LCBlLm1hdGNoX2xlbmd0aCA9IDIsIDAgIT09IHIgJiYgZS5wcmV2X2xlbmd0aCA8IGUubWF4X2xhenlfbWF0Y2ggJiYgZS5zdHJzdGFydCAtIHIgPD0gZS53X3NpemUgLSB5ZSAmJiAoZS5tYXRjaF9sZW5ndGggPSBPZShlLCByKSwgZS5tYXRjaF9sZW5ndGggPD0gNSAmJiAoZS5zdHJhdGVneSA9PT0gZGUgfHwgMyA9PT0gZS5tYXRjaF9sZW5ndGggJiYgZS5zdHJzdGFydCAtIGUubWF0Y2hfc3RhcnQgPiA0MDk2KSAmJiAoZS5tYXRjaF9sZW5ndGggPSAyKSksIGUucHJldl9sZW5ndGggPj0gMyAmJiBlLm1hdGNoX2xlbmd0aCA8PSBlLnByZXZfbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIGEgPSBlLnN0cnN0YXJ0ICsgZS5sb29rYWhlYWQgLSAzLCBzID0gUShlLCBlLnN0cnN0YXJ0IC0gMSAtIGUucHJldl9tYXRjaCwgZS5wcmV2X2xlbmd0aCAtIDMpLCBlLmxvb2thaGVhZCAtPSBlLnByZXZfbGVuZ3RoIC0gMSwgZS5wcmV2X2xlbmd0aCAtPSAyOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgKytlLnN0cnN0YXJ0IDw9IGEgJiYgKGUuaW5zX2ggPSB6ZShlLCBlLmluc19oLCBlLndpbmRvd1tlLnN0cnN0YXJ0ICsgMyAtIDFdKSwgciA9IGUucHJldltlLnN0cnN0YXJ0ICYgZS53X21hc2tdID0gZS5oZWFkW2UuaW5zX2hdLCBlLmhlYWRbZS5pbnNfaF0gPSBlLnN0cnN0YXJ0KTsKICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPSAtLWUucHJldl9sZW5ndGgpOwogICAgICAgICAgICAgICAgICBpZiAoZS5tYXRjaF9hdmFpbGFibGUgPSAwLCBlLm1hdGNoX2xlbmd0aCA9IDIsIGUuc3Ryc3RhcnQrKywgcyAmJiAoRWUoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUubWF0Y2hfYXZhaWxhYmxlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChzID0gUShlLCAwLCBlLndpbmRvd1tlLnN0cnN0YXJ0IC0gMV0pLCBzICYmIEVlKGUsICExKSwgZS5zdHJzdGFydCsrLCBlLmxvb2thaGVhZC0tLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSByZXR1cm4gMTsKICAgICAgICAgICAgICAgIH0gZWxzZSBlLm1hdGNoX2F2YWlsYWJsZSA9IDEsIGUuc3Ryc3RhcnQrKywgZS5sb29rYWhlYWQtLTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGUubWF0Y2hfYXZhaWxhYmxlICYmIChzID0gUShlLCAwLCBlLndpbmRvd1tlLnN0cnN0YXJ0IC0gMV0pLCBlLm1hdGNoX2F2YWlsYWJsZSA9IDApLCBlLmluc2VydCA9IGUuc3Ryc3RhcnQgPCAyID8gZS5zdHJzdGFydCA6IDIsIHQgPT09IGllID8gKEVlKGUsICEwKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCA/IDMgOiA0KSA6IGUuc3ltX25leHQgJiYgKEVlKGUsICExKSwgMCA9PT0gZS5zdHJtLmF2YWlsX291dCkgPyAxIDogMjsKICAgICAgICAgICAgfTsKICAgICAgICAgIGZ1bmN0aW9uIEdlKGUsIHQsIHIsIHMsIGEpIHsKICAgICAgICAgICAgdGhpcy5nb29kX2xlbmd0aCA9IGUsIHRoaXMubWF4X2xhenkgPSB0LCB0aGlzLm5pY2VfbGVuZ3RoID0gciwgdGhpcy5tYXhfY2hhaW4gPSBzLCB0aGlzLmZ1bmMgPSBhOwogICAgICAgICAgfQogICAgICAgICAgdmFyIEJlID0gW25ldyBHZSgwLCAwLCAwLCAwLCBGZSksIG5ldyBHZSg0LCA0LCA4LCA0LCBSZSksIG5ldyBHZSg0LCA1LCAxNiwgOCwgUmUpLCBuZXcgR2UoNCwgNiwgMzIsIDMyLCBSZSksIG5ldyBHZSg0LCA0LCAxNiwgMTYsIFBlKSwgbmV3IEdlKDgsIDE2LCAzMiwgMzIsIFBlKSwgbmV3IEdlKDgsIDE2LCAxMjgsIDEyOCwgUGUpLCBuZXcgR2UoOCwgMzIsIDEyOCwgMjU2LCBQZSksIG5ldyBHZSgzMiwgMTI4LCAyNTgsIDEwMjQsIFBlKSwgbmV3IEdlKDMyLCAyNTgsIDI1OCwgNDA5NiwgUGUpXTsKICAgICAgICAgIGZ1bmN0aW9uIFVlKCkgewogICAgICAgICAgICB0aGlzLnN0cm0gPSBudWxsLCB0aGlzLnN0YXR1cyA9IDAsIHRoaXMucGVuZGluZ19idWYgPSBudWxsLCB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwLCB0aGlzLnBlbmRpbmdfb3V0ID0gMCwgdGhpcy5wZW5kaW5nID0gMCwgdGhpcy53cmFwID0gMCwgdGhpcy5nemhlYWQgPSBudWxsLCB0aGlzLmd6aW5kZXggPSAwLCB0aGlzLm1ldGhvZCA9IHZlLCB0aGlzLmxhc3RfZmx1c2ggPSAtMSwgdGhpcy53X3NpemUgPSAwLCB0aGlzLndfYml0cyA9IDAsIHRoaXMud19tYXNrID0gMCwgdGhpcy53aW5kb3cgPSBudWxsLCB0aGlzLndpbmRvd19zaXplID0gMCwgdGhpcy5wcmV2ID0gbnVsbCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy5pbnNfaCA9IDAsIHRoaXMuaGFzaF9zaXplID0gMCwgdGhpcy5oYXNoX2JpdHMgPSAwLCB0aGlzLmhhc2hfbWFzayA9IDAsIHRoaXMuaGFzaF9zaGlmdCA9IDAsIHRoaXMuYmxvY2tfc3RhcnQgPSAwLCB0aGlzLm1hdGNoX2xlbmd0aCA9IDAsIHRoaXMucHJldl9tYXRjaCA9IDAsIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMCwgdGhpcy5zdHJzdGFydCA9IDAsIHRoaXMubWF0Y2hfc3RhcnQgPSAwLCB0aGlzLmxvb2thaGVhZCA9IDAsIHRoaXMucHJldl9sZW5ndGggPSAwLCB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwLCB0aGlzLm1heF9sYXp5X21hdGNoID0gMCwgdGhpcy5sZXZlbCA9IDAsIHRoaXMuc3RyYXRlZ3kgPSAwLCB0aGlzLmdvb2RfbWF0Y2ggPSAwLCB0aGlzLm5pY2VfbWF0Y2ggPSAwLCB0aGlzLmR5bl9sdHJlZSA9IG5ldyBVaW50MTZBcnJheSgxMTQ2KSwgdGhpcy5keW5fZHRyZWUgPSBuZXcgVWludDE2QXJyYXkoMTIyKSwgdGhpcy5ibF90cmVlID0gbmV3IFVpbnQxNkFycmF5KDc4KSwgU2UodGhpcy5keW5fbHRyZWUpLCBTZSh0aGlzLmR5bl9kdHJlZSksIFNlKHRoaXMuYmxfdHJlZSksIHRoaXMubF9kZXNjID0gbnVsbCwgdGhpcy5kX2Rlc2MgPSBudWxsLCB0aGlzLmJsX2Rlc2MgPSBudWxsLCB0aGlzLmJsX2NvdW50ID0gbmV3IFVpbnQxNkFycmF5KDE2KSwgdGhpcy5oZWFwID0gbmV3IFVpbnQxNkFycmF5KDU3MyksIFNlKHRoaXMuaGVhcCksIHRoaXMuaGVhcF9sZW4gPSAwLCB0aGlzLmhlYXBfbWF4ID0gMCwgdGhpcy5kZXB0aCA9IG5ldyBVaW50MTZBcnJheSg1NzMpLCBTZSh0aGlzLmRlcHRoKSwgdGhpcy5zeW1fYnVmID0gMCwgdGhpcy5saXRfYnVmc2l6ZSA9IDAsIHRoaXMuc3ltX25leHQgPSAwLCB0aGlzLnN5bV9lbmQgPSAwLCB0aGlzLm9wdF9sZW4gPSAwLCB0aGlzLnN0YXRpY19sZW4gPSAwLCB0aGlzLm1hdGNoZXMgPSAwLCB0aGlzLmluc2VydCA9IDAsIHRoaXMuYmlfYnVmID0gMCwgdGhpcy5iaV92YWxpZCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgTmUgPSBmdW5jdGlvbiBOZShlKSB7CiAgICAgICAgICAgICAgaWYgKCFlKSByZXR1cm4gMTsKICAgICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuICF0IHx8IHQuc3RybSAhPT0gZSB8fCB0LnN0YXR1cyAhPT0gYmUgJiYgNTcgIT09IHQuc3RhdHVzICYmIDY5ICE9PSB0LnN0YXR1cyAmJiA3MyAhPT0gdC5zdGF0dXMgJiYgOTEgIT09IHQuc3RhdHVzICYmIDEwMyAhPT0gdC5zdGF0dXMgJiYgdC5zdGF0dXMgIT09IHdlICYmIHQuc3RhdHVzICE9PSB4ZSA/IDEgOiAwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBWZSA9IGZ1bmN0aW9uIFZlKGUpIHsKICAgICAgICAgICAgICBpZiAoTmUoZSkpIHJldHVybiBBZShlLCBvZSk7CiAgICAgICAgICAgICAgZS50b3RhbF9pbiA9IGUudG90YWxfb3V0ID0gMCwgZS5kYXRhX3R5cGUgPSBnZTsKICAgICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuIHQucGVuZGluZyA9IDAsIHQucGVuZGluZ19vdXQgPSAwLCB0LndyYXAgPCAwICYmICh0LndyYXAgPSAtdC53cmFwKSwgdC5zdGF0dXMgPSAyID09PSB0LndyYXAgPyA1NyA6IHQud3JhcCA/IGJlIDogd2UsIGUuYWRsZXIgPSAyID09PSB0LndyYXAgPyAwIDogMSwgdC5sYXN0X2ZsdXNoID0gLTIsIFgodCksIGFlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBqZSA9IGZ1bmN0aW9uIGplKGUpIHsKICAgICAgICAgICAgICB2YXIgdCA9IFZlKGUpOwogICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgIHJldHVybiB0ID09PSBhZSAmJiAoKHIgPSBlLnN0YXRlKS53aW5kb3dfc2l6ZSA9IDIgKiByLndfc2l6ZSwgU2Uoci5oZWFkKSwgci5tYXhfbGF6eV9tYXRjaCA9IEJlW3IubGV2ZWxdLm1heF9sYXp5LCByLmdvb2RfbWF0Y2ggPSBCZVtyLmxldmVsXS5nb29kX2xlbmd0aCwgci5uaWNlX21hdGNoID0gQmVbci5sZXZlbF0ubmljZV9sZW5ndGgsIHIubWF4X2NoYWluX2xlbmd0aCA9IEJlW3IubGV2ZWxdLm1heF9jaGFpbiwgci5zdHJzdGFydCA9IDAsIHIuYmxvY2tfc3RhcnQgPSAwLCByLmxvb2thaGVhZCA9IDAsIHIuaW5zZXJ0ID0gMCwgci5tYXRjaF9sZW5ndGggPSByLnByZXZfbGVuZ3RoID0gMiwgci5tYXRjaF9hdmFpbGFibGUgPSAwLCByLmluc19oID0gMCksIHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEhlID0gZnVuY3Rpb24gSGUoZSwgdCwgciwgcywgYSwgbikgewogICAgICAgICAgICAgIGlmICghZSkgcmV0dXJuIG9lOwogICAgICAgICAgICAgIHZhciBvID0gMTsKICAgICAgICAgICAgICBpZiAodCA9PT0gY2UgJiYgKHQgPSA2KSwgcyA8IDAgPyAobyA9IDAsIHMgPSAtcykgOiBzID4gMTUgJiYgKG8gPSAyLCBzIC09IDE2KSwgYSA8IDEgfHwgYSA+IDkgfHwgciAhPT0gdmUgfHwgcyA8IDggfHwgcyA+IDE1IHx8IHQgPCAwIHx8IHQgPiA5IHx8IG4gPCAwIHx8IG4gPiBwZSB8fCA4ID09PSBzICYmIDEgIT09IG8pIHJldHVybiBBZShlLCBvZSk7CiAgICAgICAgICAgICAgOCA9PT0gcyAmJiAocyA9IDkpOwogICAgICAgICAgICAgIHZhciBsID0gbmV3IFVlKCk7CiAgICAgICAgICAgICAgcmV0dXJuIGUuc3RhdGUgPSBsLCBsLnN0cm0gPSBlLCBsLnN0YXR1cyA9IGJlLCBsLndyYXAgPSBvLCBsLmd6aGVhZCA9IG51bGwsIGwud19iaXRzID0gcywgbC53X3NpemUgPSAxIDw8IGwud19iaXRzLCBsLndfbWFzayA9IGwud19zaXplIC0gMSwgbC5oYXNoX2JpdHMgPSBhICsgNywgbC5oYXNoX3NpemUgPSAxIDw8IGwuaGFzaF9iaXRzLCBsLmhhc2hfbWFzayA9IGwuaGFzaF9zaXplIC0gMSwgbC5oYXNoX3NoaWZ0ID0gfn4oKGwuaGFzaF9iaXRzICsgMyAtIDEpIC8gMyksIGwud2luZG93ID0gbmV3IFVpbnQ4QXJyYXkoMiAqIGwud19zaXplKSwgbC5oZWFkID0gbmV3IFVpbnQxNkFycmF5KGwuaGFzaF9zaXplKSwgbC5wcmV2ID0gbmV3IFVpbnQxNkFycmF5KGwud19zaXplKSwgbC5saXRfYnVmc2l6ZSA9IDEgPDwgYSArIDYsIGwucGVuZGluZ19idWZfc2l6ZSA9IDQgKiBsLmxpdF9idWZzaXplLCBsLnBlbmRpbmdfYnVmID0gbmV3IFVpbnQ4QXJyYXkobC5wZW5kaW5nX2J1Zl9zaXplKSwgbC5zeW1fYnVmID0gbC5saXRfYnVmc2l6ZSwgbC5zeW1fZW5kID0gMyAqIChsLmxpdF9idWZzaXplIC0gMSksIGwubGV2ZWwgPSB0LCBsLnN0cmF0ZWd5ID0gbiwgbC5tZXRob2QgPSByLCBqZShlKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIHZhciBXZSA9IHsKICAgICAgICAgICAgZGVmbGF0ZUluaXQ6IGZ1bmN0aW9uIGRlZmxhdGVJbml0KGUsIHQpIHsKICAgICAgICAgICAgICByZXR1cm4gSGUoZSwgdCwgdmUsIDE1LCA4LCBtZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmxhdGVJbml0MjogSGUsCiAgICAgICAgICAgIGRlZmxhdGVSZXNldDogamUsCiAgICAgICAgICAgIGRlZmxhdGVSZXNldEtlZXA6IFZlLAogICAgICAgICAgICBkZWZsYXRlU2V0SGVhZGVyOiBmdW5jdGlvbiBkZWZsYXRlU2V0SGVhZGVyKGUsIHQpIHsKICAgICAgICAgICAgICByZXR1cm4gTmUoZSkgfHwgMiAhPT0gZS5zdGF0ZS53cmFwID8gb2UgOiAoZS5zdGF0ZS5nemhlYWQgPSB0LCBhZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmxhdGU6IGZ1bmN0aW9uIGRlZmxhdGUoZSwgdCkgewogICAgICAgICAgICAgIGlmIChOZShlKSB8fCB0ID4gc2UgfHwgdCA8IDApIHJldHVybiBlID8gQWUoZSwgb2UpIDogb2U7CiAgICAgICAgICAgICAgdmFyIHIgPSBlLnN0YXRlOwogICAgICAgICAgICAgIGlmICghZS5vdXRwdXQgfHwgMCAhPT0gZS5hdmFpbF9pbiAmJiAhZS5pbnB1dCB8fCByLnN0YXR1cyA9PT0geGUgJiYgdCAhPT0gaWUpIHJldHVybiBBZShlLCAwID09PSBlLmF2YWlsX291dCA/IGhlIDogb2UpOwogICAgICAgICAgICAgIHZhciBzID0gci5sYXN0X2ZsdXNoOwogICAgICAgICAgICAgIGlmIChyLmxhc3RfZmx1c2ggPSB0LCAwICE9PSByLnBlbmRpbmcpIHsKICAgICAgICAgICAgICAgIGlmIChMZShlKSwgMCA9PT0gZS5hdmFpbF9vdXQpIHJldHVybiByLmxhc3RfZmx1c2ggPSAtMSwgYWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICgwID09PSBlLmF2YWlsX2luICYmIENlKHQpIDw9IENlKHMpICYmIHQgIT09IGllKSByZXR1cm4gQWUoZSwgaGUpOwogICAgICAgICAgICAgIGlmIChyLnN0YXR1cyA9PT0geGUgJiYgMCAhPT0gZS5hdmFpbF9pbikgcmV0dXJuIEFlKGUsIGhlKTsKICAgICAgICAgICAgICBpZiAoci5zdGF0dXMgPT09IGJlICYmIDAgPT09IHIud3JhcCAmJiAoci5zdGF0dXMgPSB3ZSksIHIuc3RhdHVzID09PSBiZSkgewogICAgICAgICAgICAgICAgdmFyIF90MTI0ID0gdmUgKyAoci53X2JpdHMgLSA4IDw8IDQpIDw8IDgsCiAgICAgICAgICAgICAgICAgIF9zNjAgPSAtMTsKICAgICAgICAgICAgICAgIGlmIChfczYwID0gci5zdHJhdGVneSA+PSB1ZSB8fCByLmxldmVsIDwgMiA/IDAgOiByLmxldmVsIDwgNiA/IDEgOiA2ID09PSByLmxldmVsID8gMiA6IDMsIF90MTI0IHw9IF9zNjAgPDwgNiwgMCAhPT0gci5zdHJzdGFydCAmJiAoX3QxMjQgfD0gMzIpLCBfdDEyNCArPSAzMSAtIF90MTI0ICUgMzEsIGtlKHIsIF90MTI0KSwgMCAhPT0gci5zdHJzdGFydCAmJiAoa2UociwgZS5hZGxlciA+Pj4gMTYpLCBrZShyLCA2NTUzNSAmIGUuYWRsZXIpKSwgZS5hZGxlciA9IDEsIHIuc3RhdHVzID0gd2UsIExlKGUpLCAwICE9PSByLnBlbmRpbmcpIHJldHVybiByLmxhc3RfZmx1c2ggPSAtMSwgYWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICg1NyA9PT0gci5zdGF0dXMpIGlmIChlLmFkbGVyID0gMCwgVGUociwgMzEpLCBUZShyLCAxMzkpLCBUZShyLCA4KSwgci5nemhlYWQpIFRlKHIsIChyLmd6aGVhZC50ZXh0ID8gMSA6IDApICsgKHIuZ3poZWFkLmhjcmMgPyAyIDogMCkgKyAoci5nemhlYWQuZXh0cmEgPyA0IDogMCkgKyAoci5nemhlYWQubmFtZSA/IDggOiAwKSArIChyLmd6aGVhZC5jb21tZW50ID8gMTYgOiAwKSksIFRlKHIsIDI1NSAmIHIuZ3poZWFkLnRpbWUpLCBUZShyLCByLmd6aGVhZC50aW1lID4+IDggJiAyNTUpLCBUZShyLCByLmd6aGVhZC50aW1lID4+IDE2ICYgMjU1KSwgVGUociwgci5nemhlYWQudGltZSA+PiAyNCAmIDI1NSksIFRlKHIsIDkgPT09IHIubGV2ZWwgPyAyIDogci5zdHJhdGVneSA+PSB1ZSB8fCByLmxldmVsIDwgMiA/IDQgOiAwKSwgVGUociwgMjU1ICYgci5nemhlYWQub3MpLCByLmd6aGVhZC5leHRyYSAmJiByLmd6aGVhZC5leHRyYS5sZW5ndGggJiYgKFRlKHIsIDI1NSAmIHIuZ3poZWFkLmV4dHJhLmxlbmd0aCksIFRlKHIsIHIuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4ICYgMjU1KSksIHIuZ3poZWFkLmhjcmMgJiYgKGUuYWRsZXIgPSBxKGUuYWRsZXIsIHIucGVuZGluZ19idWYsIHIucGVuZGluZywgMCkpLCByLmd6aW5kZXggPSAwLCByLnN0YXR1cyA9IDY5O2Vsc2UgaWYgKFRlKHIsIDApLCBUZShyLCAwKSwgVGUociwgMCksIFRlKHIsIDApLCBUZShyLCAwKSwgVGUociwgOSA9PT0gci5sZXZlbCA/IDIgOiByLnN0cmF0ZWd5ID49IHVlIHx8IHIubGV2ZWwgPCAyID8gNCA6IDApLCBUZShyLCAzKSwgci5zdGF0dXMgPSB3ZSwgTGUoZSksIDAgIT09IHIucGVuZGluZykgcmV0dXJuIHIubGFzdF9mbHVzaCA9IC0xLCBhZTsKICAgICAgICAgICAgICBpZiAoNjkgPT09IHIuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICBpZiAoci5nemhlYWQuZXh0cmEpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90MTI1ID0gci5wZW5kaW5nLAogICAgICAgICAgICAgICAgICAgIF9zNjEgPSAoNjU1MzUgJiByLmd6aGVhZC5leHRyYS5sZW5ndGgpIC0gci5nemluZGV4OwogICAgICAgICAgICAgICAgICBmb3IgKDsgci5wZW5kaW5nICsgX3M2MSA+IHIucGVuZGluZ19idWZfc2l6ZTspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX2EzNyA9IHIucGVuZGluZ19idWZfc2l6ZSAtIHIucGVuZGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoci5wZW5kaW5nX2J1Zi5zZXQoci5nemhlYWQuZXh0cmEuc3ViYXJyYXkoci5nemluZGV4LCByLmd6aW5kZXggKyBfYTM3KSwgci5wZW5kaW5nKSwgci5wZW5kaW5nID0gci5wZW5kaW5nX2J1Zl9zaXplLCByLmd6aGVhZC5oY3JjICYmIHIucGVuZGluZyA+IF90MTI1ICYmIChlLmFkbGVyID0gcShlLmFkbGVyLCByLnBlbmRpbmdfYnVmLCByLnBlbmRpbmcgLSBfdDEyNSwgX3QxMjUpKSwgci5nemluZGV4ICs9IF9hMzcsIExlKGUpLCAwICE9PSByLnBlbmRpbmcpIHJldHVybiByLmxhc3RfZmx1c2ggPSAtMSwgYWU7CiAgICAgICAgICAgICAgICAgICAgX3QxMjUgPSAwLCBfczYxIC09IF9hMzc7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdmFyIF9hMzggPSBuZXcgVWludDhBcnJheShyLmd6aGVhZC5leHRyYSk7CiAgICAgICAgICAgICAgICAgIHIucGVuZGluZ19idWYuc2V0KF9hMzguc3ViYXJyYXkoci5nemluZGV4LCByLmd6aW5kZXggKyBfczYxKSwgci5wZW5kaW5nKSwgci5wZW5kaW5nICs9IF9zNjEsIHIuZ3poZWFkLmhjcmMgJiYgci5wZW5kaW5nID4gX3QxMjUgJiYgKGUuYWRsZXIgPSBxKGUuYWRsZXIsIHIucGVuZGluZ19idWYsIHIucGVuZGluZyAtIF90MTI1LCBfdDEyNSkpLCByLmd6aW5kZXggPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgci5zdGF0dXMgPSA3MzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKDczID09PSByLnN0YXR1cykgewogICAgICAgICAgICAgICAgaWYgKHIuZ3poZWFkLm5hbWUpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90MTI2LAogICAgICAgICAgICAgICAgICAgIF9zNjIgPSByLnBlbmRpbmc7CiAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICBpZiAoci5wZW5kaW5nID09PSByLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmd6aGVhZC5oY3JjICYmIHIucGVuZGluZyA+IF9zNjIgJiYgKGUuYWRsZXIgPSBxKGUuYWRsZXIsIHIucGVuZGluZ19idWYsIHIucGVuZGluZyAtIF9zNjIsIF9zNjIpKSwgTGUoZSksIDAgIT09IHIucGVuZGluZykgcmV0dXJuIHIubGFzdF9mbHVzaCA9IC0xLCBhZTsKICAgICAgICAgICAgICAgICAgICAgIF9zNjIgPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdDEyNiA9IHIuZ3ppbmRleCA8IHIuZ3poZWFkLm5hbWUubGVuZ3RoID8gMjU1ICYgci5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHIuZ3ppbmRleCsrKSA6IDAsIFRlKHIsIF90MTI2KTsKICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoMCAhPT0gX3QxMjYpOwogICAgICAgICAgICAgICAgICByLmd6aGVhZC5oY3JjICYmIHIucGVuZGluZyA+IF9zNjIgJiYgKGUuYWRsZXIgPSBxKGUuYWRsZXIsIHIucGVuZGluZ19idWYsIHIucGVuZGluZyAtIF9zNjIsIF9zNjIpKSwgci5nemluZGV4ID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIuc3RhdHVzID0gOTE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICg5MSA9PT0gci5zdGF0dXMpIHsKICAgICAgICAgICAgICAgIGlmIChyLmd6aGVhZC5jb21tZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciBfdDEyNywKICAgICAgICAgICAgICAgICAgICBfczYzID0gci5wZW5kaW5nOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHIucGVuZGluZyA9PT0gci5wZW5kaW5nX2J1Zl9zaXplKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoci5nemhlYWQuaGNyYyAmJiByLnBlbmRpbmcgPiBfczYzICYmIChlLmFkbGVyID0gcShlLmFkbGVyLCByLnBlbmRpbmdfYnVmLCByLnBlbmRpbmcgLSBfczYzLCBfczYzKSksIExlKGUpLCAwICE9PSByLnBlbmRpbmcpIHJldHVybiByLmxhc3RfZmx1c2ggPSAtMSwgYWU7CiAgICAgICAgICAgICAgICAgICAgICBfczYzID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3QxMjcgPSByLmd6aW5kZXggPCByLmd6aGVhZC5jb21tZW50Lmxlbmd0aCA/IDI1NSAmIHIuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChyLmd6aW5kZXgrKykgOiAwLCBUZShyLCBfdDEyNyk7CiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKDAgIT09IF90MTI3KTsKICAgICAgICAgICAgICAgICAgci5nemhlYWQuaGNyYyAmJiByLnBlbmRpbmcgPiBfczYzICYmIChlLmFkbGVyID0gcShlLmFkbGVyLCByLnBlbmRpbmdfYnVmLCByLnBlbmRpbmcgLSBfczYzLCBfczYzKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByLnN0YXR1cyA9IDEwMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKDEwMyA9PT0gci5zdGF0dXMpIHsKICAgICAgICAgICAgICAgIGlmIChyLmd6aGVhZC5oY3JjKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyLnBlbmRpbmcgKyAyID4gci5wZW5kaW5nX2J1Zl9zaXplICYmIChMZShlKSwgMCAhPT0gci5wZW5kaW5nKSkgcmV0dXJuIHIubGFzdF9mbHVzaCA9IC0xLCBhZTsKICAgICAgICAgICAgICAgICAgVGUociwgMjU1ICYgZS5hZGxlciksIFRlKHIsIGUuYWRsZXIgPj4gOCAmIDI1NSksIGUuYWRsZXIgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIuc3RhdHVzID0gd2UsIExlKGUpLCAwICE9PSByLnBlbmRpbmcpIHJldHVybiByLmxhc3RfZmx1c2ggPSAtMSwgYWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICgwICE9PSBlLmF2YWlsX2luIHx8IDAgIT09IHIubG9va2FoZWFkIHx8IHQgIT09IGVlICYmIHIuc3RhdHVzICE9PSB4ZSkgewogICAgICAgICAgICAgICAgdmFyIF9zNjQgPSAwID09PSByLmxldmVsID8gRmUociwgdCkgOiByLnN0cmF0ZWd5ID09PSB1ZSA/IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGUubG9va2FoZWFkICYmIChEZShlKSwgMCA9PT0gZS5sb29rYWhlYWQpKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gZWUpIHJldHVybiAxOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoX2xlbmd0aCA9IDAsIHIgPSBRKGUsIDAsIGUud2luZG93W2Uuc3Ryc3RhcnRdKSwgZS5sb29rYWhlYWQtLSwgZS5zdHJzdGFydCsrLCByICYmIChFZShlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByZXR1cm4gZS5pbnNlcnQgPSAwLCB0ID09PSBpZSA/IChFZShlLCAhMCksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQgPyAzIDogNCkgOiBlLnN5bV9uZXh0ICYmIChFZShlLCAhMSksIDAgPT09IGUuc3RybS5hdmFpbF9vdXQpID8gMSA6IDI7CiAgICAgICAgICAgICAgICB9KHIsIHQpIDogci5zdHJhdGVneSA9PT0gZmUgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgICB2YXIgciwgcywgYSwgbjsKICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLndpbmRvdzsKICAgICAgICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgICAgIGlmIChlLmxvb2thaGVhZCA8PSBfZSkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKERlKGUpLCBlLmxvb2thaGVhZCA8PSBfZSAmJiB0ID09PSBlZSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5sb29rYWhlYWQpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZS5tYXRjaF9sZW5ndGggPSAwLCBlLmxvb2thaGVhZCA+PSAzICYmIGUuc3Ryc3RhcnQgPiAwICYmIChhID0gZS5zdHJzdGFydCAtIDEsIHMgPSBvW2FdLCBzID09PSBvWysrYV0gJiYgcyA9PT0gb1srK2FdICYmIHMgPT09IG9bKythXSkpIHsKICAgICAgICAgICAgICAgICAgICAgIG4gPSBlLnN0cnN0YXJ0ICsgX2U7CiAgICAgICAgICAgICAgICAgICAgICBkbyB7fSB3aGlsZSAocyA9PT0gb1srK2FdICYmIHMgPT09IG9bKythXSAmJiBzID09PSBvWysrYV0gJiYgcyA9PT0gb1srK2FdICYmIHMgPT09IG9bKythXSAmJiBzID09PSBvWysrYV0gJiYgcyA9PT0gb1srK2FdICYmIHMgPT09IG9bKythXSAmJiBhIDwgbik7CiAgICAgICAgICAgICAgICAgICAgICBlLm1hdGNoX2xlbmd0aCA9IF9lIC0gKG4gLSBhKSwgZS5tYXRjaF9sZW5ndGggPiBlLmxvb2thaGVhZCAmJiAoZS5tYXRjaF9sZW5ndGggPSBlLmxvb2thaGVhZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoX2xlbmd0aCA+PSAzID8gKHIgPSBRKGUsIDEsIGUubWF0Y2hfbGVuZ3RoIC0gMyksIGUubG9va2FoZWFkIC09IGUubWF0Y2hfbGVuZ3RoLCBlLnN0cnN0YXJ0ICs9IGUubWF0Y2hfbGVuZ3RoLCBlLm1hdGNoX2xlbmd0aCA9IDApIDogKHIgPSBRKGUsIDAsIGUud2luZG93W2Uuc3Ryc3RhcnRdKSwgZS5sb29rYWhlYWQtLSwgZS5zdHJzdGFydCsrKSwgciAmJiAoRWUoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSkgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuaW5zZXJ0ID0gMCwgdCA9PT0gaWUgPyAoRWUoZSwgITApLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0ID8gMyA6IDQpIDogZS5zeW1fbmV4dCAmJiAoRWUoZSwgITEpLCAwID09PSBlLnN0cm0uYXZhaWxfb3V0KSA/IDEgOiAyOwogICAgICAgICAgICAgICAgfShyLCB0KSA6IEJlW3IubGV2ZWxdLmZ1bmMociwgdCk7CiAgICAgICAgICAgICAgICBpZiAoMyAhPT0gX3M2NCAmJiA0ICE9PSBfczY0IHx8IChyLnN0YXR1cyA9IHhlKSwgMSA9PT0gX3M2NCB8fCAzID09PSBfczY0KSByZXR1cm4gMCA9PT0gZS5hdmFpbF9vdXQgJiYgKHIubGFzdF9mbHVzaCA9IC0xKSwgYWU7CiAgICAgICAgICAgICAgICBpZiAoMiA9PT0gX3M2NCAmJiAodCA9PT0gdGUgPyBKKHIpIDogdCAhPT0gc2UgJiYgKEsociwgMCwgMCwgITEpLCB0ID09PSByZSAmJiAoU2Uoci5oZWFkKSwgMCA9PT0gci5sb29rYWhlYWQgJiYgKHIuc3Ryc3RhcnQgPSAwLCByLmJsb2NrX3N0YXJ0ID0gMCwgci5pbnNlcnQgPSAwKSkpLCBMZShlKSwgMCA9PT0gZS5hdmFpbF9vdXQpKSByZXR1cm4gci5sYXN0X2ZsdXNoID0gLTEsIGFlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdCAhPT0gaWUgPyBhZSA6IHIud3JhcCA8PSAwID8gbmUgOiAoMiA9PT0gci53cmFwID8gKFRlKHIsIDI1NSAmIGUuYWRsZXIpLCBUZShyLCBlLmFkbGVyID4+IDggJiAyNTUpLCBUZShyLCBlLmFkbGVyID4+IDE2ICYgMjU1KSwgVGUociwgZS5hZGxlciA+PiAyNCAmIDI1NSksIFRlKHIsIDI1NSAmIGUudG90YWxfaW4pLCBUZShyLCBlLnRvdGFsX2luID4+IDggJiAyNTUpLCBUZShyLCBlLnRvdGFsX2luID4+IDE2ICYgMjU1KSwgVGUociwgZS50b3RhbF9pbiA+PiAyNCAmIDI1NSkpIDogKGtlKHIsIGUuYWRsZXIgPj4+IDE2KSwga2UociwgNjU1MzUgJiBlLmFkbGVyKSksIExlKGUpLCByLndyYXAgPiAwICYmIChyLndyYXAgPSAtci53cmFwKSwgMCAhPT0gci5wZW5kaW5nID8gYWUgOiBuZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmxhdGVFbmQ6IGZ1bmN0aW9uIGRlZmxhdGVFbmQoZSkgewogICAgICAgICAgICAgIGlmIChOZShlKSkgcmV0dXJuIG9lOwogICAgICAgICAgICAgIHZhciB0ID0gZS5zdGF0ZS5zdGF0dXM7CiAgICAgICAgICAgICAgcmV0dXJuIGUuc3RhdGUgPSBudWxsLCB0ID09PSB3ZSA/IEFlKGUsIGxlKSA6IGFlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZsYXRlU2V0RGljdGlvbmFyeTogZnVuY3Rpb24gZGVmbGF0ZVNldERpY3Rpb25hcnkoZSwgdCkgewogICAgICAgICAgICAgIHZhciByID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgaWYgKE5lKGUpKSByZXR1cm4gb2U7CiAgICAgICAgICAgICAgdmFyIHMgPSBlLnN0YXRlLAogICAgICAgICAgICAgICAgYSA9IHMud3JhcDsKICAgICAgICAgICAgICBpZiAoMiA9PT0gYSB8fCAxID09PSBhICYmIHMuc3RhdHVzICE9PSBiZSB8fCBzLmxvb2thaGVhZCkgcmV0dXJuIG9lOwogICAgICAgICAgICAgIGlmICgxID09PSBhICYmIChlLmFkbGVyID0gSChlLmFkbGVyLCB0LCByLCAwKSksIHMud3JhcCA9IDAsIHIgPj0gcy53X3NpemUpIHsKICAgICAgICAgICAgICAgIDAgPT09IGEgJiYgKFNlKHMuaGVhZCksIHMuc3Ryc3RhcnQgPSAwLCBzLmJsb2NrX3N0YXJ0ID0gMCwgcy5pbnNlcnQgPSAwKTsKICAgICAgICAgICAgICAgIHZhciBfZTE1MCA9IG5ldyBVaW50OEFycmF5KHMud19zaXplKTsKICAgICAgICAgICAgICAgIF9lMTUwLnNldCh0LnN1YmFycmF5KHIgLSBzLndfc2l6ZSwgciksIDApLCB0ID0gX2UxNTAsIHIgPSBzLndfc2l6ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIG4gPSBlLmF2YWlsX2luLAogICAgICAgICAgICAgICAgbyA9IGUubmV4dF9pbiwKICAgICAgICAgICAgICAgIGwgPSBlLmlucHV0OwogICAgICAgICAgICAgIGZvciAoZS5hdmFpbF9pbiA9IHIsIGUubmV4dF9pbiA9IDAsIGUuaW5wdXQgPSB0LCBEZShzKTsgcy5sb29rYWhlYWQgPj0gMzspIHsKICAgICAgICAgICAgICAgIHZhciBfZTE1MSA9IHMuc3Ryc3RhcnQsCiAgICAgICAgICAgICAgICAgIF90MTI4ID0gcy5sb29rYWhlYWQgLSAyOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBzLmluc19oID0gemUocywgcy5pbnNfaCwgcy53aW5kb3dbX2UxNTEgKyAzIC0gMV0pLCBzLnByZXZbX2UxNTEgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF0sIHMuaGVhZFtzLmluc19oXSA9IF9lMTUxLCBfZTE1MSsrOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1fdDEyOCk7CiAgICAgICAgICAgICAgICBzLnN0cnN0YXJ0ID0gX2UxNTEsIHMubG9va2FoZWFkID0gMiwgRGUocyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkLCBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydCwgcy5pbnNlcnQgPSBzLmxvb2thaGVhZCwgcy5sb29rYWhlYWQgPSAwLCBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSAyLCBzLm1hdGNoX2F2YWlsYWJsZSA9IDAsIGUubmV4dF9pbiA9IG8sIGUuaW5wdXQgPSBsLCBlLmF2YWlsX2luID0gbiwgcy53cmFwID0gYSwgYWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmxhdGVJbmZvOiAicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSIKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgcWUgPSBmdW5jdGlvbiBxZShlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdCk7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIFllID0gZnVuY3Rpb24gWWUoZSkgewogICAgICAgICAgICAgIHZhciB0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICBmb3IgKDsgdC5sZW5ndGg7KSB7CiAgICAgICAgICAgICAgICB2YXIgX3I3MyA9IHQuc2hpZnQoKTsKICAgICAgICAgICAgICAgIGlmIChfcjczKSB7CiAgICAgICAgICAgICAgICAgIGlmICgib2JqZWN0IiAhPSBfdHlwZW9mKF9yNzMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKF9yNzMgKyAibXVzdCBiZSBub24tb2JqZWN0Iik7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90MTI5IGluIF9yNzMpIHFlKF9yNzMsIF90MTI5KSAmJiAoZVtfdDEyOV0gPSBfcjczW190MTI5XSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBaZSA9IGZ1bmN0aW9uIFplKGUpIHsKICAgICAgICAgICAgICB2YXIgdCA9IDA7CiAgICAgICAgICAgICAgZm9yICh2YXIgX3I3NCA9IDAsIF9zNjUgPSBlLmxlbmd0aDsgX3I3NCA8IF9zNjU7IF9yNzQrKykgdCArPSBlW19yNzRdLmxlbmd0aDsKICAgICAgICAgICAgICB2YXIgciA9IG5ldyBVaW50OEFycmF5KHQpOwogICAgICAgICAgICAgIGZvciAodmFyIF90MTMwID0gMCwgX3M2NiA9IDAsIF9hMzkgPSBlLmxlbmd0aDsgX3QxMzAgPCBfYTM5OyBfdDEzMCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgX2E0MCA9IGVbX3QxMzBdOwogICAgICAgICAgICAgICAgci5zZXQoX2E0MCwgX3M2NiksIF9zNjYgKz0gX2E0MC5sZW5ndGg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICB9OwogICAgICAgICAgdmFyIFhlID0gITA7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgWGUgPSAhMTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBLZSA9IG5ldyBVaW50OEFycmF5KDI1Nik7CiAgICAgICAgICBmb3IgKHZhciBfZTE1MiA9IDA7IF9lMTUyIDwgMjU2OyBfZTE1MisrKSBLZVtfZTE1Ml0gPSBfZTE1MiA+PSAyNTIgPyA2IDogX2UxNTIgPj0gMjQ4ID8gNSA6IF9lMTUyID49IDI0MCA/IDQgOiBfZTE1MiA+PSAyMjQgPyAzIDogX2UxNTIgPj0gMTkyID8gMiA6IDE7CiAgICAgICAgICBLZVsyNTRdID0gS2VbMjU0XSA9IDE7CiAgICAgICAgICB2YXIgJGUgPSBmdW5jdGlvbiAkZShlKSB7CiAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIFRleHRFbmNvZGVyICYmIFRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoZSk7CiAgICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICByLAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgbyA9IGUubGVuZ3RoLAogICAgICAgICAgICAgICAgbCA9IDA7CiAgICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8IG87IGErKykgciA9IGUuY2hhckNvZGVBdChhKSwgNTUyOTYgPT0gKDY0NTEyICYgcikgJiYgYSArIDEgPCBvICYmIChzID0gZS5jaGFyQ29kZUF0KGEgKyAxKSwgNTYzMjAgPT0gKDY0NTEyICYgcykgJiYgKHIgPSA2NTUzNiArIChyIC0gNTUyOTYgPDwgMTApICsgKHMgLSA1NjMyMCksIGErKykpLCBsICs9IHIgPCAxMjggPyAxIDogciA8IDIwNDggPyAyIDogciA8IDY1NTM2ID8gMyA6IDQ7CiAgICAgICAgICAgICAgZm9yICh0ID0gbmV3IFVpbnQ4QXJyYXkobCksIG4gPSAwLCBhID0gMDsgbiA8IGw7IGErKykgciA9IGUuY2hhckNvZGVBdChhKSwgNTUyOTYgPT0gKDY0NTEyICYgcikgJiYgYSArIDEgPCBvICYmIChzID0gZS5jaGFyQ29kZUF0KGEgKyAxKSwgNTYzMjAgPT0gKDY0NTEyICYgcykgJiYgKHIgPSA2NTUzNiArIChyIC0gNTUyOTYgPDwgMTApICsgKHMgLSA1NjMyMCksIGErKykpLCByIDwgMTI4ID8gdFtuKytdID0gciA6IHIgPCAyMDQ4ID8gKHRbbisrXSA9IDE5MiB8IHIgPj4+IDYsIHRbbisrXSA9IDEyOCB8IDYzICYgcikgOiByIDwgNjU1MzYgPyAodFtuKytdID0gMjI0IHwgciA+Pj4gMTIsIHRbbisrXSA9IDEyOCB8IHIgPj4+IDYgJiA2MywgdFtuKytdID0gMTI4IHwgNjMgJiByKSA6ICh0W24rK10gPSAyNDAgfCByID4+PiAxOCwgdFtuKytdID0gMTI4IHwgciA+Pj4gMTIgJiA2MywgdFtuKytdID0gMTI4IHwgciA+Pj4gNiAmIDYzLCB0W24rK10gPSAxMjggfCA2MyAmIHIpOwogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBRZSA9IGZ1bmN0aW9uIFFlKGUsIHQpIHsKICAgICAgICAgICAgICB2YXIgciA9IHQgfHwgZS5sZW5ndGg7CiAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIFRleHREZWNvZGVyICYmIFRleHREZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUpIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZS5zdWJhcnJheSgwLCB0KSk7CiAgICAgICAgICAgICAgdmFyIHMsIGE7CiAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgQXJyYXkoMiAqIHIpOwogICAgICAgICAgICAgIGZvciAoYSA9IDAsIHMgPSAwOyBzIDwgcjspIHsKICAgICAgICAgICAgICAgIHZhciBfdDEzMSA9IGVbcysrXTsKICAgICAgICAgICAgICAgIGlmIChfdDEzMSA8IDEyOCkgewogICAgICAgICAgICAgICAgICBuW2ErK10gPSBfdDEzMTsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgX28zMSA9IEtlW190MTMxXTsKICAgICAgICAgICAgICAgIGlmIChfbzMxID4gNCkgblthKytdID0gNjU1MzMsIHMgKz0gX28zMSAtIDE7ZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoX3QxMzEgJj0gMiA9PT0gX28zMSA/IDMxIDogMyA9PT0gX28zMSA/IDE1IDogNzsgX28zMSA+IDEgJiYgcyA8IHI7KSBfdDEzMSA9IF90MTMxIDw8IDYgfCA2MyAmIGVbcysrXSwgX28zMS0tOwogICAgICAgICAgICAgICAgICBfbzMxID4gMSA/IG5bYSsrXSA9IDY1NTMzIDogX3QxMzEgPCA2NTUzNiA/IG5bYSsrXSA9IF90MTMxIDogKF90MTMxIC09IDY1NTM2LCBuW2ErK10gPSA1NTI5NiB8IF90MTMxID4+IDEwICYgMTAyMywgblthKytdID0gNTYzMjAgfCAxMDIzICYgX3QxMzEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgIGlmICh0IDwgNjU1MzQgJiYgZS5zdWJhcnJheSAmJiBYZSkgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZS5sZW5ndGggPT09IHQgPyBlIDogZS5zdWJhcnJheSgwLCB0KSk7CiAgICAgICAgICAgICAgICB2YXIgciA9ICIiOwogICAgICAgICAgICAgICAgZm9yICh2YXIgX3M2NyA9IDA7IF9zNjcgPCB0OyBfczY3KyspIHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlW19zNjddKTsKICAgICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICAgIH0obiwgYSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEplID0gZnVuY3Rpb24gSmUoZSwgdCkgewogICAgICAgICAgICAgICh0ID0gdCB8fCBlLmxlbmd0aCkgPiBlLmxlbmd0aCAmJiAodCA9IGUubGVuZ3RoKTsKICAgICAgICAgICAgICB2YXIgciA9IHQgLSAxOwogICAgICAgICAgICAgIGZvciAoOyByID49IDAgJiYgMTI4ID09ICgxOTIgJiBlW3JdKTspIHItLTsKICAgICAgICAgICAgICByZXR1cm4gciA8IDAgfHwgMCA9PT0gciA/IHQgOiByICsgS2VbZVtyXV0gPiB0ID8gciA6IHQ7CiAgICAgICAgICAgIH07CiAgICAgICAgICB2YXIgZXQgPSBmdW5jdGlvbiBldCgpIHsKICAgICAgICAgICAgdGhpcy5pbnB1dCA9IG51bGwsIHRoaXMubmV4dF9pbiA9IDAsIHRoaXMuYXZhaWxfaW4gPSAwLCB0aGlzLnRvdGFsX2luID0gMCwgdGhpcy5vdXRwdXQgPSBudWxsLCB0aGlzLm5leHRfb3V0ID0gMCwgdGhpcy5hdmFpbF9vdXQgPSAwLCB0aGlzLnRvdGFsX291dCA9IDAsIHRoaXMubXNnID0gIiIsIHRoaXMuc3RhdGUgPSBudWxsLCB0aGlzLmRhdGFfdHlwZSA9IDIsIHRoaXMuYWRsZXIgPSAwOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciB0dCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsCiAgICAgICAgICAgIHJ0ID0gWi5aX05PX0ZMVVNILAogICAgICAgICAgICBpdCA9IFouWl9TWU5DX0ZMVVNILAogICAgICAgICAgICBzdCA9IFouWl9GVUxMX0ZMVVNILAogICAgICAgICAgICBhdCA9IFouWl9GSU5JU0gsCiAgICAgICAgICAgIG50ID0gWi5aX09LLAogICAgICAgICAgICBvdCA9IFouWl9TVFJFQU1fRU5ELAogICAgICAgICAgICBsdCA9IFouWl9ERUZBVUxUX0NPTVBSRVNTSU9OLAogICAgICAgICAgICBodCA9IFouWl9ERUZBVUxUX1NUUkFURUdZLAogICAgICAgICAgICBjdCA9IFouWl9ERUZMQVRFRDsKICAgICAgICAgIGZ1bmN0aW9uIGR0KGUpIHsKICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gWWUoewogICAgICAgICAgICAgIGxldmVsOiBsdCwKICAgICAgICAgICAgICBtZXRob2Q6IGN0LAogICAgICAgICAgICAgIGNodW5rU2l6ZTogMTYzODQsCiAgICAgICAgICAgICAgd2luZG93Qml0czogMTUsCiAgICAgICAgICAgICAgbWVtTGV2ZWw6IDgsCiAgICAgICAgICAgICAgc3RyYXRlZ3k6IGh0CiAgICAgICAgICAgIH0sIGUgfHwge30pOwogICAgICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9uczsKICAgICAgICAgICAgdC5yYXcgJiYgdC53aW5kb3dCaXRzID4gMCA/IHQud2luZG93Qml0cyA9IC10LndpbmRvd0JpdHMgOiB0Lmd6aXAgJiYgdC53aW5kb3dCaXRzID4gMCAmJiB0LndpbmRvd0JpdHMgPCAxNiAmJiAodC53aW5kb3dCaXRzICs9IDE2KSwgdGhpcy5lcnIgPSAwLCB0aGlzLm1zZyA9ICIiLCB0aGlzLmVuZGVkID0gITEsIHRoaXMuY2h1bmtzID0gW10sIHRoaXMuc3RybSA9IG5ldyBldCgpLCB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDsKICAgICAgICAgICAgdmFyIHIgPSBXZS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLCB0LmxldmVsLCB0Lm1ldGhvZCwgdC53aW5kb3dCaXRzLCB0Lm1lbUxldmVsLCB0LnN0cmF0ZWd5KTsKICAgICAgICAgICAgaWYgKHIgIT09IG50KSB0aHJvdyBuZXcgRXJyb3IoWVtyXSk7CiAgICAgICAgICAgIGlmICh0LmhlYWRlciAmJiBXZS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgdC5oZWFkZXIpLCB0LmRpY3Rpb25hcnkpIHsKICAgICAgICAgICAgICB2YXIgX2UxNTM7CiAgICAgICAgICAgICAgaWYgKF9lMTUzID0gInN0cmluZyIgPT0gdHlwZW9mIHQuZGljdGlvbmFyeSA/ICRlKHQuZGljdGlvbmFyeSkgOiAiW29iamVjdCBBcnJheUJ1ZmZlcl0iID09PSB0dC5jYWxsKHQuZGljdGlvbmFyeSkgPyBuZXcgVWludDhBcnJheSh0LmRpY3Rpb25hcnkpIDogdC5kaWN0aW9uYXJ5LCByID0gV2UuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBfZTE1MyksIHIgIT09IG50KSB0aHJvdyBuZXcgRXJyb3IoWVtyXSk7CiAgICAgICAgICAgICAgdGhpcy5fZGljdF9zZXQgPSAhMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdXQoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IG5ldyBkdCh0KTsKICAgICAgICAgICAgaWYgKHIucHVzaChlLCAhMCksIHIuZXJyKSB0aHJvdyByLm1zZyB8fCBZW3IuZXJyXTsKICAgICAgICAgICAgcmV0dXJuIHIucmVzdWx0OwogICAgICAgICAgfQogICAgICAgICAgZHQucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgciA9IHRoaXMuc3RybSwKICAgICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTsKICAgICAgICAgICAgdmFyIGEsIG47CiAgICAgICAgICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm4gITE7CiAgICAgICAgICAgIGZvciAobiA9IHQgPT09IH5+dCA/IHQgOiAhMCA9PT0gdCA/IGF0IDogcnQsICJzdHJpbmciID09IHR5cGVvZiBlID8gci5pbnB1dCA9ICRlKGUpIDogIltvYmplY3QgQXJyYXlCdWZmZXJdIiA9PT0gdHQuY2FsbChlKSA/IHIuaW5wdXQgPSBuZXcgVWludDhBcnJheShlKSA6IHIuaW5wdXQgPSBlLCByLm5leHRfaW4gPSAwLCByLmF2YWlsX2luID0gci5pbnB1dC5sZW5ndGg7OykgaWYgKDAgPT09IHIuYXZhaWxfb3V0ICYmIChyLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KHMpLCByLm5leHRfb3V0ID0gMCwgci5hdmFpbF9vdXQgPSBzKSwgKG4gPT09IGl0IHx8IG4gPT09IHN0KSAmJiByLmF2YWlsX291dCA8PSA2KSB0aGlzLm9uRGF0YShyLm91dHB1dC5zdWJhcnJheSgwLCByLm5leHRfb3V0KSksIHIuYXZhaWxfb3V0ID0gMDtlbHNlIHsKICAgICAgICAgICAgICBpZiAoYSA9IFdlLmRlZmxhdGUociwgbiksIGEgPT09IG90KSByZXR1cm4gci5uZXh0X291dCA+IDAgJiYgdGhpcy5vbkRhdGEoci5vdXRwdXQuc3ViYXJyYXkoMCwgci5uZXh0X291dCkpLCBhID0gV2UuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pLCB0aGlzLm9uRW5kKGEpLCB0aGlzLmVuZGVkID0gITAsIGEgPT09IG50OwogICAgICAgICAgICAgIGlmICgwICE9PSByLmF2YWlsX291dCkgewogICAgICAgICAgICAgICAgaWYgKG4gPiAwICYmIHIubmV4dF9vdXQgPiAwKSB0aGlzLm9uRGF0YShyLm91dHB1dC5zdWJhcnJheSgwLCByLm5leHRfb3V0KSksIHIuYXZhaWxfb3V0ID0gMDtlbHNlIGlmICgwID09PSByLmF2YWlsX2luKSBicmVhazsKICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5vbkRhdGEoci5vdXRwdXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAhMDsKICAgICAgICAgIH0sIGR0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGUpOwogICAgICAgICAgfSwgZHQucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZSA9PT0gbnQgJiYgKHRoaXMucmVzdWx0ID0gWmUodGhpcy5jaHVua3MpKSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5lcnIgPSBlLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGZ0ID0gewogICAgICAgICAgICBEZWZsYXRlOiBkdCwKICAgICAgICAgICAgZGVmbGF0ZTogdXQsCiAgICAgICAgICAgIGRlZmxhdGVSYXc6IGZ1bmN0aW9uIGRlZmxhdGVSYXcoZSwgdCkgewogICAgICAgICAgICAgIHJldHVybiAodCA9IHQgfHwge30pLnJhdyA9ICEwLCB1dChlLCB0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ3ppcDogZnVuY3Rpb24gZ3ppcChlLCB0KSB7CiAgICAgICAgICAgICAgcmV0dXJuICh0ID0gdCB8fCB7fSkuZ3ppcCA9ICEwLCB1dChlLCB0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29uc3RhbnRzOiBaCiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHB0ID0gMTYyMDk7CiAgICAgICAgICB2YXIgbXQgPSBmdW5jdGlvbiBtdChlLCB0KSB7CiAgICAgICAgICAgIHZhciByLCBzLCBhLCBuLCBvLCBsLCBoLCBjLCB1LCBmLCBwLCBnLCB2LCBfLCB5LCBiLCB3LCB4LCBBLCBDLCBTLCBNLCB6LCBMOwogICAgICAgICAgICB2YXIgRSA9IGUuc3RhdGU7CiAgICAgICAgICAgIHIgPSBlLm5leHRfaW4sIHogPSBlLmlucHV0LCBzID0gciArIChlLmF2YWlsX2luIC0gNSksIGEgPSBlLm5leHRfb3V0LCBMID0gZS5vdXRwdXQsIG4gPSBhIC0gKHQgLSBlLmF2YWlsX291dCksIG8gPSBhICsgKGUuYXZhaWxfb3V0IC0gMjU3KSwgbCA9IEUuZG1heCwgaCA9IEUud3NpemUsIGMgPSBFLndoYXZlLCB1ID0gRS53bmV4dCwgZiA9IEUud2luZG93LCBwID0gRS5ob2xkLCBnID0gRS5iaXRzLCB2ID0gRS5sZW5jb2RlLCBfID0gRS5kaXN0Y29kZSwgeSA9ICgxIDw8IEUubGVuYml0cykgLSAxLCBiID0gKDEgPDwgRS5kaXN0Yml0cykgLSAxOwogICAgICAgICAgICBlOiBkbyB7CiAgICAgICAgICAgICAgZyA8IDE1ICYmIChwICs9IHpbcisrXSA8PCBnLCBnICs9IDgsIHAgKz0geltyKytdIDw8IGcsIGcgKz0gOCksIHcgPSB2W3AgJiB5XTsKICAgICAgICAgICAgICB0OiBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICBpZiAoeCA9IHcgPj4+IDI0LCBwID4+Pj0geCwgZyAtPSB4LCB4ID0gdyA+Pj4gMTYgJiAyNTUsIDAgPT09IHgpIExbYSsrXSA9IDY1NTM1ICYgdztlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKCEoMTYgJiB4KSkgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09ICg2NCAmIHgpKSB7CiAgICAgICAgICAgICAgICAgICAgICB3ID0gdlsoNjU1MzUgJiB3KSArIChwICYgKDEgPDwgeCkgLSAxKV07CiAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSB0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoMzIgJiB4KSB7CiAgICAgICAgICAgICAgICAgICAgICBFLm1vZGUgPSAxNjE5MTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSIsIEUubW9kZSA9IHB0OwogICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgQSA9IDY1NTM1ICYgdywgeCAmPSAxNSwgeCAmJiAoZyA8IHggJiYgKHAgKz0geltyKytdIDw8IGcsIGcgKz0gOCksIEEgKz0gcCAmICgxIDw8IHgpIC0gMSwgcCA+Pj49IHgsIGcgLT0geCksIGcgPCAxNSAmJiAocCArPSB6W3IrK10gPDwgZywgZyArPSA4LCBwICs9IHpbcisrXSA8PCBnLCBnICs9IDgpLCB3ID0gX1twICYgYl07CiAgICAgICAgICAgICAgICAgIHI6IGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoeCA9IHcgPj4+IDI0LCBwID4+Pj0geCwgZyAtPSB4LCB4ID0gdyA+Pj4gMTYgJiAyNTUsICEoMTYgJiB4KSkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gKDY0ICYgeCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdyA9IF9bKDY1NTM1ICYgdykgKyAocCAmICgxIDw8IHgpIC0gMSldOwogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSByOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIiwgRS5tb2RlID0gcHQ7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoQyA9IDY1NTM1ICYgdywgeCAmPSAxNSwgZyA8IHggJiYgKHAgKz0geltyKytdIDw8IGcsIGcgKz0gOCwgZyA8IHggJiYgKHAgKz0geltyKytdIDw8IGcsIGcgKz0gOCkpLCBDICs9IHAgJiAoMSA8PCB4KSAtIDEsIEMgPiBsKSB7CiAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIEUubW9kZSA9IHB0OwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHAgPj4+PSB4LCBnIC09IHgsIHggPSBhIC0gbiwgQyA+IHgpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID0gQyAtIHgsIHggPiBjICYmIEUuc2FuZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIEUubW9kZSA9IHB0OwogICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKFMgPSAwLCBNID0gZiwgMCA9PT0gdSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoUyArPSBoIC0geCwgeCA8IEEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBBIC09IHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTFthKytdID0gZltTKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0teCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgUyA9IGEgLSBDLCBNID0gTDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1IDwgeCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoUyArPSBoICsgdSAtIHgsIHggLT0gdSwgeCA8IEEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBBIC09IHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTFthKytdID0gZltTKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0teCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFMgPSAwLCB1IDwgQSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHUsIEEgLT0geDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTFthKytdID0gZltTKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS14KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFMgPSBhIC0gQywgTSA9IEw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFMgKz0gdSAtIHgsIHggPCBBKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEEgLT0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgIExbYSsrXSA9IGZbUysrXTsKICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS14KTsKICAgICAgICAgICAgICAgICAgICAgICAgUyA9IGEgLSBDLCBNID0gTDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBBID4gMjspIExbYSsrXSA9IE1bUysrXSwgTFthKytdID0gTVtTKytdLCBMW2ErK10gPSBNW1MrK10sIEEgLT0gMzsKICAgICAgICAgICAgICAgICAgICAgIEEgJiYgKExbYSsrXSA9IE1bUysrXSwgQSA+IDEgJiYgKExbYSsrXSA9IE1bUysrXSkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBTID0gYSAtIEM7CiAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgIExbYSsrXSA9IExbUysrXSwgTFthKytdID0gTFtTKytdLCBMW2ErK10gPSBMW1MrK10sIEEgLT0gMzsKICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKEEgPiAyKTsKICAgICAgICAgICAgICAgICAgICAgIEEgJiYgKExbYSsrXSA9IExbUysrXSwgQSA+IDEgJiYgKExbYSsrXSA9IExbUysrXSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IHdoaWxlIChyIDwgcyAmJiBhIDwgbyk7CiAgICAgICAgICAgIEEgPSBnID4+IDMsIHIgLT0gQSwgZyAtPSBBIDw8IDMsIHAgJj0gKDEgPDwgZykgLSAxLCBlLm5leHRfaW4gPSByLCBlLm5leHRfb3V0ID0gYSwgZS5hdmFpbF9pbiA9IHIgPCBzID8gcyAtIHIgKyA1IDogNSAtIChyIC0gcyksIGUuYXZhaWxfb3V0ID0gYSA8IG8gPyBvIC0gYSArIDI1NyA6IDI1NyAtIChhIC0gbyksIEUuaG9sZCA9IHAsIEUuYml0cyA9IGc7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGd0ID0gMTUsCiAgICAgICAgICAgIHZ0ID0gbmV3IFVpbnQxNkFycmF5KFszLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLCAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF0pLAogICAgICAgICAgICBfdCA9IG5ldyBVaW50OEFycmF5KFsxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCwgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OF0pLAogICAgICAgICAgICB5dCA9IG5ldyBVaW50MTZBcnJheShbMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBdKSwKICAgICAgICAgICAgYnQgPSBuZXcgVWludDhBcnJheShbMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LCAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XSk7CiAgICAgICAgICB2YXIgd3QgPSBmdW5jdGlvbiB3dChlLCB0LCByLCBzLCBhLCBuLCBvLCBsKSB7CiAgICAgICAgICAgIHZhciBoID0gbC5iaXRzOwogICAgICAgICAgICB2YXIgYywKICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgIGYsCiAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICBnLAogICAgICAgICAgICAgIHYsCiAgICAgICAgICAgICAgXyA9IDAsCiAgICAgICAgICAgICAgeSA9IDAsCiAgICAgICAgICAgICAgYiA9IDAsCiAgICAgICAgICAgICAgdyA9IDAsCiAgICAgICAgICAgICAgeCA9IDAsCiAgICAgICAgICAgICAgQSA9IDAsCiAgICAgICAgICAgICAgQyA9IDAsCiAgICAgICAgICAgICAgUyA9IDAsCiAgICAgICAgICAgICAgTSA9IDAsCiAgICAgICAgICAgICAgeiA9IDAsCiAgICAgICAgICAgICAgTCA9IG51bGw7CiAgICAgICAgICAgIHZhciBFID0gbmV3IFVpbnQxNkFycmF5KDE2KSwKICAgICAgICAgICAgICBUID0gbmV3IFVpbnQxNkFycmF5KDE2KTsKICAgICAgICAgICAgdmFyIGssCiAgICAgICAgICAgICAgSSwKICAgICAgICAgICAgICBPLAogICAgICAgICAgICAgIEQgPSBudWxsOwogICAgICAgICAgICBmb3IgKF8gPSAwOyBfIDw9IGd0OyBfKyspIEVbX10gPSAwOwogICAgICAgICAgICBmb3IgKHkgPSAwOyB5IDwgczsgeSsrKSBFW3RbciArIHldXSsrOwogICAgICAgICAgICBmb3IgKHggPSBoLCB3ID0gZ3Q7IHcgPj0gMSAmJiAwID09PSBFW3ddOyB3LS0pOwogICAgICAgICAgICBpZiAoeCA+IHcgJiYgKHggPSB3KSwgMCA9PT0gdykgcmV0dXJuIGFbbisrXSA9IDIwOTcxNTIwLCBhW24rK10gPSAyMDk3MTUyMCwgbC5iaXRzID0gMSwgMDsKICAgICAgICAgICAgZm9yIChiID0gMTsgYiA8IHcgJiYgMCA9PT0gRVtiXTsgYisrKTsKICAgICAgICAgICAgZm9yICh4IDwgYiAmJiAoeCA9IGIpLCBTID0gMSwgXyA9IDE7IF8gPD0gZ3Q7IF8rKykgaWYgKFMgPDw9IDEsIFMgLT0gRVtfXSwgUyA8IDApIHJldHVybiAtMTsKICAgICAgICAgICAgaWYgKFMgPiAwICYmICgwID09PSBlIHx8IDEgIT09IHcpKSByZXR1cm4gLTE7CiAgICAgICAgICAgIGZvciAoVFsxXSA9IDAsIF8gPSAxOyBfIDwgZ3Q7IF8rKykgVFtfICsgMV0gPSBUW19dICsgRVtfXTsKICAgICAgICAgICAgZm9yICh5ID0gMDsgeSA8IHM7IHkrKykgMCAhPT0gdFtyICsgeV0gJiYgKG9bVFt0W3IgKyB5XV0rK10gPSB5KTsKICAgICAgICAgICAgaWYgKDAgPT09IGUgPyAoTCA9IEQgPSBvLCB2ID0gMjApIDogMSA9PT0gZSA/IChMID0gdnQsIEQgPSBfdCwgdiA9IDI1NykgOiAoTCA9IHl0LCBEID0gYnQsIHYgPSAwKSwgeiA9IDAsIHkgPSAwLCBfID0gYiwgZyA9IG4sIEEgPSB4LCBDID0gMCwgZiA9IC0xLCBNID0gMSA8PCB4LCBwID0gTSAtIDEsIDEgPT09IGUgJiYgTSA+IDg1MiB8fCAyID09PSBlICYmIE0gPiA1OTIpIHJldHVybiAxOwogICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgayA9IF8gLSBDLCBvW3ldICsgMSA8IHYgPyAoSSA9IDAsIE8gPSBvW3ldKSA6IG9beV0gPj0gdiA/IChJID0gRFtvW3ldIC0gdl0sIE8gPSBMW29beV0gLSB2XSkgOiAoSSA9IDk2LCBPID0gMCksIGMgPSAxIDw8IF8gLSBDLCB1ID0gMSA8PCBBLCBiID0gdTsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICB1IC09IGMsIGFbZyArICh6ID4+IEMpICsgdV0gPSBrIDw8IDI0IHwgSSA8PCAxNiB8IE8gfCAwOwogICAgICAgICAgICAgIH0gd2hpbGUgKDAgIT09IHUpOwogICAgICAgICAgICAgIGZvciAoYyA9IDEgPDwgXyAtIDE7IHogJiBjOykgYyA+Pj0gMTsKICAgICAgICAgICAgICBpZiAoMCAhPT0gYyA/ICh6ICY9IGMgLSAxLCB6ICs9IGMpIDogeiA9IDAsIHkrKywgMCA9PSAtLUVbX10pIHsKICAgICAgICAgICAgICAgIGlmIChfID09PSB3KSBicmVhazsKICAgICAgICAgICAgICAgIF8gPSB0W3IgKyBvW3ldXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKF8gPiB4ICYmICh6ICYgcCkgIT09IGYpIHsKICAgICAgICAgICAgICAgIGZvciAoMCA9PT0gQyAmJiAoQyA9IHgpLCBnICs9IGIsIEEgPSBfIC0gQywgUyA9IDEgPDwgQTsgQSArIEMgPCB3ICYmIChTIC09IEVbQSArIENdLCAhKFMgPD0gMCkpOykgQSsrLCBTIDw8PSAxOwogICAgICAgICAgICAgICAgaWYgKE0gKz0gMSA8PCBBLCAxID09PSBlICYmIE0gPiA4NTIgfHwgMiA9PT0gZSAmJiBNID4gNTkyKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgIGYgPSB6ICYgcCwgYVtmXSA9IHggPDwgMjQgfCBBIDw8IDE2IHwgZyAtIG4gfCAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMCAhPT0geiAmJiAoYVtnICsgel0gPSBfIC0gQyA8PCAyNCB8IDY0IDw8IDE2IHwgMCksIGwuYml0cyA9IHgsIDA7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHh0ID0gWi5aX0ZJTklTSCwKICAgICAgICAgICAgQXQgPSBaLlpfQkxPQ0ssCiAgICAgICAgICAgIEN0ID0gWi5aX1RSRUVTLAogICAgICAgICAgICBTdCA9IFouWl9PSywKICAgICAgICAgICAgTXQgPSBaLlpfU1RSRUFNX0VORCwKICAgICAgICAgICAgenQgPSBaLlpfTkVFRF9ESUNULAogICAgICAgICAgICBMdCA9IFouWl9TVFJFQU1fRVJST1IsCiAgICAgICAgICAgIEV0ID0gWi5aX0RBVEFfRVJST1IsCiAgICAgICAgICAgIFR0ID0gWi5aX01FTV9FUlJPUiwKICAgICAgICAgICAga3QgPSBaLlpfQlVGX0VSUk9SLAogICAgICAgICAgICBJdCA9IFouWl9ERUZMQVRFRCwKICAgICAgICAgICAgT3QgPSAxNjE4MCwKICAgICAgICAgICAgRHQgPSAxNjE5MCwKICAgICAgICAgICAgRnQgPSAxNjE5MSwKICAgICAgICAgICAgUnQgPSAxNjE5MiwKICAgICAgICAgICAgUHQgPSAxNjE5NCwKICAgICAgICAgICAgR3QgPSAxNjE5OSwKICAgICAgICAgICAgQnQgPSAxNjIwMCwKICAgICAgICAgICAgVXQgPSAxNjIwNiwKICAgICAgICAgICAgTnQgPSAxNjIwOSwKICAgICAgICAgICAgVnQgPSBmdW5jdGlvbiBWdChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIChlID4+PiAyNCAmIDI1NSkgKyAoZSA+Pj4gOCAmIDY1MjgwKSArICgoNjUyODAgJiBlKSA8PCA4KSArICgoMjU1ICYgZSkgPDwgMjQpOwogICAgICAgICAgICB9OwogICAgICAgICAgZnVuY3Rpb24ganQoKSB7CiAgICAgICAgICAgIHRoaXMuc3RybSA9IG51bGwsIHRoaXMubW9kZSA9IDAsIHRoaXMubGFzdCA9ICExLCB0aGlzLndyYXAgPSAwLCB0aGlzLmhhdmVkaWN0ID0gITEsIHRoaXMuZmxhZ3MgPSAwLCB0aGlzLmRtYXggPSAwLCB0aGlzLmNoZWNrID0gMCwgdGhpcy50b3RhbCA9IDAsIHRoaXMuaGVhZCA9IG51bGwsIHRoaXMud2JpdHMgPSAwLCB0aGlzLndzaXplID0gMCwgdGhpcy53aGF2ZSA9IDAsIHRoaXMud25leHQgPSAwLCB0aGlzLndpbmRvdyA9IG51bGwsIHRoaXMuaG9sZCA9IDAsIHRoaXMuYml0cyA9IDAsIHRoaXMubGVuZ3RoID0gMCwgdGhpcy5vZmZzZXQgPSAwLCB0aGlzLmV4dHJhID0gMCwgdGhpcy5sZW5jb2RlID0gbnVsbCwgdGhpcy5kaXN0Y29kZSA9IG51bGwsIHRoaXMubGVuYml0cyA9IDAsIHRoaXMuZGlzdGJpdHMgPSAwLCB0aGlzLm5jb2RlID0gMCwgdGhpcy5ubGVuID0gMCwgdGhpcy5uZGlzdCA9IDAsIHRoaXMuaGF2ZSA9IDAsIHRoaXMubmV4dCA9IG51bGwsIHRoaXMubGVucyA9IG5ldyBVaW50MTZBcnJheSgzMjApLCB0aGlzLndvcmsgPSBuZXcgVWludDE2QXJyYXkoMjg4KSwgdGhpcy5sZW5keW4gPSBudWxsLCB0aGlzLmRpc3RkeW4gPSBudWxsLCB0aGlzLnNhbmUgPSAwLCB0aGlzLmJhY2sgPSAwLCB0aGlzLndhcyA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgSHQgPSBmdW5jdGlvbiBIdChlKSB7CiAgICAgICAgICAgICAgaWYgKCFlKSByZXR1cm4gMTsKICAgICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuICF0IHx8IHQuc3RybSAhPT0gZSB8fCB0Lm1vZGUgPCBPdCB8fCB0Lm1vZGUgPiAxNjIxMSA/IDEgOiAwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBXdCA9IGZ1bmN0aW9uIFd0KGUpIHsKICAgICAgICAgICAgICBpZiAoSHQoZSkpIHJldHVybiBMdDsKICAgICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuIGUudG90YWxfaW4gPSBlLnRvdGFsX291dCA9IHQudG90YWwgPSAwLCBlLm1zZyA9ICIiLCB0LndyYXAgJiYgKGUuYWRsZXIgPSAxICYgdC53cmFwKSwgdC5tb2RlID0gT3QsIHQubGFzdCA9IDAsIHQuaGF2ZWRpY3QgPSAwLCB0LmZsYWdzID0gLTEsIHQuZG1heCA9IDMyNzY4LCB0LmhlYWQgPSBudWxsLCB0LmhvbGQgPSAwLCB0LmJpdHMgPSAwLCB0LmxlbmNvZGUgPSB0LmxlbmR5biA9IG5ldyBJbnQzMkFycmF5KDg1MiksIHQuZGlzdGNvZGUgPSB0LmRpc3RkeW4gPSBuZXcgSW50MzJBcnJheSg1OTIpLCB0LnNhbmUgPSAxLCB0LmJhY2sgPSAtMSwgU3Q7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHF0ID0gZnVuY3Rpb24gcXQoZSkgewogICAgICAgICAgICAgIGlmIChIdChlKSkgcmV0dXJuIEx0OwogICAgICAgICAgICAgIHZhciB0ID0gZS5zdGF0ZTsKICAgICAgICAgICAgICByZXR1cm4gdC53c2l6ZSA9IDAsIHQud2hhdmUgPSAwLCB0LnduZXh0ID0gMCwgV3QoZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFl0ID0gZnVuY3Rpb24gWXQoZSwgdCkgewogICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgIGlmIChIdChlKSkgcmV0dXJuIEx0OwogICAgICAgICAgICAgIHZhciBzID0gZS5zdGF0ZTsKICAgICAgICAgICAgICByZXR1cm4gdCA8IDAgPyAociA9IDAsIHQgPSAtdCkgOiAociA9IDUgKyAodCA+PiA0KSwgdCA8IDQ4ICYmICh0ICY9IDE1KSksIHQgJiYgKHQgPCA4IHx8IHQgPiAxNSkgPyBMdCA6IChudWxsICE9PSBzLndpbmRvdyAmJiBzLndiaXRzICE9PSB0ICYmIChzLndpbmRvdyA9IG51bGwpLCBzLndyYXAgPSByLCBzLndiaXRzID0gdCwgcXQoZSkpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBadCA9IGZ1bmN0aW9uIFp0KGUsIHQpIHsKICAgICAgICAgICAgICBpZiAoIWUpIHJldHVybiBMdDsKICAgICAgICAgICAgICB2YXIgciA9IG5ldyBqdCgpOwogICAgICAgICAgICAgIGUuc3RhdGUgPSByLCByLnN0cm0gPSBlLCByLndpbmRvdyA9IG51bGwsIHIubW9kZSA9IE90OwogICAgICAgICAgICAgIHZhciBzID0gWXQoZSwgdCk7CiAgICAgICAgICAgICAgcmV0dXJuIHMgIT09IFN0ICYmIChlLnN0YXRlID0gbnVsbCksIHM7CiAgICAgICAgICAgIH07CiAgICAgICAgICB2YXIgWHQsCiAgICAgICAgICAgIEt0LAogICAgICAgICAgICAkdCA9ICEwOwogICAgICAgICAgdmFyIFF0ID0gZnVuY3Rpb24gUXQoZSkgewogICAgICAgICAgICAgIGlmICgkdCkgewogICAgICAgICAgICAgICAgWHQgPSBuZXcgSW50MzJBcnJheSg1MTIpLCBLdCA9IG5ldyBJbnQzMkFycmF5KDMyKTsKICAgICAgICAgICAgICAgIHZhciBfdDEzMiA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKDsgX3QxMzIgPCAxNDQ7KSBlLmxlbnNbX3QxMzIrK10gPSA4OwogICAgICAgICAgICAgICAgZm9yICg7IF90MTMyIDwgMjU2OykgZS5sZW5zW190MTMyKytdID0gOTsKICAgICAgICAgICAgICAgIGZvciAoOyBfdDEzMiA8IDI4MDspIGUubGVuc1tfdDEzMisrXSA9IDc7CiAgICAgICAgICAgICAgICBmb3IgKDsgX3QxMzIgPCAyODg7KSBlLmxlbnNbX3QxMzIrK10gPSA4OwogICAgICAgICAgICAgICAgZm9yICh3dCgxLCBlLmxlbnMsIDAsIDI4OCwgWHQsIDAsIGUud29yaywgewogICAgICAgICAgICAgICAgICBiaXRzOiA5CiAgICAgICAgICAgICAgICB9KSwgX3QxMzIgPSAwOyBfdDEzMiA8IDMyOykgZS5sZW5zW190MTMyKytdID0gNTsKICAgICAgICAgICAgICAgIHd0KDIsIGUubGVucywgMCwgMzIsIEt0LCAwLCBlLndvcmssIHsKICAgICAgICAgICAgICAgICAgYml0czogNQogICAgICAgICAgICAgICAgfSksICR0ID0gITE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGUubGVuY29kZSA9IFh0LCBlLmxlbmJpdHMgPSA5LCBlLmRpc3Rjb2RlID0gS3QsIGUuZGlzdGJpdHMgPSA1OwogICAgICAgICAgICB9LAogICAgICAgICAgICBKdCA9IGZ1bmN0aW9uIEp0KGUsIHQsIHIsIHMpIHsKICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICB2YXIgbiA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IG4ud2luZG93ICYmIChuLndzaXplID0gMSA8PCBuLndiaXRzLCBuLnduZXh0ID0gMCwgbi53aGF2ZSA9IDAsIG4ud2luZG93ID0gbmV3IFVpbnQ4QXJyYXkobi53c2l6ZSkpLCBzID49IG4ud3NpemUgPyAobi53aW5kb3cuc2V0KHQuc3ViYXJyYXkociAtIG4ud3NpemUsIHIpLCAwKSwgbi53bmV4dCA9IDAsIG4ud2hhdmUgPSBuLndzaXplKSA6IChhID0gbi53c2l6ZSAtIG4ud25leHQsIGEgPiBzICYmIChhID0gcyksIG4ud2luZG93LnNldCh0LnN1YmFycmF5KHIgLSBzLCByIC0gcyArIGEpLCBuLnduZXh0KSwgKHMgLT0gYSkgPyAobi53aW5kb3cuc2V0KHQuc3ViYXJyYXkociAtIHMsIHIpLCAwKSwgbi53bmV4dCA9IHMsIG4ud2hhdmUgPSBuLndzaXplKSA6IChuLnduZXh0ICs9IGEsIG4ud25leHQgPT09IG4ud3NpemUgJiYgKG4ud25leHQgPSAwKSwgbi53aGF2ZSA8IG4ud3NpemUgJiYgKG4ud2hhdmUgKz0gYSkpKSwgMDsKICAgICAgICAgICAgfTsKICAgICAgICAgIHZhciBlciA9IHsKICAgICAgICAgICAgaW5mbGF0ZVJlc2V0OiBxdCwKICAgICAgICAgICAgaW5mbGF0ZVJlc2V0MjogWXQsCiAgICAgICAgICAgIGluZmxhdGVSZXNldEtlZXA6IFd0LAogICAgICAgICAgICBpbmZsYXRlSW5pdDogZnVuY3Rpb24gaW5mbGF0ZUluaXQoZSkgewogICAgICAgICAgICAgIHJldHVybiBadChlLCAxNSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluZmxhdGVJbml0MjogWnQsCiAgICAgICAgICAgIGluZmxhdGU6IGZ1bmN0aW9uIGluZmxhdGUoZSwgdCkgewogICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgIGwsCiAgICAgICAgICAgICAgICBoLAogICAgICAgICAgICAgICAgYywKICAgICAgICAgICAgICAgIHUsCiAgICAgICAgICAgICAgICBmLAogICAgICAgICAgICAgICAgcCwKICAgICAgICAgICAgICAgIGcsCiAgICAgICAgICAgICAgICB2LAogICAgICAgICAgICAgICAgXywKICAgICAgICAgICAgICAgIHksCiAgICAgICAgICAgICAgICBiLAogICAgICAgICAgICAgICAgdywKICAgICAgICAgICAgICAgIHgsCiAgICAgICAgICAgICAgICBBLAogICAgICAgICAgICAgICAgQywKICAgICAgICAgICAgICAgIFMsCiAgICAgICAgICAgICAgICBNLAogICAgICAgICAgICAgICAgeiA9IDA7CiAgICAgICAgICAgICAgdmFyIEwgPSBuZXcgVWludDhBcnJheSg0KTsKICAgICAgICAgICAgICB2YXIgRSwgVDsKICAgICAgICAgICAgICB2YXIgayA9IG5ldyBVaW50OEFycmF5KFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSk7CiAgICAgICAgICAgICAgaWYgKEh0KGUpIHx8ICFlLm91dHB1dCB8fCAhZS5pbnB1dCAmJiAwICE9PSBlLmF2YWlsX2luKSByZXR1cm4gTHQ7CiAgICAgICAgICAgICAgciA9IGUuc3RhdGUsIHIubW9kZSA9PT0gRnQgJiYgKHIubW9kZSA9IFJ0KSwgbyA9IGUubmV4dF9vdXQsIGEgPSBlLm91dHB1dCwgaCA9IGUuYXZhaWxfb3V0LCBuID0gZS5uZXh0X2luLCBzID0gZS5pbnB1dCwgbCA9IGUuYXZhaWxfaW4sIGMgPSByLmhvbGQsIHUgPSByLmJpdHMsIGYgPSBsLCBwID0gaCwgTSA9IFN0OwogICAgICAgICAgICAgIGU6IGZvciAoOzspIHN3aXRjaCAoci5tb2RlKSB7CiAgICAgICAgICAgICAgICBjYXNlIE90OgogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gci53cmFwKSB7CiAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gUnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yICg7IHUgPCAxNjspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoMiAmIHIud3JhcCAmJiAzNTYxNSA9PT0gYykgewogICAgICAgICAgICAgICAgICAgIDAgPT09IHIud2JpdHMgJiYgKHIud2JpdHMgPSAxNSksIHIuY2hlY2sgPSAwLCBMWzBdID0gMjU1ICYgYywgTFsxXSA9IGMgPj4+IDggJiAyNTUsIHIuY2hlY2sgPSBxKHIuY2hlY2ssIEwsIDIsIDApLCBjID0gMCwgdSA9IDAsIHIubW9kZSA9IDE2MTgxOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChyLmhlYWQgJiYgKHIuaGVhZC5kb25lID0gITEpLCAhKDEgJiByLndyYXApIHx8ICgoKDI1NSAmIGMpIDw8IDgpICsgKGMgPj4gOCkpICUgMzEpIHsKICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCgxNSAmIGMpICE9PSBJdCkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGMgPj4+PSA0LCB1IC09IDQsIFMgPSA4ICsgKDE1ICYgYyksIDAgPT09IHIud2JpdHMgJiYgKHIud2JpdHMgPSBTKSwgUyA+IDE1IHx8IFMgPiByLndiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCB3aW5kb3cgc2l6ZSIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIuZG1heCA9IDEgPDwgci53Yml0cywgci5mbGFncyA9IDAsIGUuYWRsZXIgPSByLmNoZWNrID0gMSwgci5tb2RlID0gNTEyICYgYyA/IDE2MTg5IDogRnQsIGMgPSAwLCB1ID0gMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE2MTgxOgogICAgICAgICAgICAgICAgICBmb3IgKDsgdSA8IDE2OykgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIGwtLSwgYyArPSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChyLmZsYWdzID0gYywgKDI1NSAmIHIuZmxhZ3MpICE9PSBJdCkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKDU3MzQ0ICYgci5mbGFncykgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gInVua25vd24gaGVhZGVyIGZsYWdzIHNldCIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIuaGVhZCAmJiAoci5oZWFkLnRleHQgPSBjID4+IDggJiAxKSwgNTEyICYgci5mbGFncyAmJiA0ICYgci53cmFwICYmIChMWzBdID0gMjU1ICYgYywgTFsxXSA9IGMgPj4+IDggJiAyNTUsIHIuY2hlY2sgPSBxKHIuY2hlY2ssIEwsIDIsIDApKSwgYyA9IDAsIHUgPSAwLCByLm1vZGUgPSAxNjE4MjsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODI6CiAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5oZWFkICYmIChyLmhlYWQudGltZSA9IGMpLCA1MTIgJiByLmZsYWdzICYmIDQgJiByLndyYXAgJiYgKExbMF0gPSAyNTUgJiBjLCBMWzFdID0gYyA+Pj4gOCAmIDI1NSwgTFsyXSA9IGMgPj4+IDE2ICYgMjU1LCBMWzNdID0gYyA+Pj4gMjQgJiAyNTUsIHIuY2hlY2sgPSBxKHIuY2hlY2ssIEwsIDQsIDApKSwgYyA9IDAsIHUgPSAwLCByLm1vZGUgPSAxNjE4MzsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODM6CiAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDwgMTY7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5oZWFkICYmIChyLmhlYWQueGZsYWdzID0gMjU1ICYgYywgci5oZWFkLm9zID0gYyA+PiA4KSwgNTEyICYgci5mbGFncyAmJiA0ICYgci53cmFwICYmIChMWzBdID0gMjU1ICYgYywgTFsxXSA9IGMgPj4+IDggJiAyNTUsIHIuY2hlY2sgPSBxKHIuY2hlY2ssIEwsIDIsIDApKSwgYyA9IDAsIHUgPSAwLCByLm1vZGUgPSAxNjE4NDsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODQ6CiAgICAgICAgICAgICAgICAgIGlmICgxMDI0ICYgci5mbGFncykgewogICAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDwgMTY7KSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgIGwtLSwgYyArPSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByLmxlbmd0aCA9IGMsIHIuaGVhZCAmJiAoci5oZWFkLmV4dHJhX2xlbiA9IGMpLCA1MTIgJiByLmZsYWdzICYmIDQgJiByLndyYXAgJiYgKExbMF0gPSAyNTUgJiBjLCBMWzFdID0gYyA+Pj4gOCAmIDI1NSwgci5jaGVjayA9IHEoci5jaGVjaywgTCwgMiwgMCkpLCBjID0gMCwgdSA9IDA7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSByLmhlYWQgJiYgKHIuaGVhZC5leHRyYSA9IG51bGwpOwogICAgICAgICAgICAgICAgICByLm1vZGUgPSAxNjE4NTsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODU6CiAgICAgICAgICAgICAgICAgIGlmICgxMDI0ICYgci5mbGFncyAmJiAoZyA9IHIubGVuZ3RoLCBnID4gbCAmJiAoZyA9IGwpLCBnICYmIChyLmhlYWQgJiYgKFMgPSByLmhlYWQuZXh0cmFfbGVuIC0gci5sZW5ndGgsIHIuaGVhZC5leHRyYSB8fCAoci5oZWFkLmV4dHJhID0gbmV3IFVpbnQ4QXJyYXkoci5oZWFkLmV4dHJhX2xlbikpLCByLmhlYWQuZXh0cmEuc2V0KHMuc3ViYXJyYXkobiwgbiArIGcpLCBTKSksIDUxMiAmIHIuZmxhZ3MgJiYgNCAmIHIud3JhcCAmJiAoci5jaGVjayA9IHEoci5jaGVjaywgcywgZywgbikpLCBsIC09IGcsIG4gKz0gZywgci5sZW5ndGggLT0gZyksIHIubGVuZ3RoKSkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgci5sZW5ndGggPSAwLCByLm1vZGUgPSAxNjE4NjsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODY6CiAgICAgICAgICAgICAgICAgIGlmICgyMDQ4ICYgci5mbGFncykgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIGcgPSAwOwogICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgIFMgPSBzW24gKyBnKytdLCByLmhlYWQgJiYgUyAmJiByLmxlbmd0aCA8IDY1NTM2ICYmIChyLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFMpKTsKICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChTICYmIGcgPCBsKTsKICAgICAgICAgICAgICAgICAgICBpZiAoNTEyICYgci5mbGFncyAmJiA0ICYgci53cmFwICYmIChyLmNoZWNrID0gcShyLmNoZWNrLCBzLCBnLCBuKSksIGwgLT0gZywgbiArPSBnLCBTKSBicmVhayBlOwogICAgICAgICAgICAgICAgICB9IGVsc2Ugci5oZWFkICYmIChyLmhlYWQubmFtZSA9IG51bGwpOwogICAgICAgICAgICAgICAgICByLmxlbmd0aCA9IDAsIHIubW9kZSA9IDE2MTg3OwogICAgICAgICAgICAgICAgY2FzZSAxNjE4NzoKICAgICAgICAgICAgICAgICAgaWYgKDQwOTYgJiByLmZsYWdzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgZyA9IDA7CiAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgUyA9IHNbbiArIGcrK10sIHIuaGVhZCAmJiBTICYmIHIubGVuZ3RoIDwgNjU1MzYgJiYgKHIuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoUykpOwogICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKFMgJiYgZyA8IGwpOwogICAgICAgICAgICAgICAgICAgIGlmICg1MTIgJiByLmZsYWdzICYmIDQgJiByLndyYXAgJiYgKHIuY2hlY2sgPSBxKHIuY2hlY2ssIHMsIGcsIG4pKSwgbCAtPSBnLCBuICs9IGcsIFMpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSByLmhlYWQgJiYgKHIuaGVhZC5jb21tZW50ID0gbnVsbCk7CiAgICAgICAgICAgICAgICAgIHIubW9kZSA9IDE2MTg4OwogICAgICAgICAgICAgICAgY2FzZSAxNjE4ODoKICAgICAgICAgICAgICAgICAgaWYgKDUxMiAmIHIuZmxhZ3MpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdSA8IDE2OykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKDQgJiByLndyYXAgJiYgYyAhPT0gKDY1NTM1ICYgci5jaGVjaykpIHsKICAgICAgICAgICAgICAgICAgICAgIGUubXNnID0gImhlYWRlciBjcmMgbWlzbWF0Y2giLCByLm1vZGUgPSBOdDsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjID0gMCwgdSA9IDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5oZWFkICYmIChyLmhlYWQuaGNyYyA9IHIuZmxhZ3MgPj4gOSAmIDEsIHIuaGVhZC5kb25lID0gITApLCBlLmFkbGVyID0gci5jaGVjayA9IDAsIHIubW9kZSA9IEZ0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMTYxODk6CiAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZS5hZGxlciA9IHIuY2hlY2sgPSBWdChjKSwgYyA9IDAsIHUgPSAwLCByLm1vZGUgPSBEdDsKICAgICAgICAgICAgICAgIGNhc2UgRHQ6CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSByLmhhdmVkaWN0KSByZXR1cm4gZS5uZXh0X291dCA9IG8sIGUuYXZhaWxfb3V0ID0gaCwgZS5uZXh0X2luID0gbiwgZS5hdmFpbF9pbiA9IGwsIHIuaG9sZCA9IGMsIHIuYml0cyA9IHUsIHp0OwogICAgICAgICAgICAgICAgICBlLmFkbGVyID0gci5jaGVjayA9IDEsIHIubW9kZSA9IEZ0OwogICAgICAgICAgICAgICAgY2FzZSBGdDoKICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IEF0IHx8IHQgPT09IEN0KSBicmVhayBlOwogICAgICAgICAgICAgICAgY2FzZSBSdDoKICAgICAgICAgICAgICAgICAgaWYgKHIubGFzdCkgewogICAgICAgICAgICAgICAgICAgIGMgPj4+PSA3ICYgdSwgdSAtPSA3ICYgdSwgci5tb2RlID0gVXQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yICg7IHUgPCAzOykgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgIGwtLSwgYyArPSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoci5sYXN0ID0gMSAmIGMsIGMgPj4+PSAxLCB1IC09IDEsIDMgJiBjKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTYxOTM7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICBpZiAoUXQociksIHIubW9kZSA9IEd0LCB0ID09PSBDdCkgewogICAgICAgICAgICAgICAgICAgICAgICBjID4+Pj0gMiwgdSAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTYxOTY7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGJsb2NrIHR5cGUiLCByLm1vZGUgPSBOdDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjID4+Pj0gMiwgdSAtPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMTYxOTM6CiAgICAgICAgICAgICAgICAgIGZvciAoYyA+Pj49IDcgJiB1LCB1IC09IDcgJiB1OyB1IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCg2NTUzNSAmIGMpICE9IChjID4+PiAxNiBeIDY1NTM1KSkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHMiLCByLm1vZGUgPSBOdDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoci5sZW5ndGggPSA2NTUzNSAmIGMsIGMgPSAwLCB1ID0gMCwgci5tb2RlID0gUHQsIHQgPT09IEN0KSBicmVhayBlOwogICAgICAgICAgICAgICAgY2FzZSBQdDoKICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTYxOTU7CiAgICAgICAgICAgICAgICBjYXNlIDE2MTk1OgogICAgICAgICAgICAgICAgICBpZiAoZyA9IHIubGVuZ3RoLCBnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGcgPiBsICYmIChnID0gbCksIGcgPiBoICYmIChnID0gaCksIDAgPT09IGcpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgYS5zZXQocy5zdWJhcnJheShuLCBuICsgZyksIG8pLCBsIC09IGcsIG4gKz0gZywgaCAtPSBnLCBvICs9IGcsIHIubGVuZ3RoIC09IGc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5tb2RlID0gRnQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxNjE5NjoKICAgICAgICAgICAgICAgICAgZm9yICg7IHUgPCAxNDspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoci5ubGVuID0gMjU3ICsgKDMxICYgYyksIGMgPj4+PSA1LCB1IC09IDUsIHIubmRpc3QgPSAxICsgKDMxICYgYyksIGMgPj4+PSA1LCB1IC09IDUsIHIubmNvZGUgPSA0ICsgKDE1ICYgYyksIGMgPj4+PSA0LCB1IC09IDQsIHIubmxlbiA+IDI4NiB8fCByLm5kaXN0ID4gMzApIHsKICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIuaGF2ZSA9IDAsIHIubW9kZSA9IDE2MTk3OwogICAgICAgICAgICAgICAgY2FzZSAxNjE5NzoKICAgICAgICAgICAgICAgICAgZm9yICg7IHIuaGF2ZSA8IHIubmNvZGU7KSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHUgPCAzOykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgci5sZW5zW2tbci5oYXZlKytdXSA9IDcgJiBjLCBjID4+Pj0gMywgdSAtPSAzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZvciAoOyByLmhhdmUgPCAxOTspIHIubGVuc1trW3IuaGF2ZSsrXV0gPSAwOwogICAgICAgICAgICAgICAgICBpZiAoci5sZW5jb2RlID0gci5sZW5keW4sIHIubGVuYml0cyA9IDcsIEUgPSB7CiAgICAgICAgICAgICAgICAgICAgYml0czogci5sZW5iaXRzCiAgICAgICAgICAgICAgICAgIH0sIE0gPSB3dCgwLCByLmxlbnMsIDAsIDE5LCByLmxlbmNvZGUsIDAsIHIud29yaywgRSksIHIubGVuYml0cyA9IEUuYml0cywgTSkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgY29kZSBsZW5ndGhzIHNldCIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIuaGF2ZSA9IDAsIHIubW9kZSA9IDE2MTk4OwogICAgICAgICAgICAgICAgY2FzZSAxNjE5ODoKICAgICAgICAgICAgICAgICAgZm9yICg7IHIuaGF2ZSA8IHIubmxlbiArIHIubmRpc3Q7KSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHogPSByLmxlbmNvZGVbYyAmICgxIDw8IHIubGVuYml0cykgLSAxXSwgeSA9IHogPj4+IDI0LCBiID0geiA+Pj4gMTYgJiAyNTUsIHcgPSA2NTUzNSAmIHosICEoeSA8PSB1KTspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh3IDwgMTYpIGMgPj4+PSB5LCB1IC09IHksIHIubGVuc1tyLmhhdmUrK10gPSB3O2Vsc2UgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDE2ID09PSB3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoVCA9IHkgKyAyOyB1IDwgVDspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA+Pj49IHksIHUgLT0geSwgMCA9PT0gci5oYXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIFMgPSByLmxlbnNbci5oYXZlIC0gMV0sIGcgPSAzICsgKDMgJiBjKSwgYyA+Pj49IDIsIHUgLT0gMjsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMTcgPT09IHcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChUID0geSArIDM7IHUgPCBUOykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGwtLSwgYyArPSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGMgPj4+PSB5LCB1IC09IHksIFMgPSAwLCBnID0gMyArICg3ICYgYyksIGMgPj4+PSAzLCB1IC09IDM7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFQgPSB5ICsgNzsgdSA8IFQ7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYyA+Pj49IHksIHUgLT0geSwgUyA9IDAsIGcgPSAxMSArICgxMjcgJiBjKSwgYyA+Pj49IDcsIHUgLT0gNzsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmhhdmUgKyBnID4gci5ubGVuICsgci5uZGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0Iiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGctLTspIHIubGVuc1tyLmhhdmUrK10gPSBTOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoci5tb2RlID09PSBOdCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSByLmxlbnNbMjU2XSkgewogICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChyLmxlbmJpdHMgPSA5LCBFID0gewogICAgICAgICAgICAgICAgICAgIGJpdHM6IHIubGVuYml0cwogICAgICAgICAgICAgICAgICB9LCBNID0gd3QoMSwgci5sZW5zLCAwLCByLm5sZW4sIHIubGVuY29kZSwgMCwgci53b3JrLCBFKSwgci5sZW5iaXRzID0gRS5iaXRzLCBNKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0Iiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHIuZGlzdGJpdHMgPSA2LCByLmRpc3Rjb2RlID0gci5kaXN0ZHluLCBFID0gewogICAgICAgICAgICAgICAgICAgIGJpdHM6IHIuZGlzdGJpdHMKICAgICAgICAgICAgICAgICAgfSwgTSA9IHd0KDIsIHIubGVucywgci5ubGVuLCByLm5kaXN0LCByLmRpc3Rjb2RlLCAwLCByLndvcmssIEUpLCByLmRpc3RiaXRzID0gRS5iaXRzLCBNKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZXMgc2V0Iiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHIubW9kZSA9IEd0LCB0ID09PSBDdCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgIGNhc2UgR3Q6CiAgICAgICAgICAgICAgICAgIHIubW9kZSA9IEJ0OwogICAgICAgICAgICAgICAgY2FzZSBCdDoKICAgICAgICAgICAgICAgICAgaWYgKGwgPj0gNiAmJiBoID49IDI1OCkgewogICAgICAgICAgICAgICAgICAgIGUubmV4dF9vdXQgPSBvLCBlLmF2YWlsX291dCA9IGgsIGUubmV4dF9pbiA9IG4sIGUuYXZhaWxfaW4gPSBsLCByLmhvbGQgPSBjLCByLmJpdHMgPSB1LCBtdChlLCBwKSwgbyA9IGUubmV4dF9vdXQsIGEgPSBlLm91dHB1dCwgaCA9IGUuYXZhaWxfb3V0LCBuID0gZS5uZXh0X2luLCBzID0gZS5pbnB1dCwgbCA9IGUuYXZhaWxfaW4sIGMgPSByLmhvbGQsIHUgPSByLmJpdHMsIHIubW9kZSA9PT0gRnQgJiYgKHIuYmFjayA9IC0xKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmb3IgKHIuYmFjayA9IDA7IHogPSByLmxlbmNvZGVbYyAmICgxIDw8IHIubGVuYml0cykgLSAxXSwgeSA9IHogPj4+IDI0LCBiID0geiA+Pj4gMTYgJiAyNTUsIHcgPSA2NTUzNSAmIHosICEoeSA8PSB1KTspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYiAmJiAwID09ICgyNDAgJiBiKSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoeCA9IHksIEEgPSBiLCBDID0gdzsgeiA9IHIubGVuY29kZVtDICsgKChjICYgKDEgPDwgeCArIEEpIC0gMSkgPj4geCldLCB5ID0geiA+Pj4gMjQsIGIgPSB6ID4+PiAxNiAmIDI1NSwgdyA9IDY1NTM1ICYgeiwgISh4ICsgeSA8PSB1KTspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMgPj4+PSB4LCB1IC09IHgsIHIuYmFjayArPSB4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjID4+Pj0geSwgdSAtPSB5LCByLmJhY2sgKz0geSwgci5sZW5ndGggPSB3LCAwID09PSBiKSB7CiAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTYyMDU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKDMyICYgYikgewogICAgICAgICAgICAgICAgICAgIHIuYmFjayA9IC0xLCByLm1vZGUgPSBGdDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoNjQgJiBiKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5leHRyYSA9IDE1ICYgYiwgci5tb2RlID0gMTYyMDE7CiAgICAgICAgICAgICAgICBjYXNlIDE2MjAxOgogICAgICAgICAgICAgICAgICBpZiAoci5leHRyYSkgewogICAgICAgICAgICAgICAgICAgIGZvciAoVCA9IHIuZXh0cmE7IHUgPCBUOykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgci5sZW5ndGggKz0gYyAmICgxIDw8IHIuZXh0cmEpIC0gMSwgYyA+Pj49IHIuZXh0cmEsIHUgLT0gci5leHRyYSwgci5iYWNrICs9IHIuZXh0cmE7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci53YXMgPSByLmxlbmd0aCwgci5tb2RlID0gMTYyMDI7CiAgICAgICAgICAgICAgICBjYXNlIDE2MjAyOgogICAgICAgICAgICAgICAgICBmb3IgKDsgeiA9IHIuZGlzdGNvZGVbYyAmICgxIDw8IHIuZGlzdGJpdHMpIC0gMV0sIHkgPSB6ID4+PiAyNCwgYiA9IHogPj4+IDE2ICYgMjU1LCB3ID0gNjU1MzUgJiB6LCAhKHkgPD0gdSk7KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKDAgPT0gKDI0MCAmIGIpKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh4ID0geSwgQSA9IGIsIEMgPSB3OyB6ID0gci5kaXN0Y29kZVtDICsgKChjICYgKDEgPDwgeCArIEEpIC0gMSkgPj4geCldLCB5ID0geiA+Pj4gMjQsIGIgPSB6ID4+PiAxNiAmIDI1NSwgdyA9IDY1NTM1ICYgeiwgISh4ICsgeSA8PSB1KTspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgbC0tLCBjICs9IHNbbisrXSA8PCB1LCB1ICs9IDg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMgPj4+PSB4LCB1IC09IHgsIHIuYmFjayArPSB4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjID4+Pj0geSwgdSAtPSB5LCByLmJhY2sgKz0geSwgNjQgJiBiKSB7CiAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5vZmZzZXQgPSB3LCByLmV4dHJhID0gMTUgJiBiLCByLm1vZGUgPSAxNjIwMzsKICAgICAgICAgICAgICAgIGNhc2UgMTYyMDM6CiAgICAgICAgICAgICAgICAgIGlmIChyLmV4dHJhKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChUID0gci5leHRyYTsgdSA8IFQ7KSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgIGwtLSwgYyArPSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByLm9mZnNldCArPSBjICYgKDEgPDwgci5leHRyYSkgLSAxLCBjID4+Pj0gci5leHRyYSwgdSAtPSByLmV4dHJhLCByLmJhY2sgKz0gci5leHRyYTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoci5vZmZzZXQgPiByLmRtYXgpIHsKICAgICAgICAgICAgICAgICAgICBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHIubW9kZSA9IDE2MjA0OwogICAgICAgICAgICAgICAgY2FzZSAxNjIwNDoKICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGgpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgIGlmIChnID0gcCAtIGgsIHIub2Zmc2V0ID4gZykgewogICAgICAgICAgICAgICAgICAgIGlmIChnID0gci5vZmZzZXQgLSBnLCBnID4gci53aGF2ZSAmJiByLnNhbmUpIHsKICAgICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIiwgci5tb2RlID0gTnQ7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZyA+IHIud25leHQgPyAoZyAtPSByLnduZXh0LCB2ID0gci53c2l6ZSAtIGcpIDogdiA9IHIud25leHQgLSBnLCBnID4gci5sZW5ndGggJiYgKGcgPSByLmxlbmd0aCksIF8gPSByLndpbmRvdzsKICAgICAgICAgICAgICAgICAgfSBlbHNlIF8gPSBhLCB2ID0gbyAtIHIub2Zmc2V0LCBnID0gci5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIGcgPiBoICYmIChnID0gaCksIGggLT0gZywgci5sZW5ndGggLT0gZzsKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIGFbbysrXSA9IF9bdisrXTsKICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1nKTsKICAgICAgICAgICAgICAgICAgMCA9PT0gci5sZW5ndGggJiYgKHIubW9kZSA9IEJ0KTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE2MjA1OgogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gaCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgYVtvKytdID0gci5sZW5ndGgsIGgtLSwgci5tb2RlID0gQnQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBVdDoKICAgICAgICAgICAgICAgICAgaWYgKHIud3JhcCkgewogICAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDwgMzI7KSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgIGwtLSwgYyB8PSBzW24rK10gPDwgdSwgdSArPSA4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAocCAtPSBoLCBlLnRvdGFsX291dCArPSBwLCByLnRvdGFsICs9IHAsIDQgJiByLndyYXAgJiYgcCAmJiAoZS5hZGxlciA9IHIuY2hlY2sgPSByLmZsYWdzID8gcShyLmNoZWNrLCBhLCBwLCBvIC0gcCkgOiBIKHIuY2hlY2ssIGEsIHAsIG8gLSBwKSksIHAgPSBoLCA0ICYgci53cmFwICYmIChyLmZsYWdzID8gYyA6IFZ0KGMpKSAhPT0gci5jaGVjaykgewogICAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW5jb3JyZWN0IGRhdGEgY2hlY2siLCByLm1vZGUgPSBOdDsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjID0gMCwgdSA9IDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgci5tb2RlID0gMTYyMDc7CiAgICAgICAgICAgICAgICBjYXNlIDE2MjA3OgogICAgICAgICAgICAgICAgICBpZiAoci53cmFwICYmIHIuZmxhZ3MpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdSA8IDMyOykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGwpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICBsLS0sIGMgKz0gc1tuKytdIDw8IHUsIHUgKz0gODsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKDQgJiByLndyYXAgJiYgYyAhPT0gKDQyOTQ5NjcyOTUgJiByLnRvdGFsKSkgewogICAgICAgICAgICAgICAgICAgICAgZS5tc2cgPSAiaW5jb3JyZWN0IGxlbmd0aCBjaGVjayIsIHIubW9kZSA9IE50OwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMgPSAwLCB1ID0gMDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByLm1vZGUgPSAxNjIwODsKICAgICAgICAgICAgICAgIGNhc2UgMTYyMDg6CiAgICAgICAgICAgICAgICAgIE0gPSBNdDsKICAgICAgICAgICAgICAgICAgYnJlYWsgZTsKICAgICAgICAgICAgICAgIGNhc2UgTnQ6CiAgICAgICAgICAgICAgICAgIE0gPSBFdDsKICAgICAgICAgICAgICAgICAgYnJlYWsgZTsKICAgICAgICAgICAgICAgIGNhc2UgMTYyMTA6CiAgICAgICAgICAgICAgICAgIHJldHVybiBUdDsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHJldHVybiBMdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGUubmV4dF9vdXQgPSBvLCBlLmF2YWlsX291dCA9IGgsIGUubmV4dF9pbiA9IG4sIGUuYXZhaWxfaW4gPSBsLCByLmhvbGQgPSBjLCByLmJpdHMgPSB1LCAoci53c2l6ZSB8fCBwICE9PSBlLmF2YWlsX291dCAmJiByLm1vZGUgPCBOdCAmJiAoci5tb2RlIDwgVXQgfHwgdCAhPT0geHQpKSAmJiBKdChlLCBlLm91dHB1dCwgZS5uZXh0X291dCwgcCAtIGUuYXZhaWxfb3V0KSwgZiAtPSBlLmF2YWlsX2luLCBwIC09IGUuYXZhaWxfb3V0LCBlLnRvdGFsX2luICs9IGYsIGUudG90YWxfb3V0ICs9IHAsIHIudG90YWwgKz0gcCwgNCAmIHIud3JhcCAmJiBwICYmIChlLmFkbGVyID0gci5jaGVjayA9IHIuZmxhZ3MgPyBxKHIuY2hlY2ssIGEsIHAsIGUubmV4dF9vdXQgLSBwKSA6IEgoci5jaGVjaywgYSwgcCwgZS5uZXh0X291dCAtIHApKSwgZS5kYXRhX3R5cGUgPSByLmJpdHMgKyAoci5sYXN0ID8gNjQgOiAwKSArIChyLm1vZGUgPT09IEZ0ID8gMTI4IDogMCkgKyAoci5tb2RlID09PSBHdCB8fCByLm1vZGUgPT09IFB0ID8gMjU2IDogMCksICgwID09PSBmICYmIDAgPT09IHAgfHwgdCA9PT0geHQpICYmIE0gPT09IFN0ICYmIChNID0ga3QpLCBNOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmZsYXRlRW5kOiBmdW5jdGlvbiBpbmZsYXRlRW5kKGUpIHsKICAgICAgICAgICAgICBpZiAoSHQoZSkpIHJldHVybiBMdDsKICAgICAgICAgICAgICB2YXIgdCA9IGUuc3RhdGU7CiAgICAgICAgICAgICAgcmV0dXJuIHQud2luZG93ICYmICh0LndpbmRvdyA9IG51bGwpLCBlLnN0YXRlID0gbnVsbCwgU3Q7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluZmxhdGVHZXRIZWFkZXI6IGZ1bmN0aW9uIGluZmxhdGVHZXRIZWFkZXIoZSwgdCkgewogICAgICAgICAgICAgIGlmIChIdChlKSkgcmV0dXJuIEx0OwogICAgICAgICAgICAgIHZhciByID0gZS5zdGF0ZTsKICAgICAgICAgICAgICByZXR1cm4gMCA9PSAoMiAmIHIud3JhcCkgPyBMdCA6IChyLmhlYWQgPSB0LCB0LmRvbmUgPSAhMSwgU3QpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmZsYXRlU2V0RGljdGlvbmFyeTogZnVuY3Rpb24gaW5mbGF0ZVNldERpY3Rpb25hcnkoZSwgdCkgewogICAgICAgICAgICAgIHZhciByID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgdmFyIHMsIGEsIG47CiAgICAgICAgICAgICAgcmV0dXJuIEh0KGUpID8gTHQgOiAocyA9IGUuc3RhdGUsIDAgIT09IHMud3JhcCAmJiBzLm1vZGUgIT09IER0ID8gTHQgOiBzLm1vZGUgPT09IER0ICYmIChhID0gMSwgYSA9IEgoYSwgdCwgciwgMCksIGEgIT09IHMuY2hlY2spID8gRXQgOiAobiA9IEp0KGUsIHQsIHIsIHIpLCBuID8gKHMubW9kZSA9IDE2MjEwLCBUdCkgOiAocy5oYXZlZGljdCA9IDEsIFN0KSkpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmZsYXRlSW5mbzogInBha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCkiCiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHRyID0gZnVuY3Rpb24gdHIoKSB7CiAgICAgICAgICAgIHRoaXMudGV4dCA9IDAsIHRoaXMudGltZSA9IDAsIHRoaXMueGZsYWdzID0gMCwgdGhpcy5vcyA9IDAsIHRoaXMuZXh0cmEgPSBudWxsLCB0aGlzLmV4dHJhX2xlbiA9IDAsIHRoaXMubmFtZSA9ICIiLCB0aGlzLmNvbW1lbnQgPSAiIiwgdGhpcy5oY3JjID0gMCwgdGhpcy5kb25lID0gITE7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHJyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAgICAgaXIgPSBaLlpfTk9fRkxVU0gsCiAgICAgICAgICAgIHNyID0gWi5aX0ZJTklTSCwKICAgICAgICAgICAgYXIgPSBaLlpfT0ssCiAgICAgICAgICAgIG5yID0gWi5aX1NUUkVBTV9FTkQsCiAgICAgICAgICAgIG9yID0gWi5aX05FRURfRElDVCwKICAgICAgICAgICAgbHIgPSBaLlpfU1RSRUFNX0VSUk9SLAogICAgICAgICAgICBociA9IFouWl9EQVRBX0VSUk9SLAogICAgICAgICAgICBjciA9IFouWl9NRU1fRVJST1I7CiAgICAgICAgICBmdW5jdGlvbiBkcihlKSB7CiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IFllKHsKICAgICAgICAgICAgICBjaHVua1NpemU6IDY1NTM2LAogICAgICAgICAgICAgIHdpbmRvd0JpdHM6IDE1LAogICAgICAgICAgICAgIHRvOiAiIgogICAgICAgICAgICB9LCBlIHx8IHt9KTsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgIHQucmF3ICYmIHQud2luZG93Qml0cyA+PSAwICYmIHQud2luZG93Qml0cyA8IDE2ICYmICh0LndpbmRvd0JpdHMgPSAtdC53aW5kb3dCaXRzLCAwID09PSB0LndpbmRvd0JpdHMgJiYgKHQud2luZG93Qml0cyA9IC0xNSkpLCAhKHQud2luZG93Qml0cyA+PSAwICYmIHQud2luZG93Qml0cyA8IDE2KSB8fCBlICYmIGUud2luZG93Qml0cyB8fCAodC53aW5kb3dCaXRzICs9IDMyKSwgdC53aW5kb3dCaXRzID4gMTUgJiYgdC53aW5kb3dCaXRzIDwgNDggJiYgMCA9PSAoMTUgJiB0LndpbmRvd0JpdHMpICYmICh0LndpbmRvd0JpdHMgfD0gMTUpLCB0aGlzLmVyciA9IDAsIHRoaXMubXNnID0gIiIsIHRoaXMuZW5kZWQgPSAhMSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5zdHJtID0gbmV3IGV0KCksIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwOwogICAgICAgICAgICB2YXIgciA9IGVyLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sIHQud2luZG93Qml0cyk7CiAgICAgICAgICAgIGlmIChyICE9PSBhcikgdGhyb3cgbmV3IEVycm9yKFlbcl0pOwogICAgICAgICAgICBpZiAodGhpcy5oZWFkZXIgPSBuZXcgdHIoKSwgZXIuaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sIHRoaXMuaGVhZGVyKSwgdC5kaWN0aW9uYXJ5ICYmICgic3RyaW5nIiA9PSB0eXBlb2YgdC5kaWN0aW9uYXJ5ID8gdC5kaWN0aW9uYXJ5ID0gJGUodC5kaWN0aW9uYXJ5KSA6ICJbb2JqZWN0IEFycmF5QnVmZmVyXSIgPT09IHJyLmNhbGwodC5kaWN0aW9uYXJ5KSAmJiAodC5kaWN0aW9uYXJ5ID0gbmV3IFVpbnQ4QXJyYXkodC5kaWN0aW9uYXJ5KSksIHQucmF3ICYmIChyID0gZXIuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCB0LmRpY3Rpb25hcnkpLCByICE9PSBhcikpKSB0aHJvdyBuZXcgRXJyb3IoWVtyXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB1cihlLCB0KSB7CiAgICAgICAgICAgIHZhciByID0gbmV3IGRyKHQpOwogICAgICAgICAgICBpZiAoci5wdXNoKGUpLCByLmVycikgdGhyb3cgci5tc2cgfHwgWVtyLmVycl07CiAgICAgICAgICAgIHJldHVybiByLnJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICAgIGRyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnN0cm0sCiAgICAgICAgICAgICAgcyA9IHRoaXMub3B0aW9ucy5jaHVua1NpemUsCiAgICAgICAgICAgICAgYSA9IHRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5OwogICAgICAgICAgICB2YXIgbiwgbywgbDsKICAgICAgICAgICAgaWYgKHRoaXMuZW5kZWQpIHJldHVybiAhMTsKICAgICAgICAgICAgZm9yIChvID0gdCA9PT0gfn50ID8gdCA6ICEwID09PSB0ID8gc3IgOiBpciwgIltvYmplY3QgQXJyYXlCdWZmZXJdIiA9PT0gcnIuY2FsbChlKSA/IHIuaW5wdXQgPSBuZXcgVWludDhBcnJheShlKSA6IHIuaW5wdXQgPSBlLCByLm5leHRfaW4gPSAwLCByLmF2YWlsX2luID0gci5pbnB1dC5sZW5ndGg7OykgewogICAgICAgICAgICAgIGZvciAoMCA9PT0gci5hdmFpbF9vdXQgJiYgKHIub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkocyksIHIubmV4dF9vdXQgPSAwLCByLmF2YWlsX291dCA9IHMpLCBuID0gZXIuaW5mbGF0ZShyLCBvKSwgbiA9PT0gb3IgJiYgYSAmJiAobiA9IGVyLmluZmxhdGVTZXREaWN0aW9uYXJ5KHIsIGEpLCBuID09PSBhciA/IG4gPSBlci5pbmZsYXRlKHIsIG8pIDogbiA9PT0gaHIgJiYgKG4gPSBvcikpOyByLmF2YWlsX2luID4gMCAmJiBuID09PSBuciAmJiByLnN0YXRlLndyYXAgPiAwICYmIDAgIT09IGVbci5uZXh0X2luXTspIGVyLmluZmxhdGVSZXNldChyKSwgbiA9IGVyLmluZmxhdGUociwgbyk7CiAgICAgICAgICAgICAgc3dpdGNoIChuKSB7CiAgICAgICAgICAgICAgICBjYXNlIGxyOgogICAgICAgICAgICAgICAgY2FzZSBocjoKICAgICAgICAgICAgICAgIGNhc2Ugb3I6CiAgICAgICAgICAgICAgICBjYXNlIGNyOgogICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vbkVuZChuKSwgdGhpcy5lbmRlZCA9ICEwLCAhMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGwgPSByLmF2YWlsX291dCwgci5uZXh0X291dCAmJiAoMCA9PT0gci5hdmFpbF9vdXQgfHwgbiA9PT0gbnIpKSBpZiAoInN0cmluZyIgPT09IHRoaXMub3B0aW9ucy50bykgewogICAgICAgICAgICAgICAgdmFyIF9lMTU0ID0gSmUoci5vdXRwdXQsIHIubmV4dF9vdXQpLAogICAgICAgICAgICAgICAgICBfdDEzMyA9IHIubmV4dF9vdXQgLSBfZTE1NCwKICAgICAgICAgICAgICAgICAgX2E0MSA9IFFlKHIub3V0cHV0LCBfZTE1NCk7CiAgICAgICAgICAgICAgICByLm5leHRfb3V0ID0gX3QxMzMsIHIuYXZhaWxfb3V0ID0gcyAtIF90MTMzLCBfdDEzMyAmJiByLm91dHB1dC5zZXQoci5vdXRwdXQuc3ViYXJyYXkoX2UxNTQsIF9lMTU0ICsgX3QxMzMpLCAwKSwgdGhpcy5vbkRhdGEoX2E0MSk7CiAgICAgICAgICAgICAgfSBlbHNlIHRoaXMub25EYXRhKHIub3V0cHV0Lmxlbmd0aCA9PT0gci5uZXh0X291dCA/IHIub3V0cHV0IDogci5vdXRwdXQuc3ViYXJyYXkoMCwgci5uZXh0X291dCkpOwogICAgICAgICAgICAgIGlmIChuICE9PSBhciB8fCAwICE9PSBsKSB7CiAgICAgICAgICAgICAgICBpZiAobiA9PT0gbnIpIHJldHVybiBuID0gZXIuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pLCB0aGlzLm9uRW5kKG4pLCB0aGlzLmVuZGVkID0gITAsICEwOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IHIuYXZhaWxfaW4pIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gITA7CiAgICAgICAgICB9LCBkci5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdGhpcy5jaHVua3MucHVzaChlKTsKICAgICAgICAgIH0sIGRyLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUgPT09IGFyICYmICgic3RyaW5nIiA9PT0gdGhpcy5vcHRpb25zLnRvID8gdGhpcy5yZXN1bHQgPSB0aGlzLmNodW5rcy5qb2luKCIiKSA6IHRoaXMucmVzdWx0ID0gWmUodGhpcy5jaHVua3MpKSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5lcnIgPSBlLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGZyID0gewogICAgICAgICAgICBJbmZsYXRlOiBkciwKICAgICAgICAgICAgaW5mbGF0ZTogdXIsCiAgICAgICAgICAgIGluZmxhdGVSYXc6IGZ1bmN0aW9uIGluZmxhdGVSYXcoZSwgdCkgewogICAgICAgICAgICAgIHJldHVybiAodCA9IHQgfHwge30pLnJhdyA9ICEwLCB1cihlLCB0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdW5nemlwOiB1ciwKICAgICAgICAgICAgY29uc3RhbnRzOiBaCiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHByID0gZnQuRGVmbGF0ZSwKICAgICAgICAgICAgbXIgPSBmdC5kZWZsYXRlLAogICAgICAgICAgICBnciA9IGZ0LmRlZmxhdGVSYXcsCiAgICAgICAgICAgIHZyID0gZnQuZ3ppcCwKICAgICAgICAgICAgX3IgPSBmci5JbmZsYXRlLAogICAgICAgICAgICB5ciA9IGZyLmluZmxhdGUsCiAgICAgICAgICAgIGJyID0gZnIuaW5mbGF0ZVJhdywKICAgICAgICAgICAgd3IgPSBmci51bmd6aXA7CiAgICAgICAgICB2YXIgeHIgPSBwciwKICAgICAgICAgICAgQXIgPSBtciwKICAgICAgICAgICAgQ3IgPSBnciwKICAgICAgICAgICAgU3IgPSB2ciwKICAgICAgICAgICAgTXIgPSBfciwKICAgICAgICAgICAgenIgPSB5ciwKICAgICAgICAgICAgTHIgPSBiciwKICAgICAgICAgICAgRXIgPSB3ciwKICAgICAgICAgICAgVHIgPSBaLAogICAgICAgICAgICBrciA9IHsKICAgICAgICAgICAgICBEZWZsYXRlOiBwciwKICAgICAgICAgICAgICBkZWZsYXRlOiBtciwKICAgICAgICAgICAgICBkZWZsYXRlUmF3OiBnciwKICAgICAgICAgICAgICBnemlwOiB2ciwKICAgICAgICAgICAgICBJbmZsYXRlOiBfciwKICAgICAgICAgICAgICBpbmZsYXRlOiB5ciwKICAgICAgICAgICAgICBpbmZsYXRlUmF3OiBiciwKICAgICAgICAgICAgICB1bmd6aXA6IHdyLAogICAgICAgICAgICAgIGNvbnN0YW50czogWgogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307CiAgICBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKGUpIHsKICAgICAgdmFyIHQgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bZV07CiAgICAgIGlmICh2b2lkIDAgIT09IHQpIHJldHVybiB0LmV4cG9ydHM7CiAgICAgIHZhciByID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW2VdID0gewogICAgICAgIGV4cG9ydHM6IHt9CiAgICAgIH07CiAgICAgIHJldHVybiBfX3dlYnBhY2tfbW9kdWxlc19fW2VdLmNhbGwoci5leHBvcnRzLCByLCByLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pLCByLmV4cG9ydHM7CiAgICB9CiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUgJiYgZS5fX2VzTW9kdWxlID8gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBlLmRlZmF1bHQ7CiAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGU7CiAgICAgIH07CiAgICAgIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQodCwgewogICAgICAgIGE6IHQKICAgICAgfSksIHQ7CiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciByIGluIHQpIF9fd2VicGFja19yZXF1aXJlX18ubyh0LCByKSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGUsIHIpICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7CiAgICAgICAgZW51bWVyYWJsZTogITAsCiAgICAgICAgZ2V0OiB0W3JdCiAgICAgIH0pOwogICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB0KTsKICAgIH0sIF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsKICAgICAgICB2YWx1ZTogIk1vZHVsZSIKICAgICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAiX19lc01vZHVsZSIsIHsKICAgICAgICB2YWx1ZTogITAKICAgICAgfSk7CiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2MzcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4ODIpOwogICAgdmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyNzkpOwogICAgcmV0dXJuIF9fd2VicGFja19leHBvcnRzX187CiAgfSgpOwp9KTs="},null]}