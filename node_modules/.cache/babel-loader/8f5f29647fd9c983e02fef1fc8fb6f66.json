{"remainingRequest":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/a1/Desktop/code/golang/src/vue-element-admin/src/views/permission/role.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/src/views/permission/role.vue","mtime":1677293736844},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/babel.config.js","mtime":1677293736750},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":1677293894163},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":1677293892832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["path","deepClone","getRoutes","getRoles","addRole","deleteRole","updateRole","defaultRole","key","name","description","routes","data","role","Object","assign","rolesList","dialogVisible","dialogType","checkStrictly","defaultProps","children","label","computed","routesData","created","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","sent","serviceRoutes","generateRoutes","stop","_this2","_callee2","_callee2$","_context2","basePath","arguments","length","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","route","value","hidden","onlyOneShowingChild","alwaysShow","resolve","title","meta","push","err","e","f","generateArr","_this3","forEach","temp","concat","_toConsumableArray","handleAddRole","$refs","tree","setCheckedNodes","handleEdit","scope","_this4","row","$nextTick","handleDelete","_ref","_this5","$index","$confirm","confirmButtonText","cancelButtonText","type","then","_callee3","_callee3$","_context3","splice","$message","message","catch","console","error","generateTree","checkedKeys","_iterator2","_step2","routePath","includes","confirmRole","_this6","_callee4","isEdit","index","_yield$addRole","_this6$role","_callee4$","_context4","getCheckedKeys","abrupt","$notify","dangerouslyUseHTMLString","parent","onlyOneChild","showingChildren","filter","item","_objectSpread","noShowingChildren"],"sources":["src/views/permission/role.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-button type=\"primary\" @click=\"handleAddRole\">New Role</el-button>\n\n    <el-table :data=\"rolesList\" style=\"width: 100%;margin-top:30px;\" border>\n      <el-table-column align=\"center\" label=\"Role Key\" width=\"220\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.key }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Role Name\" width=\"220\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.name }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"header-center\" label=\"Description\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.description }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Operations\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope)\">Edit</el-button>\n          <el-button type=\"danger\" size=\"small\" @click=\"handleDelete(scope)\">Delete</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <el-dialog :visible.sync=\"dialogVisible\" :title=\"dialogType==='edit'?'Edit Role':'New Role'\">\n      <el-form :model=\"role\" label-width=\"80px\" label-position=\"left\">\n        <el-form-item label=\"Name\">\n          <el-input v-model=\"role.name\" placeholder=\"Role Name\" />\n        </el-form-item>\n        <el-form-item label=\"Desc\">\n          <el-input\n            v-model=\"role.description\"\n            :autosize=\"{ minRows: 2, maxRows: 4}\"\n            type=\"textarea\"\n            placeholder=\"Role Description\"\n          />\n        </el-form-item>\n        <el-form-item label=\"Menus\">\n          <el-tree\n            ref=\"tree\"\n            :check-strictly=\"checkStrictly\"\n            :data=\"routesData\"\n            :props=\"defaultProps\"\n            show-checkbox\n            node-key=\"path\"\n            class=\"permission-tree\"\n          />\n        </el-form-item>\n      </el-form>\n      <div style=\"text-align:right;\">\n        <el-button type=\"danger\" @click=\"dialogVisible=false\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"confirmRole\">Confirm</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport path from 'path'\nimport { deepClone } from '@/utils'\nimport { getRoutes, getRoles, addRole, deleteRole, updateRole } from '@/api/role'\n\nconst defaultRole = {\n  key: '',\n  name: '',\n  description: '',\n  routes: []\n}\n\nexport default {\n  data() {\n    return {\n      role: Object.assign({}, defaultRole),\n      routes: [],\n      rolesList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      }\n    }\n  },\n  computed: {\n    routesData() {\n      return this.routes\n    }\n  },\n  created() {\n    // Mock: get all routes and roles list from server\n    this.getRoutes()\n    this.getRoles()\n  },\n  methods: {\n    async getRoutes() {\n      const res = await getRoutes()\n      this.serviceRoutes = res.data\n      this.routes = this.generateRoutes(res.data)\n    },\n    async getRoles() {\n      const res = await getRoles()\n      this.rolesList = res.data\n    },\n\n    // Reshape the routes structure so that it looks the same as the sidebar\n    generateRoutes(routes, basePath = '/') {\n      const res = []\n\n      for (let route of routes) {\n        // skip some route\n        if (route.hidden) { continue }\n\n        const onlyOneShowingChild = this.onlyOneShowingChild(route.children, route)\n\n        if (route.children && onlyOneShowingChild && !route.alwaysShow) {\n          route = onlyOneShowingChild\n        }\n\n        const data = {\n          path: path.resolve(basePath, route.path),\n          title: route.meta && route.meta.title\n\n        }\n\n        // recursive child routes\n        if (route.children) {\n          data.children = this.generateRoutes(route.children, data.path)\n        }\n        res.push(data)\n      }\n      return res\n    },\n    generateArr(routes) {\n      let data = []\n      routes.forEach(route => {\n        data.push(route)\n        if (route.children) {\n          const temp = this.generateArr(route.children)\n          if (temp.length > 0) {\n            data = [...data, ...temp]\n          }\n        }\n      })\n      return data\n    },\n    handleAddRole() {\n      this.role = Object.assign({}, defaultRole)\n      if (this.$refs.tree) {\n        this.$refs.tree.setCheckedNodes([])\n      }\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.role = deepClone(scope.row)\n      this.$nextTick(() => {\n        const routes = this.generateRoutes(this.role.routes)\n        this.$refs.tree.setCheckedNodes(this.generateArr(routes))\n        // set checked state of a node not affects its father and child nodes\n        this.checkStrictly = false\n      })\n    },\n    handleDelete({ $index, row }) {\n      this.$confirm('Confirm to remove the role?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteRole(row.key)\n          this.rolesList.splice($index, 1)\n          this.$message({\n            type: 'success',\n            message: 'Delete succed!'\n          })\n        })\n        .catch(err => { console.error(err) })\n    },\n    generateTree(routes, basePath = '/', checkedKeys) {\n      const res = []\n\n      for (const route of routes) {\n        const routePath = path.resolve(basePath, route.path)\n\n        // recursive child routes\n        if (route.children) {\n          route.children = this.generateTree(route.children, routePath, checkedKeys)\n        }\n\n        if (checkedKeys.includes(routePath) || (route.children && route.children.length >= 1)) {\n          res.push(route)\n        }\n      }\n      return res\n    },\n    async confirmRole() {\n      const isEdit = this.dialogType === 'edit'\n\n      const checkedKeys = this.$refs.tree.getCheckedKeys()\n      this.role.routes = this.generateTree(deepClone(this.serviceRoutes), '/', checkedKeys)\n\n      if (isEdit) {\n        await updateRole(this.role.key, this.role)\n        for (let index = 0; index < this.rolesList.length; index++) {\n          if (this.rolesList[index].key === this.role.key) {\n            this.rolesList.splice(index, 1, Object.assign({}, this.role))\n            break\n          }\n        }\n      } else {\n        const { data } = await addRole(this.role)\n        this.role.key = data.key\n        this.rolesList.push(this.role)\n      }\n\n      const { description, key, name } = this.role\n      this.dialogVisible = false\n      this.$notify({\n        title: 'Success',\n        dangerouslyUseHTMLString: true,\n        message: `\n            <div>Role Key: ${key}</div>\n            <div>Role Name: ${name}</div>\n            <div>Description: ${description}</div>\n          `,\n        type: 'success'\n      })\n    },\n    // reference: src/view/layout/components/Sidebar/SidebarItem.vue\n    onlyOneShowingChild(children = [], parent) {\n      let onlyOneChild = null\n      const showingChildren = children.filter(item => !item.hidden)\n\n      // When there is only one child route, the child route is displayed by default\n      if (showingChildren.length === 1) {\n        onlyOneChild = showingChildren[0]\n        onlyOneChild.path = path.resolve(parent.path, onlyOneChild.path)\n        return onlyOneChild\n      }\n\n      // Show parent if there are no child route to display\n      if (showingChildren.length === 0) {\n        onlyOneChild = { ... parent, path: '', noShowingChildren: true }\n        return onlyOneChild\n      }\n\n      return false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.app-container {\n  .roles-table {\n    margin-top: 30px;\n  }\n  .permission-tree {\n    margin-bottom: 30px;\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,OAAAA,IAAA;AACA,SAAAC,SAAA;AACA,SAAAC,SAAA,IAAAA,UAAA,EAAAC,QAAA,IAAAA,SAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,UAAA;AAEA,IAAAC,WAAA;EACAC,GAAA;EACAC,IAAA;EACAC,WAAA;EACAC,MAAA;AACA;AAEA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,IAAA,EAAAC,MAAA,CAAAC,MAAA,KAAAR,WAAA;MACAI,MAAA;MACAK,SAAA;MACAC,aAAA;MACAC,UAAA;MACAC,aAAA;MACAC,YAAA;QACAC,QAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,UAAA,WAAAA,WAAA;MACA,YAAAb,MAAA;IACA;EACA;EACAc,OAAA,WAAAA,QAAA;IACA;IACA,KAAAvB,SAAA;IACA,KAAAC,QAAA;EACA;EACAuB,OAAA;IACAxB,SAAA,WAAAA,UAAA;MAAA,IAAAyB,KAAA;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,GAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACAnC,UAAA;YAAA;cAAA8B,GAAA,GAAAG,QAAA,CAAAG,IAAA;cACAX,KAAA,CAAAY,aAAA,GAAAP,GAAA,CAAApB,IAAA;cACAe,KAAA,CAAAhB,MAAA,GAAAgB,KAAA,CAAAa,cAAA,CAAAR,GAAA,CAAApB,IAAA;YAAA;YAAA;cAAA,OAAAuB,QAAA,CAAAM,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA;IACA;IACA5B,QAAA,WAAAA,SAAA;MAAA,IAAAuC,MAAA;MAAA,OAAAd,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAa,SAAA;QAAA,IAAAX,GAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAW,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAT,IAAA,GAAAS,SAAA,CAAAR,IAAA;YAAA;cAAAQ,SAAA,CAAAR,IAAA;cAAA,OACAlC,SAAA;YAAA;cAAA6B,GAAA,GAAAa,SAAA,CAAAP,IAAA;cACAI,MAAA,CAAA1B,SAAA,GAAAgB,GAAA,CAAApB,IAAA;YAAA;YAAA;cAAA,OAAAiC,SAAA,CAAAJ,IAAA;UAAA;QAAA,GAAAE,QAAA;MAAA;IACA;IAEA;IACAH,cAAA,WAAAA,eAAA7B,MAAA;MAAA,IAAAmC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;MACA,IAAAf,GAAA;MAAA,IAAAkB,SAAA,GAAAC,0BAAA,CAEAxC,MAAA;QAAAyC,KAAA;MAAA;QAAA,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA;UAAA,IAAAC,KAAA,GAAAJ,KAAA,CAAAK,KAAA;UACA;UACA,IAAAD,KAAA,CAAAE,MAAA;YAAA;UAAA;UAEA,IAAAC,mBAAA,QAAAA,mBAAA,CAAAH,KAAA,CAAAnC,QAAA,EAAAmC,KAAA;UAEA,IAAAA,KAAA,CAAAnC,QAAA,IAAAsC,mBAAA,KAAAH,KAAA,CAAAI,UAAA;YACAJ,KAAA,GAAAG,mBAAA;UACA;UAEA,IAAA/C,IAAA;YACAZ,IAAA,EAAAA,IAAA,CAAA6D,OAAA,CAAAf,QAAA,EAAAU,KAAA,CAAAxD,IAAA;YACA8D,KAAA,EAAAN,KAAA,CAAAO,IAAA,IAAAP,KAAA,CAAAO,IAAA,CAAAD;UAEA;;UAEA;UACA,IAAAN,KAAA,CAAAnC,QAAA;YACAT,IAAA,CAAAS,QAAA,QAAAmB,cAAA,CAAAgB,KAAA,CAAAnC,QAAA,EAAAT,IAAA,CAAAZ,IAAA;UACA;UACAgC,GAAA,CAAAgC,IAAA,CAAApD,IAAA;QACA;MAAA,SAAAqD,GAAA;QAAAf,SAAA,CAAAgB,CAAA,CAAAD,GAAA;MAAA;QAAAf,SAAA,CAAAiB,CAAA;MAAA;MACA,OAAAnC,GAAA;IACA;IACAoC,WAAA,WAAAA,YAAAzD,MAAA;MAAA,IAAA0D,MAAA;MACA,IAAAzD,IAAA;MACAD,MAAA,CAAA2D,OAAA,WAAAd,KAAA;QACA5C,IAAA,CAAAoD,IAAA,CAAAR,KAAA;QACA,IAAAA,KAAA,CAAAnC,QAAA;UACA,IAAAkD,IAAA,GAAAF,MAAA,CAAAD,WAAA,CAAAZ,KAAA,CAAAnC,QAAA;UACA,IAAAkD,IAAA,CAAAvB,MAAA;YACApC,IAAA,MAAA4D,MAAA,CAAAC,kBAAA,CAAA7D,IAAA,GAAA6D,kBAAA,CAAAF,IAAA;UACA;QACA;MACA;MACA,OAAA3D,IAAA;IACA;IACA8D,aAAA,WAAAA,cAAA;MACA,KAAA7D,IAAA,GAAAC,MAAA,CAAAC,MAAA,KAAAR,WAAA;MACA,SAAAoE,KAAA,CAAAC,IAAA;QACA,KAAAD,KAAA,CAAAC,IAAA,CAAAC,eAAA;MACA;MACA,KAAA3D,UAAA;MACA,KAAAD,aAAA;IACA;IACA6D,UAAA,WAAAA,WAAAC,KAAA;MAAA,IAAAC,MAAA;MACA,KAAA9D,UAAA;MACA,KAAAD,aAAA;MACA,KAAAE,aAAA;MACA,KAAAN,IAAA,GAAAZ,SAAA,CAAA8E,KAAA,CAAAE,GAAA;MACA,KAAAC,SAAA;QACA,IAAAvE,MAAA,GAAAqE,MAAA,CAAAxC,cAAA,CAAAwC,MAAA,CAAAnE,IAAA,CAAAF,MAAA;QACAqE,MAAA,CAAAL,KAAA,CAAAC,IAAA,CAAAC,eAAA,CAAAG,MAAA,CAAAZ,WAAA,CAAAzD,MAAA;QACA;QACAqE,MAAA,CAAA7D,aAAA;MACA;IACA;IACAgE,YAAA,WAAAA,aAAAC,IAAA;MAAA,IAAAC,MAAA;MAAA,IAAAC,MAAA,GAAAF,IAAA,CAAAE,MAAA;QAAAL,GAAA,GAAAG,IAAA,CAAAH,GAAA;MACA,KAAAM,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GACAC,IAAA,eAAA/D,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA8D,SAAA;QAAA,OAAA/D,mBAAA,GAAAI,IAAA,UAAA4D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1D,IAAA,GAAA0D,SAAA,CAAAzD,IAAA;YAAA;cAAAyD,SAAA,CAAAzD,IAAA;cAAA,OACAhC,UAAA,CAAA4E,GAAA,CAAAzE,GAAA;YAAA;cACA6E,MAAA,CAAArE,SAAA,CAAA+E,MAAA,CAAAT,MAAA;cACAD,MAAA,CAAAW,QAAA;gBACAN,IAAA;gBACAO,OAAA;cACA;YAAA;YAAA;cAAA,OAAAH,SAAA,CAAArD,IAAA;UAAA;QAAA,GAAAmD,QAAA;MAAA,CACA,IACAM,KAAA,WAAAjC,GAAA;QAAAkC,OAAA,CAAAC,KAAA,CAAAnC,GAAA;MAAA;IACA;IACAoC,YAAA,WAAAA,aAAA1F,MAAA;MAAA,IAAAmC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;MAAA,IAAAuD,WAAA,GAAAvD,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MACA,IAAAjB,GAAA;MAAA,IAAAuE,UAAA,GAAApD,0BAAA,CAEAxC,MAAA;QAAA6F,MAAA;MAAA;QAAA,KAAAD,UAAA,CAAAlD,CAAA,MAAAmD,MAAA,GAAAD,UAAA,CAAAjD,CAAA,IAAAC,IAAA;UAAA,IAAAC,KAAA,GAAAgD,MAAA,CAAA/C,KAAA;UACA,IAAAgD,SAAA,GAAAzG,IAAA,CAAA6D,OAAA,CAAAf,QAAA,EAAAU,KAAA,CAAAxD,IAAA;;UAEA;UACA,IAAAwD,KAAA,CAAAnC,QAAA;YACAmC,KAAA,CAAAnC,QAAA,QAAAgF,YAAA,CAAA7C,KAAA,CAAAnC,QAAA,EAAAoF,SAAA,EAAAH,WAAA;UACA;UAEA,IAAAA,WAAA,CAAAI,QAAA,CAAAD,SAAA,KAAAjD,KAAA,CAAAnC,QAAA,IAAAmC,KAAA,CAAAnC,QAAA,CAAA2B,MAAA;YACAhB,GAAA,CAAAgC,IAAA,CAAAR,KAAA;UACA;QACA;MAAA,SAAAS,GAAA;QAAAsC,UAAA,CAAArC,CAAA,CAAAD,GAAA;MAAA;QAAAsC,UAAA,CAAApC,CAAA;MAAA;MACA,OAAAnC,GAAA;IACA;IACA2E,WAAA,WAAAA,YAAA;MAAA,IAAAC,MAAA;MAAA,OAAAhF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA+E,SAAA;QAAA,IAAAC,MAAA,EAAAR,WAAA,EAAAS,KAAA,EAAAC,cAAA,EAAApG,IAAA,EAAAqG,WAAA,EAAAvG,WAAA,EAAAF,GAAA,EAAAC,IAAA;QAAA,OAAAoB,mBAAA,GAAAI,IAAA,UAAAiF,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA/E,IAAA,GAAA+E,SAAA,CAAA9E,IAAA;YAAA;cACAyE,MAAA,GAAAF,MAAA,CAAA1F,UAAA;cAEAoF,WAAA,GAAAM,MAAA,CAAAjC,KAAA,CAAAC,IAAA,CAAAwC,cAAA;cACAR,MAAA,CAAA/F,IAAA,CAAAF,MAAA,GAAAiG,MAAA,CAAAP,YAAA,CAAApG,SAAA,CAAA2G,MAAA,CAAArE,aAAA,QAAA+D,WAAA;cAAA,KAEAQ,MAAA;gBAAAK,SAAA,CAAA9E,IAAA;gBAAA;cAAA;cAAA8E,SAAA,CAAA9E,IAAA;cAAA,OACA/B,UAAA,CAAAsG,MAAA,CAAA/F,IAAA,CAAAL,GAAA,EAAAoG,MAAA,CAAA/F,IAAA;YAAA;cACAkG,KAAA;YAAA;cAAA,MAAAA,KAAA,GAAAH,MAAA,CAAA5F,SAAA,CAAAgC,MAAA;gBAAAmE,SAAA,CAAA9E,IAAA;gBAAA;cAAA;cAAA,MACAuE,MAAA,CAAA5F,SAAA,CAAA+F,KAAA,EAAAvG,GAAA,KAAAoG,MAAA,CAAA/F,IAAA,CAAAL,GAAA;gBAAA2G,SAAA,CAAA9E,IAAA;gBAAA;cAAA;cACAuE,MAAA,CAAA5F,SAAA,CAAA+E,MAAA,CAAAgB,KAAA,KAAAjG,MAAA,CAAAC,MAAA,KAAA6F,MAAA,CAAA/F,IAAA;cAAA,OAAAsG,SAAA,CAAAE,MAAA;YAAA;cAFAN,KAAA;cAAAI,SAAA,CAAA9E,IAAA;cAAA;YAAA;cAAA8E,SAAA,CAAA9E,IAAA;cAAA;YAAA;cAAA8E,SAAA,CAAA9E,IAAA;cAAA,OAOAjC,OAAA,CAAAwG,MAAA,CAAA/F,IAAA;YAAA;cAAAmG,cAAA,GAAAG,SAAA,CAAA7E,IAAA;cAAA1B,IAAA,GAAAoG,cAAA,CAAApG,IAAA;cACAgG,MAAA,CAAA/F,IAAA,CAAAL,GAAA,GAAAI,IAAA,CAAAJ,GAAA;cACAoG,MAAA,CAAA5F,SAAA,CAAAgD,IAAA,CAAA4C,MAAA,CAAA/F,IAAA;YAAA;cAAAoG,WAAA,GAGAL,MAAA,CAAA/F,IAAA,EAAAH,WAAA,GAAAuG,WAAA,CAAAvG,WAAA,EAAAF,GAAA,GAAAyG,WAAA,CAAAzG,GAAA,EAAAC,IAAA,GAAAwG,WAAA,CAAAxG,IAAA;cACAmG,MAAA,CAAA3F,aAAA;cACA2F,MAAA,CAAAU,OAAA;gBACAxD,KAAA;gBACAyD,wBAAA;gBACAtB,OAAA,kCAAAzB,MAAA,CACAhE,GAAA,0CAAAgE,MAAA,CACA/D,IAAA,4CAAA+D,MAAA,CACA9D,WAAA,uBACA;gBACAgF,IAAA;cACA;YAAA;YAAA;cAAA,OAAAyB,SAAA,CAAA1E,IAAA;UAAA;QAAA,GAAAoE,QAAA;MAAA;IACA;IACA;IACAlD,mBAAA,WAAAA,oBAAA;MAAA,IAAAtC,QAAA,GAAA0B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;MAAA,IAAAyE,MAAA,GAAAzE,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MACA,IAAAwE,YAAA;MACA,IAAAC,eAAA,GAAArG,QAAA,CAAAsG,MAAA,WAAAC,IAAA;QAAA,QAAAA,IAAA,CAAAlE,MAAA;MAAA;;MAEA;MACA,IAAAgE,eAAA,CAAA1E,MAAA;QACAyE,YAAA,GAAAC,eAAA;QACAD,YAAA,CAAAzH,IAAA,GAAAA,IAAA,CAAA6D,OAAA,CAAA2D,MAAA,CAAAxH,IAAA,EAAAyH,YAAA,CAAAzH,IAAA;QACA,OAAAyH,YAAA;MACA;;MAEA;MACA,IAAAC,eAAA,CAAA1E,MAAA;QACAyE,YAAA,GAAAI,aAAA,CAAAA,aAAA,KAAAL,MAAA;UAAAxH,IAAA;UAAA8H,iBAAA;QAAA;QACA,OAAAL,YAAA;MACA;MAEA;IACA;EACA;AACA"}]}