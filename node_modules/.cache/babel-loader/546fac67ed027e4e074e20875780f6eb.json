{"remainingRequest":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/src/router/index.js","dependencies":[{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/src/router/index.js","mtime":1677293736796},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/babel.config.js","mtime":1677293736750},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js","mtime":1677293886978},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":1677293894163}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIGZyb20gIi9Vc2Vycy9hMS9EZXNrdG9wL2NvZGUvZ29sYW5nL3NyYy92dWUtZWxlbWVudC1hZG1pbi9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktcGx1Z2luLWJhYmVsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmltcG9ydCBSb3V0ZXIgZnJvbSAndnVlLXJvdXRlcic7ClZ1ZS51c2UoUm91dGVyKTsKCi8qIExheW91dCAqLwppbXBvcnQgTGF5b3V0IGZyb20gJ0AvbGF5b3V0JzsKCi8qIFJvdXRlciBNb2R1bGVzICovCmltcG9ydCBjb21wb25lbnRzUm91dGVyIGZyb20gJy4vbW9kdWxlcy9jb21wb25lbnRzJzsKaW1wb3J0IGNoYXJ0c1JvdXRlciBmcm9tICcuL21vZHVsZXMvY2hhcnRzJzsKaW1wb3J0IHRhYmxlUm91dGVyIGZyb20gJy4vbW9kdWxlcy90YWJsZSc7CmltcG9ydCBuZXN0ZWRSb3V0ZXIgZnJvbSAnLi9tb2R1bGVzL25lc3RlZCc7CgovKioKICogTm90ZTogc3ViLW1lbnUgb25seSBhcHBlYXIgd2hlbiByb3V0ZSBjaGlsZHJlbi5sZW5ndGggPj0gMQogKiBEZXRhaWwgc2VlOiBodHRwczovL3BhbmppYWNoZW4uZ2l0aHViLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvZ3VpZGUvZXNzZW50aWFscy9yb3V0ZXItYW5kLW5hdi5odG1sCiAqCiAqIGhpZGRlbjogdHJ1ZSAgICAgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgaXRlbSB3aWxsIG5vdCBzaG93IGluIHRoZSBzaWRlYmFyKGRlZmF1bHQgaXMgZmFsc2UpCiAqIGFsd2F5c1Nob3c6IHRydWUgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgd2lsbCBhbHdheXMgc2hvdyB0aGUgcm9vdCBtZW51CiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2V0IGFsd2F5c1Nob3csIHdoZW4gaXRlbSBoYXMgbW9yZSB0aGFuIG9uZSBjaGlsZHJlbiByb3V0ZSwKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgYmVjb21lcyBuZXN0ZWQgbW9kZSwgb3RoZXJ3aXNlIG5vdCBzaG93IHRoZSByb290IG1lbnUKICogcmVkaXJlY3Q6IG5vUmVkaXJlY3QgICAgICAgICAgIGlmIHNldCBub1JlZGlyZWN0IHdpbGwgbm8gcmVkaXJlY3QgaW4gdGhlIGJyZWFkY3J1bWIKICogbmFtZToncm91dGVyLW5hbWUnICAgICAgICAgICAgIHRoZSBuYW1lIGlzIHVzZWQgYnkgPGtlZXAtYWxpdmU+IChtdXN0IHNldCEhISkKICogbWV0YSA6IHsKICAgIHJvbGVzOiBbJ2FkbWluJywnZWRpdG9yJ10gICAgY29udHJvbCB0aGUgcGFnZSByb2xlcyAoeW91IGNhbiBzZXQgbXVsdGlwbGUgcm9sZXMpCiAgICB0aXRsZTogJ3RpdGxlJyAgICAgICAgICAgICAgIHRoZSBuYW1lIHNob3cgaW4gc2lkZWJhciBhbmQgYnJlYWRjcnVtYiAocmVjb21tZW5kIHNldCkKICAgIGljb246ICdzdmctbmFtZScvJ2VsLWljb24teCcgdGhlIGljb24gc2hvdyBpbiB0aGUgc2lkZWJhcgogICAgbm9DYWNoZTogdHJ1ZSAgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgdGhlIHBhZ2Ugd2lsbCBubyBiZSBjYWNoZWQoZGVmYXVsdCBpcyBmYWxzZSkKICAgIGFmZml4OiB0cnVlICAgICAgICAgICAgICAgICAgaWYgc2V0IHRydWUsIHRoZSB0YWcgd2lsbCBhZmZpeCBpbiB0aGUgdGFncy12aWV3CiAgICBicmVhZGNydW1iOiBmYWxzZSAgICAgICAgICAgIGlmIHNldCBmYWxzZSwgdGhlIGl0ZW0gd2lsbCBoaWRkZW4gaW4gYnJlYWRjcnVtYihkZWZhdWx0IGlzIHRydWUpCiAgICBhY3RpdmVNZW51OiAnL2V4YW1wbGUvbGlzdCcgIGlmIHNldCBwYXRoLCB0aGUgc2lkZWJhciB3aWxsIGhpZ2hsaWdodCB0aGUgcGF0aCB5b3Ugc2V0CiAgfQogKi8KCi8qKgogKiBjb25zdGFudFJvdXRlcwogKiBhIGJhc2UgcGFnZSB0aGF0IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiByZXF1aXJlbWVudHMKICogYWxsIHJvbGVzIGNhbiBiZSBhY2Nlc3NlZAogKi8KZXhwb3J0IHZhciBjb25zdGFudFJvdXRlcyA9IFt7CiAgcGF0aDogJy9yZWRpcmVjdCcsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgaGlkZGVuOiB0cnVlLAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJy9yZWRpcmVjdC86cGF0aCguKiknLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9yZWRpcmVjdC9pbmRleCcpKTsKICAgICAgfSk7CiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvbG9naW4nLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9sb2dpbi9pbmRleCcpKTsKICAgIH0pOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0sIHsKICBwYXRoOiAnL2F1dGgtcmVkaXJlY3QnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9sb2dpbi9hdXRoLXJlZGlyZWN0JykpOwogICAgfSk7CiAgfSwKICBoaWRkZW46IHRydWUKfSwgewogIHBhdGg6ICcvNDA0JywKICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXJyb3ItcGFnZS80MDQnKSk7CiAgICB9KTsKICB9LAogIGhpZGRlbjogdHJ1ZQp9LCB7CiAgcGF0aDogJy80MDEnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9lcnJvci1wYWdlLzQwMScpKTsKICAgIH0pOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0sIHsKICBwYXRoOiAnLycsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvZGFzaGJvYXJkJywKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdkYXNoYm9hcmQnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9kYXNoYm9hcmQvaW5kZXgnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdEYXNoYm9hcmQnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ0Rhc2hib2FyZCcsCiAgICAgIGljb246ICdkYXNoYm9hcmQnLAogICAgICBhZmZpeDogdHJ1ZQogICAgfQogIH1dCn0sIHsKICBwYXRoOiAnL2RvY3VtZW50YXRpb24nLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2luZGV4JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZG9jdW1lbnRhdGlvbi9pbmRleCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ0RvY3VtZW50YXRpb24nLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ0RvY3VtZW50YXRpb24nLAogICAgICBpY29uOiAnZG9jdW1lbnRhdGlvbicsCiAgICAgIGFmZml4OiB0cnVlCiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvZ3VpZGUnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIHJlZGlyZWN0OiAnL2d1aWRlL2luZGV4JywKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdpbmRleCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL2d1aWRlL2luZGV4JykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnR3VpZGUnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ0d1aWRlJywKICAgICAgaWNvbjogJ2d1aWRlJywKICAgICAgbm9DYWNoZTogdHJ1ZQogICAgfQogIH1dCn0sIHsKICBwYXRoOiAnL3Byb2ZpbGUnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIHJlZGlyZWN0OiAnL3Byb2ZpbGUvaW5kZXgnLAogIGhpZGRlbjogdHJ1ZSwKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdpbmRleCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL3Byb2ZpbGUvaW5kZXgnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdQcm9maWxlJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdQcm9maWxlJywKICAgICAgaWNvbjogJ3VzZXInLAogICAgICBub0NhY2hlOiB0cnVlCiAgICB9CiAgfV0KfV07CgovKioKICogYXN5bmNSb3V0ZXMKICogdGhlIHJvdXRlcyB0aGF0IG5lZWQgdG8gYmUgZHluYW1pY2FsbHkgbG9hZGVkIGJhc2VkIG9uIHVzZXIgcm9sZXMKICovCmV4cG9ydCB2YXIgYXN5bmNSb3V0ZXMgPSBbewogIHBhdGg6ICcvcGVybWlzc2lvbicsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvcGVybWlzc2lvbi9wYWdlJywKICBhbHdheXNTaG93OiB0cnVlLAogIC8vIHdpbGwgYWx3YXlzIHNob3cgdGhlIHJvb3QgbWVudQogIG5hbWU6ICdQZXJtaXNzaW9uJywKICBtZXRhOiB7CiAgICB0aXRsZTogJ1Blcm1pc3Npb24nLAogICAgaWNvbjogJ2xvY2snLAogICAgcm9sZXM6IFsnYWRtaW4nLCAnZWRpdG9yJ10gLy8geW91IGNhbiBzZXQgcm9sZXMgaW4gcm9vdCBuYXYKICB9LAoKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdwYWdlJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvcGVybWlzc2lvbi9wYWdlJykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnUGFnZVBlcm1pc3Npb24nLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ1BhZ2UgUGVybWlzc2lvbicsCiAgICAgIHJvbGVzOiBbJ2FkbWluJ10gLy8gb3IgeW91IGNhbiBvbmx5IHNldCByb2xlcyBpbiBzdWIgbmF2CiAgICB9CiAgfSwgewogICAgcGF0aDogJ2RpcmVjdGl2ZScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL3Blcm1pc3Npb24vZGlyZWN0aXZlJykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnRGlyZWN0aXZlUGVybWlzc2lvbicsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnRGlyZWN0aXZlIFBlcm1pc3Npb24nCiAgICAgIC8vIGlmIGRvIG5vdCBzZXQgcm9sZXMsIG1lYW5zOiB0aGlzIHBhZ2UgZG9lcyBub3QgcmVxdWlyZSBwZXJtaXNzaW9uCiAgICB9CiAgfSwgewogICAgcGF0aDogJ3JvbGUnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9wZXJtaXNzaW9uL3JvbGUnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdSb2xlUGVybWlzc2lvbicsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnUm9sZSBQZXJtaXNzaW9uJywKICAgICAgcm9sZXM6IFsnYWRtaW4nXQogICAgfQogIH1dCn0sIHsKICBwYXRoOiAnL2ljb24nLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2luZGV4JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvaWNvbnMvaW5kZXgnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdJY29ucycsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnSWNvbnMnLAogICAgICBpY29uOiAnaWNvbicsCiAgICAgIG5vQ2FjaGU6IHRydWUKICAgIH0KICB9XQp9LCAvKiogd2hlbiB5b3VyIHJvdXRpbmcgbWFwIGlzIHRvbyBsb25nLCB5b3UgY2FuIHNwbGl0IGl0IGludG8gc21hbGwgbW9kdWxlcyAqKi8KY29tcG9uZW50c1JvdXRlciwgY2hhcnRzUm91dGVyLCBuZXN0ZWRSb3V0ZXIsIHRhYmxlUm91dGVyLCB7CiAgcGF0aDogJy9leGFtcGxlJywKICBjb21wb25lbnQ6IExheW91dCwKICByZWRpcmVjdDogJy9leGFtcGxlL2xpc3QnLAogIG5hbWU6ICdFeGFtcGxlJywKICBtZXRhOiB7CiAgICB0aXRsZTogJ0V4YW1wbGUnLAogICAgaWNvbjogJ2VsLWljb24tcy1oZWxwJwogIH0sCiAgY2hpbGRyZW46IFt7CiAgICBwYXRoOiAnY3JlYXRlJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXhhbXBsZS9jcmVhdGUnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdDcmVhdGVBcnRpY2xlJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdDcmVhdGUgQXJ0aWNsZScsCiAgICAgIGljb246ICdlZGl0JwogICAgfQogIH0sIHsKICAgIHBhdGg6ICdlZGl0LzppZChcXGQrKScsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL2V4YW1wbGUvZWRpdCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ0VkaXRBcnRpY2xlJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdFZGl0IEFydGljbGUnLAogICAgICBub0NhY2hlOiB0cnVlLAogICAgICBhY3RpdmVNZW51OiAnL2V4YW1wbGUvbGlzdCcKICAgIH0sCiAgICBoaWRkZW46IHRydWUKICB9LCB7CiAgICBwYXRoOiAnbGlzdCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL2V4YW1wbGUvbGlzdCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ0FydGljbGVMaXN0JywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdBcnRpY2xlIExpc3QnLAogICAgICBpY29uOiAnbGlzdCcKICAgIH0KICB9XQp9LCB7CiAgcGF0aDogJy90YWInLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2luZGV4JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvdGFiL2luZGV4JykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnVGFiJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdUYWInLAogICAgICBpY29uOiAndGFiJwogICAgfQogIH1dCn0sIHsKICBwYXRoOiAnL2Vycm9yJywKICBjb21wb25lbnQ6IExheW91dCwKICByZWRpcmVjdDogJ25vUmVkaXJlY3QnLAogIG5hbWU6ICdFcnJvclBhZ2VzJywKICBtZXRhOiB7CiAgICB0aXRsZTogJ0Vycm9yIFBhZ2VzJywKICAgIGljb246ICc0MDQnCiAgfSwKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICc0MDEnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9lcnJvci1wYWdlLzQwMScpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ1BhZ2U0MDEnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJzQwMScsCiAgICAgIG5vQ2FjaGU6IHRydWUKICAgIH0KICB9LCB7CiAgICBwYXRoOiAnNDA0JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXJyb3ItcGFnZS80MDQnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdQYWdlNDA0JywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICc0MDQnLAogICAgICBub0NhY2hlOiB0cnVlCiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvZXJyb3ItbG9nJywKICBjb21wb25lbnQ6IExheW91dCwKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdsb2cnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9lcnJvci1sb2cvaW5kZXgnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5hbWU6ICdFcnJvckxvZycsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnRXJyb3IgTG9nJywKICAgICAgaWNvbjogJ2J1ZycKICAgIH0KICB9XQp9LCB7CiAgcGF0aDogJy9leGNlbCcsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvZXhjZWwvZXhwb3J0LWV4Y2VsJywKICBuYW1lOiAnRXhjZWwnLAogIG1ldGE6IHsKICAgIHRpdGxlOiAnRXhjZWwnLAogICAgaWNvbjogJ2V4Y2VsJwogIH0sCiAgY2hpbGRyZW46IFt7CiAgICBwYXRoOiAnZXhwb3J0LWV4Y2VsJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXhjZWwvZXhwb3J0LWV4Y2VsJykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnRXhwb3J0RXhjZWwnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ0V4cG9ydCBFeGNlbCcKICAgIH0KICB9LCB7CiAgICBwYXRoOiAnZXhwb3J0LXNlbGVjdGVkLWV4Y2VsJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXhjZWwvc2VsZWN0LWV4Y2VsJykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnU2VsZWN0RXhjZWwnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ0V4cG9ydCBTZWxlY3RlZCcKICAgIH0KICB9LCB7CiAgICBwYXRoOiAnZXhwb3J0LW1lcmdlLWhlYWRlcicsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL2V4Y2VsL21lcmdlLWhlYWRlcicpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ01lcmdlSGVhZGVyJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdNZXJnZSBIZWFkZXInCiAgICB9CiAgfSwgewogICAgcGF0aDogJ3VwbG9hZC1leGNlbCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL2V4Y2VsL3VwbG9hZC1leGNlbCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ1VwbG9hZEV4Y2VsJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdVcGxvYWQgRXhjZWwnCiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvemlwJywKICBjb21wb25lbnQ6IExheW91dCwKICByZWRpcmVjdDogJy96aXAvZG93bmxvYWQnLAogIGFsd2F5c1Nob3c6IHRydWUsCiAgbmFtZTogJ1ppcCcsCiAgbWV0YTogewogICAgdGl0bGU6ICdaaXAnLAogICAgaWNvbjogJ3ppcCcKICB9LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2Rvd25sb2FkJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvemlwL2luZGV4JykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnRXhwb3J0WmlwJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdFeHBvcnQgWmlwJwogICAgfQogIH1dCn0sIHsKICBwYXRoOiAnL3BkZicsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvcGRmL2luZGV4JywKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdpbmRleCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdAL3ZpZXdzL3BkZi9pbmRleCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ1BERicsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnUERGJywKICAgICAgaWNvbjogJ3BkZicKICAgIH0KICB9XQp9LCB7CiAgcGF0aDogJy9wZGYvZG93bmxvYWQnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9wZGYvZG93bmxvYWQnKSk7CiAgICB9KTsKICB9LAogIGhpZGRlbjogdHJ1ZQp9LCB7CiAgcGF0aDogJy90aGVtZScsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgY2hpbGRyZW46IFt7CiAgICBwYXRoOiAnaW5kZXgnLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy90aGVtZS9pbmRleCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgbmFtZTogJ1RoZW1lJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdUaGVtZScsCiAgICAgIGljb246ICd0aGVtZScKICAgIH0KICB9XQp9LCB7CiAgcGF0aDogJy9jbGlwYm9hcmQnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2luZGV4JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvY2xpcGJvYXJkL2luZGV4JykpOwogICAgICB9KTsKICAgIH0sCiAgICBuYW1lOiAnQ2xpcGJvYXJkRGVtbycsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAnQ2xpcGJvYXJkJywKICAgICAgaWNvbjogJ2NsaXBib2FyZCcKICAgIH0KICB9XQp9LCB7CiAgcGF0aDogJ2V4dGVybmFsLWxpbmsnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9QYW5KaWFDaGVuL3Z1ZS1lbGVtZW50LWFkbWluJywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICdFeHRlcm5hbCBMaW5rJywKICAgICAgaWNvbjogJ2xpbmsnCiAgICB9CiAgfV0KfSwKLy8gNDA0IHBhZ2UgbXVzdCBiZSBwbGFjZWQgYXQgdGhlIGVuZCAhISEKewogIHBhdGg6ICcqJywKICByZWRpcmVjdDogJy80MDQnLAogIGhpZGRlbjogdHJ1ZQp9XTsKdmFyIGNyZWF0ZVJvdXRlciA9IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcigpIHsKICByZXR1cm4gbmV3IFJvdXRlcih7CiAgICAvLyBtb2RlOiAnaGlzdG9yeScsIC8vIHJlcXVpcmUgc2VydmljZSBzdXBwb3J0CiAgICBzY3JvbGxCZWhhdmlvcjogZnVuY3Rpb24gc2Nyb2xsQmVoYXZpb3IoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgeTogMAogICAgICB9OwogICAgfSwKICAgIHJvdXRlczogY29uc3RhbnRSb3V0ZXMKICB9KTsKfTsKdmFyIHJvdXRlciA9IGNyZWF0ZVJvdXRlcigpOwoKLy8gRGV0YWlsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzEyMzQjaXNzdWVjb21tZW50LTM1Nzk0MTQ2NQpleHBvcnQgZnVuY3Rpb24gcmVzZXRSb3V0ZXIoKSB7CiAgdmFyIG5ld1JvdXRlciA9IGNyZWF0ZVJvdXRlcigpOwogIHJvdXRlci5tYXRjaGVyID0gbmV3Um91dGVyLm1hdGNoZXI7IC8vIHJlc2V0IHJvdXRlcgp9CgpleHBvcnQgZGVmYXVsdCByb3V0ZXI7"},null]}