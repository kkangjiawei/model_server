{"remainingRequest":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/a1/Desktop/code/golang/src/vue-element-admin/src/components/ImageCropper/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/src/components/ImageCropper/index.vue","mtime":1677293736766},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/babel.config.js","mtime":1677293736750},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/thread-loader/dist/cjs.js","mtime":1677293886978},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":1677293894163},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":1677293886981},{"path":"/Users/a1/Desktop/code/golang/src/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":1677293892832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}